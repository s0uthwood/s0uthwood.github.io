<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reverse on s0uthwood&#39;s Blog</title>
    <link>/categories/reverse/</link>
    <description>Recent content in Reverse on s0uthwood&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 04 Jul 2022 16:01:21 +0800</lastBuildDate><atom:link href="/categories/reverse/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Google CTF 2022 MIXED Writeup</title>
      <link>/post/google-ctf-2022-mixed-writeup/</link>
      <pubDate>Mon, 04 Jul 2022 16:01:21 +0800</pubDate>
      
      <guid>/post/google-ctf-2022-mixed-writeup/</guid>
      <description>This challenge gives a .pyc file and a Python 3.11 alpha7 based patch file.
Patch This patch file mainly patches the opcode.py file. After the patch, opcode.py file first generated two random lists and modifies the opcode according to the values of the lists. Finally, it will output the new opcode to a tmp file.
+import sys +if &amp;#34;generate_opcode_h&amp;#34; in sys.argv[0]: + random = __import__(&amp;#34;random&amp;#34;) + random.shuffle(perm) + random.shuffle(perm2) -def_op(&amp;#39;CACHE&amp;#39;, 0) -def_op(&amp;#39;POP_TOP&amp;#39;, 1) -def_op(&amp;#39;PUSH_NULL&amp;#39;, 2) +def_op(&amp;#39;CACHE&amp;#39;, perm[0]) +def_op(&amp;#39;POP_TOP&amp;#39;, perm[1]) +def_op(&amp;#39;PUSH_NULL&amp;#39;, perm[2]) +with open(&amp;#34;/tmp/opcode_map&amp;#34;, &amp;#34;w&amp;#34;) as f: + for x, y in enumerate(opname): + f.</description>
    </item>
    
    <item>
      <title>DefCamp2022 can-you-crack-this Writeup</title>
      <link>/post/defcamp2022-can-you-crack-this-wp/</link>
      <pubDate>Mon, 14 Feb 2022 23:08:32 +0800</pubDate>
      
      <guid>/post/defcamp2022-can-you-crack-this-wp/</guid>
      <description>can-you-crack-this The main function reads the input and constrains the length.
v11 = std::operator&amp;lt;&amp;lt;&amp;lt;std::char_traits&amp;lt;char&amp;gt;&amp;gt;(&amp;amp;std::cout, &amp;#34;Enter your public key: &amp;#34;); std::ostream::operator&amp;lt;&amp;lt;(v11, std::endl&amp;lt;char,std::char_traits&amp;lt;char&amp;gt;&amp;gt;); std::operator&amp;gt;&amp;gt;&amp;lt;char&amp;gt;(&amp;amp;std::cin, public_key); if ( (unsigned __int64)std::string::length(public_key) &amp;gt;= 20 ) { v9 = std::operator&amp;lt;&amp;lt;&amp;lt;std::char_traits&amp;lt;char&amp;gt;&amp;gt;(&amp;amp;std::cout, &amp;#34;Enter serial key:&amp;#34;); std::ostream::operator&amp;lt;&amp;lt;(v9, std::endl&amp;lt;char,std::char_traits&amp;lt;char&amp;gt;&amp;gt;); std::operator&amp;gt;&amp;gt;&amp;lt;char&amp;gt;(&amp;amp;std::cin, serial_key); v8 = 4 * std::string::length(public_key) - 1; if ( v8 == std::string::length(serial_key) ) { std::string::basic_string(str_public_key, public_key); std::string::basic_string(str_serial_key, serial_key); v6 = verify_serial((__int64)str_public_key, (__int64)str_serial_key); std::string::~string(str_serial_key); std::string::~string(str_public_key); if ( v6 ) { v5 = std::operator&amp;lt;&amp;lt;&amp;lt;std::char_traits&amp;lt;char&amp;gt;&amp;gt;(&amp;amp;std::cout, &amp;#34;Serial accepted.</description>
    </item>
    
    <item>
      <title>Reversing.kr writeups</title>
      <link>/post/reversing-kr-writeups/</link>
      <pubDate>Thu, 13 Jan 2022 20:41:50 +0800</pubDate>
      
      <guid>/post/reversing-kr-writeups/</guid>
      <description>CSHOP 按一下回车就通关了
如果要查看逻辑的话，需要先使用 de4dot 脱壳，然后用 dnSpy 打开
private void Form1_Load(object sender, EventArgs e) { this.lblSu.Text = &amp;#34; &amp;#34;; this.lblGu.Text = &amp;#34; &amp;#34;; this.lblNu.Text = &amp;#34; &amp;#34;; this.lblKu.Text = &amp;#34; &amp;#34;; this.lblZu.Text = &amp;#34; &amp;#34;; this.lblMu.Text = &amp;#34; &amp;#34;; this.lblTu.Text = &amp;#34; &amp;#34;; this.ppppp.Text = &amp;#34; &amp;#34;; this.lblGu.Text = &amp;#34; &amp;#34;; this.lblQu.Text = &amp;#34; &amp;#34;; this.ppppp.Text = &amp;#34; &amp;#34;; this.lblTu.Text = &amp;#34; &amp;#34;; this.lblXu.Text = &amp;#34; &amp;#34;; } // Token: 0x06000004 RID: 4 RVA: 0x000021B0 File Offset: 0x000003B0 	private void btnStart_Click(object sender, EventArgs e) { this.</description>
    </item>
    
    <item>
      <title>Two Challenges in KCTF2021 Fall</title>
      <link>/post/two-challenges-in-kctf2021-fall/</link>
      <pubDate>Thu, 23 Dec 2021 22:23:17 +0800</pubDate>
      
      <guid>/post/two-challenges-in-kctf2021-fall/</guid>
      <description>有些题还是很值得补的，最近没什么时间，假期补吧（
第一题 签到 这题还是比较容易的，需要一点点动调的经验
上张队友的截图吧，懒得自己截了

动调看看内存就知道，流程是：
serial-&amp;gt;十进制-&amp;gt;与name的crc异或-&amp;gt;计算crc
最后需要是一个固定的值，于是只需要想办法反解就行了
这里注意到了一个事情，那就是图中看似是对 v6 的 crc 结果做了约束，其实是对 v6 本身进行了约束
由于题目给了一个实例的 name 和 serial，我们只需要动调拿到这个的 v6，就知道能通过验证的 v6 是多少了
接下来动调拿一下 KCTF 的 crc，这个的结果再异或一下目标的 v6，就得到serial了
 靠记忆写的，希望没错
 第二题 迷失丛林  这题就直接放提交的wp了
 很容易定位到程序的输入

输入长度为32，需要通过 sub_4014A0, sub_401580 的验证
4014A0 较为简单，是个经典的hexstr转成char存到 4041F0 这个地址，最后的16是计算转换后的长度，所以输入就是 [0-9A-F]{32}
随后将输入的前八字节存入 404000 中，剩下的部分传参进 sub_401580
要想让该函数返回1，需要先通过如下的if验证

简单看一下使用的变量，应该是对前八字节的输入进行的验证

结合动调发现大概就是根据404000数组，构成一个 &amp;lt;value, index&amp;gt; 的结构，两两存放到404420当中
分析了一下404000数组的作用和特征，发现这个数组应该是构成一个环状的结构（以当前数值作为索引寻找下一个数），猜测不能有重复的数字，否则可能会构成小循环之类的，用脚本验证了一下发现后面248个数字果然没有重复，于是将前八字节的取值可能锁定到了 0x1e, 0x28, 0x4b, 0x6d, 0x8c, 0xa3, 0xd2, 0xfb 中，总共有 $8!</description>
    </item>
    
    <item>
      <title>All Solves During a Weekend</title>
      <link>/post/all-solves-during-a-weekend/</link>
      <pubDate>Mon, 13 Dec 2021 19:37:54 +0800</pubDate>
      
      <guid>/post/all-solves-during-a-weekend/</guid>
      <description>打美团 CTF 的时候才意识到，有一种坐牢叫AK
 [MTCTF 4th]wow 先进行脱壳，因为脱壳后用的是绝对地址，而加载的时候是动态加载，所有没有办法调试，那就直接静态看吧
JUMPOUT 那里看一下汇编，发现有一个天堂之门
push 0x33call $+5add [esp+84h+var_84], 5retf直接把后面的数据全 dump 出来，然后用 ida64 打开
void __fastcall sub_0(unsigned int *a1) { unsigned int v1; // er9  int v2; // ebp  unsigned int v3; // esi  unsigned int *v4; // rdi  unsigned int *v5; // r10  unsigned int v6; // ebx  unsigned int i; // er11  unsigned int v8; // er8  int v9; // edx  unsigned int v10; // eax  unsigned int v11; // er9  unsigned int v12; // er8  int v13; // ebx  int v14; // ebx  int v15; // ebx  int v16; // edx  unsigned int v17; // eax  unsigned int v18; // er9  v1 = a1[8]; v2 = 12; v3 = 0; while ( 1 ) { v3 += 1732584193; v4 = a1 + 1; v5 = a1; v6 = v3 &amp;gt;&amp;gt; 2; for ( i = 0; i &amp;lt; 8; ++i ) { v8 = *v4; if ( (((unsigned __int8)i ^ (unsigned __int8)v6) &amp;amp; 3) !</description>
    </item>
    
    <item>
      <title>DragonCTF Runofthemill Writeup</title>
      <link>/post/dragonctf-runofthemill-writeup/</link>
      <pubDate>Fri, 10 Dec 2021 02:01:06 +0000</pubDate>
      
      <guid>/post/dragonctf-runofthemill-writeup/</guid>
      <description>题目分析 获取输入
v1 = sys_read(0, byte_412000, 0x40uLL); 中间计算
byte_412000[42] = __ROR1__(byte_412000[42], 4); *(_DWORD *)&amp;amp;byte_412000[44] ^= 0x4EC10FC6u; *(_WORD *)&amp;amp;byte_412000[15] ^= 0xEBFFu; *(_DWORD *)&amp;amp;byte_412000[38] -= 1698263770; // 以下省略 最后的验证
v9 = byte_412000; v10 = byte_412050; v11 = 64LL; v12 = 0; do { v12 |= *v10++ ^ *v9++; --v11; } while ( v11 ); Angr求解 还是很容易看懂的，主要是如何求解
一种思路是把汇编反过来，pizza爷用的是这种做法，于是就写了个Angr喝茶去了
Angr用的是手动往全局变量注入符号，然后在验证前停止，手动添加约束，wp中的写法是直接用程序中的验证，并添加了 LAZY_SOLVES 参数，学到了
之前用自己脚本跑的适合发现一直是 unsat，以为Angr会有问题，但后来发现有个wp就是用的Angr
于是掏出了之前写的脚本做了一些尝试
from angr import *import claripyimport binasciiinput_length = 56base_addr = 0x400000proj = Project(&#39;runofthemill&#39;, main_opts={&amp;quot;base_addr&amp;quot;: base_addr})start_addr = 0x401054state = proj.</description>
    </item>
    
    <item>
      <title>Learn Basic Signal from DNUICTF easyre</title>
      <link>/post/learn-basic-signal-from-dnuictf-easyre/</link>
      <pubDate>Thu, 09 Dec 2021 15:05:55 +0000</pubDate>
      
      <guid>/post/learn-basic-signal-from-dnuictf-easyre/</guid>
      <description>一些信号量函数的学习 信号量的注册在init函数中
v2.sa_handler = (__sighandler_t)sub_400E1D; v2.sa_flags = 4; sigaction(34, &amp;amp;v2, &amp;amp;v1); sigaction() 函数定义为
int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact); sigaction 结构体定义如下
struct sigaction { void (*sa_handler) (int); sigset_t sa_mask; int sa_flags; // 用来设置信号处理的相关操作  void (*sa_restorer) (void); } 关于 sa_flags 的定义如下 (from linux/include/uapi/asm-generic/signal-defs.h)
#ifndef SA_NOCLDSTOP #define SA_NOCLDSTOP	0x00000001 #endif #ifndef SA_NOCLDWAIT #define SA_NOCLDWAIT	0x00000002 #endif #ifndef SA_SIGINFO #define SA_SIGINFO	0x00000004 #endif /* 0x00000008 used on alpha, mips, parisc */ /* 0x00000010 used on alpha, parisc */ /* 0x00000020 used on alpha, parisc, sparc */ /* 0x00000040 used on alpha, parisc */ /* 0x00000080 used on parisc */ /* 0x00000100 used on sparc */ /* 0x00000200 used on sparc */ #define SA_UNSUPPORTED	0x00000400 #define SA_EXPOSE_TAGBITS	0x00000800 /* 0x00010000 used on mips */ /* 0x00800000 used for internal SA_IMMUTABLE */ /* 0x01000000 used on x86 */ /* 0x02000000 used on x86 */ /* * New architectures should not define the obsolete *	SA_RESTORER	0x04000000 */ #ifndef SA_ONSTACK #define SA_ONSTACK	0x08000000 #endif #ifndef SA_RESTART #define SA_RESTART	0x10000000 #endif #ifndef SA_NODEFER #define SA_NODEFER	0x40000000 #endif #ifndef SA_RESETHAND #define SA_RESETHAND	0x80000000 #endif 题目中使用的是 SA_SIGINFO，对信号处理程序提供了附加信息：一个指向 siginfo 结构的指针以及一个指向上下文标识符的指针</description>
    </item>
    
    <item>
      <title>Resent RE Challenge</title>
      <link>/post/resent-re-challenge/</link>
      <pubDate>Tue, 23 Nov 2021 14:06:23 +0000</pubDate>
      
      <guid>/post/resent-re-challenge/</guid>
      <description>[N1CTF 2021]babyrust [N1CTF 2021]Py [L3HCTF 2021]double-joy [L3HCTF 2021]Load [hack.lu]pycoin [hack.lu]atareee  TODO:
 [L3HCTF 2021]idaaaaaaaa  [N1CTF]babyrust 题目直接给了Rust源码，之前没有见过，现查文档学习
首先main函数里只是调用了一个 check!
let result = check!(@s /*your answer*/); main 上面就是 check 的实现
macro_rules! check { (@s n1ctf{$Never:tt}) =&amp;gt; { check!(stringify!($Never)) }; macro_rules! 是个宏定义，里面的 @s，@e 应该是类似字符串匹配的东西
一开始的 (@s n1ctf{$Never:tt}) 就把flag中去除 n1ctf{} 的部分存到了 $Never 变量中，stringify! 将其转换为字符串常量
 stringify! 为 Rust 内置宏。其接收一个 Rust 表达式，如 1 + 2 ， 然后在编译时将表达式转换为一个字符串常量，如 &amp;ldquo;1 + 2&amp;rdquo; 。
 接下来的宏定义有很多类似这个的：</description>
    </item>
    
    <item>
      <title>angr ctf writeup</title>
      <link>/post/angr-ctf-writeup/</link>
      <pubDate>Mon, 27 Sep 2021 21:03:03 +0000</pubDate>
      
      <guid>/post/angr-ctf-writeup/</guid>
      <description>&lt;p&gt;开始学angr&lt;/p&gt;
&lt;p&gt;&lt;del&gt;就是在抄solution&lt;/del&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>加密与解密学习笔记（持续更新ing）</title>
      <link>/post/note-of-book-encryption-and-decryption/</link>
      <pubDate>Sat, 25 Sep 2021 02:15:45 +0800</pubDate>
      
      <guid>/post/note-of-book-encryption-and-decryption/</guid>
      <description>&lt;p&gt;suibiankankan&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>dfjk 2021 RE</title>
      <link>/post/2021dfjk-re/</link>
      <pubDate>Wed, 04 Aug 2021 13:48:58 +0000</pubDate>
      
      <guid>/post/2021dfjk-re/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;RE1：迷宫&lt;/li&gt;
&lt;li&gt;RE2：so层&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后一个好像是php？告辞&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CISCN-N 2021 RE Writeup</title>
      <link>/post/ciscn-n-2021-re-writeup/</link>
      <pubDate>Tue, 22 Jun 2021 23:25:43 +0000</pubDate>
      
      <guid>/post/ciscn-n-2021-re-writeup/</guid>
      <description>imnotavirus 解exe，解密pyc
利用解密后的pyc，找到注入的shellcode，用ida解smc，最后解密
比赛的时候还被迫阅读了一下pyinstaller的源码，收获很大
解exe 看到附件给了个pyinstaller，猜测是python逆向
先ida看一眼，有upx壳，自动脱壳，再用exeinfo确认了一下是python逆向，pyinstxtractor.py解包（之前V&amp;amp;N2021就吃了这个亏）
解pyc 解包时提示被加密了
取struct头作为标准头，用pycdc还原出main.py，发现调用了sign
去PYZ00文件夹看一下，发现被加密了，看一下目录，发现pyimod和比一般情况多了一些东西，把这些都解开看一下，有一个key文件
同时发现archive中有一个Cipher类，但是pycdc缺少指令，无法全部还原，考虑看一下pycdas解出来的字节码
字节码中有个对pyinstaller源码的引用，直接去文件夹里面看，发现能解密出来的部分完全一致
照着源码中的方法解密sign
from key import key import tinyaes print (key) f = open(&amp;#39;./PYZ-00.pyz_extracted/sign.pyc.encrypted&amp;#39;, &amp;#39;rb&amp;#39;) data = f.read() cipher = tinyaes.AES(key.encode(), data[:16]) output = cipher.CTR_xcrypt_buffer(data[16:]) f.close() import zlib output = zlib.decompress(output) f = open(&amp;#39;./sign.pyc&amp;#39;, &amp;#39;wb&amp;#39;) f.write(output) 解密 解出sign后看到有三个base64，其中两个是执行的语句，此外大部分语句涉及到了内存
另外一个base解出来是乱码，用字节码辅助恢复函数（其实特征已经很明显了），发现进行了rc4加密，直接打印出解密结果，将结果写入文件，用ida查看
发现smc
mov eax, 41178Bhmov ecx, 411802hsub ecx, eaxloc_2A:mov ebx, [rax]xor ebx, 77hmov [rax], ebxloop loc_2A解出来后尝试恢复了一下函数，结果很丑&amp;hellip;只能和汇编比较着进行分析了（好像只要把00 patch一下就可以反编译了）</description>
    </item>
    
    <item>
      <title>CISCN2021 RE writeup</title>
      <link>/post/ciscn2021-re-writeup/</link>
      <pubDate>Thu, 20 May 2021 01:21:59 +0000</pubDate>
      
      <guid>/post/ciscn2021-re-writeup/</guid>
      <description>glass 安卓逆向，使用jeb打开，发现在java层仅进行了简单的输入，然后进入so层判断
用ida打开so层，直接搜索java，进入判断函数
下面的字符串应该是密钥
qmemcpy(v6, &amp;#34;12345678&amp;#34;, sizeof(v6)); 然后调用了三个函数
sub_FFC(v7, v6, v4); sub_1088(v7, flag, 39); sub_10D4(flag, 39, v6, v4); 进入查看，第一个是RC4密钥初始化，第二个是RC4加密，第三个是对密文进行简单的运算
从字符串里拿密文，写脚本进行求解，先对简单运算进行反向运算，然后找个RC4密码的脚本，跑一下就可以找到flag
cipher = [0xA3, 0x1A, 0xE3, 0x69, 0x2F, 0xBB, 0x1A, 0x84, 0x65, 0xC2, 0xAD, 0xAD, 0x9E, 0x96, 5, 2, 0x1F, 0x8E, 0x36, 0x4F, 0xE1, 0xEB, 0xAF, 0xF0, 0xEA, 0xC4, 0xA8, 0x2D, 0x42, 0xC7, 0x6E, 0x3F, 0xB0, 0xD3, 0xCC, 0x78, 0xF9, 0x98, 0x3F, 0] key = [0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38] def __rc4_init(key): keylength = len(key) S = list(range(256)) j = 0 for i in range(256): j = (j + S[i] + key[i % keylength]) % 256 S[i], S[j] = S[j], S[i] return S def rc4_crypt(key, data): S = __rc4_init(key) i = j = 0 result = b&amp;#39;&amp;#39; for a in data: i = (i + 1) % 256 j = (j + S[i]) % 256 S[i], S[j] = S[j], S[i] k = (a ^ S[(S[i] + S[j]) % 256]).</description>
    </item>
    
    <item>
      <title>津门杯 GoodRE writeup</title>
      <link>/post/jinmen-cup-goodre-writeup/</link>
      <pubDate>Mon, 10 May 2021 02:32:59 +0000</pubDate>
      
      <guid>/post/jinmen-cup-goodre-writeup/</guid>
      <description>&lt;p&gt;和两位学长一起做出来的，总算是能在团队赛中做出来题了，结束了长达一个月的白给生涯，不容易啊&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GWCTF2019 re3 writeup</title>
      <link>/post/gwctf2019-re3-writeup/</link>
      <pubDate>Thu, 08 Apr 2021 22:36:12 +0000</pubDate>
      
      <guid>/post/gwctf2019-re3-writeup/</guid>
      <description>静态分析 首先通过关键字符串 Wrong 进入 main 函数
void __fastcall __noreturn main(int a1, char **a2, char **a3) { int i; // [rsp+8h] [rbp-48h]  char s[40]; // [rsp+20h] [rbp-30h] BYREF  unsigned __int64 v5; // [rsp+48h] [rbp-8h]  v5 = __readfsqword(0x28u); __isoc99_scanf(&amp;#34;%39s&amp;#34;, s); if ( (unsigned int)strlen(s) != 32 ) { puts(&amp;#34;Wrong!&amp;#34;); exit(0); } mprotect(&amp;amp;dword_400000, 0xF000uLL, 7); for ( i = 0; i &amp;lt;= 223; ++i ) *((_BYTE *)sub_402219 + i) ^= 0x99u; sub_40207B((__int64)&amp;amp;unk_603170); sub_402219(); } 阅读一下代码，发现先是输入一个长度为32的字符串</description>
    </item>
    
    <item>
      <title>高校战役 re writeups</title>
      <link>/post/gxzy-re-writeups/</link>
      <pubDate>Wed, 31 Mar 2021 20:33:02 +0000</pubDate>
      
      <guid>/post/gxzy-re-writeups/</guid>
      <description>cycle graph 天津垓 fxck easyparser  cycle graph 逆向代码 根据提示，这是一道纯算法题，拖到 ida 中，根据关键字符串定位到关键函数。查看核心代码
dword_403370 = 0; v1 = &amp;amp;unk_403384; byte_403374 = 48; v2 = 0; dword_403378 = (int)&amp;amp;unk_403380; do { v3 = dword_402178[v2]; ++v2; *(v1 - 1) = v3; *v1 = (char *)&amp;amp;unk_403380 + 12 * dword_402274[v2]; v1[1] = (char *)&amp;amp;unk_403380 + 12 * dword_4021F4[v2]; v1 += 3; } while ( (signed int)v1 &amp;lt; (signed int)&amp;amp;unk_403504 ); 上面的代码是主函数开头的初始化部分
sub_401020(&amp;#34;You need a flag to get out of this:\n&amp;#34;, a1); scan(&amp;#34;%s&amp;#34;, &amp;amp;input); v4 = dword_403370; // 0  v5 = byte_403374; // 48  v6 = 5; v7 = dword_403378; do { v11 = *(&amp;amp;input + v6); if ( *(_DWORD *)v7 + v5 == v11 ) { v7 = *(_DWORD *)(v7 + 4); } else { if ( v5 - *(_DWORD *)v7 !</description>
    </item>
    
    <item>
      <title>VNCTF2021 FilpGame and notsudoku</title>
      <link>/post/vnctf2021-filpgame-and-notsudoku/</link>
      <pubDate>Thu, 25 Mar 2021 03:06:10 +0000</pubDate>
      
      <guid>/post/vnctf2021-filpgame-and-notsudoku/</guid>
      <description>notsudoku V&amp;amp;NCTF直接白给了，全程耗在了Crackme2上，辛辛苦苦找到密文和算法后发现需要动态调试？过程中not sudoku这题就扫了一眼，结果还没发现是python逆向，于是就爬爬了。
正文 好像是第一次做python exe的逆向
首先使用 exeinfo 差壳，发现有个 UPX
用 upx.exe -d 脱壳
比赛的时候没想到这个是python逆向，直接拖到ida里面了，于是直接gg
再使用 exeinfo 查一下，会发现是 pyinstaller 编译的文件，说明是python逆向
上网下载一下 pyinstxtractor.py 进行反编译
$ python3 pyinstxtractor.py notsudoku-noupx.exe 进入文件夹，找没有后缀的文件，发现有一个叫做 2 的，使用 010editor 从 struct 文件复制文件头（第一行），然后添加 .pyc 后缀，进行 pyc 反编译
$ uncompyle6 -o 2.py 2.pyc 即可得到 python 源码文件
发现文件里有一些日文，于是边阅读边修改就行
# uncompyle6 version 3.7.4 # Python bytecode 3.7 (3394) # Decompiled from: Python 3.6.9 (default, Jan 26 2021, 15:33:00)  # [GCC 8.4.0] # Embedded file name: 2.</description>
    </item>
    
    <item>
      <title>NepCTF2021 re writeups</title>
      <link>/post/nepctf2021-re-writeups/</link>
      <pubDate>Mon, 22 Mar 2021 18:30:03 +0000</pubDate>
      
      <guid>/post/nepctf2021-re-writeups/</guid>
      <description>hardsharp (.NET 逆向) 使用exeinfo发现是 C# .NET文件
直接用 dnSpy 打开
找到主函数
private static void Main(string[] args) { AesClass aesClass = new AesClass(); string text = &amp;#34;&amp;#34;; string strB = &amp;#34;1Umgm5LG6lNPyRCd0LktJhJtyBN7ivpq+EKGmTAcXUM+0ikYZL4h4QTHGqH/3Wh0&amp;#34;; byte[] array = new byte[] { 81, 82, 87, 81, 82, 87, 68, 92, 94, 86, 93, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18 }; Console.WriteLine(&amp;#34;Welcome to nepnep csharp test!</description>
    </item>
    
  </channel>
</rss>
