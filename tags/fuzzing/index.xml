<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fuzzing on s0uthwood&#39;s Blog</title>
    <link>/tags/fuzzing/</link>
    <description>Recent content in Fuzzing on s0uthwood&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 23 May 2025 23:44:45 +0800</lastBuildDate><atom:link href="/tags/fuzzing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Note-of-Paper 1: Snipuzz</title>
      <link>/post/note-of-paper-1-snipuzz/</link>
      <pubDate>Fri, 23 May 2025 23:44:45 +0800</pubDate>
      
      <guid>/post/note-of-paper-1-snipuzz/</guid>
      <description>论文简介 Snipuzz: Black-box Fuzzing of IoT Firmware via Message Snippet Inference. In Proceedings of CCS 2021.
其实这篇文章最核心也是最创新的工作就在于，对协议的响应信息进行了相似度计算，然后根据这个计算的结果来完成两个目标：
协议格式解析 反馈指导 ok，直接开读，一些正文里没有的或者我的主观想法会写到“引用格式”(&amp;gt;)里
Introduction 物联网（IoT）设备现在越来越多，但同时又有各种安全问题，所以我们要早在攻击者之前就发现里面的漏洞 很多方法都依赖固件的获取，但现在很多厂商都不公开固件了，所以可以用模糊测试来发送数据包并检测是否异常 现有黑盒模糊测试方法有很多问题，以此引出了三大挑战 缺少反馈机制 消息格式有很多，需要能自动推断 响应中往往包含很多“随机”信息 作者简述了他们的解决方案 使用响应作为反馈 根据响应初步推断消息中每个字节的角色 利用编辑距离和凝聚分层聚类来忽略随机信息 Background 这章介绍了Fuzz和IoT的通信架构（没有细看，大概是说，第一层是过滤，然后一个switch，之后执行，最后响应）
Motivation 也没有细看，大概是说这几个方法的灵感来源是什么，两个小节的末尾各自讲了下设计的大致思路
第一个是使用响应来指导模糊测试，第二个是每次删掉一个字节，每次收集响应并比较，将相同反馈且连续的字节视作一个语法部分
这章主要是通过一些背景或者现象来引出来这几个技术，看网上说安全的会议还是挺吃这套东西的，看重讲故事和创新，而不是用的技术有多么高级，这篇文章的思路确实很巧妙，没有用一些特别大的新的方法却很好地解决了一个实际问题，而且用响应来指导模糊测试确实给未来的工作带来了很大启发
Method 这就是正式开始讲细节了，主要是两个技术 (1) Message Sequence Acquisition (2) Snippet Determination
整体框架上的话，初始种子中包含了很多个请求，每个请求都会收到响应，所以为每个请求划分一个响应池。接下来就是每个请求分开处理了，会对每个请求都进行语法片段的划分
Message Sequence Acquisition 初始种子获取：一串消息，能够触发目标IoT设备的某个行为 恢复消息：每次测试后，发送恢复消息让设备回到初始状态 Snippet Determination 4.2.1 语法片段划分
第一个阶段就是语法划分，Snipuzz的思路很简单，删除其中某个字节，看看响应是什么，再删除后面一个字节，看看响应是否一样，一样的话就认为这两个字节属于同一个语法片段。文章里的例子很直观，直接看例子吧。
Messages Content Responses Content Category Message $m$ {&amp;quot;on&amp;quot;:true} $r_0$ {&amp;quot;success&amp;quot;:&amp;quot;...&amp;quot;} 0 $p_1$ &amp;quot;on&amp;quot;:true} $r_1$ {&amp;quot;error&amp;quot;:&amp;quot;type&amp;quot;:2,&amp;quot;description&amp;quot;:&amp;quot;invalid json&amp;quot;} 1 $p_2$ {on&amp;quot;:true} $r_2$ {&amp;quot;error&amp;quot;:&amp;quot;type&amp;quot;:2,&amp;quot;description&amp;quot;:&amp;quot;invalid json&amp;quot;} 1 $p_3$ {&amp;quot;n&amp;quot;:true} $r_3$ {&amp;quot;error&amp;quot;:&amp;quot;type&amp;quot;:6,&amp;quot;description&amp;quot;:&amp;quot;n, not avaliable&amp;quot;} 2 $p_4$ {&amp;quot;o&amp;quot;:true} $r_4$ {&amp;quot;error&amp;quot;:&amp;quot;type&amp;quot;:6,&amp;quot;description&amp;quot;:&amp;quot;o, not avaliable&amp;quot;} 3 $p_5$ {&amp;quot;on:true} $r_5$ {&amp;quot;error&amp;quot;:&amp;quot;type&amp;quot;:2,&amp;quot;description&amp;quot;:&amp;quot;invalid json&amp;quot;} 1 $p_{11}$ {&amp;quot;on&amp;quot;:true $r_{11}$ {&amp;quot;error&amp;quot;:&amp;quot;type&amp;quot;:2,&amp;quot;description&amp;quot;:&amp;quot;invalid json&amp;quot;} 1 $p_i$ 是 Probe message 的缩写</description>
    </item>
    
  </channel>
</rss>
