<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>angr on s0uthwood&#39;s Blog</title>
    <link>/tags/angr/</link>
    <description>Recent content in angr on s0uthwood&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 Dec 2021 02:01:06 +0000</lastBuildDate><atom:link href="/tags/angr/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DragonCTF Runofthemill Writeup</title>
      <link>/post/dragonctf-runofthemill-writeup/</link>
      <pubDate>Fri, 10 Dec 2021 02:01:06 +0000</pubDate>
      
      <guid>/post/dragonctf-runofthemill-writeup/</guid>
      <description>题目分析 获取输入
v1 = sys_read(0, byte_412000, 0x40uLL); 中间计算
byte_412000[42] = __ROR1__(byte_412000[42], 4); *(_DWORD *)&amp;amp;byte_412000[44] ^= 0x4EC10FC6u; *(_WORD *)&amp;amp;byte_412000[15] ^= 0xEBFFu; *(_DWORD *)&amp;amp;byte_412000[38] -= 1698263770; // 以下省略 最后的验证
v9 = byte_412000; v10 = byte_412050; v11 = 64LL; v12 = 0; do { v12 |= *v10++ ^ *v9++; --v11; } while ( v11 ); Angr求解 还是很容易看懂的，主要是如何求解
一种思路是把汇编反过来，pizza爷用的是这种做法，于是就写了个Angr喝茶去了
Angr用的是手动往全局变量注入符号，然后在验证前停止，手动添加约束，wp中的写法是直接用程序中的验证，并添加了 LAZY_SOLVES 参数，学到了
之前用自己脚本跑的适合发现一直是 unsat，以为Angr会有问题，但后来发现有个wp就是用的Angr
于是掏出了之前写的脚本做了一些尝试
from angr import * import claripy import binascii input_length = 56 base_addr = 0x400000 proj = Project(&amp;#39;runofthemill&amp;#39;, main_opts={&amp;#34;base_addr&amp;#34;: base_addr}) start_addr = 0x401054 state = proj.</description>
    </item>
    
    <item>
      <title>angr ctf writeup</title>
      <link>/post/angr-ctf-writeup/</link>
      <pubDate>Mon, 27 Sep 2021 21:03:03 +0800</pubDate>
      
      <guid>/post/angr-ctf-writeup/</guid>
      <description>&lt;p&gt;开始学angr&lt;/p&gt;
&lt;p&gt;&lt;del&gt;就是在抄solution&lt;/del&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Deobf ollvm with angr</title>
      <link>/post/deobf-ollvm-with-angr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/deobf-ollvm-with-angr/</guid>
      <description>控制流平坦化 环境搭建 官方的仓库只支持到llvm4，但有一些开源项目扩展到了一些比较新的版本
在Ubuntu2204上实测，这个仓库可以正常运行：https://github.com/buffcow/ollvm-project/tree/14.x
直接用Readme中提供的命令编译：
cmake -S llvm -B build -G Ninja -DLLVM_ENABLE_PROJECTS=clang -DCMAKE_BUILD_TYPE=Release -DLLVM_INCLUDE_TESTS=OFF -DLLVM_ENABLE_NEW_PASS_MANAGER=OFF cmake --build build -j16 然后用build里面的clang对目标代码进行编译混淆
clang test.c -o test -mllvm -fla 混淆思路 控制流平坦化的思路是将原本的控制流图变成一个个基本块（真实块），然后使用分发器（类似大型Switch或者if else语句）将这些真实块按照原本的顺序执行，但在静态分析工具中，真实块就会被平坦化到同一层中，增大了静态难度
经过混淆后的块可以大致划分为以下几类：
序言块：函数开始的块为序言块（只有一个），用于初始化一些变量，或者是一些检查 主分发器：紧跟在序言块后的块（只有一个），用于分发控制流 子分发器：主分发器后的分发块，用于分发控制流 真实块：子分发器后、预分发器前的块，用于执行真正的代码 预分发器：真实块后、回到主分发器的块（只有一个） 结束块：没有后继的块（只有一个），用于结束函数，通常位于子分发器的一个分支中 解混淆思路 整个解混淆过程可以大致分为三个步骤：
识别序言块、主分发器、子分发器、真实块、预分发器、结束块 通过符号执行，重建控制流 进行Patch，将真实块的执行路径还原 解混淆的输入是程序和函数初始地址
识别混淆块 读取程序并获取函数的CFG图，这里需要使用to_supergraph函数将CFG图转换为SuperGrap，更加接近IDA中的图
import angr from angr-management.utils.graph import to_supergraph proj = angr.Project(&amp;#34;test&amp;#34;, load_options={&amp;#39;auto_load_libs&amp;#39;: False}) cfg = proj.analyses.CFGFast() supergraph = to_supergraph(cfg.graph) 先通过入度和出度判断序言块和结束块
for node in supergraph.nodes(): if supergraph.in_degree(node) == 0: prologue_node = node if supergraph.</description>
    </item>
    
  </channel>
</rss>
