<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reading on s0uthwood&#39;s Blog</title>
    <link>/tags/reading/</link>
    <description>Recent content in Reading on s0uthwood&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 23 May 2025 23:44:45 +0800</lastBuildDate><atom:link href="/tags/reading/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Note-of-Paper 1: Snipuzz</title>
      <link>/post/note-of-paper-1-snipuzz/</link>
      <pubDate>Fri, 23 May 2025 23:44:45 +0800</pubDate>
      
      <guid>/post/note-of-paper-1-snipuzz/</guid>
      <description>论文简介 Snipuzz: Black-box Fuzzing of IoT Firmware via Message Snippet Inference. In Proceedings of CCS 2021.
其实这篇文章最核心也是最创新的工作就在于，对协议的响应信息进行了相似度计算，然后根据这个计算的结果来完成两个目标：
协议格式解析 反馈指导 ok，直接开读
Introduction 物联网（IoT）设备现在越来越多，但同时又有各种安全问题，所以我们要早在攻击者之前就发现里面的漏洞 很多方法都依赖固件的获取，但现在很多厂商都不公开固件了，所以可以用模糊测试来发送数据包并检测是否异常 现有黑盒模糊测试方法有很多问题，以此引出了三大挑战 缺少反馈机制 消息格式有很多，需要能自动推断 响应中往往包含很多“随机”信息 作者简述了他们的解决方案 使用响应作为反馈 根据响应初步推断消息中每个字节的角色 利用编辑距离和凝聚分层聚类来忽略随机信息 Background 这章介绍了Fuzz和IoT的通信架构（没有细看，大概是说，第一层是过滤，然后一个switch，之后执行，最后响应）
Motivation 也没有细看，大概是说这几个方法的灵感来源是什么，两个小节的末尾各自讲了下设计的大致思路
第一个是使用响应来指导模糊测试，第二个是每次删掉一个字节，每次收集响应并比较，将相同反馈且连续的字节视作一个语法部分
这章主要是通过一些背景或者现象来引出来这几个技术，看网上说安全的会议还是挺吃这套东西的，看重讲故事和创新，而不是用的技术有多么高级，这篇文章的思路确实很巧妙，没有用一些特别大的新的方法却很好地解决了一个实际问题，而且用响应来指导模糊测试确实给未来的工作带来了很大启发
Method 这就是正式开始讲细节了，主要是两个技术 (1) Message Sequence Acquisition (2) Snippet Determination
整体框架上的话，初始种子中包含了很多个请求，每个请求都会收到响应，所以为每个请求划分一个响应池。接下来就是每个请求分开处理了，会对每个请求都进行语法片段的划分
Message Sequence Acquisition 初始种子获取：一串消息，能够触发目标IoT设备的某个行为 恢复消息：每次测试后，发送恢复消息让设备回到初始状态 Snippet Determination 4.2.1 语法片段划分
第一个阶段就是语法划分，Snipuzz的思路很简单，删除其中某个字节，看看响应是什么，再删除后面一个字节，看看响应是否一样，一样的话就认为这两个字节属于同一个语法片段。文章里的例子很直观，直接看例子吧。
Messages Content Responses Content Category Message $m$ {&amp;quot;on&amp;quot;:true} $r_0$ {&amp;quot;success&amp;quot;:&amp;quot;...&amp;quot;} 0 $p_1$ &amp;quot;on&amp;quot;:true} $r_1$ {&amp;quot;error&amp;quot;:&amp;quot;type&amp;quot;:2,&amp;quot;description&amp;quot;:&amp;quot;invalid json&amp;quot;} 1 $p_2$ {on&amp;quot;:true} $r_2$ {&amp;quot;error&amp;quot;:&amp;quot;type&amp;quot;:2,&amp;quot;description&amp;quot;:&amp;quot;invalid json&amp;quot;} 1 $p_3$ {&amp;quot;n&amp;quot;:true} $r_3$ {&amp;quot;error&amp;quot;:&amp;quot;type&amp;quot;:6,&amp;quot;description&amp;quot;:&amp;quot;n, not avaliable&amp;quot;} 2 $p_4$ {&amp;quot;o&amp;quot;:true} $r_4$ {&amp;quot;error&amp;quot;:&amp;quot;type&amp;quot;:6,&amp;quot;description&amp;quot;:&amp;quot;o, not avaliable&amp;quot;} 3 $p_5$ {&amp;quot;on:true} $r_5$ {&amp;quot;error&amp;quot;:&amp;quot;type&amp;quot;:2,&amp;quot;description&amp;quot;:&amp;quot;invalid json&amp;quot;} 1 $p_11$ {&amp;quot;on&amp;quot;:true $r_11$ {&amp;quot;error&amp;quot;:&amp;quot;type&amp;quot;:2,&amp;quot;description&amp;quot;:&amp;quot;invalid json&amp;quot;} 1 $p_i$ 是 Probe message 的缩写</description>
    </item>
    
    <item>
      <title>RTFSC-Linux0.11 Part3: A new process</title>
      <link>/post/rtfsc-linux-part3-a-new-process/</link>
      <pubDate>Thu, 10 Nov 2022 10:28:09 +0800</pubDate>
      
      <guid>/post/rtfsc-linux-part3-a-new-process/</guid>
      <description>跟着大佬的文章读一下 Linux 0.11 的源码
https://github.com/sunym1993/flash-linux0.11-talk
https://github.com/beride/linux0.11-1
最近太摆了，拷打我自己
Overview 第二部分中了解了每个 init 函数，继续往后看 main
void main(void) { // init functions move_to_user_mode(); if (!fork()) { init(); } for(;;) pause(); } 后续只执行了四个函数
move_to_user_mode() 顾名思义就是将系统切换至用户态
fork() 函数是创建一个子进程，这个子进程将会执行 init() 函数，父进程随后将会进入一个死循环，不断重复执行 pause() 函数
切换到用户态 函数在 include/asm/system.h 文件中定义
#define move_to_user_mode() \ _asm { \ _asm mov eax, esp \ _asm push 0x00000017 /* 将堆栈段选择符（SS）入栈 */ \ _asm push eax /* 将保存的 esp 入栈 */ \ _asm pushfd /* 将 eflags 内容入栈 */ \ _asm push 0x0000000f /* 将内核代码段选择符（CS）入栈 */ \ _asm push offset l1 /* 将下面 LABEL l1 的偏移地址入栈 */ \ _asm iretd /* 执行中断返回指令，根据上面这个 push，会跳转到下面的 LABEL l1 */ \ _asm l1: mov eax, 0x17 /* 开始执行任务 0 */ \ _asm mov ds, ax /* 初始化段寄存器指向本局部表的数据 */ \ _asm mov es, ax \ _asm mov fs, ax \ _asm mov gs, ax \ } 在系统正常运行的时候，应当以用户态运行，通过中断进入内核态执行内核代码，再通过中断返回退出内核态，整体情况如下图</description>
    </item>
    
    <item>
      <title>RTFSC-Linux0.11 Part2: Initialize</title>
      <link>/post/rtfsc-linux-part2-initialize/</link>
      <pubDate>Fri, 04 Nov 2022 03:46:37 +0800</pubDate>
      
      <guid>/post/rtfsc-linux-part2-initialize/</guid>
      <description>跟着大佬的文章读一下 Linux 0.11 的源码
github.com/sunym1993/flash-linux0.11-talk
一个操作系统的主函数 main 函数在 init/main.c
这里用了 https://github.com/karottc/linux-0.11 中注释过的代码
// 内核初始化主程序。初始化结束后将以任务0（idle任务即空闲任务）的身份运行。 void main(void) { /* This really IS void, no error here. */ /* The startup routine assumes (well, ...) this */ /* * Interrupts are still disabled. Do necessary setups, then * enable them */ // 下面这段代码用于保存： // 根设备号 -&amp;gt;ROOT_DEV；高速缓存末端地址-&amp;gt;buffer_memory_end; // 机器内存数-&amp;gt;memory_end；主内存开始地址-&amp;gt;main_memory_start； // 其中ROOT_DEV已在前面包含进的fs.h文件中声明为extern int ROOT_DEV = ORIG_ROOT_DEV; drive_info = DRIVE_INFO; // 复制0x90080处的硬盘参数 memory_end = (1&amp;lt;&amp;lt;20) + (EXT_MEM_K&amp;lt;&amp;lt;10); // 内存大小=1Mb + 扩展内存(k)*1024 byte memory_end &amp;amp;= 0xfffff000; // 忽略不到4kb(1页)的内存数 if (memory_end &amp;gt; 16*1024*1024) // 内存超过16Mb，则按16Mb计 memory_end = 16*1024*1024; if (memory_end &amp;gt; 12*1024*1024) // 如果内存&amp;gt;12Mb,则设置缓冲区末端=4Mb buffer_memory_end = 4*1024*1024; else if (memory_end &amp;gt; 6*1024*1024) // 否则若内存&amp;gt;6Mb,则设置缓冲区末端=2Mb buffer_memory_end = 2*1024*1024; else buffer_memory_end = 1*1024*1024; // 否则设置缓冲区末端=1Mb main_memory_start = buffer_memory_end; // 如果在Makefile文件中定义了内存虚拟盘符号RAMDISK,则初始化虚拟盘。此时主内存将减少。 // 以下是内核进行所有方面的初始化工作 mem_init(main_memory_start,memory_end); // 主内存区初始化。mm/memory.</description>
    </item>
    
    <item>
      <title>RTFSC-Linux0.11 Part1: From BIOS to main</title>
      <link>/post/rtfsc-linux-part1-from-bios-to-main/</link>
      <pubDate>Sun, 23 Oct 2022 02:41:13 +0800</pubDate>
      
      <guid>/post/rtfsc-linux-part1-from-bios-to-main/</guid>
      <description>跟着大佬的文章读一下 Linux 0.11 的源码
github.com/sunym1993/flash-linux0.11-talk
万事开头难 (bootsects.s) 从 0x7C00 开始的操作系统启动 开机首先会执行主板上的 BIOS 程序，BIOS 将启动区的 512 字节（一个扇区）复制到内存中的 0x7C00 地址，随后跳转到这个地址继续执行
启动区的识别：0 盘 0 道 1 扇区的 512 字节最后两个字节为 55 AA
所以操作系统将从第一扇区启动，这在源码中对应了 boot/bootsect.s 文件
最开始的两行源码：
mov ax, 0x07C0 mov ds, ax 将 ds 寄存器赋值为 0x7C0
为了能够在 16 位实模式下访问 20 位的地址，在读取段寄存器时需要 &amp;lt;&amp;lt; 4，所以 ds 是 0x7C0 时对应了地址 0x7C00，指向了此时代码段的地址，方便了后续对内存的访问
给自己挪个地方 随后执行：
mov ax, 0x9000 mov es, ax mov cx, #256 sub si, si sub di, di rep movw 前面两行和最开始的两行类似，将 es 寄存器赋值为 0x9000，随后 cx = 0x100; si = 0; di = 0，最后循环执行 movw 指令</description>
    </item>
    
    <item>
      <title>加密与解密学习笔记（持续更新ing）</title>
      <link>/post/note-of-book-encryption-and-decryption/</link>
      <pubDate>Sat, 25 Sep 2021 02:15:45 +0800</pubDate>
      
      <guid>/post/note-of-book-encryption-and-decryption/</guid>
      <description>&lt;p&gt;suibiankankan&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
